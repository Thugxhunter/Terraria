// Decompiled with JetBrains decompiler
// Type: Terraria.NPC
// Assembly: Terraria, Version=1.4.4.9, Culture=neutral, PublicKeyToken=null
// MVID: CD1A926A-5330-4A76-ABC1-173FBEBCC76B
// Assembly location: D:\SteamLibrary\steamapps\common\Terraria\Terraria.exe

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using ReLogic.Content;
using ReLogic.Utilities;
using System;
using System.Collections.Generic;
using Terraria.Audio;
using Terraria.Chat;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Creative;
using Terraria.GameContent.Drawing;
using Terraria.GameContent.Events;
using Terraria.GameContent.ItemDropRules;
using Terraria.GameContent.RGB;
using Terraria.GameContent.UI;
using Terraria.Graphics.CameraModifiers;
using Terraria.ID;
using Terraria.Localization;
using Terraria.Utilities;
using Terraria.WorldBuilding;

namespace Terraria
{
  public class NPC : Entity
  {
    private const int NPC_TARGETS_START = 300;
    public bool IsABestiaryIconDummy;
    public bool ForcePartyHatOn;
    public float waterMovementSpeed = 0.5f;
    public float lavaMovementSpeed = 0.5f;
    public float honeyMovementSpeed = 0.25f;
    public float shimmerMovementSpeed = 0.375f;
    public static readonly int[,,,] MoonLordAttacksArray = NPC.InitializeMoonLordAttacks();
    public static readonly int[,] MoonLordAttacksArray2 = NPC.InitializeMoonLordAttacks2();
    public static int MoonLordFightingDistance = 4500;
    public static int MoonLordCountdown = 0;
    public static int MaxMoonLordCountdown = 3600;
    public const int NaturalMoonlordCountdownTime = 3600;
    public const int ItemMoonlordCountdownTime = 720;
    public int teleportStyle;
    public float teleportTime;
    public static int immuneTime = 20;
    public static int maxAI = 4;
    public int netSpam;
    public static int goldCritterChance = 400;
    public static int[] killCount = new int[(int) NPCID.Count];
    public static float totalInvasionPoints = 0.0f;
    public static float waveKills = 0.0f;
    public static int waveNumber = 0;
    public const float nameOverIncrement = 0.025f;
    public const float nameOverDistance = 350f;
    public float nameOver;
    public bool SpawnedFromStatue;
    public bool CanBeReplacedByOtherNPCs;
    public bool dripping;
    public bool drippingSlime;
    public bool drippingSparkleSlime;
    public static readonly int AFKTimeNeededForNoWorms = 300;
    public static bool[] ShimmeredTownNPCs = new bool[(int) NPCID.Count];
    public int altTexture;
    public int townNpcVariationIndex;
    public Vector2 netOffset = Vector2.Zero;
    public short catchItem;
    public short releaseOwner = (short) byte.MaxValue;
    public int rarity;
    public static bool taxCollector = false;
    public bool[] playerInteraction = new bool[256];
    public int lastInteraction = (int) byte.MaxValue;
    public float takenDamageMultiplier = 1f;
    public static bool freeCake = false;
    private static int spawnSpaceX = 3;
    private static int spawnSpaceY = 3;
    public float gfxOffY;
    public float stepSpeed;
    private static float gravity = 0.3f;
    public bool teleporting;
    private static int maxAttack = 20;
    private static int[] attackNPC = new int[NPC.maxAttack];
    public bool stairFall;
    public static int fireFlyFriendly = 0;
    public static int fireFlyChance = 0;
    public static int fireFlyMultiple = 0;
    public static int butterflyChance = 0;
    public static int stinkBugChance = 0;
    private int netStream;
    private int[] streamPlayer = new int[(int) byte.MaxValue];
    private bool needsUniqueInfoUpdate = true;
    public Vector2[] oldPos = new Vector2[10];
    public float[] oldRot = new float[10];
    public bool setFrameSize;
    public static int golemBoss = -1;
    public static int plantBoss = -1;
    public static int crimsonBoss = -1;
    public static int deerclopsBoss = -1;
    public int netSkip;
    public bool netAlways;
    public int realLife = -1;
    private string _givenName = "";
    public static int sWidth = 1920;
    public static int sHeight = 1080;
    private static int spawnRangeX = (int) ((double) (NPC.sWidth / 16) * 0.7);
    private static int spawnRangeY = (int) ((double) (NPC.sHeight / 16) * 0.7);
    public static int safeRangeX = (int) ((double) (NPC.sWidth / 16) * 0.52);
    public static int safeRangeY = (int) ((double) (NPC.sHeight / 16) * 0.52);
    private static int activeRangeX = (int) ((double) NPC.sWidth * 2.1);
    private static int activeRangeY = (int) ((double) NPC.sHeight * 2.1);
    private static int townRangeX = NPC.sWidth;
    private static int townRangeY = NPC.sHeight;
    public float npcSlots = 1f;
    private static bool noSpawnCycle = false;
    private static int activeTime = 750;
    private static int defaultSpawnRate = 600;
    private static int defaultMaxSpawns = 5;
    public float shimmerTransparency;
    public bool dontCountMe;
    public static readonly int maxBuffs = 20;
    public int[] buffType = new int[NPC.maxBuffs];
    public int[] buffTime = new int[NPC.maxBuffs];
    public bool[] buffImmune = new bool[BuffID.Count];
    public bool canDisplayBuffs = true;
    public bool midas;
    public bool ichor;
    public bool onFire;
    public bool onFire2;
    public bool onFire3;
    public bool onFrostBurn;
    public bool onFrostBurn2;
    public bool poisoned;
    public bool markedByScytheWhip;
    public bool venom;
    public bool shadowFlame;
    public bool soulDrain;
    public bool shimmering;
    public int lifeRegen;
    public int lifeRegenCount;
    public int lifeRegenExpectedLossPerSecond = -1;
    public bool confused;
    public bool loveStruck;
    public bool stinky;
    public bool dryadWard;
    public bool immortal;
    public bool chaseable = true;
    public bool canGhostHeal = true;
    public bool javelined;
    public bool tentacleSpiked;
    public bool bloodButchered;
    public bool celled;
    public bool dryadBane;
    public bool daybreak;
    public bool dontTakeDamageFromHostiles;
    public bool betsysCurse;
    public bool oiled;
    public static bool savedTaxCollector = false;
    public static bool savedGoblin = false;
    public static bool savedWizard = false;
    public static bool savedMech = false;
    public static bool savedAngler = false;
    public static bool savedStylist = false;
    public static bool savedBartender = false;
    public static bool savedGolfer = false;
    public static bool boughtCat = false;
    public static bool boughtDog = false;
    public static bool boughtBunny = false;
    public static bool unlockedSlimeBlueSpawn = false;
    public static bool unlockedSlimeGreenSpawn = false;
    public static bool unlockedSlimeOldSpawn = false;
    public static bool unlockedSlimePurpleSpawn = false;
    public static bool unlockedSlimeRainbowSpawn = false;
    public static bool unlockedSlimeRedSpawn = false;
    public static bool unlockedSlimeYellowSpawn = false;
    public static bool unlockedSlimeCopperSpawn = false;
    public static bool unlockedMerchantSpawn = false;
    public static bool unlockedDemolitionistSpawn = false;
    public static bool unlockedPartyGirlSpawn = false;
    public static bool unlockedDyeTraderSpawn = false;
    public static bool unlockedTruffleSpawn = false;
    public static bool unlockedArmsDealerSpawn = false;
    public static bool unlockedNurseSpawn = false;
    public static bool unlockedPrincessSpawn = false;
    public static bool combatBookWasUsed = false;
    public static bool combatBookVolumeTwoWasUsed = false;
    public static bool peddlersSatchelWasUsed = false;
    public static bool downedBoss1 = false;
    public static bool downedBoss2 = false;
    public static bool downedBoss3 = false;
    public static bool downedQueenBee = false;
    public static bool downedSlimeKing = false;
    public static bool downedGoblins = false;
    public static bool downedFrost = false;
    public static bool downedPirates = false;
    public static bool downedClown = false;
    public static bool downedPlantBoss = false;
    public static bool downedGolemBoss = false;
    public static bool downedMartians = false;
    public static bool downedFishron = false;
    public static bool downedHalloweenTree = false;
    public static bool downedHalloweenKing = false;
    public static bool downedChristmasIceQueen = false;
    public static bool downedChristmasTree = false;
    public static bool downedChristmasSantank = false;
    public static bool downedAncientCultist = false;
    public static bool downedMoonlord = false;
    public static bool downedTowerSolar = false;
    public static bool downedTowerVortex = false;
    public static bool downedTowerNebula = false;
    public static bool downedTowerStardust = false;
    public static bool downedEmpressOfLight = false;
    public static bool downedQueenSlime = false;
    public static bool downedDeerclops = false;
    public static int ShieldStrengthTowerSolar = 0;
    public static int ShieldStrengthTowerVortex = 0;
    public static int ShieldStrengthTowerNebula = 0;
    public static int ShieldStrengthTowerStardust = 0;
    public static int LunarShieldPowerNormal = 100;
    public static int LunarShieldPowerMax = 100;
    public static bool TowerActiveSolar = false;
    public static bool TowerActiveVortex = false;
    public static bool TowerActiveNebula = false;
    public static bool TowerActiveStardust = false;
    public static bool LunarApocalypseIsUp = false;
    public static bool downedMechBossAny = false;
    public static bool downedMechBoss1 = false;
    public static bool downedMechBoss2 = false;
    public static bool downedMechBoss3 = false;
    public static bool[] npcsFoundForCheckActive = new bool[(int) NPCID.Count];
    public static int[] lazyNPCOwnedProjectileSearchArray = new int[200];
    private static int spawnRate = NPC.defaultSpawnRate;
    private static int maxSpawns = NPC.defaultMaxSpawns;
    public int soundDelay;
    public static CoinLossRevengeSystem RevengeManager = new CoinLossRevengeSystem();
    public int[] immune = new int[256];
    public int directionY = 1;
    public int type;
    public float[] ai = new float[NPC.maxAI];
    public float[] localAI = new float[NPC.maxAI];
    public int aiAction;
    public int aiStyle;
    public bool justHit;
    public int timeLeft;
    public int target = -1;
    public int damage;
    public int defense;
    public int defDamage;
    public int defDefense;
    public bool coldDamage;
    public bool trapImmune;
    public LegacySoundStyle HitSound;
    public LegacySoundStyle DeathSound;
    public int life;
    public int lifeMax;
    public Microsoft.Xna.Framework.Rectangle targetRect;
    public double frameCounter;
    public Microsoft.Xna.Framework.Rectangle frame;
    public Color color;
    public int alpha;
    public bool hide;
    public float scale = 1f;
    public float knockBackResist = 1f;
    public int oldDirectionY;
    public int oldTarget;
    public float rotation;
    public bool noGravity;
    public bool noTileCollide;
    public bool netUpdate;
    public bool netUpdate2;
    public bool collideX;
    public bool collideY;
    public bool boss;
    public int spriteDirection = -1;
    public bool behindTiles;
    public bool lavaImmune;
    public float value;
    public int extraValue;
    public bool dontTakeDamage;
    private int catchableNPCTempImmunityCounter;
    public int netID;
    public int statsAreScaledForThisManyPlayers;
    public float strengthMultiplier = 1f;
    public bool townNPC;
    public static bool travelNPC = false;
    public bool homeless;
    public int homeTileX = -1;
    public int homeTileY = -1;
    public int housingCategory;
    public bool oldHomeless;
    public int oldHomeTileX = -1;
    public int oldHomeTileY = -1;
    public bool friendly;
    public bool closeDoor;
    public int doorX;
    public int doorY;
    public int friendlyRegen;
    public int breath;
    public const int breathMax = 200;
    public int breathCounter;
    public bool reflectsProjectiles;
    public int lastPortalColorIndex;
    public bool despawnEncouraged;
    private bool netShimmer;
    public static int[,] cavernMonsterType = new int[2, 3];
    public static int mechQueen = -1;
    public static int brainOfGravity = -1;
    public static bool empressRageMode = false;
    private static readonly int[] _deerclopsAttack1Frames = new int[12]
    {
      12,
      13,
      14,
      13,
      14,
      13,
      14,
      13,
      14,
      15,
      16,
      17
    };
    private static readonly int[] _deerclopsAttack2Frames = new int[13]
    {
      12,
      15,
      16,
      17,
      17,
      17,
      17,
      13,
      18,
      18,
      18,
      18,
      12
    };
    private static readonly int[] _deerclopsAttack3Frames = new int[16]
    {
      19,
      20,
      21,
      22,
      21,
      22,
      21,
      22,
      23,
      24,
      23,
      24,
      23,
      24,
      20,
      19
    };
    public static int[] MoonEventRequiredPointsPerWaveLookup = new int[21]
    {
      0,
      25,
      40,
      50,
      80,
      100,
      160,
      180,
      200,
      250,
      300,
      375,
      450,
      525,
      675,
      850,
      1025,
      1325,
      1550,
      2000,
      0
    };
    private static bool EoCKilledToday;
    private static bool WoFKilledToday;
    public static bool fairyLog = false;
    private static bool dayTimeHax;
    private static bool rainingHax;
    private static float cloudAlphaHax;
    private static int ignorePlayerInteractions = 0;
    public static int ladyBugGoodLuckTime = 43200;
    public static int ladyBugBadLuckTime = -10800;
    private static int ladyBugRainTime = 1800;
    private static int maximumAmountOfTimesLadyBugRainCanStack = 10 * NPC.ladyBugRainTime;
    public static int offSetDelayTime = 60;
    public static bool PreventJojaColaDialog = false;
    public static int RerollDryadText = 0;

    public bool CanTalk => this.isLikeATownNPC && this.aiStyle == 7 && (double) this.velocity.Y == 0.0 && !NPCID.Sets.IsTownPet[this.type];

    public bool CanBeTalkedTo => this.isLikeATownNPC && this.aiStyle == 7 && (double) this.velocity.Y == 0.0;

    public bool HasValidTarget
    {
      get
      {
        if (this.HasPlayerTarget && Main.player[this.target].active && !Main.player[this.target].dead && !Main.player[this.target].ghost)
          return true;
        return this.SupportsNPCTargets && this.HasNPCTarget && Main.npc[this.TranslatedTargetIndex].active;
      }
    }

    public bool HasPlayerTarget => this.target >= 0 && this.target < (int) byte.MaxValue;

    public bool HasNPCTarget => this.target >= 300 && this.target < 500;

    public bool SupportsNPCTargets => NPCID.Sets.UsesNewTargetting[this.type];

    public int TranslatedTargetIndex => this.HasNPCTarget ? this.target - 300 : this.target;

    public int WhoAmIToTargettingIndex => this.whoAmI + 300;

    public NPCAimedTarget GetTargetData(bool ignorePlayerTankPets = true)
    {
      if (!this.HasValidTarget)
        return new NPCAimedTarget();
      return this.SupportsNPCTargets && this.HasNPCTarget ? new NPCAimedTarget(Main.npc[this.TranslatedTargetIndex]) : new NPCAimedTarget(Main.player[this.target], ignorePlayerTankPets);
    }

    public bool IsShimmerVariant => this.townNpcVariationIndex == 1 && NPCID.Sets.ShimmerTownTransform[this.type];

    public static int[,,,] InitializeMoonLordAttacks()
    {
      int[,,,] numArray;
      if (NPC.MoonLordAttacksArray != null)
      {
        numArray = NPC.MoonLordAttacksArray;
        for (int index1 = 0; index1 < numArray.GetLength(0); ++index1)
        {
          for (int index2 = 0; index2 < numArray.GetLength(1); ++index2)
          {
            for (int index3 = 0; index3 < numArray.GetLength(2); ++index3)
            {
              for (int index4 = 0; index4 < numArray.GetLength(3); ++index4)
                numArray[index1, index2, index3, index4] = 0;
            }
          }
        }
      }
      else
        numArray = new int[3, 3, 2, 5];
      numArray[0, 0, 0, 0] = 0;
      numArray[0, 0, 1, 0] = 50;
      numArray[0, 0, 0, 1] = 1;
      numArray[0, 0, 1, 1] = 70;
      numArray[0, 0, 0, 2] = 2;
      numArray[0, 0, 1, 2] = 330;
      numArray[0, 0, 0, 3] = 0;
      numArray[0, 0, 1, 3] = 60;
      numArray[0, 0, 0, 4] = 3;
      numArray[0, 0, 1, 4] = 90;
      numArray[0, 1, 0, 0] = 1;
      numArray[0, 1, 1, 0] = 70;
      numArray[0, 1, 0, 1] = 0;
      numArray[0, 1, 1, 1] = 50;
      numArray[0, 1, 0, 2] = 3;
      numArray[0, 1, 1, 2] = 90;
      numArray[0, 1, 0, 3] = 0;
      numArray[0, 1, 1, 3] = 60;
      numArray[0, 1, 0, 4] = 2;
      numArray[0, 1, 1, 4] = 330;
      numArray[0, 2, 0, 0] = 3;
      numArray[0, 2, 1, 0] = 180;
      numArray[0, 2, 0, 1] = 0;
      numArray[0, 2, 1, 1] = 30;
      numArray[0, 2, 0, 2] = 2;
      numArray[0, 2, 1, 2] = 435;
      numArray[0, 2, 0, 3] = 3;
      numArray[0, 2, 1, 3] = 180;
      numArray[0, 2, 0, 4] = 1;
      numArray[0, 2, 1, 4] = 375;
      numArray[1, 0, 0, 0] = 0;
      numArray[1, 0, 1, 0] = 0;
      numArray[1, 0, 0, 1] = 0;
      numArray[1, 0, 1, 1] = 0;
      numArray[1, 0, 0, 2] = 0;
      numArray[1, 0, 1, 2] = 0;
      numArray[1, 0, 0, 3] = 0;
      numArray[1, 0, 1, 3] = 0;
      numArray[1, 0, 0, 4] = 0;
      numArray[1, 0, 1, 4] = 0;
      numArray[1, 1, 0, 0] = 0;
      numArray[1, 1, 1, 0] = 0;
      numArray[1, 1, 0, 1] = 0;
      numArray[1, 1, 1, 1] = 0;
      numArray[1, 1, 0, 2] = 0;
      numArray[1, 1, 1, 2] = 0;
      numArray[1, 1, 0, 3] = 0;
      numArray[1, 1, 1, 3] = 0;
      numArray[1, 1, 0, 4] = 0;
      numArray[1, 1, 1, 4] = 0;
      numArray[1, 2, 0, 0] = 0;
      numArray[1, 2, 1, 0] = 0;
      numArray[1, 2, 0, 1] = 0;
      numArray[1, 2, 1, 1] = 0;
      numArray[1, 2, 0, 2] = 0;
      numArray[1, 2, 1, 2] = 0;
      numArray[1, 2, 0, 3] = 0;
      numArray[1, 2, 1, 3] = 0;
      numArray[1, 2, 0, 4] = 0;
      numArray[1, 2, 1, 4] = 0;
      numArray[2, 0, 0, 0] = 0;
      numArray[2, 0, 1, 0] = 0;
      numArray[2, 0, 0, 1] = 0;
      numArray[2, 0, 1, 1] = 0;
      numArray[2, 0, 0, 2] = 0;
      numArray[2, 0, 1, 2] = 0;
      numArray[2, 0, 0, 3] = 0;
      numArray[2, 0, 1, 3] = 0;
      numArray[2, 0, 0, 4] = 0;
      numArray[2, 0, 1, 4] = 0;
      numArray[2, 1, 0, 0] = 0;
      numArray[2, 1, 1, 0] = 0;
      numArray[2, 1, 0, 1] = 0;
      numArray[2, 1, 1, 1] = 0;
      numArray[2, 1, 0, 2] = 0;
      numArray[2, 1, 1, 2] = 0;
      numArray[2, 1, 0, 3] = 0;
      numArray[2, 1, 1, 3] = 0;
      numArray[2, 1, 0, 4] = 0;
      numArray[2, 1, 1, 4] = 0;
      numArray[2, 2, 0, 0] = 0;
      numArray[2, 2, 1, 0] = 0;
      numArray[2, 2, 0, 1] = 0;
      numArray[2, 2, 1, 1] = 0;
      numArray[2, 2, 0, 2] = 0;
      numArray[2, 2, 1, 2] = 0;
      numArray[2, 2, 0, 3] = 0;
      numArray[2, 2, 1, 3] = 0;
      numArray[2, 2, 0, 4] = 0;
      numArray[2, 2, 1, 4] = 0;
      NPC.InitializeMoonLordAttacks2();
      return numArray;
    }

    public static int[,] InitializeMoonLordAttacks2()
    {
      int[,] numArray;
      if (NPC.MoonLordAttacksArray2 != null)
      {
        numArray = NPC.MoonLordAttacksArray2;
        for (int index1 = 0; index1 < numArray.GetLength(0); ++index1)
        {
          for (int index2 = 0; index2 < numArray.GetLength(1); ++index2)
            numArray[index1, index2] = 0;
        }
      }
      else
        numArray = new int[2, 10];
      numArray[0, 0] = 0;
      numArray[1, 0] = 90;
      numArray[0, 1] = 1;
      numArray[1, 1] = 90;
      numArray[0, 2] = 0;
      numArray[1, 2] = 90;
      numArray[0, 3] = 2;
      numArray[1, 3] = 135;
      numArray[0, 4] = 0;
      numArray[1, 4] = 90;
      numArray[0, 5] = 3;
      numArray[1, 5] = 200;
      numArray[0, 6] = 0;
      numArray[1, 6] = 90;
      numArray[0, 7] = 4;
      numArray[1, 7] = 375;
      numArray[0, 8] = 0;
      numArray[1, 8] = 90;
      numArray[0, 9] = 2;
      numArray[1, 9] = 135;
      return numArray;
    }

    public string TypeName => Lang.GetNPCNameValue(this.netID);

    public string FullName => !this.HasGivenName ? this.TypeName : Language.GetTextValue("Game.NPCTitle", (object) this._givenName, (object) this.TypeName);

    public bool HasGivenName => this._givenName.Length != 0;

    public string GivenOrTypeName => !this.HasGivenName ? this.TypeName : this._givenName;

    public string GivenName
    {
      get => this._givenName;
      set => this._givenName = value ?? "";
    }

    public static string GetFullnameByID(int npcID)
    {
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active && Main.npc[index].type == npcID)
          return Main.npc[index].FullName;
      }
      return Lang.GetNPCNameValue(npcID);
    }

    public static bool downedTowers => NPC.downedTowerSolar && NPC.downedTowerVortex && NPC.downedTowerNebula && NPC.downedTowerStardust;

    public static int ShieldStrengthTowerMax
    {
      get
      {
        int shieldPowerNormal = NPC.LunarShieldPowerNormal;
        if (NPC.downedMoonlord)
          shieldPowerNormal /= 2;
        return shieldPowerNormal;
      }
    }

    public static bool TowersDefeated => NPC.TowerActiveSolar && NPC.TowerActiveVortex && NPC.TowerActiveNebula && NPC.TowerActiveStardust;

    public static bool BusyWithAnyInvasionOfSorts() => Main.slimeRainTime != 0.0 || Main.bloodMoon || Main.eclipse || Main.snowMoon || Main.pumpkinMoon || Main.invasionType != 0 || DD2Event.Ongoing;

    public float Opacity
    {
      get => (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
      set => this.alpha = (int) MathHelper.Clamp((float) ((1.0 - (double) value) * (double) byte.MaxValue), 0.0f, (float) byte.MaxValue);
    }

    public int GetAttackDamage_ScaledByStrength(float normalDamage) => (int) ((double) normalDamage * (double) Main.GameModeInfo.EnemyDamageMultiplier * (double) this.strengthMultiplier);

    public float GetAttackDamage_LerpBetweenFinalValuesFloat(float normalDamage, float expertDamage)
    {
      float amount = Main.expertMode ? 1f : 0.0f;
      if (Main.GameModeInfo.IsJourneyMode)
        amount = MathHelper.Clamp(this.strengthMultiplier - 1f, 0.0f, 1f);
      return MathHelper.Lerp(normalDamage, expertDamage, amount);
    }

    public int GetAttackDamage_LerpBetweenFinalValues(float normalDamage, float expertDamage)
    {
      float amount = Main.expertMode ? 1f : 0.0f;
      if (Main.GameModeInfo.IsJourneyMode)
        amount = MathHelper.Clamp(this.strengthMultiplier - 1f, 0.0f, 1f);
      return (int) MathHelper.Lerp(normalDamage, expertDamage, amount);
    }

    public int GetAttackDamage_ForProjectiles(float normalDamage, float expertDamage)
    {
      float amount = Main.expertMode ? 1f : 0.0f;
      if (Main.GameModeInfo.IsJourneyMode)
        amount = MathHelper.Clamp(this.strengthMultiplier - 1f, 0.0f, 1f);
      return (int) MathHelper.Lerp(normalDamage, expertDamage, amount);
    }

    public int GetAttackDamage_ForProjectiles_MultiLerp(
      float normalDamage,
      float expertDamage,
      float masterDamage)
    {
      float percent = Main.masterMode ? 1f : (Main.expertMode ? 0.5f : 0.0f);
      if (Main.GameModeInfo.IsJourneyMode)
        percent = MathHelper.Clamp(this.strengthMultiplier - 1f, 0.0f, 2f) / 2f;
      return (int) Utils.MultiLerp(percent, normalDamage, expertDamage, masterDamage);
    }

    public bool isLikeATownNPC => this.type == 453 || this.townNPC;

    public static bool SpawnAllowed_Demolitionist()
    {
      if (NPC.unlockedDemolitionistSpawn)
        return true;
      for (int index1 = 0; index1 < (int) byte.MaxValue; ++index1)
      {
        Player player = Main.player[index1];
        if (player.active)
        {
          for (int index2 = 0; index2 < 58; ++index2)
          {
            Item obj = player.inventory[index2];
            if (obj != null && obj.stack > 0 && ItemID.Sets.ItemsThatCountAsBombsForDemolitionistToSpawn[obj.type])
              return true;
          }
        }
      }
      return false;
    }

    public static bool SpawnAllowed_ArmsDealer()
    {
      if (NPC.unlockedArmsDealerSpawn)
        return true;
      for (int index1 = 0; index1 < (int) byte.MaxValue; ++index1)
      {
        Player player = Main.player[index1];
        if (player.active)
        {
          for (int index2 = 0; index2 < 58; ++index2)
          {
            Item obj = player.inventory[index2];
            if (obj != null && obj.stack > 0 && (obj.ammo == AmmoID.Bullet || obj.useAmmo == AmmoID.Bullet))
              return true;
          }
        }
      }
      return false;
    }

    public static bool SpawnAllowed_DyeTrader()
    {
      if (NPC.unlockedDyeTraderSpawn)
        return true;
      for (int index1 = 0; index1 < (int) byte.MaxValue; ++index1)
      {
        Player player = Main.player[index1];
        if (player.active)
        {
          for (int index2 = 0; index2 < 58; ++index2)
          {
            Item obj = player.inventory[index2];
            if (obj != null && obj.stack > 0 && (obj.dye > (byte) 0 || obj.type >= 1107 && obj.type <= 1120 || obj.type >= 3385 && obj.type <= 3388))
              return true;
          }
          for (int index3 = 0; index3 < 10; ++index3)
          {
            Item obj = player.dye[index3];
            if (obj != null && obj.stack > 0 && obj.dye > (byte) 0)
              return true;
          }
          for (int index4 = 0; index4 < 5; ++index4)
          {
            Item miscDye = player.miscDyes[index4];
            if (miscDye != null && miscDye.stack > 0 && miscDye.dye > (byte) 0)
              return true;
          }
        }
      }
      return false;
    }

    public static bool SpawnAllowed_Nurse()
    {
      if (NPC.unlockedNurseSpawn)
        return true;
      for (int index = 0; index < (int) byte.MaxValue; ++index)
      {
        Player player = Main.player[index];
        if (player.active && player.statLifeMax / 20 > 5)
          return true;
      }
      return false;
    }

    public static bool SpawnAllowed_Merchant()
    {
      if (NPC.unlockedMerchantSpawn)
        return true;
      double num1 = 5000.0;
      int num2 = 0;
      for (int index1 = 0; index1 < (int) byte.MaxValue; ++index1)
      {
        Player player = Main.player[index1];
        if (player.active)
        {
          for (int index2 = 0; index2 < 58; ++index2)
          {
            Item obj = player.inventory[index2];
            if (obj != null && obj.stack > 0)
            {
              if (obj.type == 71)
                num2 += obj.stack;
              if (obj.type == 72)
                num2 += obj.stack * 100;
              if (obj.type == 73)
                num2 += obj.stack * 10000;
              if (obj.type == 74)
                num2 += obj.stack * 1000000;
              if ((double) num2 >= num1)
                return true;
            }
          }
        }
      }
      return false;
    }

    public static void ClearFoundActiveNPCs()
    {
      for (int index = 0; index < NPC.npcsFoundForCheckActive.Length; ++index)
        NPC.npcsFoundForCheckActive[index] = false;
    }

    public static void UpdateFoundActiveNPCs()
    {
      for (int index = 0; index < 200; ++index)
      {
        NPC npc = Main.npc[index];
        if (npc.active && npc.type >= 0 && npc.type < (int) NPCID.Count)
          NPC.npcsFoundForCheckActive[npc.type] = true;
      }
      NPC.UpdateRGBPeriheralProbe();
    }

    public static void ClearFoundNPCTypesForBestiary()
    {
      for (int index = 0; index < NPC.npcsFoundForCheckActive.Length; ++index)
        NPC.npcsFoundForCheckActive[index] = false;
    }

    public static void UpdateRGBPeriheralProbe()
    {
      int num1 = 0;
      int num2 = Main.LocalPlayer.ZoneOverworldHeight ? 1 : 0;
      if (NPC.npcsFoundForCheckActive[4])
        num1 = 4;
      if (NPC.npcsFoundForCheckActive[50])
        num1 = 50;
      if (num2 != 0 && Main.invasionType == 1)
        num1 = -1;
      if (NPC.npcsFoundForCheckActive[13])
        num1 = 13;
      if (NPC.npcsFoundForCheckActive[266])
        num1 = 266;
      if (NPC.npcsFoundForCheckActive[222])
        num1 = 222;
      if (NPC.npcsFoundForCheckActive[35])
        num1 = 35;
      if (NPC.npcsFoundForCheckActive[113])
        num1 = 113;
      if (num2 != 0 && Main.invasionType == 2)
        num1 = -2;
      if (NPC.npcsFoundForCheckActive[657])
        num1 = 657;
      if (NPC.npcsFoundForCheckActive[126] || NPC.npcsFoundForCheckActive[125])
        num1 = 126;
      if (NPC.npcsFoundForCheckActive[134])
        num1 = 134;
      if (NPC.npcsFoundForCheckActive[(int) sbyte.MaxValue])
        num1 = (int) sbyte.MaxValue;
      if (num2 != 0 && Main.invasionType == 3)
        num1 = -3;
      if (NPC.npcsFoundForCheckActive[262])
        num1 = 262;
      if (NPC.npcsFoundForCheckActive[245])
        num1 = 245;
      if (NPC.npcsFoundForCheckActive[636])
        num1 = 636;
      if (NPC.npcsFoundForCheckActive[668] && NPC.IsDeerclopsHostile())
        num1 = 668;
      if (DD2Event.Ongoing)
        num1 = -6;
      if (num2 != 0 && Main.invasionType == 4)
        num1 = -4;
      if (NPC.npcsFoundForCheckActive[439])
        num1 = 439;
      if (NPC.npcsFoundForCheckActive[370])
        num1 = 370;
      if (NPC.npcsFoundForCheckActive[398])
        num1 = 398;
      CommonConditions.Boss.HighestTierBossOrEvent = num1;
    }

    public void SpawnWithHigherTime(int timeMult) => this.timeLeft = NPC.activeTime * timeMult;

    public void EncourageDespawn(int despawnTime)
    {
      if (this.timeLeft > despawnTime)
        this.timeLeft = despawnTime;
      this.despawnEncouraged = true;
    }

    public void DiscourageDespawn(int despawnTime)
    {
      if (this.timeLeft < despawnTime)
        this.timeLeft = despawnTime;
      this.despawnEncouraged = false;
    }

    public static bool WouldBeEncouragedToDespawn(int aistyle, int type) => aistyle == 4 && Main.dayTime;

    public static string getNewNPCName(int npcType) => NPC.getNewNPCNameInner(npcType);

    private static string getNewNPCNameInner(int npcType)
    {
      switch (npcType)
      {
        case 17:
          return Language.RandomFromCategory("MerchantNames", WorldGen.genRand).Value;
        case 18:
          return Language.RandomFromCategory("NurseNames", WorldGen.genRand).Value;
        case 19:
          return Language.RandomFromCategory("ArmsDealerNames", WorldGen.genRand).Value;
        case 20:
          return Language.RandomFromCategory("DryadNames", WorldGen.genRand).Value;
        case 22:
          return Language.RandomFromCategory("GuideNames", WorldGen.genRand).Value;
        case 38:
          return Language.RandomFromCategory("DemolitionistNames", WorldGen.genRand).Value;
        case 54:
          return Language.RandomFromCategory("ClothierNames", WorldGen.genRand).Value;
        case 107:
          return Language.RandomFromCategory("GoblinTinkererNames", WorldGen.genRand).Value;
        case 108:
          return Language.RandomFromCategory("WizardNames", WorldGen.genRand).Value;
        case 124:
          return Language.RandomFromCategory("MechanicNames", WorldGen.genRand).Value;
        case 160:
          return Language.RandomFromCategory("TruffleNames", WorldGen.genRand).Value;
        case 178:
          return Language.RandomFromCategory("SteampunkerNames", WorldGen.genRand).Value;
        case 207:
          return Language.RandomFromCategory("DyeTraderNames", WorldGen.genRand).Value;
        case 208:
          return Language.RandomFromCategory("PartyGirlNames", WorldGen.genRand).Value;
        case 209:
          return Language.RandomFromCategory("CyborgNames", WorldGen.genRand).Value;
        case 227:
          return Language.RandomFromCategory("PainterNames", WorldGen.genRand).Value;
        case 228:
          return Language.RandomFromCategory("WitchDoctorNames", WorldGen.genRand).Value;
        case 229:
          return Language.RandomFromCategory("PirateNames", WorldGen.genRand).Value;
        case 353:
          return Language.RandomFromCategory("StylistNames", WorldGen.genRand).Value;
        case 368:
          return Language.RandomFromCategory("TravelingMerchantNames", WorldGen.genRand).Value;
        case 369:
          return Language.RandomFromCategory("AnglerNames", WorldGen.genRand).Value;
        case 441:
          return Language.RandomFromCategory("TaxCollectorNames", WorldGen.genRand).Value;
        case 453:
          return Language.RandomFromCategory("SkeletonMerchantNames", WorldGen.genRand).Value;
        case 550:
          return Language.RandomFromCategory("BartenderNames", WorldGen.genRand).Value;
        case 588:
          return Language.RandomFromCategory("GolferNames", WorldGen.genRand).Value;
        case 633:
          return Language.RandomFromCategory("BestiaryGirlNames", WorldGen.genRand).Value;
        case 637:
          return Language.RandomFromCategory("CatNames_Siamese", WorldGen.genRand).Value;
        case 638:
          return Language.RandomFromCategory("DogNames_Labrador", WorldGen.genRand).Value;
        case 656:
          return Language.RandomFromCategory("BunnyNames_White", WorldGen.genRand).Value;
        case 663:
          return Language.RandomFromCategory("PrincessNames", WorldGen.genRand).Value;
        case 670:
          return Language.RandomFromCategory("SlimeNames_Blue", WorldGen.genRand).Value;
        case 678:
          return Language.RandomFromCategory("SlimeNames_Green", WorldGen.genRand).Value;
        case 679:
          return Language.RandomFromCategory("SlimeNames_Old", WorldGen.genRand).Value;
        case 680:
          return Language.RandomFromCategory("SlimeNames_Purple", WorldGen.genRand).Value;
        case 681:
          return Language.RandomFromCategory("SlimeNames_Rainbow", WorldGen.genRand).Value;
        case 682:
          return Language.RandomFromCategory("SlimeNames_Red", WorldGen.genRand).Value;
        case 683:
          return Language.RandomFromCategory("SlimeNames_Yellow", WorldGen.genRand).Value;
        case 684:
          return Language.RandomFromCategory("SlimeNames_Copper", WorldGen.genRand).Value;
        default:
          return "";
      }
    }

    public NetworkText GetTypeNetName() => NetworkText.FromKey(Lang.GetNPCName(this.netID).Key);

    public void GetLifeStats(out int statLife, out int statLifeMax)
    {
      statLife = this.life;
      statLifeMax = this.lifeMax;
      if (this.realLife == -1)
        return;
      statLife = Main.npc[this.realLife].life;
      statLifeMax = Main.npc[this.realLife].lifeMax;
    }

    public float GetLifePercent()
    {
      int statLife;
      int statLifeMax;
      this.GetLifeStats(out statLife, out statLifeMax);
      return (float) statLife / (float) statLifeMax;
    }

    public NetworkText GetFullNetName()
    {
      if (!this.HasGivenName)
        return this.GetTypeNetName();
      return NetworkText.FromKey("Game.NPCTitle", (object) this.GetGivenNetName(), (object) this.GetTypeNetName());
    }

    public NetworkText GetGivenOrTypeNetName() => !this.HasGivenName ? this.GetTypeNetName() : this.GetGivenNetName();

    public NetworkText GetGivenNetName() => NetworkText.FromLiteral(this._givenName);

    public static void setNPCName(string newName, int npcType, bool resetExtras = false)
    {
      bool flag = false;
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active && Main.npc[index].type == npcType)
        {
          if (flag)
          {
            Main.npc[index].GivenName = NPC.getNewNPCName(npcType);
            Main.npc[index].needsUniqueInfoUpdate = true;
          }
          else
          {
            Main.npc[index].GivenName = newName;
            if (!resetExtras)
              break;
            flag = true;
          }
        }
      }
    }

    public static string firstNPCName(int npcType)
    {
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active && Main.npc[index].type == npcType)
          return Main.npc[index].GivenOrTypeName;
      }
      return NPC.getNewNPCName(npcType);
    }

    public static string GetFirstNPCNameOrNull(int npcType)
    {
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active && Main.npc[index].type == npcType)
          return Main.npc[index].GivenOrTypeName;
      }
      return (string) null;
    }

    public static bool MechSpawn(float x, float y, int type)
    {
      int num1 = 0;
      int num2 = 0;
      int num3 = 0;
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active)
        {
          bool flag = false;
          if (Main.npc[index].type == type)
          {
            flag = true;
          }
          else
          {
            switch (type)
            {
              case 46:
              case 303:
              case 337:
              case 540:
                if (Main.npc[index].type == 46 || Main.npc[index].type == 540 || Main.npc[index].type == 303 || Main.npc[index].type == 337)
                {
                  flag = true;
                  goto label_21;
                }
                else
                  goto label_21;
              case 55:
                if (Main.npc[index].type == 230)
                {
                  flag = true;
                  goto label_21;
                }
                else
                  break;
              case 74:
              case 297:
              case 298:
                if (Main.npc[index].type == 74 || Main.npc[index].type == 297 || Main.npc[index].type == 298)
                {
                  flag = true;
                  goto label_21;
                }
                else
                  goto label_21;
              case 362:
              case 364:
                if (Main.npc[index].type == 362 || Main.npc[index].type == 363 || Main.npc[index].type == 364 || Main.npc[index].type == 365)
                {
                  flag = true;
                  goto label_21;
                }
                else
                  goto label_21;
              case 602:
                if (Main.npc[index].type == 602 || Main.npc[index].type == 603)
                {
                  flag = true;
                  goto label_21;
                }
                else
                  goto label_21;
              case 608:
                if (Main.npc[index].type == 608 || Main.npc[index].type == 609)
                {
                  flag = true;
                  goto label_21;
                }
                else
                  goto label_21;
              case 616:
              case 617:
                if (Main.npc[index].type == 616 || Main.npc[index].type == 617)
                {
                  flag = true;
                  goto label_21;
                }
                else
                  goto label_21;
            }
            if (NPCID.Sets.IsDragonfly[type] && NPCID.Sets.IsDragonfly[Main.npc[index].type])
              flag = true;
          }
label_21:
          if (flag)
          {
            ++num1;
            Vector2 vector2 = new Vector2(x, y);
            double num4 = (double) Main.npc[index].position.X - (double) vector2.X;
            float num5 = Main.npc[index].position.Y - vector2.Y;
            double num6 = Math.Sqrt(num4 * num4 + (double) num5 * (double) num5);
            if (num6 < 200.0)
              ++num2;
            if (num6 < 600.0)
              ++num3;
          }
        }
      }
      return num2 < 3 && num3 < 6 && num1 < 10;
    }

    public static int TypeToDefaultHeadIndex(int type)
    {
      switch (type)
      {
        case 0:
          return 0;
        case 17:
          return 2;
        case 18:
          return 3;
        case 19:
          return 6;
        case 20:
          return 5;
        case 22:
          return 1;
        case 38:
          return 4;
        case 54:
          return 7;
        case 107:
          return 9;
        case 108:
          return 10;
        case 124:
          return 8;
        case 142:
          return 11;
        case 160:
          return 12;
        case 178:
          return 13;
        case 207:
          return 14;
        case 208:
          return 15;
        case 209:
          return 16;
        case 227:
          return 17;
        case 228:
          return 18;
        case 229:
          return 19;
        case 353:
          return 20;
        case 368:
          return 21;
        case 369:
          return 22;
        case 441:
          return 23;
        case 550:
          return 24;
        case 588:
          return 25;
        case 633:
          return 26;
        case 637:
          return 27;
        case 638:
          return 33;
        case 656:
          return 39;
        case 663:
          return 45;
        case 670:
          return 46;
        case 678:
          return 47;
        case 679:
          return 48;
        case 680:
          return 49;
        case 681:
          return 50;
        case 682:
          return 51;
        case 683:
          return 52;
        case 684:
          return 53;
        default:
          return -1;
      }
    }

    public int GetBossHeadTextureIndex()
    {
      int headTextureIndex = NPCID.Sets.BossHeadTextures[this.type];
      switch (this.type)
      {
        case 4:
          if ((double) this.ai[0] >= 2.0)
          {
            headTextureIndex = 1;
            break;
          }
          break;
        case 125:
          if ((double) this.ai[0] >= 3.0)
          {
            headTextureIndex = 16;
            break;
          }
          break;
        case 126:
          if ((double) this.ai[0] >= 3.0)
          {
            headTextureIndex = 21;
            break;
          }
          break;
        case 262:
          if (this.life <= this.lifeMax / 2)
          {
            headTextureIndex = 12;
            break;
          }
          break;
        case 266:
          if ((double) this.ai[0] < 0.0)
          {
            headTextureIndex = -1;
            break;
          }
          break;
        case 439:
          if ((double) this.ai[0] == 5.0 && this.alpha == (int) byte.MaxValue)
          {
            headTextureIndex = -1;
            break;
          }
          break;
        case 440:
          if ((double) this.ai[0] != 5.0 || this.alpha == (int) byte.MaxValue)
          {
            headTextureIndex = -1;
            break;
          }
          break;
      }
      return headTextureIndex;
    }

    public float GetBossHeadRotation()
    {
      float bossHeadRotation = 0.0f;
      switch (this.type)
      {
        case 35:
        case (int) sbyte.MaxValue:
          if ((double) this.ai[1] == 1.0 || (double) this.ai[1] == 2.0)
          {
            bossHeadRotation = this.rotation;
            break;
          }
          break;
        case 68:
        case 262:
          bossHeadRotation = this.rotation;
          break;
        case 345:
          if ((double) this.ai[0] == 2.0)
          {
            bossHeadRotation = this.rotation;
            break;
          }
          break;
      }
      return bossHeadRotation;
    }

    public SpriteEffects GetBossHeadSpriteEffects()
    {
      SpriteEffects headSpriteEffects = SpriteEffects.None;
      if (this.type == 491 && this.spriteDirection == 1)
        headSpriteEffects = SpriteEffects.FlipHorizontally;
      return headSpriteEffects;
    }

    public int BannerID() => this.netID >= -10 ? this.netID : this.type;

    private void SetDefaultsFromNetId(int id, NPCSpawnParams spawnparams = default (NPCSpawnParams))
    {
      bool flag = false;
      int Type = NPCID.FromNetId(id);
      this.SetDefaults(0);
      switch (id)
      {
        case -65:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.21f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -64:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.87f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -63:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.16f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -62:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.78f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -61:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.1f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -60:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.92f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -59:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.15f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -58:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.8f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -57:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.25f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -56:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.85f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -55:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.1f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -54:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.9f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -53:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.15f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -52:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.85f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -51:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.13f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -50:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.87f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -49:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.07f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -48:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.93f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -47:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.1f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -46:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.9f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -45:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.05f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -44:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.87f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -43:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.15f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -42:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.1f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -41:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.85f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -40:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.9f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -39:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.1f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -38:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.15f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -37:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.08f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -36:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.92f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -35:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.13f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -34:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.87f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -33:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.11f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -32:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.89f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -31:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.13f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -30:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.93f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -29:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.15f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -28:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.85f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -27:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.1f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -26:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.9f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -25:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.15f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -24:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.85f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -23:
          float scaleOverride1 = 1.15f;
          if (Main.remixWorld)
            scaleOverride1 *= 1.3f;
          this.SetDefaults_ForNetId(Type, spawnparams, scaleOverride1);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -22:
          float scaleOverride2 = 0.85f;
          if (Main.remixWorld)
            scaleOverride2 *= 1.3f;
          this.SetDefaults_ForNetId(Type, spawnparams, scaleOverride2);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -21:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.2f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -20:
          this.SetDefaults_ForNetId(Type, 1.1f);
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -19:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.9f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -18:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.8f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -17:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.2f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -16:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.85f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -15:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.15f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale * 1.1);
          this.life = 400;
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots = 2f;
          this.knockBackResist *= 2f - this.scale;
          this.height = 44;
          break;
        case -14:
          this.SetDefaults_ForNetId(Type, spawnparams, 1.15f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale * 1.1);
          this.life = (int) ((double) this.life * (double) this.scale * 1.1);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots = 2f;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -13:
          this.SetDefaults_ForNetId(Type, spawnparams, 0.9f);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          break;
        case -12:
          float scaleOverride3 = 1.15f;
          if (Main.remixWorld || Main.getGoodWorld)
            scaleOverride3 *= 1.3f;
          this.SetDefaults_ForNetId(Type, spawnparams, scaleOverride3);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -11:
          float scaleOverride4 = 0.85f;
          if (Main.remixWorld)
            scaleOverride4 *= 1.3f;
          this.SetDefaults_ForNetId(Type, spawnparams, scaleOverride4);
          flag = false;
          this.defense = (int) ((double) this.defense * (double) this.scale);
          this.damage = (int) ((double) this.damage * (double) this.scale);
          this.life = (int) ((double) this.life * (double) this.scale);
          this.value = (float) (int) ((double) this.value * (double) this.scale);
          this.npcSlots *= this.scale;
          this.knockBackResist *= 2f - this.scale;
          break;
        case -10:
          this.SetDefaults_ForNetId(Type, 1.1f);
          flag = true;
          this.damage = 18;
          this.defense = 6;
          this.life = 60;
          this.color = new Color(143, 215, 93, 100);
          this.value = 500f;
          break;
        case -9:
          this.SetDefaults_ForNetId(Type, 1.2f);
          flag = true;
          this.damage = 15;
          this.defense = 7;
          this.life = 45;
          this.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, 0, 100);
          this.value = 10f;
          break;
        case -8:
          this.SetDefaults_ForNetId(Type, 1.025f);
          flag = true;
          this.damage = 12;
          this.defense = 4;
          this.life = 35;
          this.color = new Color((int) byte.MaxValue, 30, 0, 100);
          this.value = 8f;
          break;
        case -7:
          this.SetDefaults_ForNetId(Type, 1.2f);
          flag = true;
          this.damage = 12;
          this.defense = 6;
          this.life = 40;
          this.knockBackResist *= 0.9f;
          this.color = new Color(200, 0, (int) byte.MaxValue, 150);
          this.value = 10f;
          break;
        case -6:
          this.SetDefaults_ForNetId(Type, 1.05f);
          flag = true;
          this.damage = 15;
          this.defense = 4;
          this.life = 45;
          this.color = new Color(0, 0, 0, 50);
          this.value = 20f;
          break;
        case -5:
          this.SetDefaults_ForNetId(Type, 0.9f);
          flag = true;
          this.damage = 13;
          this.defense = 4;
          this.life = 30;
          this.knockBackResist *= 0.95f;
          this.alpha = 120;
          this.color = new Color(0, 0, 0, 50);
          this.value = 10f;
          break;
        case -4:
          this.SetDefaults_ForNetId(Type, 0.6f);
          flag = true;
          this.damage = 5;
          this.defense = 5;
          this.life = 150;
          this.knockBackResist *= 1.4f;
          this.color = new Color(250, 30, 90, 90);
          this.value = 10000f;
          this.rarity = 2;
          break;
        case -3:
          this.SetDefaults_ForNetId(Type, 0.9f);
          flag = true;
          this.damage = 6;
          this.defense = 0;
          this.life = 14;
          this.knockBackResist *= 1.2f;
          this.color = new Color(0, 220, 40, 100);
          this.value = 3f;
          break;
        case -2:
          this.SetDefaults_ForNetId(Type, 0.9f);
          flag = true;
          this.damage = 45;
          this.defense = 20;
          this.life = 90;
          this.knockBackResist *= 1.2f;
          this.value = 100f;
          break;
        case -1:
          this.SetDefaults_ForNetId(Type, 0.6f);
          flag = true;
          this.damage = 45;
          this.defense = 10;
          this.life = 90;
          this.knockBackResist *= 1.2f;
          this.value = 100f;
          break;
        default:
          return;
      }
      this.netID = id;
      this.lifeMax = this.life;
      this.defDamage = this.damage;
      this.defDefense = this.defense;
      if (!flag)
        return;
      this.ScaleStats(spawnparams.playerCountForMultiplayerDifficultyOverride, spawnparams.gameModeData, spawnparams.strengthMultiplierOverride);
      this.life = this.lifeMax;
    }

    public void SetDefaultsKeepPlayerInteraction(int Type)
    {
      bool[] flagArray = new bool[this.playerInteraction.Length];
      for (int index = 0; index < this.playerInteraction.Length; ++index)
        flagArray[index] = this.playerInteraction[index];
      this.SetDefaults(Type);
      for (int index = 0; index < this.playerInteraction.Length; ++index)
        this.playerInteraction[index] = flagArray[index];
    }

    public void SetDefaults_ForNetId(int Type, float scaleOverride) => this.SetDefaults(Type);

    public void SetDefaults_ForNetId(int Type, NPCSpawnParams spawnparams, float scaleOverride) => this.SetDefaults(Type, spawnparams.WithScale(scaleOverride));

    public void SetNetShimmerEffect()
    {
      this.netShimmer = true;
      this.shimmerTransparency = 1f;
    }

    public void SetDefaults(int Type, NPCSpawnParams spawnparams = default (NPCSpawnParams))
    {
      if (spawnparams.gameModeData == null)
        spawnparams.gameModeData = Main.GameModeInfo;
      if (Main.getGoodWorld && spawnparams.sizeScaleOverride.HasValue)
      {
        ref NPCSpawnParams local = ref spawnparams;
        float? sizeScaleOverride1 = spawnparams.sizeScaleOverride;
        float? sizeScaleOverride2 = spawnparams.sizeScaleOverride;
        float? nullable1 = spawnparams.sizeScaleOverride;
        float? nullable2 = sizeScaleOverride2.HasValue & nullable1.HasValue ? new float?(sizeScaleOverride2.GetValueOrDefault() * nullable1.GetValueOrDefault()) : new float?();
        float? nullable3;
        if (!(sizeScaleOverride1.HasValue & nullable2.HasValue))
        {
          nullable1 = new float?();
          nullable3 = nullable1;
        }
        else
          nullable3 = new float?(sizeScaleOverride1.GetValueOrDefault() + nullable2.GetValueOrDefault());
        float? nullable4 = nullable3;
        float num = 2f;
        float? nullable5;
        if (!nullable4.HasValue)
        {
          nullable2 = new float?();
          nullable5 = nullable2;
        }
        else
          nullable5 = new float?(nullable4.GetValueOrDefault() / num);
        local.sizeScaleOverride = nullable5;
      }
      if (Type < 0)
      {
        this.SetDefaultsFromNetId(Type, spawnparams);
      }
      else
      {
        this.waterMovementSpeed = this.lavaMovementSpeed = 0.5f;
        this.honeyMovementSpeed = 0.25f;
        this.netOffset *= 0.0f;
        this.altTexture = 0;
        this.townNpcVariationIndex = 0;
        this.nameOver = 0.0f;
        this.takenDamageMultiplier = 1f;
        this.extraValue = 0;
        for (int index = 0; index < this.playerInteraction.Length; ++index)
          this.playerInteraction[index] = false;
        this.rarity = 0;
        this.dontCountMe = false;
        this.releaseOwner = (short) byte.MaxValue;
        this.catchItem = (short) 0;
        this.needsUniqueInfoUpdate = true;
        this.netStream = 32;
        this.netID = 0;
        this.netAlways = false;
        this.netSpam = 0;
        this.SpawnedFromStatue = false;
        this.CanBeReplacedByOtherNPCs = false;
        this.shimmerTransparency = 0.0f;
        if (this.netShimmer)
        {
          this.shimmerTransparency = 1f;
          this.netShimmer = false;
        }
        this.statsAreScaledForThisManyPlayers = 0;
        this.strengthMultiplier = 1f;
        int newSize = 10;
        if (Type >= 0)
          newSize = NPCID.Sets.TrailCacheLength[Type];
        if (newSize != this.oldPos.Length)
        {
          Array.Resize<Vector2>(ref this.oldPos, newSize);
          Array.Resize<float>(ref this.oldRot, newSize);
        }
        for (int index = 0; index < this.oldPos.Length; ++index)
        {
          this.oldRot[index] = 0.0f;
          this.oldPos[index].X = 0.0f;
          this.oldPos[index].Y = 0.0f;
        }
        for (int index = 0; index < NPC.maxBuffs; ++index)
        {
          this.buffTime[index] = 0;
          this.buffType[index] = 0;
        }
        for (int index = 0; index < BuffID.Count; ++index)
          this.buffImmune[index] = false;
        this.setFrameSize = false;
        this.netSkip = -2;
        this.realLife = -1;
        this.lifeRegen = 0;
        this.lifeRegenExpectedLossPerSecond = -1;
        this.lifeRegenCount = 0;
        this.markedByScytheWhip = false;
        this.poisoned = false;
        this.soulDrain = false;
        this.venom = false;
        this.shadowFlame = false;
        this.canDisplayBuffs = true;
        this.onFire = false;
        this.midas = false;
        this.ichor = false;
        this.onFrostBurn = false;
        this.onFrostBurn2 = false;
        this.shimmering = false;
        this.confused = false;
        this.loveStruck = false;
        this.dontTakeDamageFromHostiles = false;
        this.stinky = false;
        this.dryadWard = false;
        this.onFire2 = false;
        this.onFire3 = false;
        this.justHit = false;
        this.dontTakeDamage = false;
        this.catchableNPCTempImmunityCounter = 0;
        this.npcSlots = 1f;
        this.lavaImmune = false;
        this.lavaWet = false;
        this.wetCount = (byte) 0;
        this.wet = false;
        this.townNPC = false;
        this.homeless = false;
        this.homeTileX = -1;
        this.homeTileY = -1;
        this.housingCategory = 0;
        this.friendly = false;
        this.behindTiles = false;
        this.boss = false;
        this.noTileCollide = false;
        this.rotation = 0.0f;
        this.active = true;
        this.alpha = 0;
        this.color = new Color();
        this.collideX = false;
        this.collideY = false;
        this.direction = 0;
        this.oldDirection = this.direction;
        this.frameCounter = 0.0;
        this.netUpdate = true;
        this.netUpdate2 = false;
        this.knockBackResist = 1f;
        this.GivenName = "";
        this.noGravity = false;
        this.scale = 1f;
        this.HitSound = (LegacySoundStyle) null;
        this.DeathSound = (LegacySoundStyle) null;
        this.spriteDirection = -1;
        this.target = (int) byte.MaxValue;
        this.oldTarget = this.target;
        this.targetRect = new Microsoft.Xna.Framework.Rectangle();
        this.timeLeft = NPC.activeTime;
        this.type = Type;
        this.value = 0.0f;
        this.coldDamage = false;
        this.trapImmune = false;
        this.hide = false;
        this.immortal = false;
        this.chaseable = true;
        this.breath = 200;
        this.breathCounter = 0;
        this.reflectsProjectiles = false;
        this.canGhostHeal = true;
        this.javelined = false;
        this.tentacleSpiked = false;
        this.bloodButchered = false;
        this.daybreak = false;
        this.celled = false;
        this.dryadBane = false;
        this.betsysCurse = false;
        this.oiled = false;
        this.despawnEncouraged = false;
        for (int index = 0; index < NPC.maxAI; ++index)
          this.ai[index] = 0.0f;
        for (int index = 0; index < NPC.maxAI; ++index)
          this.localAI[index] = 0.0f;
        if (this.type == 1)
        {
          this.width = 24;
          this.height = 18;
          this.aiStyle = 1;
          this.damage = 7;
          this.defense = 2;
          this.lifeMax = 25;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.alpha = 175;
          this.color = new Color(0, 80, (int) byte.MaxValue, 100);
          this.value = 25f;
        }
        else if (this.type == 2)
        {
          this.width = 30;
          this.height = 32;
          this.aiStyle = 2;
          this.damage = 18;
          this.defense = 2;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 75f;
        }
        else if (this.type == 3)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 14;
          this.defense = 6;
          this.lifeMax = 45;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 60f;
        }
        else if (this.type == 430)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 14;
          this.defense = 6;
          this.lifeMax = 45;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 60f;
        }
        else if (this.type == 431)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 16;
          this.defense = 8;
          this.lifeMax = 50;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.45f;
          this.value = 80f;
        }
        else if (this.type == 432)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 16;
          this.defense = 8;
          this.lifeMax = 50;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.45f;
          this.value = 65f;
        }
        else if (this.type == 433)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 13;
          this.defense = 6;
          this.lifeMax = 40;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.55f;
          this.value = 55f;
        }
        else if (this.type == 434)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 13;
          this.defense = 8;
          this.lifeMax = 45;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.45f;
          this.value = 80f;
        }
        else if (this.type == 435)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 16;
          this.defense = 4;
          this.lifeMax = 45;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.55f;
          this.value = 70f;
        }
        else if (this.type == 436)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 12;
          this.defense = 4;
          this.lifeMax = 38;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.6f;
          this.value = 65f;
        }
        else if (this.type == 4)
        {
          this.width = 100;
          this.height = 110;
          this.aiStyle = 4;
          this.damage = 15;
          this.defense = 12;
          this.lifeMax = 2800;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.SpawnWithHigherTime(30);
          this.boss = true;
          this.value = 30000f;
          this.npcSlots = 5f;
        }
        else if (this.type == 5)
        {
          this.width = 20;
          this.height = 20;
          this.aiStyle = 5;
          this.damage = 12;
          this.defense = 0;
          this.lifeMax = 8;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
        }
        else if (this.type == 6)
        {
          this.npcSlots = 1f;
          this.width = 30;
          this.height = 30;
          this.aiStyle = 5;
          this.damage = 22;
          this.defense = 8;
          this.lifeMax = 40;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.knockBackResist = 0.5f;
          this.value = 90f;
          if (Main.remixWorld)
          {
            this.scale *= 1.3f;
            this.damage = (int) ((double) this.damage * (double) this.scale);
            this.defense = (int) ((double) this.defense * (double) this.scale);
            this.lifeMax = (int) ((double) this.lifeMax * (double) this.scale);
            this.value = (float) (int) ((double) this.value * (double) this.scale);
          }
          else if (Main.getGoodWorld)
            this.scale *= 1.3f;
        }
        else if (this.type == 7)
        {
          this.npcSlots = 3.5f;
          this.width = 22;
          this.height = 22;
          this.aiStyle = 6;
          this.damage = 31;
          this.defense = 2;
          this.lifeMax = 100;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 140f;
          this.netAlways = true;
          if (Main.remixWorld)
          {
            this.scale *= 1.3f;
            this.damage = (int) ((double) this.damage * (double) this.scale);
            this.defense = (int) ((double) this.defense * (double) this.scale);
            this.lifeMax = (int) ((double) this.lifeMax * (double) this.scale);
            this.value = (float) (int) ((double) this.value * (double) this.scale);
          }
        }
        else if (this.type == 8)
        {
          this.width = 22;
          this.height = 22;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 16;
          this.defense = 6;
          this.lifeMax = 100;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 140f;
          this.dontCountMe = true;
          if (Main.remixWorld)
          {
            this.scale *= 1.3f;
            this.damage = (int) ((double) this.damage * (double) this.scale);
            this.defense = (int) ((double) this.defense * (double) this.scale);
            this.lifeMax = (int) ((double) this.lifeMax * (double) this.scale);
            this.value = (float) (int) ((double) this.value * (double) this.scale);
          }
        }
        else if (this.type == 9)
        {
          this.width = 22;
          this.height = 22;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 13;
          this.defense = 10;
          this.lifeMax = 100;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 140f;
          this.dontCountMe = true;
          if (Main.remixWorld)
          {
            this.scale *= 1.3f;
            this.damage = (int) ((double) this.damage * (double) this.scale);
            this.defense = (int) ((double) this.defense * (double) this.scale);
            this.lifeMax = (int) ((double) this.lifeMax * (double) this.scale);
            this.value = (float) (int) ((double) this.value * (double) this.scale);
          }
        }
        else if (this.type == 10)
        {
          this.width = 14;
          this.height = 14;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 8;
          this.defense = 0;
          this.lifeMax = 30;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 40f;
        }
        else if (this.type == 11)
        {
          this.width = 14;
          this.height = 14;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 4;
          this.defense = 4;
          this.lifeMax = 30;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 40f;
          this.dontCountMe = true;
        }
        else if (this.type == 12)
        {
          this.width = 14;
          this.height = 14;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 4;
          this.defense = 6;
          this.lifeMax = 30;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 40f;
          this.dontCountMe = true;
        }
        else if (this.type == 13)
        {
          this.npcSlots = 5f;
          this.width = 38;
          this.height = 38;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 22;
          this.defense = 2;
          this.lifeMax = 150;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 800f;
          this.scale = 1f;
          this.alpha = (int) byte.MaxValue;
        }
        else if (this.type == 14)
        {
          this.width = 38;
          this.height = 38;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 13;
          this.defense = 4;
          this.lifeMax = 150;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 800f;
          this.scale = 1f;
          this.dontCountMe = true;
          this.alpha = (int) byte.MaxValue;
        }
        else if (this.type == 15)
        {
          this.width = 38;
          this.height = 38;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 11;
          this.defense = 8;
          this.lifeMax = 150;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 800f;
          this.scale = 1f;
          this.dontCountMe = true;
          this.alpha = (int) byte.MaxValue;
        }
        else if (this.type == 16)
        {
          this.npcSlots = 2f;
          this.width = 36;
          this.height = 24;
          this.aiStyle = 1;
          this.damage = 20;
          this.defense = 7;
          this.lifeMax = 90;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.alpha = 120;
          this.color = new Color(0, 0, 0, 50);
          this.value = 75f;
          this.scale = 1.25f;
          this.knockBackResist = 0.6f;
        }
        else if (this.type == 17)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 18)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 19)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 20)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 21)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 8;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 100f;
        }
        else if (this.type == 22)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 23)
        {
          this.width = 22;
          this.height = 22;
          this.aiStyle = 5;
          this.damage = 40;
          this.defense = 6;
          this.lifeMax = 26;
          this.HitSound = SoundID.NPCHit3;
          this.DeathSound = SoundID.NPCDeath3;
          this.noGravity = true;
          this.noTileCollide = true;
          this.value = 80f;
          this.knockBackResist = 0.4f;
        }
        else if (this.type == 24)
        {
          this.npcSlots = 3f;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 8;
          this.damage = 30;
          this.defense = 16;
          this.lifeMax = 70;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
          this.lavaImmune = true;
          this.value = 350f;
        }
        else if (this.type == 25)
        {
          this.width = 16;
          this.height = 16;
          this.aiStyle = 9;
          this.damage = 30;
          this.defense = 0;
          this.lifeMax = 1;
          this.HitSound = SoundID.NPCHit3;
          this.DeathSound = SoundID.NPCDeath3;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.alpha = 100;
        }
        else if (this.type == 31)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 26;
          this.defense = 8;
          this.lifeMax = 80;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.8f;
          this.value = 130f;
        }
        else if (this.type == 32)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 8;
          this.damage = 20;
          this.defense = 2;
          this.lifeMax = 50;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.6f;
          this.value = 140f;
          this.npcSlots = 2f;
        }
        else if (this.type == 33)
        {
          this.width = 16;
          this.height = 16;
          this.aiStyle = 9;
          this.damage = 20;
          this.defense = 0;
          this.lifeMax = 1;
          this.HitSound = SoundID.NPCHit3;
          this.DeathSound = SoundID.NPCDeath3;
          this.noGravity = true;
          this.noTileCollide = true;
          this.alpha = (int) byte.MaxValue;
          this.knockBackResist = 0.0f;
        }
        else if (this.type == 34)
        {
          this.width = 26;
          this.height = 28;
          this.aiStyle = 10;
          this.damage = 35;
          this.defense = 6;
          this.lifeMax = 40;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.noGravity = true;
          this.noTileCollide = true;
          this.value = 150f;
          this.knockBackResist = 0.2f;
          this.npcSlots = 0.75f;
        }
        else if (this.type == 35)
        {
          this.width = 80;
          this.height = 102;
          this.aiStyle = 11;
          this.damage = 32;
          this.defense = 10;
          this.lifeMax = 4400;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.noGravity = true;
          this.noTileCollide = true;
          this.value = 50000f;
          this.knockBackResist = 0.0f;
          this.boss = true;
          this.npcSlots = 6f;
        }
        else if (this.type == 36)
        {
          this.width = 52;
          this.height = 52;
          this.aiStyle = 12;
          this.damage = 20;
          this.defense = 14;
          this.lifeMax = 600;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
        }
        else if (this.type == 37)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 38)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 39)
        {
          this.npcSlots = 6f;
          this.width = 22;
          this.height = 22;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 36;
          this.defense = 12;
          this.lifeMax = 300;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath5;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 1200f;
          if (Main.getGoodWorld)
          {
            this.lifeMax += 100;
            this.defense += 2;
            this.damage += 4;
            this.scale = 1.1f;
            if (Main.remixWorld)
            {
              this.lifeMax += 50;
              this.scale *= 1.2f;
              this.defense += 4;
            }
          }
        }
        else if (this.type == 40)
        {
          this.width = 22;
          this.height = 22;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 20;
          this.defense = 18;
          this.lifeMax = 300;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath5;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 1200f;
          this.dontCountMe = true;
          if (Main.getGoodWorld)
          {
            this.lifeMax += 100;
            this.defense += 2;
            this.damage += 4;
            this.scale = 1.1f;
            if (Main.remixWorld)
            {
              this.lifeMax += 50;
              this.scale *= 1.2f;
              this.defense += 4;
            }
          }
        }
        else if (this.type == 41)
        {
          this.width = 22;
          this.height = 22;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 16;
          this.defense = 18;
          this.lifeMax = 300;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath5;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 1200f;
          this.dontCountMe = true;
          if (Main.getGoodWorld)
          {
            this.lifeMax += 100;
            this.defense += 2;
            this.damage += 4;
            this.scale = 1.1f;
            if (Main.remixWorld)
            {
              this.lifeMax += 50;
              this.scale *= 1.2f;
              this.defense += 4;
            }
          }
        }
        else if (this.type == 42)
        {
          this.width = 34;
          this.height = 32;
          this.aiStyle = 5;
          this.damage = 26;
          this.defense = 12;
          this.lifeMax = 48;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.5f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 200f;
          this.noGravity = true;
        }
        else if (this.type == 43)
        {
          this.noGravity = true;
          this.noTileCollide = true;
          this.width = 30;
          this.height = 30;
          this.aiStyle = 13;
          this.damage = 34;
          this.defense = 10;
          this.lifeMax = 110;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.0f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 350f;
        }
        else if (this.type == 44)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 22;
          this.defense = 9;
          this.lifeMax = 70;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 250f;
          this.rarity = 1;
        }
        else if (this.type == 45)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 8;
          this.damage = 20;
          this.defense = 4;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.6f;
          this.value = 5000f;
          this.rarity = 4;
        }
        else if (this.type == 46 || this.type == 303 || this.type == 337 || this.type == 540)
        {
          this.width = 18;
          this.height = 20;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 2019;
        }
        else if (this.type == 47)
        {
          this.width = 18;
          this.height = 20;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 4;
          this.lifeMax = 70;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 500f;
        }
        else if (this.type == 48)
        {
          this.width = 24;
          this.height = 34;
          this.aiStyle = 14;
          this.damage = 25;
          this.defense = 8;
          this.lifeMax = 100;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.6f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 300f;
        }
        else if (this.type == 49)
        {
          this.npcSlots = 0.5f;
          this.width = 22;
          this.height = 18;
          this.aiStyle = 14;
          this.damage = 13;
          this.defense = 2;
          this.lifeMax = 16;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath4;
          this.value = 90f;
        }
        else if (this.type == 50)
        {
          this.boss = true;
          this.width = 98;
          this.height = 92;
          this.aiStyle = 15;
          this.damage = 40;
          this.defense = 10;
          this.lifeMax = 2000;
          this.knockBackResist = 0.0f;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.alpha = 30;
          this.value = 10000f;
          this.scale = 1.25f;
          this.SpawnWithHigherTime(30);
          this.npcSlots = 5f;
        }
        else if (this.type == 51)
        {
          this.npcSlots = 0.5f;
          this.width = 22;
          this.height = 18;
          this.aiStyle = 14;
          this.damage = 20;
          this.defense = 4;
          this.lifeMax = 34;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath4;
          this.value = 80f;
        }
        else if (this.type == 52)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 10;
          this.lifeMax = 500;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 1000f;
          this.rarity = 2;
        }
        else if (this.type == 53)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 14;
          this.defense = 8;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 1000f;
          this.rarity = 2;
        }
        else if (this.type == 54)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 55)
        {
          this.noGravity = true;
          this.width = 20;
          this.height = 18;
          this.aiStyle = 16;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
          this.catchItem = (short) 261;
        }
        else if (this.type == 56)
        {
          this.noTileCollide = true;
          this.noGravity = true;
          this.width = 30;
          this.height = 30;
          this.aiStyle = 13;
          this.damage = 25;
          this.defense = 10;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.0f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 90f;
        }
        else if (this.type == 57)
        {
          this.noGravity = true;
          this.width = 18;
          this.height = 20;
          this.aiStyle = 16;
          this.damage = 30;
          this.defense = 6;
          this.lifeMax = 100;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 500f;
        }
        else if (this.type == 58)
        {
          this.npcSlots = 0.5f;
          this.noGravity = true;
          this.width = 18;
          this.height = 20;
          this.aiStyle = 16;
          this.damage = 25;
          this.defense = 2;
          this.lifeMax = 30;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 50f;
        }
        else if (this.type == 59)
        {
          this.width = 24;
          this.height = 18;
          this.aiStyle = 1;
          this.damage = 15;
          this.defense = 10;
          this.lifeMax = 50;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.scale = 1.1f;
          this.alpha = 50;
          this.lavaImmune = true;
          this.value = 120f;
          if (Main.remixWorld)
          {
            this.damage = 7;
            this.defense = 2;
            this.lifeMax = 25;
            this.value = 25f;
          }
        }
        else if (this.type == 60)
        {
          this.npcSlots = 0.5f;
          this.width = 22;
          this.height = 18;
          this.aiStyle = 14;
          this.damage = 35;
          this.defense = 8;
          this.lifeMax = 46;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath4;
          this.value = 120f;
          this.scale = 1.1f;
          this.lavaImmune = true;
        }
        else if (this.type == 61)
        {
          this.width = 36;
          this.height = 36;
          this.aiStyle = 17;
          this.damage = 15;
          this.defense = 4;
          this.lifeMax = 40;
          this.knockBackResist = 0.8f;
          this.HitSound = SoundID.NPCHit28;
          this.DeathSound = SoundID.NPCDeath31;
          this.value = 60f;
        }
        else if (this.type == 62)
        {
          this.npcSlots = 2f;
          this.width = 28;
          this.height = 48;
          this.aiStyle = 14;
          this.damage = 32;
          this.defense = 8;
          this.lifeMax = 120;
          this.HitSound = SoundID.NPCHit21;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath24;
          this.value = 300f;
          this.lavaImmune = true;
        }
        else if (this.type == 63)
        {
          this.noGravity = true;
          this.width = 26;
          this.height = 26;
          this.aiStyle = 18;
          this.damage = 25;
          this.defense = 4;
          this.lifeMax = 34;
          this.HitSound = SoundID.NPCHit25;
          this.DeathSound = SoundID.NPCDeath28;
          this.value = 100f;
          this.alpha = 20;
        }
        else if (this.type == 64)
        {
          this.noGravity = true;
          this.width = 26;
          this.height = 26;
          this.aiStyle = 18;
          this.damage = 30;
          this.defense = 6;
          this.lifeMax = 70;
          this.HitSound = SoundID.NPCHit25;
          this.DeathSound = SoundID.NPCDeath28;
          this.value = 100f;
          this.alpha = 20;
        }
        else if (this.type == 65)
        {
          this.noGravity = true;
          this.width = 100;
          this.height = 24;
          this.aiStyle = 16;
          this.damage = 40;
          this.defense = 2;
          this.lifeMax = 300;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 400f;
          this.knockBackResist = 0.7f;
        }
        else if (this.type == 66)
        {
          this.npcSlots = 2f;
          this.width = 28;
          this.height = 48;
          this.aiStyle = 14;
          this.damage = 32;
          this.defense = 8;
          this.lifeMax = 140;
          this.HitSound = SoundID.NPCHit21;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath24;
          this.value = 1000f;
          this.lavaImmune = true;
          this.rarity = 1;
        }
        else if (this.type == 67)
        {
          this.width = 28;
          this.height = 20;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 10;
          this.lifeMax = 40;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 60f;
        }
        else if (this.type == 68)
        {
          this.width = 80;
          this.height = 102;
          this.aiStyle = 11;
          this.damage = 1000;
          this.defense = 9999;
          this.lifeMax = 9999;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
        }
        else if (this.type == 69)
        {
          this.width = 24;
          this.height = 24;
          this.aiStyle = 19;
          this.damage = 10;
          this.defense = 6;
          this.lifeMax = 45;
          this.HitSound = SoundID.NPCHit31;
          this.DeathSound = SoundID.NPCDeath34;
          this.knockBackResist = 0.0f;
          this.value = 60f;
          this.behindTiles = true;
        }
        else if (this.type == 70)
        {
          this.npcSlots = 0.3f;
          this.width = 34;
          this.height = 34;
          this.aiStyle = 20;
          this.damage = 32;
          this.defense = 100;
          this.lifeMax = 100;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.dontTakeDamage = true;
          this.scale = 1.5f;
        }
        else if (this.type == 71)
        {
          this.npcSlots = 2f;
          this.width = 36;
          this.height = 24;
          this.aiStyle = 1;
          this.damage = 30;
          this.defense = 7;
          this.lifeMax = 150;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.alpha = 60;
          this.value = 150f;
          this.scale = 1.25f;
          this.knockBackResist = 0.6f;
          this.rarity = 1;
        }
        else if (this.type == 72)
        {
          this.npcSlots = 0.3f;
          this.width = 34;
          this.height = 34;
          this.aiStyle = 21;
          this.damage = 24;
          this.defense = 100;
          this.lifeMax = 100;
          this.alpha = 100;
          this.behindTiles = true;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.dontTakeDamage = true;
          this.scale = 1.2f;
        }
        else if (this.type == 73)
        {
          this.scale = 0.95f;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 6;
          this.lifeMax = 80;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.7f;
          this.value = 200f;
          this.rarity = 1;
        }
        else if (this.type == 74 || this.type == 297 || this.type == 298)
        {
          this.width = 14;
          this.height = 14;
          this.aiStyle = 24;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath1;
          if (this.type == 74)
            this.catchItem = (short) 2015;
          if (this.type == 297)
            this.catchItem = (short) 2016;
          if (this.type == 298)
            this.catchItem = (short) 2017;
          this.npcSlots = 0.4f;
        }
        else if (this.type == 75)
        {
          this.noGravity = true;
          this.width = 20;
          this.height = 20;
          this.aiStyle = 22;
          this.damage = 55;
          this.defense = 20;
          this.lifeMax = 150;
          this.HitSound = SoundID.NPCHit5;
          this.knockBackResist = 0.6f;
          this.DeathSound = SoundID.NPCDeath7;
          this.value = 350f;
        }
        else if (this.type == 77)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 40;
          this.defense = 28;
          this.lifeMax = 260;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.4f;
          this.value = 400f;
        }
        else if (this.type == 78)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 50;
          this.defense = 16;
          this.lifeMax = 130;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.6f;
          this.value = 600f;
        }
        else if (this.type == 79)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 60;
          this.defense = 18;
          this.lifeMax = 180;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.5f;
          this.value = 700f;
        }
        else if (this.type == 80)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 55;
          this.defense = 18;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.55f;
          this.value = 700f;
        }
        else if (this.type == 81)
        {
          this.width = 40;
          this.height = 30;
          this.aiStyle = 1;
          this.damage = 55;
          this.defense = 20;
          this.lifeMax = 170;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.alpha = 55;
          this.value = 400f;
          this.scale = 1.1f;
        }
        else if (this.type == 82)
        {
          this.noGravity = true;
          this.noTileCollide = true;
          this.width = 24;
          this.height = 44;
          this.aiStyle = 22;
          this.damage = 65;
          this.defense = 16;
          this.lifeMax = 160;
          this.HitSound = SoundID.NPCHit54;
          this.DeathSound = SoundID.NPCDeath52;
          this.alpha = 100;
          this.value = 500f;
          this.knockBackResist = 0.7f;
          if (Main.remixWorld)
          {
            this.scale *= 1.2f;
            this.damage = (int) ((double) this.damage * (double) this.scale);
            this.defense = (int) ((double) this.defense * (double) this.scale);
            this.lifeMax = (int) ((double) this.lifeMax * (double) this.scale);
            this.value = (float) (int) ((double) this.value * (double) this.scale);
          }
        }
        else if (this.type == 83)
        {
          this.width = 40;
          this.height = 40;
          this.aiStyle = 23;
          this.damage = 80;
          this.defense = 18;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath6;
          this.value = 1000f;
          this.knockBackResist = 0.4f;
        }
        else if (this.type == 84)
        {
          this.width = 40;
          this.height = 40;
          this.aiStyle = 23;
          this.damage = 80;
          this.defense = 18;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath6;
          this.value = 1000f;
          this.knockBackResist = 0.4f;
        }
        else if (this.type == 85)
        {
          this.width = 24;
          this.height = 24;
          this.aiStyle = 25;
          this.damage = 80;
          this.defense = 30;
          this.lifeMax = 500;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath6;
          this.value = 100000f;
          this.knockBackResist = 0.3f;
          this.rarity = 4;
          if (Main.remixWorld && !Main.hardMode)
          {
            this.damage = 30;
            this.defense = 12;
            this.lifeMax = 300;
            this.value = (float) Item.buyPrice(gold: 2);
          }
        }
        else if (this.type == 86)
        {
          this.width = 46;
          this.height = 42;
          this.aiStyle = 26;
          this.damage = 65;
          this.defense = 30;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit12;
          this.DeathSound = SoundID.NPCDeath18;
          this.knockBackResist = 0.3f;
          this.value = 1000f;
        }
        else if (this.type == 87)
        {
          this.noTileCollide = true;
          this.npcSlots = 5f;
          this.width = 32;
          this.height = 32;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 80;
          this.defense = 10;
          this.lifeMax = 4000;
          this.HitSound = SoundID.NPCHit7;
          this.DeathSound = SoundID.NPCDeath8;
          this.noGravity = true;
          this.knockBackResist = 0.0f;
          this.value = 10000f;
          this.scale = 1f;
        }
        else if (this.type == 88)
        {
          this.noTileCollide = true;
          this.width = 32;
          this.height = 32;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 40;
          this.defense = 20;
          this.lifeMax = 4000;
          this.HitSound = SoundID.NPCHit7;
          this.DeathSound = SoundID.NPCDeath8;
          this.noGravity = true;
          this.knockBackResist = 0.0f;
          this.value = 10000f;
          this.scale = 1f;
          this.dontCountMe = true;
        }
        else if (this.type == 89)
        {
          this.noTileCollide = true;
          this.width = 32;
          this.height = 32;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 40;
          this.defense = 20;
          this.lifeMax = 4000;
          this.HitSound = SoundID.NPCHit7;
          this.DeathSound = SoundID.NPCDeath8;
          this.noGravity = true;
          this.knockBackResist = 0.0f;
          this.value = 2000f;
          this.scale = 1f;
          this.dontCountMe = true;
        }
        else if (this.type == 90)
        {
          this.noTileCollide = true;
          this.width = 32;
          this.height = 32;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 40;
          this.defense = 20;
          this.lifeMax = 4000;
          this.HitSound = SoundID.NPCHit7;
          this.DeathSound = SoundID.NPCDeath8;
          this.noGravity = true;
          this.knockBackResist = 0.0f;
          this.value = 10000f;
          this.scale = 1f;
          this.dontCountMe = true;
        }
        else if (this.type == 91)
        {
          this.noTileCollide = true;
          this.width = 32;
          this.height = 32;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 40;
          this.defense = 20;
          this.lifeMax = 4000;
          this.HitSound = SoundID.NPCHit7;
          this.DeathSound = SoundID.NPCDeath8;
          this.noGravity = true;
          this.knockBackResist = 0.0f;
          this.value = 10000f;
          this.scale = 1f;
          this.dontCountMe = true;
        }
        else if (this.type == 92)
        {
          this.noTileCollide = true;
          this.width = 32;
          this.height = 32;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 40;
          this.defense = 20;
          this.lifeMax = 4000;
          this.HitSound = SoundID.NPCHit7;
          this.DeathSound = SoundID.NPCDeath8;
          this.noGravity = true;
          this.knockBackResist = 0.0f;
          this.value = 10000f;
          this.scale = 1f;
          this.dontCountMe = true;
        }
        else if (this.type == 93)
        {
          this.npcSlots = 0.5f;
          this.width = 26;
          this.height = 20;
          this.aiStyle = 14;
          this.damage = 45;
          this.defense = 16;
          this.lifeMax = 100;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.75f;
          this.DeathSound = SoundID.NPCDeath4;
          this.value = 400f;
        }
        else if (this.type == 94)
        {
          this.npcSlots = 1f;
          this.width = 44;
          this.height = 44;
          this.aiStyle = 5;
          this.damage = 60;
          this.defense = 32;
          this.lifeMax = 230;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.knockBackResist = 0.55f;
          this.value = 500f;
        }
        else if (this.type == 95)
        {
          this.width = 22;
          this.height = 22;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 45;
          this.defense = 10;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.scale = 0.9f;
          this.value = 300f;
        }
        else if (this.type == 96)
        {
          this.width = 22;
          this.height = 22;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 28;
          this.defense = 20;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.scale = 0.9f;
          this.value = 300f;
          this.dontCountMe = true;
        }
        else if (this.type == 97)
        {
          this.width = 22;
          this.height = 22;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 26;
          this.defense = 30;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.scale = 0.9f;
          this.value = 300f;
          this.dontCountMe = true;
        }
        else if (this.type == 98)
        {
          this.npcSlots = 3.5f;
          this.width = 22;
          this.height = 22;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 70;
          this.defense = 36;
          this.lifeMax = 500;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 700f;
        }
        else if (this.type == 99)
        {
          this.width = 22;
          this.height = 22;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 55;
          this.defense = 40;
          this.lifeMax = 500;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 700f;
          this.dontCountMe = true;
        }
        else if (this.type == 100)
        {
          this.width = 22;
          this.height = 22;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 40;
          this.defense = 44;
          this.lifeMax = 500;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 700f;
          this.dontCountMe = true;
        }
        else if (this.type == 101)
        {
          this.noGravity = true;
          this.noTileCollide = true;
          this.behindTiles = true;
          this.width = 30;
          this.height = 30;
          this.aiStyle = 13;
          this.damage = 70;
          this.defense = 30;
          this.lifeMax = 320;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.2f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 600f;
        }
        else if (this.type == 102)
        {
          this.npcSlots = 0.5f;
          this.noGravity = true;
          this.width = 18;
          this.height = 20;
          this.aiStyle = 16;
          this.damage = 80;
          this.defense = 22;
          this.lifeMax = 90;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 500f;
        }
        else if (this.type == 103)
        {
          this.noGravity = true;
          this.width = 26;
          this.height = 26;
          this.aiStyle = 18;
          this.damage = 80;
          this.defense = 30;
          this.lifeMax = 120;
          this.HitSound = SoundID.NPCHit25;
          this.DeathSound = SoundID.NPCDeath28;
          this.value = 800f;
          this.alpha = 20;
        }
        else if (this.type == 104)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 70;
          this.defense = 38;
          this.lifeMax = 350;
          this.HitSound = SoundID.NPCHit6;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.4f;
          this.value = 1000f;
        }
        else if (this.type == 105)
        {
          this.friendly = true;
          this.width = 18;
          this.height = 34;
          this.aiStyle = 0;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
          this.rarity = 1;
        }
        else if (this.type == 106)
        {
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 0;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
          this.rarity = 1;
        }
        else if (this.type == 107)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 108)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 109)
        {
          this.width = 34;
          this.height = 78;
          this.aiStyle = 3;
          this.damage = 60;
          this.defense = 25;
          this.lifeMax = 800;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.2f;
          this.value = 10000f;
          this.rarity = 1;
        }
        else if (this.type == 110)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 45;
          this.defense = 14;
          this.lifeMax = 210;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.55f;
          this.value = 400f;
        }
        else if (this.type == 112)
        {
          this.width = 16;
          this.height = 16;
          this.aiStyle = 9;
          this.damage = 65;
          this.defense = 0;
          this.lifeMax = 1;
          this.HitSound = (LegacySoundStyle) null;
          this.DeathSound = SoundID.NPCDeath9;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.scale = 0.9f;
          this.alpha = 80;
        }
        else if (this.type == 113)
        {
          this.npcSlots = 10f;
          this.width = 100;
          this.height = 100;
          this.aiStyle = 27;
          this.damage = 50;
          this.defense = 12;
          this.lifeMax = 8000;
          this.HitSound = SoundID.NPCHit8;
          this.DeathSound = SoundID.NPCDeath10;
          this.noGravity = true;
          this.noTileCollide = true;
          this.behindTiles = true;
          this.knockBackResist = 0.0f;
          this.scale = 1.2f;
          this.boss = true;
          this.value = 80000f;
        }
        else if (this.type == 114)
        {
          this.width = 100;
          this.height = 100;
          this.aiStyle = 28;
          this.damage = 50;
          this.defense = 0;
          this.lifeMax = 8000;
          this.HitSound = SoundID.NPCHit8;
          this.DeathSound = SoundID.NPCDeath10;
          this.noGravity = true;
          this.noTileCollide = true;
          this.behindTiles = true;
          this.knockBackResist = 0.0f;
          this.scale = 1.2f;
          this.value = 80000f;
        }
        else if (this.type == 115)
        {
          this.width = 30;
          this.height = 30;
          this.aiStyle = 29;
          this.damage = 30;
          this.defense = 10;
          this.lifeMax = 240;
          this.HitSound = SoundID.NPCHit9;
          this.DeathSound = SoundID.NPCDeath11;
          this.noGravity = true;
          this.behindTiles = true;
          this.noTileCollide = true;
          this.knockBackResist = 1.1f;
        }
        else if (this.type == 116)
        {
          this.width = 30;
          this.height = 32;
          this.aiStyle = 2;
          this.damage = 30;
          this.defense = 6;
          this.lifeMax = 80;
          this.HitSound = SoundID.NPCHit9;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath12;
        }
        else if (this.type == 117)
        {
          this.width = 14;
          this.height = 14;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 26;
          this.defense = 2;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit9;
          this.DeathSound = SoundID.NPCDeath12;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
        }
        else if (this.type == 118)
        {
          this.width = 14;
          this.height = 14;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 22;
          this.defense = 6;
          this.lifeMax = 60;
          if (Main.getGoodWorld)
          {
            this.damage += 10;
            this.defense += 14;
            this.lifeMax *= 3;
          }
          this.HitSound = SoundID.NPCHit9;
          this.DeathSound = SoundID.NPCDeath12;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
        }
        else if (this.type == 119)
        {
          this.width = 14;
          this.height = 14;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 18;
          this.defense = 10;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit9;
          this.DeathSound = SoundID.NPCDeath12;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
        }
        else if (this.type == 120)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 40;
          this.defense = 30;
          this.lifeMax = 370;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.4f;
          this.value = 600f;
        }
        else if (this.type == 121)
        {
          this.width = 40;
          this.height = 30;
          this.aiStyle = 14;
          this.damage = 45;
          this.defense = 20;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit1;
          this.alpha = 55;
          this.knockBackResist = 0.8f;
          this.scale = 1.1f;
        }
        else if (this.type == 122)
        {
          this.noGravity = true;
          this.width = 20;
          this.height = 20;
          this.aiStyle = 22;
          this.damage = 60;
          this.defense = 22;
          this.lifeMax = 220;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 600f;
        }
        else if (this.type == 123)
        {
          this.friendly = true;
          this.width = 18;
          this.height = 34;
          this.aiStyle = 0;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
          this.scale = 0.9f;
          this.rarity = 1;
        }
        else if (this.type == 124)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 125)
        {
          this.width = 100;
          this.height = 110;
          this.aiStyle = 30;
          this.defense = 10;
          this.damage = 45;
          this.lifeMax = 20000;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath14;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.SpawnWithHigherTime(30);
          this.boss = true;
          this.value = 120000f;
          this.npcSlots = 5f;
        }
        else if (this.type == 126)
        {
          this.width = 100;
          this.height = 110;
          this.aiStyle = 31;
          this.defense = 10;
          this.damage = 50;
          this.lifeMax = 23000;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath14;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.SpawnWithHigherTime(30);
          this.boss = true;
          this.value = 120000f;
          this.npcSlots = 5f;
        }
        else if (this.type == (int) sbyte.MaxValue)
        {
          this.width = 80;
          this.height = 102;
          this.aiStyle = 32;
          this.damage = 47;
          this.defense = 24;
          this.lifeMax = 28000;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.noGravity = true;
          this.noTileCollide = true;
          this.value = 120000f;
          this.knockBackResist = 0.0f;
          this.boss = true;
          this.npcSlots = 6f;
        }
        else if (this.type == 128)
        {
          this.width = 52;
          this.height = 52;
          this.aiStyle = 35;
          this.damage = 30;
          this.defense = 23;
          this.lifeMax = 7000;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.netAlways = true;
        }
        else if (this.type == 129)
        {
          this.width = 52;
          this.height = 52;
          this.aiStyle = 33;
          this.damage = 56;
          this.defense = 38;
          this.lifeMax = 9000;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.netAlways = true;
        }
        else if (this.type == 130)
        {
          this.width = 52;
          this.height = 52;
          this.aiStyle = 34;
          this.damage = 52;
          this.defense = 34;
          this.lifeMax = 9000;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.netAlways = true;
        }
        else if (this.type == 131)
        {
          this.width = 52;
          this.height = 52;
          this.aiStyle = 36;
          this.damage = 29;
          this.defense = 20;
          this.lifeMax = 6000;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.netAlways = true;
        }
        else if (this.type == 132)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 15;
          this.defense = 5;
          this.lifeMax = 40;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 65f;
        }
        else if (this.type == 133)
        {
          this.width = 30;
          this.height = 32;
          this.aiStyle = 2;
          this.damage = 40;
          this.defense = 20;
          this.lifeMax = 300;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 500f;
        }
        else if (this.type == 134)
        {
          this.npcSlots = 5f;
          this.width = 38;
          this.height = 38;
          this.aiStyle = 37;
          this.defense = 0;
          this.damage = 70;
          this.lifeMax = 80000;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 120000f;
          this.scale = 1.25f;
          this.boss = true;
          this.netAlways = true;
          this.alpha = (int) byte.MaxValue;
        }
        else if (this.type == 135)
        {
          this.npcSlots = 5f;
          this.width = 38;
          this.height = 38;
          this.aiStyle = 37;
          this.damage = 55;
          this.defense = 30;
          this.lifeMax = 80000;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.netAlways = true;
          this.scale = 1.25f;
          this.dontCountMe = true;
          this.alpha = (int) byte.MaxValue;
        }
        else if (this.type == 136)
        {
          this.npcSlots = 5f;
          this.width = 38;
          this.height = 38;
          this.aiStyle = 37;
          this.damage = 40;
          this.defense = 35;
          this.lifeMax = 80000;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.scale = 1.25f;
          this.netAlways = true;
          this.dontCountMe = true;
          this.alpha = (int) byte.MaxValue;
        }
        else if (this.type == 139)
        {
          this.npcSlots = 1f;
          this.width = 30;
          this.height = 30;
          this.aiStyle = 5;
          this.damage = 50;
          this.defense = 20;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.noGravity = true;
          this.knockBackResist = 0.8f;
          this.noTileCollide = true;
        }
        else if (this.type == 137)
        {
          this.width = 26;
          this.height = 20;
          this.aiStyle = 14;
          this.damage = 75;
          this.defense = 30;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.75f;
          this.DeathSound = SoundID.NPCDeath6;
          this.value = 500f;
        }
        else if (this.type == 138)
        {
          this.width = 24;
          this.height = 18;
          this.aiStyle = 1;
          this.damage = 70;
          this.defense = 30;
          this.lifeMax = 180;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.alpha = 100;
          this.value = 400f;
          this.knockBackResist = 0.85f;
          this.scale = 1.05f;
        }
        else if (this.type == 140)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 55;
          this.defense = 28;
          this.lifeMax = 260;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.4f;
          this.value = 400f;
        }
        else if (this.type == 141)
        {
          this.width = 34;
          this.height = 28;
          this.aiStyle = 1;
          this.damage = 50;
          this.defense = 18;
          this.lifeMax = 150;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.alpha = 55;
          this.value = 400f;
          this.scale = 1.1f;
          this.knockBackResist = 0.8f;
        }
        else if (this.type == 142)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 143)
        {
          this.width = 26;
          this.height = 40;
          this.aiStyle = 38;
          this.damage = 50;
          this.defense = 20;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit11;
          this.DeathSound = SoundID.NPCDeath15;
          this.knockBackResist = 0.6f;
          this.value = 400f;
          this.coldDamage = true;
        }
        else if (this.type == 144)
        {
          this.width = 26;
          this.height = 40;
          this.aiStyle = 38;
          this.damage = 65;
          this.defense = 26;
          this.lifeMax = 240;
          this.HitSound = SoundID.NPCHit11;
          this.DeathSound = SoundID.NPCDeath15;
          this.knockBackResist = 0.6f;
          this.value = 400f;
          this.coldDamage = true;
        }
        else if (this.type == 145)
        {
          this.width = 26;
          this.height = 40;
          this.aiStyle = 38;
          this.damage = 55;
          this.defense = 22;
          this.lifeMax = 220;
          this.HitSound = SoundID.NPCHit11;
          this.DeathSound = SoundID.NPCDeath15;
          this.knockBackResist = 0.6f;
          this.value = 400f;
          this.coldDamage = true;
        }
        else if (this.type == 147)
        {
          this.width = 24;
          this.height = 18;
          this.aiStyle = 1;
          this.damage = 8;
          this.defense = 4;
          this.lifeMax = 30;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.alpha = 50;
          this.value = 50f;
          this.coldDamage = true;
        }
        else if (this.type == 148)
        {
          this.width = 16;
          this.height = 34;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 2205;
        }
        else if (this.type == 149)
        {
          this.width = 16;
          this.height = 34;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 2205;
        }
        else if (this.type == 150)
        {
          this.npcSlots = 0.5f;
          this.width = 22;
          this.height = 22;
          this.aiStyle = 14;
          this.damage = 18;
          this.defense = 6;
          this.lifeMax = 30;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath4;
          this.value = 250f;
          this.coldDamage = true;
        }
        else if (this.type == 151)
        {
          this.npcSlots = 0.5f;
          this.width = 22;
          this.height = 22;
          this.aiStyle = 14;
          this.damage = 50;
          this.defense = 16;
          this.lifeMax = 160;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.6f;
          this.DeathSound = SoundID.NPCDeath4;
          this.value = 400f;
          this.scale = 1.15f;
          this.lavaImmune = true;
        }
        else if (this.type == 152)
        {
          this.npcSlots = 0.5f;
          this.width = 38;
          this.height = 34;
          this.aiStyle = 14;
          this.damage = 80;
          this.defense = 24;
          this.lifeMax = 220;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.65f;
          this.DeathSound = SoundID.NPCDeath4;
          this.value = 400f;
        }
        else if (this.type == 153)
        {
          this.npcSlots = 2f;
          this.width = 46;
          this.height = 32;
          this.aiStyle = 39;
          this.damage = 80;
          this.defense = 30;
          this.lifeMax = 470;
          this.HitSound = SoundID.NPCHit24;
          this.knockBackResist = 0.3f;
          this.DeathSound = SoundID.NPCDeath27;
          this.value = 500f;
          this.noGravity = false;
        }
        else if (this.type == 154)
        {
          this.npcSlots = 1.5f;
          this.width = 46;
          this.height = 32;
          this.aiStyle = 39;
          this.damage = 55;
          this.defense = 28;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit24;
          this.knockBackResist = 0.3f;
          this.DeathSound = SoundID.NPCDeath27;
          this.value = 450f;
          this.noGravity = false;
          this.coldDamage = true;
        }
        else if (this.type == 155)
        {
          this.width = 46;
          this.height = 30;
          this.aiStyle = 26;
          this.damage = 65;
          this.defense = 30;
          this.lifeMax = 300;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.3f;
          this.value = 1000f;
        }
        else if (this.type == 156)
        {
          this.npcSlots = 2f;
          this.width = 28;
          this.height = 48;
          this.aiStyle = 14;
          this.damage = 50;
          this.defense = 40;
          this.lifeMax = 600;
          this.HitSound = SoundID.NPCHit21;
          this.knockBackResist = 0.5f;
          this.DeathSound = SoundID.NPCDeath24;
          this.value = 1200f;
          this.lavaImmune = true;
        }
        else if (this.type == 157)
        {
          this.npcSlots = 0.5f;
          this.noGravity = true;
          this.width = 74;
          this.height = 20;
          this.aiStyle = 16;
          this.damage = 75;
          this.defense = 30;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 500f;
        }
        else if (this.type == 160)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 161)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 16;
          this.defense = 8;
          this.lifeMax = 50;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.45f;
          this.value = 80f;
        }
        else if (this.type == 163)
        {
          this.width = 50;
          this.height = 20;
          this.aiStyle = 3;
          this.damage = 90;
          this.defense = 40;
          this.lifeMax = 350;
          this.HitSound = SoundID.NPCHit29;
          this.DeathSound = SoundID.NPCDeath32;
          this.knockBackResist = 0.25f;
          this.value = 500f;
          this.npcSlots = 0.5f;
          this.SpawnWithHigherTime(2);
        }
        else if (this.type == 238)
        {
          this.noGravity = true;
          this.width = 36;
          this.height = 36;
          this.aiStyle = 40;
          this.damage = 100;
          this.defense = 40;
          this.lifeMax = 350;
          this.HitSound = SoundID.NPCHit29;
          this.DeathSound = SoundID.NPCDeath32;
          this.knockBackResist = 0.25f;
          this.value = 500f;
          this.SpawnWithHigherTime(2);
          this.npcSlots = 0.5f;
        }
        else if (this.type == 164)
        {
          this.width = 50;
          this.height = 20;
          this.aiStyle = 3;
          this.damage = 30;
          this.defense = 10;
          this.lifeMax = 80;
          this.HitSound = SoundID.NPCHit29;
          this.DeathSound = SoundID.NPCDeath32;
          this.knockBackResist = 0.25f;
          this.value = 100f;
          this.SpawnWithHigherTime(2);
          this.npcSlots = 0.5f;
        }
        else if (this.type == 165)
        {
          this.noGravity = true;
          this.width = 36;
          this.height = 36;
          this.aiStyle = 40;
          this.damage = 30;
          this.defense = 10;
          this.lifeMax = 80;
          this.HitSound = SoundID.NPCHit29;
          this.DeathSound = SoundID.NPCDeath32;
          this.knockBackResist = 0.25f;
          this.value = 100f;
          this.SpawnWithHigherTime(2);
          this.npcSlots = 0.5f;
        }
        else if (this.type == 167)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 24;
          this.defense = 10;
          this.lifeMax = 70;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 200f;
        }
        else if (this.type == 168)
        {
          this.width = 16;
          this.height = 34;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 4;
          this.lifeMax = 70;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 500f;
        }
        else if (this.type == 169)
        {
          this.noGravity = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 22;
          this.damage = 55;
          this.defense = 20;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit5;
          this.knockBackResist = 0.6f;
          this.DeathSound = SoundID.NPCDeath7;
          this.value = 1500f;
          this.coldDamage = true;
        }
        else if (this.type == 170)
        {
          this.width = 44;
          this.height = 36;
          this.aiStyle = 2;
          this.damage = 70;
          this.defense = 16;
          this.lifeMax = 210;
          this.HitSound = SoundID.NPCHit27;
          this.DeathSound = SoundID.NPCDeath30;
          this.knockBackResist = 0.5f;
          this.value = 2000f;
        }
        else if (this.type == 171)
        {
          this.width = 44;
          this.height = 36;
          this.aiStyle = 2;
          this.damage = 70;
          this.defense = 16;
          this.lifeMax = 210;
          this.HitSound = SoundID.NPCHit27;
          this.DeathSound = SoundID.NPCDeath30;
          this.knockBackResist = 0.5f;
          this.value = 2000f;
        }
        else if (this.type == 172)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 8;
          this.damage = 200;
          this.defense = 30;
          this.lifeMax = 600;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.3f;
          this.value = 5000f;
          this.rarity = 4;
        }
        else if (this.type == 173)
        {
          this.npcSlots = 1f;
          this.width = 30;
          this.height = 30;
          this.aiStyle = 5;
          this.damage = 22;
          this.defense = 8;
          this.lifeMax = 40;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.knockBackResist = 0.5f;
          this.value = 90f;
          if (Main.remixWorld)
          {
            this.scale *= 1.3f;
            this.damage = (int) ((double) this.damage * (double) this.scale);
            this.defense = (int) ((double) this.defense * (double) this.scale);
            this.lifeMax = (int) ((double) this.lifeMax * (double) this.scale);
            this.value = (float) (int) ((double) this.value * (double) this.scale);
          }
        }
        else if (this.type == 174)
        {
          this.npcSlots = 1f;
          this.width = 52;
          this.height = 26;
          this.aiStyle = 41;
          this.damage = 65;
          this.defense = 26;
          this.lifeMax = 220;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.3f;
          this.value = 450f;
        }
        else if (this.type == 175)
        {
          this.noGravity = true;
          this.noTileCollide = true;
          this.width = 30;
          this.height = 30;
          this.aiStyle = 13;
          this.damage = 100;
          this.defense = 30;
          this.lifeMax = 300;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.25f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 650f;
        }
        else if (this.type == 176)
        {
          this.width = 34;
          this.height = 32;
          this.aiStyle = 5;
          this.damage = 70;
          this.defense = 22;
          this.lifeMax = 220;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.5f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 600f;
          this.noGravity = true;
          this.npcSlots = 1.5f;
        }
        else if (this.type == 177)
        {
          this.npcSlots = 1f;
          this.width = 58;
          this.height = 44;
          this.aiStyle = 41;
          this.damage = 80;
          this.defense = 26;
          this.lifeMax = 300;
          this.HitSound = SoundID.NPCHit22;
          this.DeathSound = SoundID.NPCDeath25;
          this.knockBackResist = 0.5f;
          this.value = 500f;
        }
        else if (this.type == 178)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 179)
        {
          this.width = 40;
          this.height = 40;
          this.aiStyle = 23;
          this.damage = 80;
          this.defense = 18;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath6;
          this.value = 1000f;
          this.knockBackResist = 0.4f;
        }
        else if (this.type == 180)
        {
          this.width = 44;
          this.height = 36;
          this.aiStyle = 2;
          this.damage = 70;
          this.defense = 16;
          this.lifeMax = 210;
          this.HitSound = SoundID.NPCHit27;
          this.DeathSound = SoundID.NPCDeath30;
          this.knockBackResist = 0.5f;
          this.value = 2000f;
        }
        else if (this.type == 181)
        {
          this.width = 18;
          this.height = 44;
          this.aiStyle = 3;
          this.damage = 25;
          this.defense = 10;
          this.lifeMax = 70;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.4f;
          this.value = 200f;
          if (Main.remixWorld)
          {
            this.scale *= 1.1f;
            this.damage = (int) ((double) this.damage * (double) this.scale * 1.2);
            this.defense = (int) ((double) this.defense * (double) this.scale * 1.2);
            this.lifeMax = (int) ((double) this.lifeMax * (double) this.scale * 1.2);
            this.value = (float) (int) ((double) this.value * (double) this.scale * 1.2);
          }
        }
        else if (this.type == 182)
        {
          this.noGravity = true;
          this.noTileCollide = true;
          this.width = 24;
          this.height = 62;
          this.aiStyle = 22;
          this.damage = 65;
          this.defense = 18;
          this.lifeMax = 240;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.alpha = 100;
          this.value = 500f;
          this.knockBackResist = 0.7f;
        }
        else if (this.type == 183)
        {
          this.width = 40;
          this.height = 30;
          this.aiStyle = 1;
          this.damage = 60;
          this.defense = 26;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.alpha = 55;
          this.value = 400f;
          this.scale = 1.1f;
        }
        else if (this.type == 184)
        {
          this.width = 24;
          this.height = 18;
          this.aiStyle = 1;
          this.damage = 12;
          this.defense = 8;
          this.lifeMax = 60;
          this.scale = 1.1f;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.alpha = 50;
          this.value = 200f;
          this.coldDamage = true;
        }
        else if (this.type == 185)
        {
          this.width = 28;
          this.height = 28;
          this.aiStyle = 3;
          this.damage = 26;
          this.defense = 12;
          this.lifeMax = 70;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 1.1f;
          this.value = 200f;
          this.coldDamage = true;
        }
        else if (this.type == 186)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 16;
          this.defense = 8;
          this.lifeMax = 50;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.45f;
          this.value = 65f;
        }
        else if (this.type == 187)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 13;
          this.defense = 6;
          this.lifeMax = 40;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.55f;
          this.value = 55f;
        }
        else if (this.type == 188)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 13;
          this.defense = 8;
          this.lifeMax = 45;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.45f;
          this.value = 80f;
        }
        else if (this.type == 189)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 16;
          this.defense = 4;
          this.lifeMax = 45;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.55f;
          this.value = 70f;
        }
        else if (this.type == 190)
        {
          this.width = 30;
          this.height = 32;
          this.aiStyle = 2;
          this.damage = 18;
          this.defense = 4;
          this.lifeMax = 65;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.7f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 75f;
        }
        else if (this.type == 191)
        {
          this.width = 30;
          this.height = 32;
          this.aiStyle = 2;
          this.damage = 16;
          this.defense = 2;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.85f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 75f;
        }
        else if (this.type == 192)
        {
          this.width = 30;
          this.height = 32;
          this.aiStyle = 2;
          this.damage = 18;
          this.defense = 2;
          this.lifeMax = 50;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 75f;
        }
        else if (this.type == 193)
        {
          this.width = 30;
          this.height = 32;
          this.aiStyle = 2;
          this.damage = 20;
          this.defense = 0;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 75f;
        }
        else if (this.type == 194)
        {
          this.width = 30;
          this.height = 32;
          this.aiStyle = 2;
          this.damage = 14;
          this.defense = 4;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 75f;
        }
        else if (this.type == 195)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 42;
          this.damage = 10;
          this.defense = 30;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
          this.rarity = 2;
          this.value = (float) Item.buyPrice(gold: 2);
        }
        else if (this.type == 196)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 35;
          this.defense = 16;
          this.lifeMax = 300;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.4f;
          this.value = (float) Item.buyPrice(gold: 2);
          this.rarity = 2;
        }
        else if (this.type == 197)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 50;
          this.defense = 28;
          this.lifeMax = 280;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.45f;
          this.value = 500f;
        }
        else if (this.type == 198)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 38;
          this.defense = 20;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit26;
          this.DeathSound = SoundID.NPCDeath29;
          this.knockBackResist = 0.4f;
          this.value = 650f;
        }
        else if (this.type == 199)
        {
          this.width = 42;
          this.height = 30;
          this.aiStyle = 3;
          this.damage = 60;
          this.defense = 30;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit26;
          this.DeathSound = SoundID.NPCDeath29;
          this.knockBackResist = 0.0f;
          this.value = 650f;
        }
        else if (this.type == 200)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 12;
          this.defense = 4;
          this.lifeMax = 38;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.6f;
          this.value = 65f;
        }
        else if (this.type == 201)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 12;
          this.lifeMax = 55;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 130f;
        }
        else if (this.type == 202)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 18;
          this.defense = 8;
          this.lifeMax = 65;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 120f;
        }
        else if (this.type == 203)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 22;
          this.defense = 8;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 110f;
        }
        else if (this.type == 204)
        {
          this.width = 24;
          this.height = 18;
          this.aiStyle = 1;
          this.damage = 28;
          this.defense = 8;
          this.lifeMax = 65;
          this.scale = 1.15f;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.alpha = 50;
          this.value = 300f;
        }
        else if (this.type == 205)
        {
          this.width = 40;
          this.height = 40;
          this.aiStyle = 5;
          this.damage = 70;
          this.defense = 28;
          this.lifeMax = 1000;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.4f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 600f;
          this.noGravity = true;
          this.rarity = 2;
        }
        else if (this.type == 206)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 60;
          this.defense = 30;
          this.lifeMax = 280;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
          this.value = 500f;
          this.coldDamage = true;
        }
        else if (this.type == 207)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 208)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 209)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 210)
        {
          this.width = 12;
          this.height = 12;
          this.aiStyle = 5;
          this.damage = 20;
          this.defense = 5;
          this.lifeMax = 20;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.5f;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
        }
        else if (this.type == 211)
        {
          this.width = 8;
          this.height = 8;
          this.aiStyle = 5;
          this.damage = 15;
          this.defense = 2;
          this.lifeMax = 10;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.5f;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
        }
        else if (this.type == 212)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 35;
          this.defense = 17;
          this.lifeMax = 300;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.4f;
          this.value = 700f;
        }
        else if (this.type == 213)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 50;
          this.defense = 22;
          this.lifeMax = 450;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.2f;
          this.value = 1000f;
        }
        else if (this.type == 214)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 30;
          this.defense = 14;
          this.lifeMax = 225;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.3f;
          this.value = 1000f;
        }
        else if (this.type == 215)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 35;
          this.defense = 20;
          this.lifeMax = 350;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.35f;
          this.value = 1500f;
        }
        else if (this.type == 216)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 70;
          this.defense = 30;
          this.lifeMax = 3000;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.0f;
          this.value = 50000f;
          this.rarity = 1;
        }
        else if (this.type == 217)
        {
          this.width = 28;
          this.height = 20;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 10;
          this.lifeMax = 40;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath16;
          this.value = 60f;
          this.rarity = 1;
        }
        else if (this.type == 218)
        {
          this.width = 28;
          this.height = 20;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 10;
          this.lifeMax = 40;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath16;
          this.value = 60f;
          this.rarity = 1;
        }
        else if (this.type == 219)
        {
          this.width = 28;
          this.height = 20;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 10;
          this.lifeMax = 40;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath16;
          this.value = 60f;
          this.rarity = 1;
        }
        else if (this.type == 220)
        {
          this.width = 28;
          this.height = 20;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 10;
          this.lifeMax = 40;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 60f;
          this.rarity = 2;
        }
        else if (this.type == 221)
        {
          this.noGravity = true;
          this.width = 26;
          this.height = 26;
          this.aiStyle = 18;
          this.damage = 20;
          this.defense = 2;
          this.lifeMax = 30;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 100f;
          this.alpha = 20;
          this.rarity = 1;
        }
        else if (this.type == 222)
        {
          this.width = 66;
          this.height = 66;
          this.aiStyle = 43;
          this.damage = 30;
          this.defense = 8;
          this.lifeMax = 3400;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath66;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.SpawnWithHigherTime(30);
          this.boss = true;
          this.value = 50000f;
          this.npcSlots = 7f;
        }
        else if (this.type == 223)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 16;
          this.defense = 8;
          this.lifeMax = 50;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.45f;
          this.value = 70f;
        }
        else if (this.type == 224)
        {
          this.width = 32;
          this.height = 18;
          this.aiStyle = 44;
          this.damage = 9;
          this.defense = 4;
          this.lifeMax = 20;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 300f;
        }
        if (this.type == 225)
        {
          this.width = 38;
          this.height = 26;
          this.aiStyle = 1;
          this.damage = 10;
          this.defense = 5;
          this.lifeMax = 35;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.75f;
          this.value = 200f;
        }
        else if (this.type == 226)
        {
          this.npcSlots = 0.5f;
          this.width = 34;
          this.height = 50;
          this.aiStyle = 14;
          this.damage = 85;
          this.defense = 28;
          this.lifeMax = 260;
          this.HitSound = SoundID.NPCHit23;
          this.knockBackResist = 0.65f;
          this.DeathSound = SoundID.NPCDeath26;
          this.value = 400f;
        }
        else if (this.type == 227)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 228)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 229)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 230)
        {
          this.width = 18;
          this.height = 20;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 261;
        }
        else if (this.type == 231)
        {
          this.width = 34;
          this.height = 32;
          this.aiStyle = 5;
          this.damage = 22;
          this.defense = 16;
          this.lifeMax = 50;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.3f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 200f;
          this.noGravity = true;
        }
        else if (this.type == 232)
        {
          this.width = 34;
          this.height = 32;
          this.aiStyle = 5;
          this.damage = 28;
          this.defense = 12;
          this.lifeMax = 42;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.6f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 200f;
          this.noGravity = true;
        }
        else if (this.type == 233)
        {
          this.width = 34;
          this.height = 32;
          this.aiStyle = 5;
          this.damage = 30;
          this.defense = 14;
          this.lifeMax = 38;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.45f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 200f;
          this.noGravity = true;
        }
        else if (this.type == 234)
        {
          this.width = 34;
          this.height = 32;
          this.aiStyle = 5;
          this.damage = 32;
          this.defense = 6;
          this.lifeMax = 42;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.55f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 200f;
          this.noGravity = true;
        }
        else if (this.type == 235)
        {
          this.width = 34;
          this.height = 32;
          this.aiStyle = 5;
          this.damage = 34;
          this.defense = 4;
          this.lifeMax = 38;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.6f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 200f;
          this.noGravity = true;
        }
        else if (this.type == 236)
        {
          this.width = 50;
          this.height = 20;
          this.aiStyle = 3;
          this.damage = 100;
          this.defense = 28;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.25f;
          this.value = 1000f;
          this.SpawnWithHigherTime(2);
          this.npcSlots = 0.75f;
        }
        else if (this.type == 237)
        {
          this.noGravity = true;
          this.width = 36;
          this.height = 36;
          this.aiStyle = 40;
          this.damage = 100;
          this.defense = 28;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.25f;
          this.value = 1000f;
          this.SpawnWithHigherTime(2);
          this.npcSlots = 0.75f;
        }
        else if (this.type == 239)
        {
          this.width = 50;
          this.height = 20;
          this.aiStyle = 3;
          this.damage = 30;
          this.defense = 8;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit20;
          this.DeathSound = SoundID.NPCDeath23;
          this.knockBackResist = 0.5f;
          this.value = 130f;
          this.SpawnWithHigherTime(2);
        }
        else if (this.type == 240)
        {
          this.noGravity = true;
          this.width = 36;
          this.height = 36;
          this.aiStyle = 40;
          this.damage = 30;
          this.defense = 8;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit20;
          this.DeathSound = SoundID.NPCDeath23;
          this.knockBackResist = 0.5f;
          this.value = 130f;
          this.SpawnWithHigherTime(2);
        }
        else if (this.type == 241)
        {
          this.npcSlots = 0.5f;
          this.noGravity = true;
          this.width = 18;
          this.height = 20;
          this.aiStyle = 16;
          this.damage = 50;
          this.defense = 20;
          this.lifeMax = 150;
          this.HitSound = SoundID.NPCHit13;
          this.DeathSound = SoundID.NPCDeath19;
          this.value = 500f;
        }
        else if (this.type == 242)
        {
          this.noGravity = true;
          this.width = 26;
          this.height = 26;
          this.aiStyle = 18;
          this.damage = 75;
          this.defense = 20;
          this.lifeMax = 150;
          this.HitSound = SoundID.NPCHit13;
          this.DeathSound = SoundID.NPCDeath19;
          this.value = 800f;
          this.alpha = 20;
        }
        else if (this.type == 243)
        {
          this.width = 30;
          this.height = 114;
          this.aiStyle = 3;
          this.damage = 60;
          this.defense = 32;
          this.lifeMax = 4000;
          this.HitSound = SoundID.NPCHit5;
          this.DeathSound = SoundID.NPCDeath7;
          this.knockBackResist = 0.05f;
          this.value = (float) Item.buyPrice(gold: 1, silver: 50);
          this.coldDamage = true;
          this.rarity = 2;
        }
        else if (this.type == 244)
        {
          this.width = 60;
          this.height = 42;
          this.aiStyle = 1;
          this.damage = 85;
          this.defense = 26;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.alpha = 175;
          this.value = (float) Item.buyPrice(silver: 20);
          this.knockBackResist = 0.3f;
          this.rarity = 1;
        }
        else if (this.type == 245)
        {
          this.width = 140;
          this.height = 140;
          this.aiStyle = 45;
          this.damage = 72;
          this.defense = 26;
          this.lifeMax = 15000;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.knockBackResist = 0.0f;
          this.value = (float) Item.buyPrice(gold: 15);
          this.alpha = (int) byte.MaxValue;
          this.boss = true;
          this.npcSlots = 5f;
        }
        else if (this.type == 246)
        {
          this.noGravity = true;
          this.width = 70;
          this.height = 70;
          this.aiStyle = 46;
          this.damage = 64;
          this.defense = 20;
          this.lifeMax = 25000;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = (LegacySoundStyle) null;
          this.knockBackResist = 0.0f;
          this.alpha = (int) byte.MaxValue;
        }
        else if (this.type == 247 || this.type == 248)
        {
          this.noGravity = true;
          this.width = 40;
          this.height = 30;
          this.aiStyle = 47;
          this.damage = 59;
          this.defense = 28;
          this.lifeMax = 10000;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.alpha = (int) byte.MaxValue;
          this.knockBackResist = 0.0f;
        }
        else if (this.type == 249)
        {
          this.noGravity = true;
          this.width = 70;
          this.height = 70;
          this.aiStyle = 48;
          this.damage = 80;
          this.defense = 32;
          this.lifeMax = 16000;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.knockBackResist = 0.0f;
          this.dontTakeDamage = true;
        }
        else if (this.type == 250)
        {
          this.width = 34;
          this.height = 26;
          this.aiStyle = 49;
          this.damage = 50;
          this.defense = 24;
          this.lifeMax = 300;
          this.HitSound = SoundID.NPCHit30;
          this.DeathSound = SoundID.NPCDeath33;
          this.knockBackResist = 0.3f;
          this.value = 300f;
        }
        else if (this.type == 251)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 50;
          this.defense = 30;
          this.lifeMax = 1000;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.3f;
          this.value = (float) Item.buyPrice(silver: 50);
          this.rarity = 2;
        }
        else if (this.type == 252)
        {
          this.noGravity = true;
          this.npcSlots = 0.5f;
          this.width = 32;
          this.height = 32;
          this.aiStyle = 5;
          this.damage = 80;
          this.defense = 12;
          this.lifeMax = 100;
          this.HitSound = SoundID.NPCHit46;
          this.knockBackResist = 0.7f;
          this.DeathSound = SoundID.NPCDeath48;
          this.value = 500f;
        }
        else if (this.type == 254)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 40;
          this.defense = 10;
          this.lifeMax = 180;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.4f;
          this.value = 1000f;
        }
        else if (this.type == (int) byte.MaxValue)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 38;
          this.defense = 16;
          this.lifeMax = 220;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.3f;
          this.value = 1200f;
        }
        else if (this.type == 256)
        {
          this.noGravity = true;
          this.width = 26;
          this.height = 26;
          this.aiStyle = 18;
          this.damage = 90;
          this.defense = 20;
          this.lifeMax = 140;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.value = 1200f;
          this.alpha = 20;
          this.npcSlots = 0.3f;
        }
        else if (this.type == 257)
        {
          this.width = 44;
          this.height = 34;
          this.aiStyle = 3;
          this.damage = 38;
          this.defense = 24;
          this.lifeMax = 230;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.3f;
          this.value = 1300f;
          this.npcSlots = 0.3f;
        }
        else if (this.type == 258)
        {
          this.width = 30;
          this.height = 24;
          this.aiStyle = 3;
          this.damage = 60;
          this.defense = 16;
          this.lifeMax = 220;
          this.HitSound = SoundID.NPCHit45;
          this.DeathSound = SoundID.NPCDeath47;
          this.knockBackResist = 0.3f;
          this.value = 1500f;
          this.npcSlots = 0.3f;
        }
        else if (this.type == 259)
        {
          this.noGravity = true;
          this.noTileCollide = true;
          this.width = 20;
          this.height = 20;
          this.aiStyle = 13;
          this.damage = 24;
          this.defense = 4;
          this.lifeMax = 90;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.0f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 350f;
          this.npcSlots = 0.3f;
        }
        else if (this.type == 260)
        {
          this.noGravity = true;
          this.noTileCollide = true;
          this.width = 36;
          this.height = 36;
          this.aiStyle = 13;
          this.damage = 70;
          this.defense = 20;
          this.lifeMax = 300;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.0f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 1250f;
          this.npcSlots = 0.3f;
        }
        else if (this.type == 261)
        {
          this.width = 12;
          this.height = 12;
          this.aiStyle = 50;
          this.damage = 80;
          this.defense = 0;
          this.lifeMax = 1;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.npcSlots = 0.0f;
        }
        else if (this.type == 262)
        {
          this.noTileCollide = true;
          this.width = 86;
          this.height = 86;
          this.aiStyle = 51;
          this.damage = 50;
          this.defense = 14;
          this.lifeMax = 30000;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.0f;
          this.value = (float) Item.buyPrice(gold: 15);
          this.noGravity = true;
          this.boss = true;
          this.npcSlots = 16f;
        }
        else if (this.type == 263)
        {
          this.noTileCollide = true;
          this.noGravity = true;
          this.width = 40;
          this.height = 40;
          this.aiStyle = 52;
          this.damage = 60;
          this.defense = 24;
          this.lifeMax = 4000;
          this.dontTakeDamage = true;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
        }
        else if (this.type == 264)
        {
          this.width = 24;
          this.height = 24;
          this.aiStyle = 53;
          this.damage = 60;
          this.defense = 20;
          this.lifeMax = 1000;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
        }
        else if (this.type == 265)
        {
          this.width = 18;
          this.height = 18;
          this.aiStyle = 50;
          this.damage = 70;
          this.defense = 0;
          this.lifeMax = 1;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.npcSlots = 0.0f;
        }
        else if (this.type == 266)
        {
          this.dontTakeDamage = true;
          this.width = 160;
          this.height = 110;
          this.aiStyle = 54;
          this.damage = 30;
          this.defense = 14;
          this.lifeMax = 1250;
          this.HitSound = SoundID.NPCHit9;
          this.DeathSound = SoundID.NPCDeath11;
          this.knockBackResist = 0.45f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.SpawnWithHigherTime(30);
          this.boss = true;
          this.value = 50000f;
          this.npcSlots = 6f;
        }
        else if (this.type == 267)
        {
          this.width = 30;
          this.height = 30;
          this.aiStyle = 55;
          this.damage = 20;
          this.defense = 10;
          this.lifeMax = 100;
          this.HitSound = SoundID.NPCHit9;
          this.DeathSound = SoundID.NPCDeath11;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.8f;
        }
        else if (this.type == 268)
        {
          this.noGravity = true;
          this.width = 28;
          this.height = 56;
          this.aiStyle = 22;
          this.damage = 55;
          this.defense = 20;
          this.lifeMax = 340;
          this.HitSound = SoundID.NPCHit13;
          this.DeathSound = SoundID.NPCDeath19;
          this.knockBackResist = 0.6f;
          this.value = 450f;
        }
        else if (this.type == 269)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 70;
          this.defense = 34;
          this.lifeMax = 550;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.3f;
          this.value = 1000f;
        }
        else if (this.type == 270)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 55;
          this.defense = 50;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.2f;
          this.value = 1000f;
        }
        else if (this.type == 271)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 70;
          this.defense = 40;
          this.lifeMax = 450;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.25f;
          this.value = 1000f;
        }
        else if (this.type == 272)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 75;
          this.defense = 28;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.35f;
          this.value = 1000f;
        }
        else if (this.type == 273)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 45;
          this.defense = 50;
          this.lifeMax = 500;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.15f;
          this.value = 1000f;
        }
        else if (this.type == 274)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 65;
          this.defense = 34;
          this.lifeMax = 350;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.4f;
          this.value = 1000f;
        }
        else if (this.type == 275)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 45;
          this.defense = 50;
          this.lifeMax = 550;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.15f;
          this.value = 1000f;
        }
        else if (this.type == 276)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 85;
          this.defense = 54;
          this.lifeMax = 500;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.2f;
          this.value = 1000f;
        }
        else if (this.type == 277)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 70;
          this.defense = 32;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.4f;
          this.value = 1000f;
        }
        else if (this.type == 278)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 65;
          this.defense = 48;
          this.lifeMax = 450;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.3f;
          this.value = 1000f;
        }
        else if (this.type == 279)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 40;
          this.defense = 54;
          this.lifeMax = 500;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.2f;
          this.value = 1000f;
        }
        else if (this.type == 280)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 75;
          this.defense = 34;
          this.lifeMax = 500;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.4f;
          this.value = 1000f;
        }
        else if (this.type == 281)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 8;
          this.damage = 40;
          this.defense = 20;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.6f;
          this.value = 1500f;
          this.npcSlots = 2f;
        }
        else if (this.type == 282)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 8;
          this.damage = 35;
          this.defense = 28;
          this.lifeMax = 450;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 1500f;
          this.npcSlots = 2f;
        }
        else if (this.type == 283)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 8;
          this.damage = 50;
          this.defense = 18;
          this.lifeMax = 300;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.55f;
          this.value = 1500f;
          this.npcSlots = 2f;
        }
        else if (this.type == 284)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 8;
          this.damage = 35;
          this.defense = 24;
          this.lifeMax = 450;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 1500f;
          this.npcSlots = 2f;
        }
        else if (this.type == 285)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 8;
          this.damage = 50;
          this.defense = 12;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.7f;
          this.value = 1500f;
          this.npcSlots = 2f;
        }
        else if (this.type == 286)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 8;
          this.damage = 60;
          this.defense = 10;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.65f;
          this.value = 1500f;
          this.npcSlots = 2f;
        }
        else if (this.type == 287)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 90;
          this.defense = 42;
          this.lifeMax = 1000;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.3f;
          this.value = 2000f;
          this.rarity = 1;
        }
        else if (this.type == 288)
        {
          this.width = 20;
          this.height = 20;
          this.aiStyle = 56;
          this.damage = 70;
          this.defense = 30;
          this.lifeMax = 200;
          this.knockBackResist = 0.2f;
          this.HitSound = SoundID.NPCHit36;
          this.DeathSound = SoundID.NPCDeath39;
          this.value = 500f;
          this.noTileCollide = true;
          this.noGravity = true;
        }
        else if (this.type == 289)
        {
          this.width = 44;
          this.height = 44;
          this.aiStyle = 10;
          this.damage = 60;
          this.defense = 20;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.noGravity = true;
          this.noTileCollide = true;
          this.value = 150f;
          this.knockBackResist = 0.2f;
          this.npcSlots = 0.75f;
        }
        else if (this.type == 290)
        {
          this.width = 34;
          this.height = 62;
          this.aiStyle = 3;
          this.damage = 100;
          this.defense = 50;
          this.lifeMax = 5000;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.0f;
          this.value = 50000f;
          this.rarity = 2;
        }
        else if (this.type == 291)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 60;
          this.defense = 28;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.4f;
          this.value = 1000f;
          this.rarity = 1;
        }
        else if (this.type == 292)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 60;
          this.defense = 28;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.4f;
          this.value = 1000f;
          this.rarity = 1;
        }
        else if (this.type == 293)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 60;
          this.defense = 28;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.4f;
          this.value = 1000f;
          this.rarity = 1;
        }
        else if (this.type == 294)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 34;
          this.defense = 6;
          this.lifeMax = 70;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.9f;
          this.value = 130f;
        }
        else if (this.type == 295)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 28;
          this.defense = 12;
          this.lifeMax = 70;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.7f;
          this.value = 130f;
        }
        else if (this.type == 296)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 24;
          this.defense = 14;
          this.lifeMax = 120;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.6f;
          this.value = 130f;
        }
        else if (this.type == 299)
        {
          this.width = 18;
          this.height = 20;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 2018;
        }
        else if (this.type == 300)
        {
          this.width = 14;
          this.height = 12;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath4;
          this.npcSlots = 0.25f;
          this.catchItem = (short) 2003;
        }
        else if (this.type == 301)
        {
          this.width = 36;
          this.height = 26;
          this.aiStyle = 17;
          this.damage = 12;
          this.defense = 2;
          this.lifeMax = 35;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.85f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 50f;
        }
        if (this.type == 302)
        {
          this.width = 24;
          this.height = 18;
          this.aiStyle = 1;
          this.damage = 7;
          this.defense = 2;
          this.lifeMax = 25;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 25f;
        }
        else if (this.type == 304)
        {
          this.width = 34;
          this.height = 28;
          this.aiStyle = 1;
          this.damage = 80;
          this.defense = 20;
          this.lifeMax = 175;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 500f;
          this.scale = 1.1f;
          this.knockBackResist = 0.5f;
          this.npcSlots = 0.3f;
        }
        else if (this.type >= 305 && this.type <= 314)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.value = 1200f;
          this.npcSlots = 0.5f;
          if (this.type == 305 || this.type == 310)
          {
            this.damage = 60;
            this.defense = 18;
            this.lifeMax = 500;
            this.knockBackResist = 0.4f;
          }
          else if (this.type == 306 || this.type == 311)
          {
            this.damage = 52;
            this.defense = 14;
            this.lifeMax = 400;
            this.knockBackResist = 0.2f;
            this.scale = 1.05f;
          }
          else if (this.type == 307 || this.type == 312)
          {
            this.damage = 78;
            this.defense = 16;
            this.lifeMax = 600;
            this.knockBackResist = 0.25f;
            this.scale = 0.9f;
          }
          else if (this.type == 308 || this.type == 313)
          {
            this.damage = 66;
            this.defense = 14;
            this.lifeMax = 650;
            this.knockBackResist = 0.35f;
            this.scale = 0.95f;
          }
          else if (this.type == 309 || this.type == 314)
          {
            this.damage = 52;
            this.defense = 26;
            this.lifeMax = 450;
            this.knockBackResist = 0.5f;
            this.scale = 1.1f;
          }
        }
        else if (this.type == 315)
        {
          this.width = 74;
          this.height = 70;
          this.aiStyle = 26;
          this.damage = 130;
          this.defense = 40;
          this.lifeMax = 5000;
          this.HitSound = SoundID.NPCHit12;
          this.DeathSound = SoundID.NPCDeath18;
          this.knockBackResist = 0.0f;
          this.value = 10000f;
        }
        else if (this.type == 316)
        {
          this.noGravity = true;
          this.noTileCollide = true;
          this.width = 24;
          this.height = 44;
          this.aiStyle = 22;
          this.damage = 15;
          this.defense = 4;
          this.lifeMax = 50;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.alpha = 100;
          this.value = 90f;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 317)
        {
          this.width = 30;
          this.height = 32;
          this.aiStyle = 2;
          this.damage = 16;
          this.defense = 6;
          this.lifeMax = 75;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.7f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 100f;
        }
        else if (this.type == 318)
        {
          this.width = 30;
          this.height = 32;
          this.aiStyle = 2;
          this.damage = 20;
          this.defense = 4;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.65f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 100f;
        }
        else if (this.type == 319)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 6;
          this.lifeMax = 40;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.6f;
          this.value = 85f;
          this.scale = 0.9f;
        }
        else if (this.type == 320)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 15;
          this.defense = 8;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 105f;
          this.scale = 1.05f;
        }
        else if (this.type == 321)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 14;
          this.lifeMax = 34;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.3f;
          this.value = 120f;
          this.scale = 1.1f;
        }
        else if (this.type == 322)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 23;
          this.defense = 0;
          this.lifeMax = 115;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.65f;
          this.value = 130f;
        }
        else if (this.type == 323)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 18;
          this.defense = 10;
          this.lifeMax = 65;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 120f;
        }
        else if (this.type == 324)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 22;
          this.defense = 10;
          this.lifeMax = 70;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.4f;
          this.value = 130f;
          this.scale = 1.05f;
        }
        else if (this.type == 325)
        {
          this.width = 164;
          this.height = 154;
          this.aiStyle = 57;
          this.damage = 120;
          this.defense = 34;
          this.lifeMax = 14000;
          this.HitSound = SoundID.NPCHit7;
          this.DeathSound = SoundID.NPCDeath5;
          this.knockBackResist = 0.0f;
          this.value = 10000f;
          this.npcSlots = 3f;
        }
        else if (this.type == 326)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 100;
          this.defense = 32;
          this.lifeMax = 1200;
          this.HitSound = SoundID.NPCHit7;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.2f;
          this.value = 2000f;
        }
        else if (this.type == 327)
        {
          this.width = 100;
          this.height = 100;
          this.aiStyle = 58;
          this.damage = 50;
          this.defense = 40;
          this.lifeMax = 26000;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.value = 50000f;
          this.knockBackResist = 0.0f;
          this.npcSlots = 5f;
        }
        else if (this.type == 328)
        {
          this.width = 80;
          this.height = 80;
          this.aiStyle = 59;
          this.damage = 65;
          this.defense = 14;
          this.lifeMax = 5000;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.dontTakeDamage = true;
          this.npcSlots = 0.0f;
          this.dontCountMe = true;
        }
        else if (this.type == 329)
        {
          this.width = 46;
          this.height = 30;
          this.aiStyle = 26;
          this.damage = 80;
          this.defense = 38;
          this.lifeMax = 1800;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath5;
          this.knockBackResist = 0.3f;
          this.value = 3000f;
        }
        else if (this.type == 330)
        {
          this.noGravity = true;
          this.noTileCollide = true;
          this.width = 24;
          this.height = 44;
          this.aiStyle = 22;
          this.damage = 90;
          this.defense = 44;
          this.lifeMax = 1250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.alpha = 100;
          this.value = 4500f;
          this.knockBackResist = 0.4f;
        }
        else if (this.type == 331)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 14;
          this.defense = 6;
          this.lifeMax = 45;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 60f;
        }
        else if (this.type == 332)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 14;
          this.defense = 6;
          this.lifeMax = 45;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 60f;
        }
        if (this.type == 333)
        {
          this.width = 24;
          this.height = 18;
          this.aiStyle = 1;
          this.damage = 7;
          this.defense = 2;
          this.lifeMax = 25;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 25f;
        }
        if (this.type == 334)
        {
          this.width = 24;
          this.height = 18;
          this.aiStyle = 1;
          this.damage = 6;
          this.defense = 2;
          this.lifeMax = 23;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.scale = 0.9f;
          this.value = 25f;
        }
        if (this.type == 335)
        {
          this.width = 24;
          this.height = 18;
          this.aiStyle = 1;
          this.damage = 8;
          this.defense = 3;
          this.lifeMax = 29;
          this.scale = 1.05f;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 25f;
        }
        if (this.type == 336)
        {
          this.width = 24;
          this.height = 18;
          this.aiStyle = 1;
          this.damage = 5;
          this.defense = 1;
          this.lifeMax = 22;
          this.scale = 0.85f;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 25f;
        }
        else if (this.type >= 338 && this.type <= 340)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 1200f;
          this.npcSlots = 0.5f;
          if (this.type == 338)
          {
            this.damage = 65;
            this.defense = 18;
            this.lifeMax = 600;
            this.knockBackResist = 0.4f;
          }
          else if (this.type == 339)
          {
            this.damage = 52;
            this.defense = 24;
            this.lifeMax = 700;
            this.knockBackResist = 0.2f;
            this.scale = 1.05f;
          }
          else if (this.type == 340)
          {
            this.damage = 78;
            this.defense = 14;
            this.lifeMax = 500;
            this.knockBackResist = 0.25f;
            this.scale = 0.9f;
          }
        }
        else if (this.type == 341)
        {
          this.width = 24;
          this.height = 24;
          this.aiStyle = 25;
          this.damage = 100;
          this.defense = 32;
          this.lifeMax = 900;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath6;
          this.value = (float) Item.buyPrice(silver: 20);
          this.knockBackResist = 0.25f;
        }
        else if (this.type == 342)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 90;
          this.defense = 26;
          this.lifeMax = 750;
          this.HitSound = SoundID.NPCHit7;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.2f;
          this.value = 1800f;
        }
        else if (this.type == 343)
        {
          this.width = 38;
          this.height = 78;
          this.aiStyle = 3;
          this.damage = 140;
          this.defense = 50;
          this.lifeMax = 3500;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.0f;
          this.value = 3000f;
          this.npcSlots = 2f;
          this.coldDamage = true;
        }
        else if (this.type == 344)
        {
          this.width = 172;
          this.height = 130;
          this.aiStyle = 57;
          this.damage = 110;
          this.defense = 38;
          this.lifeMax = 13000;
          this.HitSound = SoundID.NPCHit7;
          this.DeathSound = SoundID.NPCDeath5;
          this.knockBackResist = 0.0f;
          this.value = 10000f;
          this.npcSlots = 3f;
        }
        else if (this.type == 345)
        {
          this.width = 130;
          this.height = 140;
          this.aiStyle = 60;
          this.damage = 120;
          this.defense = 38;
          this.lifeMax = 34000;
          this.HitSound = SoundID.NPCHit7;
          this.DeathSound = SoundID.NPCDeath5;
          this.knockBackResist = 0.0f;
          this.value = 50000f;
          this.noTileCollide = true;
          this.noGravity = true;
          this.npcSlots = 5f;
          this.coldDamage = true;
        }
        else if (this.type == 346)
        {
          this.width = 112;
          this.height = 140;
          this.aiStyle = 61;
          this.damage = 120;
          this.defense = 56;
          this.lifeMax = 18000;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.knockBackResist = 0.0f;
          this.value = 10000f;
          this.npcSlots = 4f;
        }
        else if (this.type == 347)
        {
          this.width = 50;
          this.height = 50;
          this.aiStyle = 62;
          this.damage = 60;
          this.defense = 28;
          this.lifeMax = 1200;
          this.HitSound = SoundID.NPCHit4;
          this.knockBackResist = 0.4f;
          this.DeathSound = SoundID.NPCDeath14;
          this.value = 1000f;
          this.noTileCollide = true;
          this.noGravity = true;
          this.npcSlots = 1.5f;
        }
        else if (this.type == 348)
        {
          this.width = 28;
          this.height = 76;
          this.aiStyle = 3;
          this.damage = 80;
          this.defense = 26;
          this.lifeMax = 1800;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.4f;
          this.value = 1500f;
          this.npcSlots = 1.5f;
        }
        else if (this.type == 349)
        {
          this.width = 28;
          this.height = 76;
          this.aiStyle = 3;
          this.damage = 100;
          this.defense = 42;
          this.lifeMax = 1800;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.1f;
          this.value = 1500f;
          this.npcSlots = 1.5f;
        }
        else if (this.type == 350)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 70;
          this.defense = 30;
          this.lifeMax = 900;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.45f;
          this.value = 900f;
        }
        else if (this.type == 351)
        {
          this.width = 18;
          this.height = 90;
          this.aiStyle = 3;
          this.damage = 100;
          this.defense = 40;
          this.lifeMax = 2500;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.1f;
          this.value = 3000f;
          this.npcSlots = 1.75f;
        }
        else if (this.type == 352)
        {
          this.width = 54;
          this.height = 54;
          this.aiStyle = 63;
          this.damage = 75;
          this.defense = 8;
          this.lifeMax = 450;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.value = 500f;
          this.knockBackResist = 0.4f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.npcSlots = 2f;
          this.coldDamage = true;
        }
        else if (this.type == 353)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 354)
        {
          this.friendly = true;
          this.width = 18;
          this.height = 34;
          this.aiStyle = 0;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
          this.scale = 0.9f;
          this.rarity = 1;
        }
        else if (this.type == 355)
        {
          this.width = 10;
          this.height = 10;
          this.aiStyle = 64;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.2f;
          this.noGravity = true;
          this.catchItem = (short) 1992;
        }
        else if (this.type == 356)
        {
          this.width = 10;
          this.height = 10;
          this.aiStyle = 65;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.25f;
          this.noGravity = true;
          this.catchItem = (short) 1994;
        }
        else if (this.type == 357)
        {
          this.width = 10;
          this.height = 4;
          this.aiStyle = 66;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.1f;
          this.catchItem = (short) 2002;
          this.friendly = true;
        }
        else if (this.type == 358)
        {
          this.width = 12;
          this.height = 12;
          this.aiStyle = 64;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.2f;
          this.noGravity = true;
          this.catchItem = (short) 2004;
        }
        else if (this.type == 359)
        {
          this.width = 12;
          this.height = 12;
          this.aiStyle = 67;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.5f;
          this.noGravity = true;
          this.catchItem = (short) 2006;
        }
        else if (this.type == 360)
        {
          this.width = 14;
          this.height = 14;
          this.aiStyle = 67;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.5f;
          this.noGravity = true;
          this.catchItem = (short) 2007;
        }
        else if (this.type == 361)
        {
          this.width = 12;
          this.height = 10;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 2121;
        }
        else if (this.type == 362)
        {
          this.width = 22;
          this.height = 26;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 2122;
        }
        else if (this.type == 363)
        {
          this.width = 28;
          this.height = 22;
          this.aiStyle = 68;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 2122;
        }
        else if (this.type == 364)
        {
          this.width = 22;
          this.height = 26;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 2123;
        }
        else if (this.type == 365)
        {
          this.width = 28;
          this.height = 22;
          this.aiStyle = 68;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 2123;
        }
        else if (this.type == 366 || this.type == 367)
        {
          this.width = 26;
          this.height = 18;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) (2156 + this.type - 366);
        }
        else if (this.type == 368)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 369)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 370)
        {
          this.width = 150;
          this.height = 100;
          this.aiStyle = 69;
          this.damage = 100;
          this.defense = 50;
          this.lifeMax = 60000;
          this.knockBackResist = 0.0f;
          this.noTileCollide = true;
          this.noGravity = true;
          this.npcSlots = 10f;
          this.HitSound = SoundID.NPCHit14;
          this.DeathSound = SoundID.NPCDeath20;
          this.value = 250000f;
          this.boss = true;
          this.netAlways = true;
          this.SpawnWithHigherTime(30);
        }
        else if (this.type == 371)
        {
          this.width = 36;
          this.height = 36;
          this.aiStyle = 70;
          this.damage = 100;
          this.defense = 0;
          this.lifeMax = 1;
          this.HitSound = SoundID.NPCHit3;
          this.DeathSound = SoundID.NPCDeath3;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.alpha = (int) byte.MaxValue;
        }
        else if (this.type == 372)
        {
          this.noGravity = true;
          this.width = 120;
          this.height = 24;
          this.aiStyle = 71;
          this.damage = 100;
          this.defense = 100;
          this.lifeMax = 100;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.0f;
          this.alpha = (int) byte.MaxValue;
        }
        else if (this.type == 373)
        {
          this.noGravity = true;
          this.width = 100;
          this.height = 24;
          this.aiStyle = 71;
          this.damage = 120;
          this.defense = 100;
          this.lifeMax = 100;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.0f;
          this.alpha = (int) byte.MaxValue;
        }
        else if (this.type == 374)
        {
          this.width = 20;
          this.height = 10;
          this.aiStyle = 66;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.15f;
          this.catchItem = (short) 2673;
          this.rarity = 4;
          this.dontTakeDamageFromHostiles = true;
        }
        else if (this.type == 375)
        {
          this.width = 10;
          this.height = 10;
          this.aiStyle = 6;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.npcSlots = 0.15f;
          this.catchItem = (short) 2673;
          this.rarity = 4;
          this.dontTakeDamageFromHostiles = true;
        }
        else if (this.type == 376)
        {
          this.friendly = true;
          this.width = 34;
          this.height = 8;
          this.aiStyle = 0;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.5f;
          this.scale = 0.9f;
          this.rarity = 1;
        }
        else if (this.type == 377)
        {
          this.width = 14;
          this.height = 10;
          this.aiStyle = 1;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.friendly = true;
          this.catchItem = (short) 2740;
          this.npcSlots = 0.1f;
        }
        else if (this.type == 378)
        {
          this.npcSlots = 1f;
          this.width = 20;
          this.height = 26;
          this.aiStyle = 41;
          this.damage = 120;
          this.defense = 30;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
          this.value = 450f;
        }
        else if (this.type >= 379 && this.type <= 380)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 45;
          this.defense = 14;
          this.lifeMax = 210;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.55f;
          this.value = 1000f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.netAlways = true;
          this.chaseable = false;
        }
        else if (this.type >= 381 && this.type <= 382)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 50;
          this.defense = 25;
          this.lifeMax = 350;
          this.HitSound = SoundID.NPCHit39;
          this.DeathSound = SoundID.NPCDeath57;
          this.knockBackResist = 0.35f;
          this.value = 1000f;
        }
        else if (this.type == 383)
        {
          this.lifeMax = 300;
          this.defense = 50;
          this.damage = 75;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.HitSound = SoundID.NPCHit39;
          this.DeathSound = SoundID.NPCDeath57;
          this.value = 1200f;
          this.knockBackResist = 0.25f;
        }
        else if (this.type == 384)
        {
          this.lifeMax = 1000;
          this.width = 18;
          this.defense = 20;
          this.height = 40;
          this.aiStyle = 72;
          this.HitSound = SoundID.NPCHit43;
          this.DeathSound = SoundID.NPCDeath45;
          this.npcSlots = 0.0f;
          this.noTileCollide = true;
          this.canGhostHeal = false;
        }
        else if (this.type == 385)
        {
          this.lifeMax = 750;
          this.defense = 30;
          this.damage = 80;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.HitSound = SoundID.NPCHit39;
          this.DeathSound = SoundID.NPCDeath57;
          this.value = 600f;
          this.knockBackResist = 0.0f;
          this.npcSlots = 0.75f;
        }
        else if (this.type == 386)
        {
          this.lifeMax = 400;
          this.defense = 34;
          this.damage = 40;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.HitSound = SoundID.NPCHit39;
          this.DeathSound = SoundID.NPCDeath57;
          this.value = 1200f;
          this.knockBackResist = 0.4f;
        }
        else if (this.type == 387)
        {
          this.width = 20;
          this.height = 50;
          this.aiStyle = 73;
          this.damage = 10;
          this.defense = 40;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit53;
          this.DeathSound = SoundID.NPCDeath56;
          this.knockBackResist = 0.0f;
          this.canGhostHeal = false;
        }
        else if (this.type == 388)
        {
          this.width = 40;
          this.height = 30;
          this.aiStyle = 74;
          this.damage = 60;
          this.defense = 16;
          this.lifeMax = 300;
          this.HitSound = SoundID.NPCHit42;
          this.knockBackResist = 0.4f;
          this.DeathSound = SoundID.NPCDeath44;
          this.value = 1000f;
          this.noTileCollide = true;
          this.noGravity = true;
          this.npcSlots = 1.5f;
          this.canGhostHeal = false;
        }
        else if (this.type == 389)
        {
          this.lifeMax = 600;
          this.defense = 38;
          this.damage = 75;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.HitSound = SoundID.NPCHit39;
          this.DeathSound = SoundID.NPCDeath57;
          this.value = 1200f;
          this.npcSlots = 0.5f;
          this.knockBackResist = 0.3f;
        }
        else if (this.type == 390)
        {
          this.damage = 65;
          this.defense = 30;
          this.lifeMax = 350;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 75;
          this.HitSound = SoundID.NPCHit39;
          this.DeathSound = SoundID.NPCDeath57;
          this.value = 1200f;
          this.npcSlots = 0.5f;
        }
        else if (this.type == 391)
        {
          this.lifeMax = 600;
          this.defense = 30;
          this.damage = 85;
          this.width = 60;
          this.height = 40;
          this.aiStyle = 3;
          this.HitSound = SoundID.NPCHit51;
          this.DeathSound = SoundID.NPCDeath54;
          this.value = 1200f;
          this.npcSlots = 0.5f;
          this.knockBackResist = 0.1f;
        }
        else if (this.type == 392)
        {
          this.lifeMax = 100;
          this.defense = 100;
          this.damage = 50;
          this.width = 150;
          this.height = 80;
          this.aiStyle = 75;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.dontTakeDamage = true;
          this.netAlways = true;
        }
        else if (this.type == 393)
        {
          this.lifeMax = 5000;
          this.defense = 20;
          this.damage = 60;
          this.width = 40;
          this.height = 16;
          this.aiStyle = 75;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.value = 0.0f;
          this.npcSlots = 1f;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.netAlways = true;
        }
        else if (this.type == 394)
        {
          this.lifeMax = 3500;
          this.defense = 20;
          this.damage = 60;
          this.width = 46;
          this.height = 36;
          this.aiStyle = 75;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.value = 0.0f;
          this.npcSlots = 1f;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.netAlways = true;
        }
        else if (this.type == 395)
        {
          this.lifeMax = 10000;
          this.defense = 0;
          this.damage = 80;
          this.width = 120;
          this.height = 90;
          this.aiStyle = 76;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.value = 0.0f;
          this.npcSlots = 6f;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.dontTakeDamage = true;
          this.boss = true;
          this.netAlways = true;
        }
        else if (this.type == 399)
        {
          this.defense = 5;
          this.damage = 5;
          this.lifeMax = 500;
          this.aiStyle = 80;
          this.width = 42;
          this.height = 72;
          this.value = 0.0f;
          this.knockBackResist = 0.0f;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.npcSlots = 0.0f;
          this.noGravity = true;
          this.SpawnWithHigherTime(30);
          this.chaseable = false;
          this.netAlways = true;
          this.rarity = 1;
        }
        else if (this.type == 396)
        {
          this.lifeMax = 45000;
          this.defense = 50;
          this.damage = 0;
          this.width = 38;
          this.height = 56;
          this.aiStyle = 79;
          this.HitSound = SoundID.NPCHit57;
          this.DeathSound = SoundID.NPCDeath62;
          this.value = 0.0f;
          this.npcSlots = 6f;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.boss = true;
          this.hide = true;
          this.netAlways = true;
        }
        else if (this.type == 397)
        {
          this.lifeMax = 25000;
          this.defense = 40;
          this.damage = 0;
          this.width = 46;
          this.height = 66;
          this.aiStyle = 78;
          this.HitSound = SoundID.NPCHit57;
          this.DeathSound = SoundID.NPCDeath62;
          this.value = 0.0f;
          this.npcSlots = 6f;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.boss = true;
          this.hide = true;
          this.netAlways = true;
        }
        else if (this.type == 398)
        {
          this.lifeMax = 50000;
          this.defense = 70;
          this.damage = 0;
          this.width = 46;
          this.height = 66;
          this.aiStyle = 77;
          this.HitSound = SoundID.NPCHit57;
          this.DeathSound = (LegacySoundStyle) null;
          this.value = 1000000f;
          this.npcSlots = 6f;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.dontTakeDamage = true;
          this.boss = true;
          this.behindTiles = true;
          this.hide = true;
          this.netAlways = true;
        }
        else if (this.type == 400)
        {
          this.defense = 0;
          this.damage = 60;
          this.lifeMax = 100;
          this.aiStyle = 81;
          this.width = 60;
          this.height = 60;
          this.value = 0.0f;
          this.knockBackResist = 0.0f;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.0f;
          this.noGravity = true;
          this.dontTakeDamage = true;
          this.noTileCollide = true;
          this.netAlways = true;
        }
        else if (this.type == 401)
        {
          this.lifeMax = 400;
          this.defense = 0;
          this.damage = 0;
          this.width = 30;
          this.height = 30;
          this.aiStyle = 82;
          this.HitSound = SoundID.NPCHit57;
          this.DeathSound = SoundID.NPCDeath62;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.hide = true;
        }
        else if (this.type == 437)
        {
          this.lifeMax = 400;
          this.defense = 0;
          this.damage = 0;
          this.width = 54;
          this.height = 54;
          this.aiStyle = 83;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.dontTakeDamage = true;
          this.netAlways = true;
          this.chaseable = false;
        }
        else if (this.type == 438)
        {
          this.lifeMax = 400;
          this.defense = 0;
          this.damage = 0;
          this.width = 22;
          this.height = 40;
          this.aiStyle = 83;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.knockBackResist = 0.0f;
          this.lavaImmune = true;
          this.netAlways = true;
          this.chaseable = false;
        }
        else if (this.type == 439)
        {
          this.width = 24;
          this.height = 50;
          this.aiStyle = 84;
          this.damage = 50;
          this.defense = 42;
          this.lifeMax = 32000;
          this.knockBackResist = 0.0f;
          this.noTileCollide = true;
          this.noGravity = true;
          this.npcSlots = 10f;
          this.HitSound = SoundID.NPCHit55;
          this.DeathSound = SoundID.NPCDeath59;
          this.value = 100000f;
          this.boss = true;
          this.netAlways = true;
          this.SpawnWithHigherTime(30);
        }
        else if (this.type == 440)
        {
          this.width = 24;
          this.height = 50;
          this.aiStyle = 84;
          this.damage = 0;
          this.defense = 35;
          this.lifeMax = 10000;
          this.knockBackResist = 0.0f;
          this.noTileCollide = true;
          this.noGravity = true;
          this.npcSlots = 0.0f;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.netAlways = true;
          this.SpawnWithHigherTime(30);
          this.chaseable = false;
        }
        else if (this.type == 442)
        {
          this.width = 14;
          this.height = 14;
          this.aiStyle = 24;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 2889;
          this.npcSlots = 0.4f;
          this.rarity = 3;
        }
        else if (this.type == 443)
        {
          this.width = 18;
          this.height = 20;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 2890;
          this.rarity = 3;
        }
        else if (this.type == 444)
        {
          this.width = 10;
          this.height = 10;
          this.aiStyle = 65;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.25f;
          this.noGravity = true;
          this.catchItem = (short) 2891;
          this.rarity = 3;
        }
        else if (this.type == 445)
        {
          this.width = 12;
          this.height = 10;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 2892;
          this.rarity = 3;
        }
        else if (this.type == 446)
        {
          this.width = 14;
          this.height = 10;
          this.aiStyle = 1;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.friendly = true;
          this.catchItem = (short) 2893;
          this.npcSlots = 0.1f;
          this.rarity = 3;
        }
        else if (this.type == 447)
        {
          this.width = 14;
          this.height = 12;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath4;
          this.npcSlots = 0.25f;
          this.catchItem = (short) 2894;
          this.rarity = 3;
        }
        else if (this.type == 448)
        {
          this.width = 10;
          this.height = 4;
          this.aiStyle = 66;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.1f;
          this.catchItem = (short) 2895;
          this.friendly = true;
          this.rarity = 3;
        }
        else if (this.type == 449)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 8;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 100f;
        }
        else if (this.type == 450)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 12;
          this.lifeMax = 55;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 130f;
        }
        else if (this.type == 451)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 18;
          this.defense = 8;
          this.lifeMax = 65;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 120f;
        }
        else if (this.type == 452)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 22;
          this.defense = 8;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 110f;
        }
        else if (this.type == 453)
        {
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 30;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.npcSlots = 7f;
          this.rarity = 1;
        }
        else if (this.type == 454)
        {
          this.noTileCollide = true;
          this.npcSlots = 5f;
          this.width = 32;
          this.height = 32;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 100;
          this.defense = 15;
          this.lifeMax = 10000;
          this.HitSound = SoundID.NPCHit56;
          this.DeathSound = SoundID.NPCDeath60;
          this.noGravity = true;
          this.knockBackResist = 0.0f;
          this.value = 0.0f;
          this.scale = 1f;
          this.alpha = (int) byte.MaxValue;
        }
        else if (this.type == 459)
        {
          this.noTileCollide = true;
          this.width = 32;
          this.height = 32;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 50;
          this.defense = 30;
          this.lifeMax = 10000;
          this.HitSound = SoundID.NPCHit56;
          this.DeathSound = SoundID.NPCDeath60;
          this.noGravity = true;
          this.knockBackResist = 0.0f;
          this.value = 0.0f;
          this.scale = 1f;
          this.alpha = (int) byte.MaxValue;
          this.dontCountMe = true;
        }
        else if (this.type == 455 || this.type == 456 || this.type == 457 || this.type == 458)
        {
          this.noTileCollide = true;
          this.width = 32;
          this.height = 32;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 50;
          this.defense = 30;
          this.lifeMax = 10000;
          this.HitSound = SoundID.NPCHit56;
          this.DeathSound = SoundID.NPCDeath60;
          this.noGravity = true;
          this.knockBackResist = 0.0f;
          this.value = 0.0f;
          this.scale = 1f;
          this.alpha = (int) byte.MaxValue;
          this.dontCountMe = true;
        }
        else if (this.type == 464)
        {
          this.width = 18;
          this.height = 20;
          this.aiStyle = 3;
          this.damage = 21;
          this.defense = 5;
          this.lifeMax = 75;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 500f;
        }
        else if (this.type == 465)
        {
          this.noGravity = true;
          this.width = 18;
          this.height = 20;
          this.aiStyle = 16;
          this.damage = 31;
          this.defense = 7;
          this.lifeMax = 110;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 500f;
        }
        else if (this.type == 470)
        {
          this.width = 16;
          this.height = 34;
          this.aiStyle = 3;
          this.damage = 21;
          this.defense = 5;
          this.lifeMax = 75;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 500f;
        }
        else if (this.type == 473 || this.type == 474 || this.type == 475 || this.type == 476)
        {
          this.width = 28;
          this.height = 44;
          this.aiStyle = 87;
          this.damage = 90;
          this.defense = 34;
          this.lifeMax = 3500;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath6;
          this.value = 30000f;
          this.knockBackResist = 0.1f;
          this.rarity = 5;
        }
        else if (this.type == 480)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 30;
          this.defense = 20;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.15f;
          this.value = 1000f;
          this.rarity = 1;
        }
        else if (this.type == 481)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 22;
          this.defense = 10;
          this.lifeMax = 70;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.4f;
          this.value = 300f;
        }
        else if (this.type == 482)
        {
          this.width = 28;
          this.height = 48;
          this.aiStyle = 3;
          this.damage = 30;
          this.defense = 18;
          this.lifeMax = 110;
          this.HitSound = SoundID.NPCHit41;
          this.DeathSound = SoundID.NPCDeath43;
          this.knockBackResist = 0.35f;
          this.value = 500f;
        }
        else if (this.type == 483)
        {
          this.npcSlots = 0.5f;
          this.width = 20;
          this.height = 30;
          this.aiStyle = 91;
          this.damage = 24;
          this.defense = 8;
          this.lifeMax = 40;
          this.HitSound = SoundID.NPCHit7;
          this.knockBackResist = 0.6f;
          this.DeathSound = SoundID.NPCDeath6;
          this.value = 1000f;
        }
        else if (this.type >= 484 && this.type <= 487)
        {
          this.width = 10;
          this.height = 4;
          this.aiStyle = 66;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.1f;
          this.catchItem = (short) (3191 + this.type - 484);
          this.friendly = true;
        }
        else if (this.type == 488)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 92;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 1000;
          this.HitSound = SoundID.NPCHit15;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.0f;
          this.value = 0.0f;
          this.immortal = true;
          this.netAlways = true;
        }
        else if (this.type == 489)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 8;
          this.lifeMax = 75;
          this.HitSound = SoundID.NPCHit18;
          this.DeathSound = SoundID.NPCDeath21;
          this.knockBackResist = 0.4f;
          this.value = 150f;
        }
        else if (this.type == 490)
        {
          this.noGravity = true;
          this.width = 28;
          this.height = 30;
          this.aiStyle = 22;
          this.damage = 28;
          this.defense = 14;
          this.lifeMax = 50;
          this.HitSound = SoundID.NPCHit19;
          this.knockBackResist = 0.6f;
          this.DeathSound = SoundID.NPCDeath22;
          this.value = 150f;
        }
        else if (this.type == 491)
        {
          this.noGravity = true;
          this.width = 350;
          this.height = 120;
          this.aiStyle = 93;
          this.damage = 0;
          this.defense = 100;
          this.lifeMax = 50;
          this.HitSound = SoundID.NPCHit19;
          this.knockBackResist = 0.0f;
          this.DeathSound = SoundID.NPCDeath22;
          this.value = 0.0f;
          this.dontTakeDamage = true;
          this.netAlways = true;
        }
        else if (this.type == 492)
        {
          this.lifeMax = 2000;
          this.defense = 20;
          this.damage = 30;
          this.width = 30;
          this.height = 30;
          this.aiStyle = 75;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.value = 0.0f;
          this.npcSlots = 1f;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.hide = true;
          this.netAlways = true;
        }
        else if (this.type >= 494 && this.type <= 495)
        {
          this.width = 28;
          this.height = 22;
          this.aiStyle = 3;
          this.damage = 28;
          this.defense = 6;
          this.lifeMax = 50;
          this.HitSound = SoundID.NPCHit33;
          this.DeathSound = SoundID.NPCDeath36;
          this.value = 120f;
        }
        else if (this.type >= 496 && this.type <= 497)
        {
          this.width = 28;
          this.height = 22;
          this.aiStyle = 39;
          this.damage = 16;
          this.defense = 12;
          this.lifeMax = 50;
          this.HitSound = SoundID.NPCHit38;
          this.DeathSound = SoundID.NPCDeath41;
          this.knockBackResist = 0.75f;
          this.value = 120f;
        }
        else if (this.type >= 498 && this.type <= 506)
        {
          this.width = 24;
          this.height = 44;
          this.aiStyle = 3;
          this.damage = 18;
          this.defense = 10;
          this.lifeMax = 65;
          this.HitSound = SoundID.NPCHit50;
          this.DeathSound = SoundID.NPCDeath53;
          this.knockBackResist = 0.45f;
          this.value = 120f;
        }
        else if (this.type == 441)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 513)
        {
          this.npcSlots = 4f;
          this.width = 22;
          this.height = 22;
          this.aiStyle = 6;
          this.damage = 18;
          this.defense = 0;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 130f;
        }
        else if (this.type == 514)
        {
          this.width = 22;
          this.height = 22;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 7;
          this.defense = 12;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 130f;
          this.dontCountMe = true;
          this.npcSlots = 0.0f;
        }
        else if (this.type == 515)
        {
          this.width = 22;
          this.height = 22;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 7;
          this.defense = 14;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 130f;
          this.dontCountMe = true;
          this.npcSlots = 0.0f;
        }
        else if (this.type == 510)
        {
          this.npcSlots = 5f;
          this.width = 34;
          this.height = 34;
          this.aiStyle = 6;
          this.damage = 58;
          this.defense = 18;
          this.lifeMax = 500;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 700f;
        }
        else if (this.type == 511)
        {
          this.width = 34;
          this.height = 34;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 54;
          this.defense = 28;
          this.lifeMax = 500;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 700f;
          this.dontCountMe = true;
          this.npcSlots = 0.0f;
        }
        else if (this.type == 512)
        {
          this.width = 34;
          this.height = 34;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 50;
          this.defense = 34;
          this.lifeMax = 500;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = 700f;
          this.dontCountMe = true;
          this.npcSlots = 0.0f;
        }
        else if (this.type == 508)
        {
          this.width = 50;
          this.height = 31;
          this.aiStyle = 3;
          this.damage = 38;
          this.defense = 16;
          this.lifeMax = 110;
          this.HitSound = SoundID.NPCHit31;
          this.DeathSound = SoundID.NPCDeath34;
          this.knockBackResist = 0.4f;
          this.value = 175f;
        }
        else if (this.type == 509)
        {
          this.width = 40;
          this.height = 31;
          this.aiStyle = 44;
          this.damage = 34;
          this.defense = 12;
          this.lifeMax = 90;
          this.knockBackResist = 0.3f;
          this.HitSound = SoundID.NPCHit32;
          this.DeathSound = SoundID.NPCDeath35;
          this.value = 195f;
        }
        else if (this.type == 580)
        {
          this.width = 26;
          this.height = 26;
          this.aiStyle = 3;
          this.damage = 25;
          this.defense = 10;
          this.lifeMax = 80;
          this.HitSound = SoundID.NPCHit31;
          this.DeathSound = SoundID.NPCDeath34;
          this.knockBackResist = 0.5f;
          this.value = 80f;
          this.npcSlots = 0.8f;
        }
        else if (this.type == 581)
        {
          this.width = 30;
          this.height = 22;
          this.aiStyle = 44;
          this.damage = 29;
          this.defense = 8;
          this.lifeMax = 60;
          this.knockBackResist = 0.5f;
          this.HitSound = SoundID.NPCHit32;
          this.DeathSound = SoundID.NPCDeath35;
          this.value = 90f;
          this.npcSlots = 0.8f;
        }
        else if (this.type >= 524 && this.type <= 527)
        {
          this.width = 24;
          this.height = 44;
          this.aiStyle = 3;
          this.damage = 50;
          this.defense = 26;
          this.lifeMax = 180;
          this.HitSound = SoundID.NPCHit37;
          this.DeathSound = SoundID.NPCDeath40;
          this.knockBackResist = 0.6f;
          this.value = 500f;
          this.npcSlots = 0.5f;
          switch (this.type)
          {
            case 525:
              this.lifeMax += 70;
              this.defense += 4;
              this.damage += 10;
              this.knockBackResist -= 0.1f;
              this.value += 150f;
              break;
            case 526:
              this.lifeMax += 40;
              this.defense += 6;
              this.damage += 14;
              this.knockBackResist -= 0.1f;
              this.value += 150f;
              break;
            case 527:
              this.lifeMax += 120;
              this.defense += 6;
              this.damage += 4;
              this.knockBackResist -= 0.2f;
              this.value += 250f;
              break;
          }
        }
        else if (this.type >= 528 && this.type <= 529)
        {
          this.width = 24;
          this.height = 44;
          this.aiStyle = 3;
          this.damage = 52;
          this.defense = 28;
          this.lifeMax = 350;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.35f;
          this.value = 600f;
        }
        else if (this.type == 530)
        {
          this.width = 50;
          this.height = 20;
          this.aiStyle = 3;
          this.damage = 66;
          this.defense = 24;
          this.lifeMax = 320;
          this.HitSound = SoundID.NPCHit13;
          this.DeathSound = SoundID.NPCDeath19;
          this.knockBackResist = 0.5f;
          this.value = 600f;
          this.SpawnWithHigherTime(2);
        }
        else if (this.type == 531)
        {
          this.noGravity = true;
          this.width = 36;
          this.height = 36;
          this.aiStyle = 40;
          this.damage = 66;
          this.defense = 24;
          this.lifeMax = 320;
          this.HitSound = SoundID.NPCHit13;
          this.DeathSound = SoundID.NPCDeath19;
          this.knockBackResist = 0.5f;
          this.value = 600f;
          this.SpawnWithHigherTime(2);
        }
        else if (this.type == 532)
        {
          this.width = 32;
          this.height = 31;
          this.aiStyle = 3;
          this.damage = 65;
          this.defense = 34;
          this.lifeMax = 270;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.3f;
          this.value = 800f;
          this.npcSlots = 0.75f;
        }
        else if (this.type == 533)
        {
          this.width = 28;
          this.height = 62;
          this.aiStyle = 8;
          this.damage = 40;
          this.defense = 20;
          this.lifeMax = 220;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.0f;
          this.value = 1200f;
          this.npcSlots = 2f;
        }
        else if (this.type == 493)
        {
          this.lifeMax = 20000;
          this.defense = 20;
          this.damage = 0;
          this.width = 130;
          this.height = 270;
          this.aiStyle = 94;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 0.0f;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.npcSlots = 0.0f;
        }
        else if (this.type == 402)
        {
          this.noTileCollide = true;
          this.npcSlots = 1f;
          this.width = 32;
          this.height = 32;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 80;
          this.defense = 10;
          this.lifeMax = 1200;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.knockBackResist = 0.0f;
          this.value = 0.0f;
          this.scale = 1f;
        }
        else if (this.type == 405)
        {
          this.width = 44;
          this.height = 44;
          this.aiStyle = 85;
          this.damage = 120;
          this.defense = 50;
          this.lifeMax = 300;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.3f;
          this.noGravity = true;
          this.npcSlots = 2f;
        }
        else if (this.type == 406)
        {
          this.width = 22;
          this.height = 22;
          this.aiStyle = 95;
          this.damage = 70;
          this.defense = 0;
          this.lifeMax = 300;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.4f;
          this.noGravity = true;
        }
        else if (this.type == 411)
        {
          this.width = 22;
          this.height = 56;
          this.aiStyle = 3;
          this.damage = 80;
          this.defense = 34;
          this.lifeMax = 700;
          this.HitSound = SoundID.NPCHit6;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.4f;
        }
        else if (this.type == 409)
        {
          this.width = 34;
          this.height = 42;
          this.aiStyle = 3;
          this.damage = 70;
          this.defense = 40;
          this.lifeMax = 800;
          this.HitSound = SoundID.NPCHit6;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.4f;
          this.npcSlots = 3f;
        }
        else if (this.type == 410)
        {
          this.width = 22;
          this.height = 22;
          this.aiStyle = 26;
          this.damage = 80;
          this.defense = 10;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath5;
          this.knockBackResist = 0.3f;
          this.npcSlots = 0.5f;
        }
        else if (this.type == 407)
        {
          this.width = 40;
          this.height = 60;
          this.aiStyle = 96;
          this.damage = 70;
          this.defense = 38;
          this.lifeMax = 1500;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.knockBackResist = 0.03f;
          this.npcSlots = 3f;
        }
        else if (this.type == 507)
        {
          this.lifeMax = 20000;
          this.defense = 20;
          this.damage = 0;
          this.width = 130;
          this.height = 270;
          this.aiStyle = 94;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 0.0f;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.npcSlots = 0.0f;
        }
        else if (this.type == 423)
        {
          this.width = 50;
          this.height = 44;
          this.aiStyle = 26;
          this.damage = 90;
          this.defense = 46;
          this.lifeMax = 850;
          this.HitSound = SoundID.NPCHit6;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.2f;
          this.npcSlots = 1f;
        }
        else if (this.type == 421)
        {
          this.width = 44;
          this.height = 44;
          this.aiStyle = 85;
          this.damage = 70;
          this.defense = 34;
          this.lifeMax = 330;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
          this.noGravity = true;
          this.npcSlots = 1f;
        }
        else if (this.type == 424)
        {
          this.width = 22;
          this.height = 56;
          this.aiStyle = 3;
          this.damage = 80;
          this.defense = 30;
          this.lifeMax = 700;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath5;
          this.knockBackResist = 0.6f;
          this.npcSlots = 2f;
        }
        else if (this.type == 420)
        {
          this.width = 40;
          this.height = 40;
          this.aiStyle = 97;
          this.damage = 75;
          this.defense = 20;
          this.lifeMax = 1300;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
          this.noTileCollide = true;
          this.noGravity = true;
          this.npcSlots = 3f;
        }
        else if (this.type == 422)
        {
          this.lifeMax = 20000;
          this.defense = 20;
          this.damage = 0;
          this.width = 130;
          this.height = 270;
          this.aiStyle = 94;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 0.0f;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.npcSlots = 0.0f;
        }
        else if (this.type == 425)
        {
          this.width = 30;
          this.height = 56;
          this.aiStyle = 3;
          this.damage = 100;
          this.defense = 40;
          this.lifeMax = 800;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.4f;
        }
        else if (this.type == 429)
        {
          this.width = 22;
          this.height = 56;
          this.aiStyle = 3;
          this.damage = 90;
          this.defense = 34;
          this.lifeMax = 700;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath5;
          this.knockBackResist = 0.6f;
          this.npcSlots = 2f;
        }
        else if (this.type == 428)
        {
          this.width = 24;
          this.height = 26;
          this.aiStyle = 3;
          this.damage = 50;
          this.defense = 6;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
        }
        else if (this.type == 427)
        {
          this.width = 40;
          this.height = 28;
          this.aiStyle = 3;
          this.damage = 75;
          this.defense = 20;
          this.lifeMax = 500;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.5f;
          this.npcSlots = 0.5f;
        }
        else if (this.type == 426)
        {
          this.width = 50;
          this.height = 62;
          this.aiStyle = 3;
          this.damage = 100;
          this.defense = 44;
          this.lifeMax = 1000;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.3f;
        }
        else if (this.type == 517)
        {
          this.lifeMax = 20000;
          this.defense = 20;
          this.damage = 0;
          this.width = 130;
          this.height = 270;
          this.aiStyle = 94;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 0.0f;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.npcSlots = 0.0f;
        }
        else if (this.type == 412)
        {
          this.width = 20;
          this.height = 20;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 120;
          this.defense = 1000;
          this.lifeMax = 10000;
          this.HitSound = SoundID.NPCHit11;
          this.DeathSound = SoundID.NPCDeath22;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.dontTakeDamage = true;
          this.npcSlots = 2f;
        }
        else if (this.type == 413)
        {
          this.width = 20;
          this.height = 20;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 80;
          this.defense = 1000;
          this.lifeMax = 10000;
          this.HitSound = SoundID.NPCHit11;
          this.DeathSound = SoundID.NPCDeath22;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.dontCountMe = true;
          this.dontTakeDamage = true;
          this.npcSlots = 0.0f;
        }
        else if (this.type == 414)
        {
          this.width = 20;
          this.height = 20;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 50;
          this.defense = 0;
          this.lifeMax = 10000;
          this.HitSound = SoundID.NPCHit8;
          this.DeathSound = SoundID.NPCDeath22;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.dontCountMe = true;
          this.takenDamageMultiplier = 10f;
          this.npcSlots = 0.0f;
        }
        else if (this.type == 415)
        {
          this.lifeMax = 800;
          this.defense = 32;
          this.damage = 55;
          this.width = 60;
          this.height = 40;
          this.aiStyle = 3;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.2f;
        }
        else if (this.type == 416)
        {
          this.damage = 80;
          this.defense = 28;
          this.lifeMax = 800;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 75;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.2f;
        }
        else if (this.type == 518)
        {
          this.lifeMax = 1000;
          this.defense = 28;
          this.damage = 80;
          this.width = 22;
          this.height = 56;
          this.aiStyle = 3;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.4f;
        }
        else if (this.type == 417)
        {
          this.npcSlots = 2f;
          this.width = 46;
          this.height = 52;
          this.aiStyle = 39;
          this.damage = 80;
          this.defense = 34;
          this.lifeMax = 700;
          this.HitSound = SoundID.NPCHit7;
          this.knockBackResist = 0.0f;
          this.DeathSound = SoundID.NPCDeath5;
        }
        else if (this.type == 418)
        {
          this.width = 38;
          this.height = 38;
          this.aiStyle = 74;
          this.damage = 70;
          this.defense = 26;
          this.lifeMax = 600;
          this.HitSound = SoundID.NPCHit3;
          this.DeathSound = SoundID.NPCDeath3;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.2f;
        }
        else if (this.type == 419)
        {
          this.lifeMax = 800;
          this.defense = 30;
          this.damage = 90;
          this.width = 22;
          this.height = 56;
          this.aiStyle = 3;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.4f;
        }
        else if (this.type == 516)
        {
          this.width = 26;
          this.height = 26;
          this.aiStyle = 9;
          this.damage = 100;
          this.defense = 0;
          this.lifeMax = 1;
          this.HitSound = (LegacySoundStyle) null;
          this.DeathSound = (LegacySoundStyle) null;
          this.noGravity = true;
          this.noTileCollide = false;
          this.alpha = 0;
          this.knockBackResist = 0.0f;
        }
        else if (this.type == 519)
        {
          this.width = 26;
          this.height = 26;
          this.aiStyle = 99;
          this.damage = 120;
          this.defense = 0;
          this.lifeMax = 1;
          this.HitSound = (LegacySoundStyle) null;
          this.DeathSound = (LegacySoundStyle) null;
          this.noGravity = true;
          this.noTileCollide = false;
          this.alpha = 0;
          this.knockBackResist = 0.0f;
        }
        else if (this.type == 162)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 65;
          this.defense = 18;
          this.lifeMax = 350;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.3f;
          this.value = 600f;
        }
        else if (this.type == 166)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 70;
          this.defense = 26;
          this.lifeMax = 450;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.2f;
          this.value = 1000f;
        }
        else if (this.type == 253)
        {
          this.noGravity = true;
          this.noTileCollide = true;
          this.width = 24;
          this.height = 44;
          this.aiStyle = 22;
          this.damage = 80;
          this.defense = 22;
          this.lifeMax = 700;
          this.HitSound = SoundID.NPCHit49;
          this.DeathSound = SoundID.NPCDeath51;
          this.alpha = 100;
          this.value = 1500f;
          this.knockBackResist = 0.6f;
        }
        else if (this.type == 158)
        {
          this.npcSlots = 2f;
          this.width = 22;
          this.height = 22;
          this.aiStyle = 14;
          this.damage = 60;
          this.defense = 32;
          this.lifeMax = 750;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.75f;
          this.DeathSound = SoundID.NPCDeath6;
          this.value = 5000f;
        }
        else if (this.type == 159)
        {
          this.npcSlots = 2f;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 80;
          this.defense = 24;
          this.lifeMax = 750;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.4f;
          this.value = 5000f;
        }
        else if (this.type == 460)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 70;
          this.defense = 30;
          this.lifeMax = 700;
          this.HitSound = SoundID.NPCHit7;
          this.DeathSound = SoundID.NPCDeath17;
          this.knockBackResist = 0.25f;
          this.value = 1000f;
        }
        else if (this.type == 461)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 60;
          this.defense = 22;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.3f;
          this.value = 1000f;
        }
        else if (this.type == 462)
        {
          this.width = 20;
          this.height = 24;
          this.aiStyle = 3;
          this.damage = 70;
          this.defense = 14;
          this.lifeMax = 270;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.7f;
          this.value = 600f;
          this.npcSlots = 0.5f;
        }
        else if (this.type == 463)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 100;
          this.defense = 34;
          this.lifeMax = 4000;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.1f;
          this.value = 3000f;
        }
        else if (this.type == 466)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 70;
          this.defense = 40;
          this.lifeMax = 550;
          this.HitSound = SoundID.NPCHit48;
          this.DeathSound = SoundID.NPCDeath50;
          this.knockBackResist = 0.5f;
          this.value = 1500f;
        }
        else if (this.type == 467)
        {
          this.width = 22;
          this.height = 22;
          this.aiStyle = 85;
          this.damage = 100;
          this.defense = 80;
          this.lifeMax = 350;
          this.HitSound = SoundID.NPCHit34;
          this.DeathSound = SoundID.NPCDeath37;
          this.value = 900f;
          this.knockBackResist = 0.7f;
          this.noGravity = true;
        }
        else if (this.type == 469)
        {
          this.width = 38;
          this.height = 26;
          this.aiStyle = 3;
          this.damage = 68;
          this.defense = 28;
          this.lifeMax = 600;
          this.HitSound = SoundID.NPCHit47;
          this.DeathSound = SoundID.NPCDeath49;
          this.knockBackResist = 0.35f;
          this.value = 1300f;
        }
        else if (this.type == 468)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 65;
          this.defense = 24;
          this.lifeMax = 500;
          this.HitSound = SoundID.NPCHit35;
          this.DeathSound = SoundID.NPCDeath38;
          this.knockBackResist = 0.6f;
          this.value = 1300f;
        }
        else if (this.type == 477)
        {
          this.noGravity = true;
          this.netAlways = true;
          this.width = 80;
          this.height = 50;
          this.aiStyle = 88;
          this.damage = 80;
          this.defense = 30;
          this.lifeMax = 6000;
          this.HitSound = SoundID.NPCHit44;
          this.DeathSound = SoundID.NPCDeath46;
          this.value = 50000f;
          this.knockBackResist = 0.2f;
          this.rarity = 1;
        }
        else if (this.type == 478)
        {
          this.width = 34;
          this.height = 34;
          this.aiStyle = 89;
          this.damage = 0;
          this.defense = 30;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 0.0f;
          this.knockBackResist = 0.7f;
          this.npcSlots = 0.0f;
        }
        else if (this.type == 479)
        {
          this.width = 46;
          this.height = 30;
          this.aiStyle = 90;
          this.damage = 50;
          this.defense = 14;
          this.lifeMax = 700;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.3f;
          this.value = 0.0f;
          this.npcSlots = 0.1f;
        }
        else if (this.type == 26)
        {
          this.scale = 0.9f;
          this.width = 18;
          this.height = 38;
          this.aiStyle = 3;
          this.damage = 12;
          this.defense = 4;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.8f;
          this.value = 100f;
        }
        else if (this.type == 27)
        {
          this.scale = 0.95f;
          this.width = 18;
          this.height = 38;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 6;
          this.lifeMax = 80;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.7f;
          this.value = 200f;
        }
        else if (this.type == 28)
        {
          this.scale = 1.1f;
          this.width = 18;
          this.height = 38;
          this.aiStyle = 3;
          this.damage = 25;
          this.defense = 8;
          this.lifeMax = 110;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
          this.value = 150f;
        }
        else if (this.type == 29)
        {
          this.width = 18;
          this.height = 38;
          this.aiStyle = 8;
          this.damage = 20;
          this.defense = 2;
          this.lifeMax = 40;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.6f;
          this.value = 200f;
        }
        else if (this.type == 30)
        {
          this.width = 16;
          this.height = 16;
          this.aiStyle = 9;
          this.damage = 20;
          this.defense = 0;
          this.lifeMax = 1;
          this.HitSound = SoundID.NPCHit3;
          this.DeathSound = SoundID.NPCDeath3;
          this.noGravity = true;
          this.noTileCollide = true;
          this.alpha = 100;
          this.knockBackResist = 0.0f;
        }
        else if (this.type == 111)
        {
          this.scale = 0.95f;
          this.width = 18;
          this.height = 38;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 6;
          this.lifeMax = 80;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.7f;
          this.value = 200f;
        }
        else if (this.type == 471)
        {
          this.width = 18;
          this.height = 38;
          this.aiStyle = 3;
          this.damage = 80;
          this.defense = 26;
          this.lifeMax = 2000;
          this.HitSound = SoundID.NPCHit40;
          this.DeathSound = SoundID.NPCDeath42;
          this.knockBackResist = 0.15f;
          this.value = 5000f;
          this.rarity = 1;
        }
        else if (this.type == 472)
        {
          this.width = 40;
          this.height = 24;
          this.aiStyle = 86;
          this.damage = 50;
          this.defense = 18;
          this.lifeMax = 180;
          this.HitSound = SoundID.NPCHit52;
          this.DeathSound = SoundID.NPCDeath55;
          this.knockBackResist = 0.0f;
          this.value = 0.0f;
          this.npcSlots = 0.1f;
        }
        else if (this.type == 520)
        {
          this.width = 34;
          this.height = 110;
          this.aiStyle = 3;
          this.damage = 60;
          this.defense = 40;
          this.lifeMax = 2000;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath14;
          this.knockBackResist = 0.0f;
        }
        else if (this.type == 521)
        {
          this.width = 60;
          this.height = 60;
          this.aiStyle = 86;
          this.damage = 90;
          this.defense = 30;
          this.lifeMax = 2000;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.0f;
        }
        else if (this.type == 522)
        {
          this.width = 26;
          this.height = 26;
          this.aiStyle = 100;
          this.damage = 120;
          this.defense = 0;
          this.lifeMax = 400;
          this.HitSound = (LegacySoundStyle) null;
          this.DeathSound = (LegacySoundStyle) null;
          this.noGravity = true;
          this.noTileCollide = true;
          this.alpha = 0;
          this.knockBackResist = 0.0f;
        }
        else if (this.type == 523)
        {
          this.width = 42;
          this.height = 42;
          this.aiStyle = 101;
          this.damage = 30;
          this.defense = 0;
          this.lifeMax = 500;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.noGravity = true;
          this.noTileCollide = true;
          this.alpha = 0;
          this.knockBackResist = 0.0f;
          this.chaseable = false;
          this.alpha = (int) byte.MaxValue;
          this.canGhostHeal = false;
        }
        else if (this.type == 534)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 14;
          this.defense = 20;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.3f;
          this.value = 0.0f;
          this.lavaImmune = true;
          this.netAlways = true;
          this.rarity = 2;
        }
        else if (this.type == 535)
        {
          this.width = 24;
          this.height = 18;
          this.aiStyle = 1;
          this.damage = 14;
          this.defense = 5;
          this.lifeMax = 50;
          this.scale = 1.1f;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.alpha = 0;
          this.value = 40f;
        }
        else if (this.type == 536)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 14;
          this.defense = 8;
          this.lifeMax = 200;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 1000f;
          this.rarity = 2;
        }
        else if (this.type == 537)
        {
          this.npcSlots = 2f;
          this.width = 30;
          this.height = 24;
          this.aiStyle = 1;
          this.damage = 15;
          this.defense = 5;
          this.lifeMax = 50;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.alpha = 50;
          this.color = new Color((int) byte.MaxValue, 250, 0, 0) * 0.2f;
          this.value = 75f;
          this.knockBackResist = 0.7f;
        }
        else if (this.type == 538)
        {
          this.width = 18;
          this.height = 20;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 3563;
        }
        else if (this.type == 539)
        {
          this.width = 18;
          this.height = 20;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 3564;
          this.rarity = 3;
        }
        else if (this.type == 541)
        {
          this.width = 30;
          this.height = 76;
          this.aiStyle = 102;
          this.damage = 40;
          this.defense = 30;
          this.lifeMax = 5000;
          this.HitSound = SoundID.NPCHit23;
          this.DeathSound = SoundID.NPCDeath39;
          this.knockBackResist = 0.05f;
          this.value = (float) Item.buyPrice(gold: 1, silver: 50);
          this.rarity = 2;
        }
        else if (this.type == 542)
        {
          this.noGravity = true;
          this.width = 100;
          this.height = 24;
          this.aiStyle = 103;
          this.damage = 50;
          this.defense = 20;
          this.lifeMax = 360;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 400f;
          this.knockBackResist = 0.9f;
          this.behindTiles = true;
        }
        else if (this.type == 543)
        {
          this.noGravity = true;
          this.width = 100;
          this.height = 24;
          this.aiStyle = 103;
          this.damage = 60;
          this.defense = 24;
          this.lifeMax = 380;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 400f;
          this.knockBackResist = 0.8f;
          this.behindTiles = true;
        }
        else if (this.type == 544)
        {
          this.noGravity = true;
          this.width = 100;
          this.height = 24;
          this.aiStyle = 103;
          this.damage = 64;
          this.defense = 22;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 400f;
          this.knockBackResist = 0.8f;
          this.behindTiles = true;
        }
        else if (this.type == 545)
        {
          this.noGravity = true;
          this.width = 100;
          this.height = 24;
          this.aiStyle = 103;
          this.damage = 54;
          this.defense = 26;
          this.lifeMax = 450;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 400f;
          this.knockBackResist = 0.7f;
          this.behindTiles = true;
        }
        else if (this.type == 546)
        {
          this.width = 30;
          this.height = 30;
          this.aiStyle = 26;
          this.damage = 30;
          this.defense = 6;
          this.lifeMax = 50;
          this.HitSound = SoundID.NPCHit11;
          this.DeathSound = SoundID.NPCDeath15;
          this.knockBackResist = 0.8f;
          this.value = 100f;
        }
        else if (this.type == 547)
        {
          this.width = 16;
          this.height = 16;
          this.aiStyle = 104;
          this.defense = 10;
          this.lifeMax = 10;
          this.HitSound = SoundID.NPCHit11;
          this.DeathSound = SoundID.NPCDeath15;
          this.knockBackResist = 1f;
          this.noGravity = true;
          this.noTileCollide = true;
        }
        else if (this.type == 548)
        {
          this.width = 40;
          this.height = 40;
          this.aiStyle = 105;
          this.defense = 14;
          this.lifeMax = 1000;
          this.HitSound = SoundID.DD2_CrystalCartImpact;
          this.DeathSound = SoundID.NPCDeath15;
          this.knockBackResist = 0.0f;
          this.friendly = true;
          this.npcSlots = 0.0f;
          this.hide = true;
          if (Main.hardMode && NPC.downedMechBossAny)
          {
            this.defense = 18;
            this.lifeMax = 3000;
          }
          if (NPC.downedGolemBoss && Main.hardMode)
          {
            this.defense = 20;
            this.lifeMax = 5000;
          }
          if (Main.masterMode)
            this.lifeMax *= 3;
          else if (Main.expertMode)
            this.lifeMax *= 2;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 549)
        {
          this.lifeMax = 5;
          this.defense = 20;
          this.damage = 0;
          this.width = 78;
          this.height = 130;
          this.aiStyle = 106;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 0.0f;
          this.knockBackResist = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.npcSlots = 0.0f;
          this.behindTiles = true;
          this.dontTakeDamage = true;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 552)
        {
          this.lifeMax = 30;
          this.defense = 14;
          this.damage = 18;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_GoblinHurt;
          this.DeathSound = SoundID.DD2_GoblinDeath;
          this.knockBackResist = 0.2f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 553)
        {
          this.lifeMax = 170;
          this.defense = 20;
          this.damage = 46;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_GoblinHurt;
          this.DeathSound = SoundID.DD2_GoblinDeath;
          this.knockBackResist = 0.2f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 554)
        {
          this.lifeMax = 560;
          this.defense = 28;
          this.damage = 70;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_GoblinHurt;
          this.DeathSound = SoundID.DD2_GoblinDeath;
          this.knockBackResist = 0.15f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 561)
        {
          this.lifeMax = 60;
          this.defense = 18;
          this.damage = 30;
          this.width = 26;
          this.height = 52;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_JavelinThrowersHurt;
          this.DeathSound = SoundID.DD2_JavelinThrowersDeath;
          this.knockBackResist = 0.1f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 562)
        {
          this.lifeMax = 300;
          this.defense = 28;
          this.damage = 60;
          this.width = 26;
          this.height = 52;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_JavelinThrowersHurt;
          this.DeathSound = SoundID.DD2_JavelinThrowersDeath;
          this.knockBackResist = 0.1f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 563)
        {
          this.lifeMax = 1000;
          this.defense = 38;
          this.damage = 80;
          this.width = 26;
          this.height = 52;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_JavelinThrowersHurt;
          this.DeathSound = SoundID.DD2_JavelinThrowersDeath;
          this.knockBackResist = 0.05f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 555)
        {
          this.lifeMax = 50;
          this.defense = 16;
          this.damage = 26;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_GoblinBomberHurt;
          this.DeathSound = SoundID.DD2_GoblinBomberDeath;
          this.knockBackResist = 0.2f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 556)
        {
          this.lifeMax = 200;
          this.defense = 26;
          this.damage = 55;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_GoblinBomberHurt;
          this.DeathSound = SoundID.DD2_GoblinBomberDeath;
          this.knockBackResist = 0.2f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 557)
        {
          this.lifeMax = 700;
          this.defense = 34;
          this.damage = 75;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_GoblinBomberHurt;
          this.DeathSound = SoundID.DD2_GoblinBomberDeath;
          this.knockBackResist = 0.15f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 558)
        {
          this.width = 38;
          this.height = 38;
          this.aiStyle = 108;
          this.damage = 30;
          this.defense = 4;
          this.lifeMax = 60;
          this.HitSound = SoundID.DD2_WyvernHurt;
          this.DeathSound = SoundID.DD2_WyvernDeath;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.2f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 559)
        {
          this.width = 38;
          this.height = 38;
          this.aiStyle = 108;
          this.damage = 75;
          this.defense = 16;
          this.lifeMax = 180;
          this.HitSound = SoundID.DD2_WyvernHurt;
          this.DeathSound = SoundID.DD2_WyvernDeath;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.2f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 560)
        {
          this.width = 38;
          this.height = 38;
          this.aiStyle = 108;
          this.damage = 100;
          this.defense = 30;
          this.lifeMax = 600;
          this.HitSound = SoundID.DD2_WyvernHurt;
          this.DeathSound = SoundID.DD2_WyvernDeath;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.05f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 550)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 576)
        {
          this.lifeMax = 5000;
          this.defense = 34;
          this.damage = 70;
          this.width = 96;
          this.height = 124;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_OgreHurt;
          this.DeathSound = SoundID.DD2_OgreDeath;
          this.knockBackResist = 0.0f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 577)
        {
          this.lifeMax = 13000;
          this.defense = 40;
          this.damage = 90;
          this.width = 96;
          this.height = 124;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_OgreHurt;
          this.DeathSound = SoundID.DD2_OgreDeath;
          this.knockBackResist = 0.0f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 568)
        {
          this.lifeMax = 500;
          this.defense = 30;
          this.damage = 50;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_WitherBeastHurt;
          this.DeathSound = SoundID.DD2_WitherBeastDeath;
          this.knockBackResist = 0.15f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 569)
        {
          this.lifeMax = 1400;
          this.defense = 40;
          this.damage = 80;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_WitherBeastHurt;
          this.DeathSound = SoundID.DD2_WitherBeastDeath;
          this.knockBackResist = 0.05f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 566)
        {
          this.lifeMax = 25;
          this.defense = 12;
          this.damage = 18;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_SkeletonHurt;
          this.DeathSound = SoundID.DD2_SkeletonDeath;
          this.knockBackResist = 0.3f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 567)
        {
          this.lifeMax = 480;
          this.defense = 22;
          this.damage = 70;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_SkeletonHurt;
          this.DeathSound = SoundID.DD2_SkeletonDeath;
          this.knockBackResist = 0.2f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 572)
        {
          this.lifeMax = 260;
          this.defense = 26;
          this.damage = 60;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_KoboldHurt;
          this.DeathSound = SoundID.DD2_KoboldDeath;
          this.knockBackResist = 0.2f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 573)
        {
          this.lifeMax = 800;
          this.defense = 32;
          this.damage = 80;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_KoboldHurt;
          this.DeathSound = SoundID.DD2_KoboldDeath;
          this.knockBackResist = 0.1f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 570)
        {
          this.lifeMax = 900;
          this.defense = 30;
          this.damage = 60;
          this.width = 42;
          this.height = 58;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_DrakinHurt;
          this.DeathSound = SoundID.DD2_DrakinDeath;
          this.knockBackResist = 0.0f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 571)
        {
          this.lifeMax = 3000;
          this.defense = 40;
          this.damage = 90;
          this.width = 42;
          this.height = 58;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_DrakinHurt;
          this.DeathSound = SoundID.DD2_DrakinDeath;
          this.knockBackResist = 0.0f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 564)
        {
          this.lifeMax = 800;
          this.defense = 18;
          this.damage = 40;
          this.width = 34;
          this.height = 62;
          this.aiStyle = 109;
          this.HitSound = SoundID.DD2_DarkMageHurt;
          this.DeathSound = SoundID.DD2_DarkMageDeath;
          this.knockBackResist = 0.0f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.noGravity = true;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 565)
        {
          this.lifeMax = 4000;
          this.defense = 38;
          this.damage = 90;
          this.width = 34;
          this.height = 62;
          this.aiStyle = 109;
          this.HitSound = SoundID.DD2_DarkMageHurt;
          this.DeathSound = SoundID.DD2_DarkMageDeath;
          this.knockBackResist = 0.0f;
          this.value = 0.0f;
          this.npcSlots = 0.0f;
          this.noGravity = true;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 574)
        {
          this.width = 38;
          this.height = 38;
          this.aiStyle = 108;
          this.damage = 50;
          this.defense = 16;
          this.lifeMax = 170;
          this.HitSound = SoundID.DD2_KoboldFlyerHurt;
          this.DeathSound = SoundID.DD2_KoboldFlyerDeath;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.4f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 575)
        {
          this.width = 38;
          this.height = 38;
          this.aiStyle = 108;
          this.damage = 80;
          this.defense = 32;
          this.lifeMax = 580;
          this.HitSound = SoundID.DD2_KoboldFlyerHurt;
          this.DeathSound = SoundID.DD2_KoboldFlyerDeath;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.25f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 551)
        {
          this.damage = 80;
          this.defense = 38;
          this.lifeMax = 50000;
          this.width = 190;
          this.height = 90;
          this.aiStyle = 110;
          this.HitSound = SoundID.DD2_BetsyHurt;
          this.DeathSound = SoundID.DD2_BetsyDeath;
          this.knockBackResist = 0.0f;
          this.value = 0.0f;
          this.noGravity = true;
          this.noTileCollide = true;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 578)
        {
          this.width = 30;
          this.height = 24;
          this.aiStyle = 111;
          this.damage = 80;
          this.defense = 36;
          this.lifeMax = 500;
          this.HitSound = SoundID.DD2_LightningBugHurt;
          this.DeathSound = SoundID.DD2_LightningBugDeath;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.8f;
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
        }
        else if (this.type == 579)
        {
          this.friendly = true;
          this.width = 34;
          this.height = 8;
          this.aiStyle = 0;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.5f;
          this.scale = 1f;
          this.rarity = 1;
        }
        else if (this.type == 582)
        {
          this.width = 18;
          this.height = 18;
          this.aiStyle = 3;
          this.damage = 10;
          this.defense = 2;
          this.lifeMax = 30;
          this.HitSound = SoundID.NPCHit31;
          this.DeathSound = SoundID.NPCDeath34;
          this.knockBackResist = 0.75f;
          this.value = 40f;
          this.npcSlots = 0.4f;
        }
        else if (this.type == 583 || this.type == 584 || this.type == 585)
        {
          this.width = 18;
          this.height = 20;
          this.aiStyle = 112;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          switch (this.type)
          {
            case 583:
              this.catchItem = (short) 4068;
              break;
            case 584:
              this.catchItem = (short) 4069;
              break;
            case 585:
              this.catchItem = (short) 4070;
              break;
          }
          this.noGravity = true;
          this.rarity = 2;
        }
        else if (this.type == 586)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 40;
          this.defense = 20;
          this.lifeMax = 400;
          this.HitSound = SoundID.NPCHit18;
          this.DeathSound = SoundID.NPCDeath21;
          this.knockBackResist = 0.0f;
          this.value = 1000f;
          this.alpha = (int) byte.MaxValue;
          this.rarity = 1;
        }
        else if (this.type == 587)
        {
          this.width = 32;
          this.height = 18;
          this.aiStyle = 44;
          this.damage = 35;
          this.defense = 18;
          this.lifeMax = 300;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.0f;
          this.DeathSound = SoundID.NPCDeath1;
          this.value = 1000f;
          this.alpha = (int) byte.MaxValue;
          this.rarity = 1;
        }
        else if (this.type == 588)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 589)
        {
          this.friendly = true;
          this.width = 18;
          this.height = 34;
          this.aiStyle = 0;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
          this.rarity = 1;
        }
        else if (this.type == 590 || this.type == 591)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 14;
          this.defense = 6;
          this.lifeMax = 45;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 60f;
        }
        else if (this.type == 592)
        {
          this.noGravity = true;
          this.width = 20;
          this.height = 18;
          this.aiStyle = 16;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
          this.catchItem = (short) 4274;
          this.rarity = 3;
        }
        else if (this.type == 593)
        {
          this.width = 18;
          this.height = 20;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 4274;
          this.rarity = 3;
        }
        else if (this.type == 594)
        {
          this.width = 20;
          this.height = 20;
          this.aiStyle = 113;
          this.damage = 0;
          this.defense = 0;
          this.knockBackResist = 0.3f;
          this.lifeMax = 1;
          this.DeathSound = SoundID.NPCDeath63;
          this.value = 0.0f;
          this.noGravity = true;
        }
        else if (this.type >= 595 && this.type <= 601)
        {
          this.timeLeft *= 3;
          this.width = 10;
          this.height = 10;
          this.aiStyle = 114;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.25f;
          this.noGravity = true;
          if (this.type == 601)
            this.rarity = 3;
          this.catchItem = (short) (this.type - 595 + 4334);
        }
        else if (this.type == 602)
        {
          this.width = 22;
          this.height = 26;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 4359;
        }
        else if (this.type == 603)
        {
          this.width = 28;
          this.height = 22;
          this.aiStyle = 68;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 4359;
        }
        else if (this.type == 604 || this.type == 605)
        {
          this.width = 10;
          this.height = 10;
          this.aiStyle = 115;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.25f;
          this.noGravity = true;
          if (this.type == 605)
            this.rarity = 3;
          this.catchItem = (short) (this.type - 604 + 4361);
        }
        else if (this.type == 606)
        {
          this.width = 10;
          this.height = 4;
          this.aiStyle = 66;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.1f;
          this.catchItem = (short) 4363;
          this.friendly = true;
        }
        else if (this.type == 607)
        {
          this.noGravity = true;
          this.width = 20;
          this.height = 18;
          this.aiStyle = 16;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
          this.catchItem = (short) 4373;
        }
        else if (this.type == 608)
        {
          this.width = 22;
          this.height = 26;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 4374;
        }
        else if (this.type == 609)
        {
          this.width = 28;
          this.height = 22;
          this.aiStyle = 68;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 4374;
        }
        else if (this.type == 610)
        {
          this.width = 14;
          this.height = 12;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath4;
          this.npcSlots = 0.25f;
          this.catchItem = (short) 4375;
        }
        else if (this.type == 611)
        {
          this.width = 18;
          this.height = 34;
          this.aiStyle = 24;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 4395;
          this.npcSlots = 0.4f;
        }
        else if (this.type == 612 || this.type == 613)
        {
          this.width = 10;
          this.height = 10;
          this.aiStyle = 116;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.25f;
          if (this.type == 613)
            this.rarity = 3;
          this.catchItem = (short) (this.type - 612 + 4418);
          this.waterMovementSpeed = 1f;
          this.lavaMovementSpeed = 1f;
          this.honeyMovementSpeed = 1f;
        }
        else if (this.type == 614)
        {
          this.width = 18;
          this.height = 20;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = (LegacySoundStyle) null;
          this.catchItem = (short) 1338;
        }
        else if (this.type == 615)
        {
          this.noGravity = true;
          this.width = 20;
          this.height = 18;
          this.aiStyle = 16;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 616 || this.type == 617)
        {
          this.width = 22;
          this.height = 20;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
          this.catchItem = (short) (this.type - 616 + 4464);
        }
        else if (this.type == 618)
        {
          this.noGravity = true;
          this.width = 100;
          this.height = 100;
          this.aiStyle = 117;
          this.damage = 55;
          this.defense = 24;
          this.lifeMax = 7000;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.0f;
          this.value = (float) Item.buyPrice(gold: 2);
          this.noTileCollide = true;
          this.rarity = 1;
        }
        else if (this.type == 619)
        {
          this.npcSlots = 1f;
          this.width = 44;
          this.height = 44;
          this.aiStyle = 5;
          this.damage = 60;
          this.defense = 16;
          this.lifeMax = 750;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.knockBackResist = 0.0f;
          this.value = 500f;
          this.alpha = (int) byte.MaxValue;
        }
        else if (this.type == 620)
        {
          this.lifeMax = 5000;
          this.defense = 30;
          this.damage = 70;
          this.width = 34;
          this.height = 58;
          this.aiStyle = 107;
          this.HitSound = SoundID.DD2_DrakinHurt;
          this.DeathSound = SoundID.DD2_DrakinDeath;
          this.knockBackResist = 0.0f;
          this.value = (float) Item.buyPrice(silver: 75);
          this.npcSlots = 0.0f;
          this.lavaImmune = true;
          this.LazySetLiquidMovementDD2();
          this.netAlways = true;
          this.alpha = (int) byte.MaxValue;
          this.rarity = 1;
        }
        else if (this.type == 621)
        {
          this.npcSlots = 5f;
          this.width = 28;
          this.height = 28;
          this.aiStyle = 6;
          this.damage = 90;
          this.defense = 0;
          this.lifeMax = 6000;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.value = (float) Item.buyPrice(silver: 75);
          this.alpha = (int) byte.MaxValue;
          this.rarity = 1;
        }
        else if (this.type == 622)
        {
          this.width = 28;
          this.height = 28;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 60;
          this.defense = 30;
          this.lifeMax = 6000;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.dontCountMe = true;
          this.npcSlots = 0.0f;
          this.alpha = (int) byte.MaxValue;
        }
        else if (this.type == 623)
        {
          this.width = 28;
          this.height = 28;
          this.aiStyle = 6;
          this.netAlways = true;
          this.damage = 50;
          this.defense = 40;
          this.lifeMax = 6000;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.behindTiles = true;
          this.dontCountMe = true;
          this.npcSlots = 0.0f;
          this.alpha = (int) byte.MaxValue;
        }
        else if (this.type == 624)
        {
          this.width = 14;
          this.height = 30;
          this.aiStyle = 3;
          this.damage = 10;
          this.defense = 0;
          this.lifeMax = 25;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 1f;
          this.rarity = 1;
        }
        else if (this.type == 625)
        {
          this.width = 22;
          this.height = 20;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 626 || this.type == 627)
        {
          this.width = 16;
          this.height = 20;
          this.aiStyle = 118;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 1f;
          if (this.type == 627)
            this.rarity = 3;
          this.catchItem = (short) 4480;
          if (this.type == 627)
            this.catchItem = (short) 4482;
        }
        else if (this.type == 628)
        {
          this.width = 22;
          this.height = 40;
          this.aiStyle = 119;
          this.damage = 15;
          this.defense = 0;
          this.lifeMax = 50;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.0f;
          this.value = 50f;
        }
        else if (this.type == 629)
        {
          this.width = 24;
          this.height = 24;
          this.aiStyle = 25;
          this.damage = 80;
          this.defense = 30;
          this.lifeMax = 500;
          this.HitSound = SoundID.NPCHit4;
          this.DeathSound = SoundID.NPCDeath6;
          this.value = 100000f;
          this.knockBackResist = 0.3f;
          this.rarity = 4;
          this.coldDamage = true;
          if (Main.remixWorld && !Main.hardMode)
          {
            this.damage = 30;
            this.defense = 12;
            this.lifeMax = 300;
            this.value = (float) Item.buyPrice(gold: 2);
          }
        }
        else if (this.type == 630)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 60;
          this.defense = 18;
          this.lifeMax = 180;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.5f;
          this.value = 700f;
        }
        else if (this.type == 631)
        {
          this.width = 36;
          this.height = 48;
          this.scale = 1.1f;
          this.aiStyle = 3;
          this.damage = 85;
          this.defense = 35;
          this.lifeMax = 1000;
          this.HitSound = SoundID.NPCHit41;
          this.DeathSound = SoundID.NPCDeath43;
          this.knockBackResist = 0.1f;
          this.value = 25000f;
        }
        else if (this.type == 632)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 14;
          this.defense = 6;
          this.lifeMax = 45;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 60f;
        }
        else if (this.type == 633)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 634)
        {
          this.npcSlots = 0.5f;
          this.width = 22;
          this.height = 18;
          this.aiStyle = 14;
          this.damage = 13;
          this.defense = 2;
          this.lifeMax = 16;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath4;
          this.value = 90f;
        }
        else if (this.type == 635)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 3;
          this.damage = 20;
          this.defense = 8;
          this.lifeMax = 60;
          this.HitSound = SoundID.NPCHit2;
          this.DeathSound = SoundID.NPCDeath2;
          this.knockBackResist = 0.5f;
          this.value = 100f;
        }
        else if (this.type == 636)
        {
          this.noGravity = true;
          this.width = 100;
          this.height = 100;
          this.aiStyle = 120;
          this.damage = 80;
          this.defense = 50;
          this.lifeMax = 70000;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath65;
          this.knockBackResist = 0.0f;
          this.value = 250000f;
          this.noTileCollide = true;
          this.boss = true;
          this.Opacity = 0.0f;
          this.dontTakeDamage = true;
          this.npcSlots = 16f;
        }
        else if (this.type == 637 || this.type == 638)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 28;
          if (this.type == 637)
            this.height = 20;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.5f;
          this.housingCategory = 1;
        }
        else if (this.type >= 639 && this.type <= 645)
        {
          this.width = 18;
          this.height = 20;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) (4831 + (this.type - 639));
        }
        else if (this.type >= 646 && this.type <= 652)
        {
          this.width = 18;
          this.height = 20;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) (4838 + (this.type - 646));
        }
        else if (this.type == 653)
        {
          this.width = 10;
          this.height = 10;
          this.aiStyle = 65;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.25f;
          this.noGravity = true;
          this.lavaImmune = true;
          this.catchItem = (short) 4845;
        }
        else if (this.type == 654)
        {
          this.width = 10;
          this.height = 10;
          this.aiStyle = 64;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.2f;
          this.noGravity = true;
          this.lavaImmune = true;
          this.catchItem = (short) 4847;
        }
        else if (this.type == 655)
        {
          this.width = 14;
          this.height = 14;
          this.aiStyle = 67;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.5f;
          this.noGravity = true;
          this.lavaImmune = true;
          this.catchItem = (short) 4849;
        }
        else if (this.type == 656)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 20;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.5f;
          this.housingCategory = 1;
        }
        else if (this.type == 657)
        {
          this.width = 114;
          this.height = 100;
          this.aiStyle = 121;
          this.damage = 60;
          this.defense = 26;
          this.lifeMax = 18000;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath64;
          this.lavaImmune = true;
          this.knockBackResist = 0.0f;
          this.value = 60000f;
          this.boss = true;
          this.npcSlots = 5f;
        }
        else if (this.type == 658 || this.type == 659)
        {
          this.width = 24;
          this.height = 18;
          this.aiStyle = 1;
          this.damage = 40;
          this.defense = 35;
          this.lifeMax = 150;
          this.scale = 1f;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
        }
        else if (this.type == 660)
        {
          this.width = 40;
          this.height = 30;
          this.aiStyle = 14;
          this.damage = 50;
          this.defense = 30;
          this.lifeMax = 120;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.knockBackResist = 0.8f;
          this.scale = 1f;
        }
        else if (this.type == 661)
        {
          this.width = 10;
          this.height = 10;
          this.aiStyle = 65;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.25f;
          this.noGravity = true;
          this.lavaImmune = true;
          this.catchItem = (short) 4961;
          this.rarity = 4;
        }
        else if (this.type == 662)
        {
          this.width = 18;
          this.height = 40;
          this.aiStyle = 122;
          this.damage = 75;
          this.defense = 22;
          this.lifeMax = 500;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.2f;
          this.value = 0.0f;
          this.noTileCollide = true;
          this.lavaImmune = true;
          this.trapImmune = true;
          this.noGravity = true;
        }
        else if (this.type == 663)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 40;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.5f;
        }
        else if (this.type == 664)
        {
          this.lifeMax = 20;
          this.boss = true;
        }
        else if (this.type == 665)
        {
          this.width = 16;
          this.height = 16;
          this.aiStyle = 9;
          this.damage = 20;
          this.defense = 0;
          this.lifeMax = 1;
          this.HitSound = SoundID.NPCHit3;
          this.DeathSound = SoundID.NPCDeath3;
          this.noGravity = true;
          this.noTileCollide = true;
          this.alpha = 100;
          this.knockBackResist = 0.0f;
        }
        else if (this.type == 666)
        {
          this.width = 16;
          this.height = 16;
          this.aiStyle = 9;
          this.damage = 65;
          this.defense = 0;
          this.lifeMax = 1;
          this.HitSound = (LegacySoundStyle) null;
          this.DeathSound = SoundID.NPCDeath9;
          this.noGravity = true;
          this.noTileCollide = true;
          this.knockBackResist = 0.0f;
          this.scale = 0.9f;
          this.alpha = 80;
        }
        else if (this.type == 667)
        {
          this.width = 24;
          this.height = 18;
          this.aiStyle = 1;
          this.damage = 5;
          this.defense = 5;
          this.lifeMax = 300;
          this.knockBackResist *= 1.4f;
          this.rarity = 2;
          this.scale = 1f;
          this.value = (float) Item.buyPrice(gold: 15);
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
        }
        else if (this.type == 668)
        {
          this.width = 60;
          this.height = 154;
          this.aiStyle = 123;
          this.damage = 20;
          this.defense = 10;
          this.lifeMax = 7000;
          this.HitSound = SoundID.DeerclopsHit;
          this.DeathSound = SoundID.DeerclopsDeath;
          this.knockBackResist = 0.0f;
          this.boss = true;
          this.noGravity = true;
          this.noTileCollide = true;
          this.value = (float) Item.buyPrice(gold: 5);
          this.npcSlots = 10f;
          this.coldDamage = true;
        }
        else if (this.type == 669)
        {
          this.width = 10;
          this.height = 10;
          this.aiStyle = 115;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.25f;
          this.noGravity = true;
          this.catchItem = (short) 5132;
        }
        else if (this.type == 670)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 20;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.5f;
          this.housingCategory = 1;
        }
        else if (this.type == 671)
        {
          this.width = 14;
          this.height = 14;
          this.aiStyle = 24;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 5212;
          this.npcSlots = 1f;
        }
        else if (this.type == 672)
        {
          this.width = 14;
          this.height = 14;
          this.aiStyle = 24;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 5300;
          this.npcSlots = 1f;
        }
        else if (this.type == 673)
        {
          this.width = 14;
          this.height = 14;
          this.aiStyle = 24;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 5311;
          this.npcSlots = 1f;
        }
        else if (this.type == 674)
        {
          this.width = 14;
          this.height = 14;
          this.aiStyle = 24;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 5312;
          this.npcSlots = 1f;
        }
        else if (this.type == 675)
        {
          this.width = 14;
          this.height = 14;
          this.aiStyle = 24;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.knockBackResist = 0.8f;
          this.DeathSound = SoundID.NPCDeath1;
          this.catchItem = (short) 5313;
          this.npcSlots = 1f;
        }
        else if (this.type == 676)
        {
          this.width = 24;
          this.height = 18;
          this.aiStyle = 1;
          this.damage = 20;
          this.defense = 5;
          this.lifeMax = 80;
          this.scale = 1f;
          this.value = (float) Item.buyPrice(silver: 1, copper: 50);
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
        }
        else if (this.type == 677)
        {
          this.width = 10;
          this.height = 10;
          this.aiStyle = 64;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath1;
          this.npcSlots = 0.2f;
          this.noGravity = true;
          this.catchItem = (short) 5350;
          this.noTileCollide = true;
        }
        else if (this.type == 678 || this.type == 679 || this.type == 680 || this.type == 681 || this.type == 682 || this.type == 683 || this.type == 684)
        {
          this.townNPC = true;
          this.friendly = true;
          this.width = 18;
          this.height = 20;
          this.aiStyle = 7;
          this.damage = 10;
          this.defense = 15;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.knockBackResist = 0.5f;
          this.housingCategory = 1;
        }
        else if (this.type == 685)
        {
          this.width = 30;
          this.height = 28;
          this.aiStyle = 1;
          this.damage = 0;
          this.defense = 10;
          this.knockBackResist = 0.3f;
          this.lifeMax = 250;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.value = 0.0f;
          this.rarity = 2;
          this.friendly = true;
        }
        else if (this.type == 686)
        {
          this.width = 20;
          this.height = 20;
          this.aiStyle = 125;
          this.damage = 0;
          this.defense = 0;
          this.knockBackResist = 0.3f;
          this.lifeMax = 1;
          this.DeathSound = SoundID.NPCDeath63;
          this.value = 0.0f;
          this.rarity = 2;
          this.noGravity = true;
          this.noTileCollide = true;
          this.dontTakeDamageFromHostiles = true;
        }
        else if (this.type == 687)
        {
          this.width = 18;
          this.height = 20;
          this.aiStyle = 7;
          this.damage = 0;
          this.defense = 0;
          this.lifeMax = 5;
          this.rarity = 2;
          this.HitSound = SoundID.NPCHit1;
          this.DeathSound = SoundID.NPCDeath6;
          this.catchItem = (short) 2121;
        }
        if (Main.dedServ)
          this.frame = new Microsoft.Xna.Framework.Rectangle();
        else if (TextureAssets.Npc[this.type] != null && TextureAssets.Npc[this.type].IsLoaded)
          this.frame = new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Npc[this.type].Width(), TextureAssets.Npc[this.type].Height() / Main.npcFrameCount[this.type]);
        else
          this.setFrameSize = true;
        if (spawnparams.sizeScaleOverride.HasValue)
        {
          int num1 = (int) ((double) this.width * (double) this.scale);
          int num2 = (int) ((double) this.height * (double) this.scale);
          this.position.X += (float) (num1 / 2);
          this.position.Y += (float) num2;
          this.scale = spawnparams.sizeScaleOverride.Value;
          this.width = (int) ((double) this.width * (double) this.scale);
          this.height = (int) ((double) this.height * (double) this.scale);
          if (this.height == 16 || this.height == 32)
            ++this.height;
          this.position.X -= (float) (this.width / 2);
          this.position.Y -= (float) this.height;
        }
        else
        {
          this.width = (int) ((double) this.width * (double) this.scale);
          this.height = (int) ((double) this.height * (double) this.scale);
        }
        this.life = this.lifeMax;
        this.defDamage = this.damage;
        this.defDefense = this.defense;
        this.netID = this.type;
        NPCDebuffImmunityData debuffImmunityData;
        if (NPCID.Sets.DebuffImmunitySets.TryGetValue(this.type, out debuffImmunityData) && debuffImmunityData != null)
        {
          debuffImmunityData.ApplyToNPC(this);
        }
        else
        {
          for (int index = 0; index < this.buffImmune.Length; ++index)
            this.buffImmune[index] = false;
        }
        this.buffImmune[353] = NPCID.Sets.ShimmerImmunity[this.type];
        if (Main.zenithWorld)
          this.getZenithSeedAdjustmentsBeforeEverything();
        if (Main.getGoodWorld)
          this.getGoodAdjustments();
        else if (Main.tenthAnniversaryWorld)
          this.getTenthAnniversaryAdjustments();
        if (this.type >= 0 && this.type < (int) NPCID.Count && Main.npcCatchable[this.type])
        {
          this.catchableNPCTempImmunityCounter = 90;
          this.friendly = true;
        }
        this.ScaleStats(spawnparams.playerCountForMultiplayerDifficultyOverride, spawnparams.gameModeData, spawnparams.strengthMultiplierOverride);
        this.life = this.lifeMax;
      }
    }

    private void getTenthAnniversaryAdjustments()
    {
      float scale = this.scale;
      float num = 0.5f;
      switch (this.type)
      {
        case 4:
          this.scale *= num;
          break;
        case 13:
        case 14:
        case 15:
          this.scale *= num;
          break;
        case 35:
        case 36:
          this.scale *= num;
          break;
        case 113:
        case 114:
        case 115:
        case 116:
          this.scale *= num;
          break;
        case 125:
        case 126:
          this.scale *= num;
          break;
        case (int) sbyte.MaxValue:
        case 128:
        case 129:
        case 130:
        case 131:
          this.scale *= num;
          break;
        case 134:
        case 135:
        case 136:
        case 139:
          this.scale *= num;
          break;
        case 222:
          this.scale *= num;
          break;
        case 266:
        case 267:
          this.scale *= num;
          break;
        case 370:
          this.scale *= num;
          break;
        case 422:
        case 493:
        case 507:
        case 517:
          this.scale *= num;
          break;
        case 636:
          this.scale *= num;
          break;
      }
      if (this.IsABestiaryIconDummy)
      {
        this.scale = scale;
      }
      else
      {
        this.width = (int) ((double) this.width * (double) this.scale);
        this.height = (int) ((double) this.height * (double) this.scale);
      }
    }

    private void getZenithSeedAdjustmentsBeforeEverything()
    {
      switch (this.type)
      {
        case 125:
        case 126:
        case (int) sbyte.MaxValue:
        case 128:
        case 129:
        case 130:
        case 131:
        case 139:
          this.lifeMax = (int) ((double) this.lifeMax * 0.800000011920929);
          break;
      }
    }

    private void getGoodAdjustments()
    {
      float scale = this.scale;
      if (this.type == 13)
      {
        this.scale *= 1.35f;
        this.defense += 2;
      }
      else if (this.type == 14)
      {
        this.scale *= 1.4f;
        this.defense += 2;
      }
      else if (this.type == 15)
      {
        this.scale *= 1.4f;
        this.defense += 2;
      }
      else if (this.type == 35)
        this.scale *= 1.25f;
      else if (this.type == 36)
        this.scale *= 1.15f;
      else if (this.type == 113)
      {
        this.scale *= 0.65f;
        this.lifeMax = (int) ((double) this.lifeMax * 1.5);
        this.defense += 3;
      }
      else if (this.type == 114)
      {
        this.scale *= 0.65f;
        this.lifeMax = (int) ((double) this.lifeMax * 1.5);
        this.defense += 3;
      }
      else if (this.type == 115)
        this.scale *= 1.4f;
      else if (this.type == 116)
        this.scale *= 1.4f;
      else if (this.type == 222)
        this.scale *= 1.2f;
      else if (this.type == 245)
      {
        this.canDisplayBuffs = false;
        this.scale *= 0.5f;
      }
      else if (this.type == 246)
      {
        this.canDisplayBuffs = false;
        this.scale *= 0.5f;
      }
      else if (this.type == 247 || this.type == 248)
      {
        this.canDisplayBuffs = false;
        this.scale *= 0.5f;
      }
      else if (this.type == 249)
        this.scale *= 0.5f;
      else if (this.type == 262)
        this.scale *= 1.3f;
      else if (this.type == 266)
      {
        this.defense = (int) ((double) this.defense * 1.5);
        this.damage = (int) ((double) this.damage * 1.2);
        this.scale *= 1.1f;
      }
      else if (this.type == 125)
        this.scale *= 0.8f;
      else if (this.type == 126)
        this.scale *= 0.8f;
      else if (this.type == (int) sbyte.MaxValue)
        this.scale *= 1.1f;
      else if (this.type == 128)
        this.scale *= 1.1f;
      else if (this.type == 129)
        this.scale *= 1.1f;
      else if (this.type == 130)
        this.scale *= 1.1f;
      else if (this.type == 131)
        this.scale *= 1.1f;
      else if (this.type == 134)
        this.scale *= 1.3f;
      else if (this.type == 135)
        this.scale *= 1.3f;
      else if (this.type == 136)
      {
        this.scale *= 1.3f;
      }
      else
      {
        if (this.type != 139)
          return;
        this.scale *= 1.6f;
      }
      if (this.IsABestiaryIconDummy)
      {
        this.scale = scale;
      }
      else
      {
        this.width = (int) ((double) this.width * (double) this.scale);
        this.height = (int) ((double) this.height * (double) this.scale);
      }
    }

    private void LazySetLiquidMovementDD2()
    {
      this.waterMovementSpeed = 1f;
      this.lavaMovementSpeed = 1f;
      this.honeyMovementSpeed = 1f;
    }

    public static void SetWorldSpecificMonstersByWorldID()
    {
      UnifiedRandom unifiedRandom = new UnifiedRandom(Main.worldID);
      int num1 = unifiedRandom.Next(3);
      int num2 = unifiedRandom.Next(3);
      while (num1 == num2)
        num1 = unifiedRandom.Next(3);
      for (int index1 = 0; index1 < 2; ++index1)
      {
        int num3 = num1;
        if (index1 == 1)
          num3 = num2;
        for (int index2 = 0; index2 < 3; ++index2)
        {
          switch (num3)
          {
            case 0:
              NPC.cavernMonsterType[index1, index2] = unifiedRandom.Next(494, 496);
              break;
            case 1:
              NPC.cavernMonsterType[index1, index2] = unifiedRandom.Next(496, 498);
              break;
            default:
              NPC.cavernMonsterType[index1, index2] = unifiedRandom.Next(498, 507);
              break;
          }
        }
      }
    }

    public NPCSpawnParams GetMatchingSpawnParams() => new NPCSpawnParams()
    {
      sizeScaleOverride = new float?(-1f),
      playerCountForMultiplayerDifficultyOverride = new int?(this.statsAreScaledForThisManyPlayers),
      strengthMultiplierOverride = new float?(this.strengthMultiplier)
    };

    public void ScaleStats(
      int? activePlayersCount,
      GameModeData gameModeData,
      float? strengthOverride)
    {
      if ((!NPCID.Sets.NeedsExpertScaling.IndexInRange<bool>(this.type) || !NPCID.Sets.NeedsExpertScaling[this.type]) && (this.lifeMax <= 5 || this.damage == 0 || this.friendly || this.townNPC))
        return;
      float strength = 1f;
      if (strengthOverride.HasValue)
        strength = strengthOverride.Value;
      else if (gameModeData.IsJourneyMode)
      {
        CreativePowers.DifficultySliderPower power = CreativePowerManager.Instance.GetPower<CreativePowers.DifficultySliderPower>();
        if (power != null && power.GetIsUnlocked())
          strength = power.StrengthMultiplierToGiveNPCs;
      }
      float num = strength;
      if (gameModeData.IsJourneyMode && Main.getGoodWorld)
        ++strength;
      NPCStrengthHelper npcStrengthHelper = new NPCStrengthHelper(gameModeData, strength, Main.getGoodWorld);
      if (npcStrengthHelper.IsExpertMode)
        this.ScaleStats_ApplyExpertTweaks();
      this.ScaleStats_ApplyGameMode(gameModeData);
      if (Main.getGoodWorld && npcStrengthHelper.ExtraDamageForGetGoodWorld)
        this.damage += this.damage / 3;
      if (npcStrengthHelper.IsExpertMode)
      {
        int numPlayers = !activePlayersCount.HasValue ? NPC.GetActivePlayerCount() : activePlayersCount.Value;
        this.statsAreScaledForThisManyPlayers = numPlayers;
        float balance;
        float boost;
        NPC.GetStatScalingFactors(numPlayers, out balance, out boost);
        float bossAdjustment = 1f;
        if (npcStrengthHelper.IsMasterMode)
          bossAdjustment = 0.85f;
        this.ScaleStats_ApplyMultiplayerStats(numPlayers, balance, boost, bossAdjustment);
      }
      this.ScaleStats_UseStrengthMultiplier(strength);
      this.strengthMultiplier = num;
      if ((this.type < 0 ? 0 : (NPCID.Sets.ProjectileNPC[this.type] ? 1 : 0)) == 0 && this.lifeMax < 6)
        this.lifeMax = 6;
      this.life = this.lifeMax;
      this.defDamage = this.damage;
      this.defDefense = this.defense;
    }

    public void ScaleStats_UseStrengthMultiplier(float strength)
    {
      if ((double) strength == 1.0)
        return;
      int num = this.type < 0 ? 0 : (NPCID.Sets.ProjectileNPC[this.type] ? 1 : 0);
      if (num == 0)
        this.lifeMax = (int) ((double) this.lifeMax * (double) strength);
      this.damage = (int) ((double) this.damage * (double) strength);
      float fromMin = 1f;
      float fromMax1 = 2f;
      float fromMax2 = 3f;
      if (Main.getGoodWorld)
      {
        ++fromMin;
        ++fromMax1;
        ++fromMax2;
      }
      if (num == 0)
      {
        float moneyDropMultiplier1 = GameModeData.NormalMode.EnemyMoneyDropMultiplier;
        float moneyDropMultiplier2 = GameModeData.ExpertMode.EnemyMoneyDropMultiplier;
        if (Main.getGoodWorld)
        {
          ++moneyDropMultiplier1;
          ++moneyDropMultiplier2;
        }
        this.value = (float) (int) ((double) this.value * (double) Utils.Remap(strength, fromMin, fromMax1, moneyDropMultiplier1, moneyDropMultiplier2));
      }
      float enemiesMultiplier1 = GameModeData.NormalMode.KnockbackToEnemiesMultiplier;
      float enemiesMultiplier2 = GameModeData.MasterMode.KnockbackToEnemiesMultiplier;
      this.knockBackResist *= Utils.Remap(strength, fromMin, fromMax2, enemiesMultiplier1, enemiesMultiplier2);
    }

    public static float GetBalance()
    {
      float balance;
      NPC.GetStatScalingFactors(NPC.GetActivePlayerCount(), out balance, out float _);
      return balance;
    }

    public float GetMyBalance()
    {
      if (this.statsAreScaledForThisManyPlayers <= 1)
        return 1f;
      float balance;
      NPC.GetStatScalingFactors(this.statsAreScaledForThisManyPlayers, out balance, out float _);
      return balance;
    }

    public static int GetActivePlayerCount()
    {
      if (Main.netMode == 0)
        return 1;
      int activePlayerCount = 0;
      for (int index = 0; index < (int) byte.MaxValue; ++index)
      {
        if (Main.player[index] != null && Main.player[index].active)
          ++activePlayerCount;
      }
      return activePlayerCount;
    }

    private void ScaleStats_ApplyExpertTweaks()
    {
      bool flag1 = this.type >= 0 && NPCID.Sets.ProjectileNPC[this.type];
      bool flag2 = !NPCID.Sets.DontDoHardmodeScaling[this.type];
      if (Main.getGoodWorld)
      {
        if ((this.type == 24 || this.type == 25) && NPC.AnyNPCs(113))
          flag2 = false;
        if ((this.type == 32 || this.type == 33) && NPC.AnyNPCs(35))
          flag2 = false;
        if (this.type == 6 && NPC.AnyNPCs(13))
          flag2 = false;
      }
      if (flag2 && Main.hardMode && !this.boss && this.lifeMax < 1000)
      {
        int num1 = this.damage + this.defense + this.lifeMax / 4;
        if (num1 == 0)
          num1 = 1;
        int num2 = 80;
        if (NPC.downedPlantBoss)
          num2 += 20;
        if (num1 < num2)
        {
          float num3 = (float) (num2 / num1);
          this.damage = (int) ((double) this.damage * (double) num3 * 0.9);
          if (!flag1)
          {
            this.defense = (int) ((double) this.defense * (double) num3);
            this.lifeMax = (int) ((double) this.lifeMax * (double) num3 * 1.1);
            this.value = (float) (int) ((double) this.value * (double) num3 * 0.8);
          }
        }
      }
      if (this.type != 210 && this.type != 211)
        return;
      this.damage = (int) ((double) this.damage * 0.60000002384185791);
      this.lifeMax = (int) ((double) this.lifeMax * 0.800000011920929);
      this.defense = (int) ((double) this.defense * 0.800000011920929);
    }

    private void ScaleStats_ApplyGameMode(GameModeData gameModeData)
    {
      int num1 = this.type < 0 ? 0 : (NPCID.Sets.ProjectileNPC[this.type] ? 1 : 0);
      int num2 = 0;
      if (!gameModeData.IsJourneyMode && Main.getGoodWorld)
        ++num2;
      if (num1 == 0)
      {
        this.value = (float) (int) ((double) this.value * ((double) gameModeData.EnemyMoneyDropMultiplier + (double) num2));
        this.lifeMax = (int) ((double) this.lifeMax * ((double) gameModeData.EnemyMaxLifeMultiplier + (double) num2));
      }
      this.damage = (int) ((double) this.damage * ((double) gameModeData.EnemyDamageMultiplier + (double) num2));
      this.knockBackResist *= gameModeData.KnockbackToEnemiesMultiplier;
    }

    private void ScaleStats_ApplyMultiplayerStats(
      int numPlayers,
      float balance,
      float boost,
      float bossAdjustment)
    {
      int num1 = numPlayers - 1;
      if (this.type == 5)
        this.lifeMax = (int) ((double) this.lifeMax * 0.75 * (double) bossAdjustment);
      if (this.type == 4)
        this.lifeMax = (int) ((double) this.lifeMax * 0.65 * (double) balance * (double) bossAdjustment);
      if (this.type >= 13 && this.type <= 15)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 0.7 * (double) balance * (double) bossAdjustment);
        if (this.type == 13)
          this.damage = (int) ((double) this.damage * 1.1);
        if (this.type == 14)
          this.damage = (int) ((double) this.damage * 0.8);
        if (this.type == 15)
          this.damage = (int) ((double) this.damage * 0.8);
        this.scale *= 1.2f;
        this.defense += 2;
      }
      if (this.type == 266 || this.type == 267)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 0.85 * (double) balance * (double) bossAdjustment);
        this.damage = (int) ((double) this.damage * 0.9);
        this.scale *= 1.05f;
        for (float num2 = 1f; (double) num2 < (double) balance; num2 += 0.34f)
        {
          if ((double) this.knockBackResist < 0.1)
          {
            this.knockBackResist = 0.0f;
            break;
          }
          this.knockBackResist *= 0.8f;
        }
      }
      if (this.type == 50)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 0.7 * (double) balance * (double) bossAdjustment);
        this.damage = (int) ((double) this.damage * 0.8);
      }
      if (this.type == 471)
        this.lifeMax = (int) ((double) this.lifeMax * 0.85 * ((double) balance * 2.0 + 1.0) / 3.0);
      if (this.type == 472)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 0.85 * ((double) balance + 1.0) / 2.0);
        this.damage = (int) ((double) this.damage * 0.8);
      }
      if (this.type == 222)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 0.7 * (double) balance * (double) bossAdjustment);
        this.damage = (int) ((double) this.damage * 0.9);
      }
      if (this.type == 210 || this.type == 211)
        this.lifeMax = (int) ((double) this.lifeMax * 0.75);
      if (this.type == 35)
      {
        this.lifeMax = (int) ((double) this.lifeMax * (double) balance * (double) bossAdjustment);
        this.damage = (int) ((double) this.damage * 1.1);
      }
      else if (this.type == 36)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 1.3 * (double) balance * (double) bossAdjustment);
        this.damage = (int) ((double) this.damage * 1.1);
      }
      if (this.type == 668)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 0.85 * (double) balance * (double) bossAdjustment);
        this.damage = this.damage;
      }
      if (this.type == 113 || this.type == 114)
      {
        this.defense += 6;
        this.lifeMax = (int) ((double) this.lifeMax * 0.7 * (double) balance * (double) bossAdjustment);
        this.damage = (int) ((double) this.damage * 1.5);
      }
      else if (this.type == 115)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 0.7 * (double) balance);
        if (numPlayers > 4)
          this.knockBackResist = 0.0f;
        else if (numPlayers > 1)
          this.knockBackResist *= 1f - boost;
        this.defense += 6;
      }
      else if (this.type == 116)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 0.7 * (double) balance);
        if (numPlayers > 4)
          this.knockBackResist = 0.0f;
        else if (numPlayers > 1)
          this.knockBackResist *= 1f - boost;
      }
      else if (this.type == 117 || this.type == 118 || this.type == 119)
        this.lifeMax = (int) ((double) this.lifeMax * 0.8);
      if (this.type == 657)
        this.lifeMax = (int) ((double) this.lifeMax * 0.800000011920929 * (double) balance * (double) bossAdjustment);
      if (this.type >= 658 && this.type <= 660)
        this.lifeMax = (int) ((double) this.lifeMax * 0.75 * (double) balance * (double) bossAdjustment);
      if (this.type >= 134 && this.type <= 136)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 0.75 * (double) balance * (double) bossAdjustment);
        if (this.type == 134)
          this.damage *= 2;
        if (this.type == 135)
          this.damage = (int) ((double) this.damage * 0.85);
        if (this.type == 136)
          this.damage = (int) ((double) this.damage * 0.85);
        this.scale *= 1.05f;
      }
      else if (this.type == 139)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 0.75 * ((double) balance * 2.0 + 1.0) / 3.0);
        this.damage = (int) ((double) this.damage * 0.8);
        this.scale *= 1.05f;
      }
      if (this.type >= (int) sbyte.MaxValue && this.type <= 131)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 0.75 * (double) balance * (double) bossAdjustment);
        this.damage = (int) ((double) this.damage * 0.85);
      }
      if (this.type >= 125 && this.type <= 126)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 0.75 * (double) balance * (double) bossAdjustment);
        this.damage = (int) ((double) this.damage * 0.85);
      }
      if (this.type == 262)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 0.7 * (double) balance * (double) bossAdjustment);
        this.damage = (int) ((double) this.damage * 1.15);
      }
      else if (this.type == 264)
      {
        this.lifeMax = (int) ((double) this.lifeMax * (double) balance * (double) bossAdjustment);
        this.damage = (int) ((double) this.damage * 1.15);
      }
      if (this.type == 636)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 0.7 * (double) balance * (double) bossAdjustment);
        this.damage = (int) ((double) this.damage * 1.15);
      }
      if (this.type >= 245 && this.type <= 249)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 0.75 * (double) balance * (double) bossAdjustment);
        this.damage = (int) ((double) this.damage * 0.8);
      }
      if (this.type == 370)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 0.65 * (double) balance * (double) bossAdjustment);
        this.damage = (int) ((double) this.damage * 0.7);
      }
      else if (this.type == 371 || this.type == 372 || this.type == 373)
      {
        if (this.type != 371)
          this.lifeMax = (int) ((double) this.lifeMax * 0.75);
        this.damage = (int) ((double) this.damage * 0.75);
      }
      if (this.type == 439 || this.type == 440 || this.type >= 454 && this.type <= 459 || this.type == 522 || this.type == 523)
      {
        if (this.type != 522)
          this.lifeMax = (int) ((double) this.lifeMax * 0.75 * (double) balance * (double) bossAdjustment);
        this.damage = (int) ((double) this.damage * 0.75);
      }
      if (this.type == 397 || this.type == 396 || this.type == 398)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 0.75 * (double) balance * (double) bossAdjustment);
        this.damage = (int) ((double) this.damage * 0.75);
      }
      if (this.type == 551)
      {
        this.lifeMax = (int) ((double) this.lifeMax * 0.75 * (double) balance * (double) bossAdjustment);
        this.damage = (int) ((double) this.damage * 0.65);
      }
      else if (NPCID.Sets.BelongsToInvasionOldOnesArmy[this.type])
      {
        int num3 = 7;
        this.lifeMax = (int) ((double) this.lifeMax * (double) ((float) ((double) balance * (double) (num3 - 1) + 1.0) / (float) num3) * (double) bossAdjustment);
      }
      float num4 = (float) (1.0 + (double) num1 * 0.20000000298023224);
      switch (this.type)
      {
        case 305:
        case 306:
        case 307:
        case 308:
        case 309:
        case 310:
        case 311:
        case 312:
        case 313:
        case 314:
        case 326:
        case 329:
        case 330:
          this.lifeMax = (int) ((double) this.lifeMax * 0.75 * (double) num4);
          this.damage = (int) ((double) this.damage * 0.75);
          break;
        case 315:
        case 325:
        case 327:
          this.lifeMax = (int) ((double) this.lifeMax * 0.65 * (double) bossAdjustment);
          this.damage = (int) ((double) this.damage * 0.75);
          break;
      }
      switch (this.type)
      {
        case 338:
        case 339:
        case 340:
        case 341:
        case 342:
        case 343:
        case 347:
        case 348:
        case 349:
        case 350:
        case 351:
        case 352:
          this.lifeMax = (int) ((double) this.lifeMax * 0.75 * (double) num4);
          this.damage = (int) ((double) this.damage * 0.75);
          break;
        case 344:
        case 345:
        case 346:
          this.lifeMax = (int) ((double) this.lifeMax * 0.65 * (double) bossAdjustment);
          this.damage = (int) ((double) this.damage * 0.75);
          break;
      }
      if (Main.getGoodWorld)
      {
        if (this.type == 6 && NPC.AnyNPCs(13))
        {
          this.lifeMax = (int) ((double) this.lifeMax * 1.5 * (double) bossAdjustment);
          this.defense += 2;
        }
        if (this.type == 32 && NPC.AnyNPCs(35))
        {
          this.lifeMax = (int) ((double) this.lifeMax * 1.5 * (double) bossAdjustment);
          this.defense += 6;
        }
        if (this.type == 24 && NPC.AnyNPCs(113))
        {
          this.lifeMax = (int) ((double) this.lifeMax * 1.5 * (double) bossAdjustment);
          this.defense += 10;
        }
      }
      this.defDefense = this.defense;
      this.defDamage = this.damage;
      this.life = this.lifeMax;
    }

    public static void GetStatScalingFactors(int numPlayers, out float balance, out float boost)
    {
      balance = 1f;
      boost = 0.35f;
      for (int index = 1; index < numPlayers; ++index)
      {
        balance += boost;
        boost += (float) ((1.0 - (double) boost) / 3.0);
      }
      if ((double) balance > 8.0)
        balance = (float) (((double) balance * 2.0 + 8.0) / 3.0);
      if ((double) balance <= 1000.0)
        return;
      balance = 1000f;
    }

    public static bool GetNPCLocation(
      int i,
      bool seekHead,
      bool averageDirection,
      out int index,
      out Vector2 pos)
    {
      int type = Main.npc[i].type;
      int index1 = -1;
      int num1 = -1;
      switch (type)
      {
        case 7:
          num1 = 9;
          index1 = 0;
          break;
        case 8:
        case 9:
          num1 = 7;
          index1 = 1;
          break;
        case 10:
          num1 = 12;
          index1 = 0;
          break;
        case 11:
        case 12:
          num1 = 10;
          index1 = 1;
          break;
        case 13:
          num1 = 15;
          index1 = 0;
          break;
        case 14:
        case 15:
          num1 = 13;
          index1 = 1;
          break;
        case 39:
          num1 = 41;
          index1 = 0;
          break;
        case 40:
        case 41:
          num1 = 39;
          index1 = 1;
          break;
        case 87:
          num1 = 92;
          index1 = 0;
          break;
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
          num1 = 87;
          index1 = 1;
          break;
        case 95:
          num1 = 97;
          index1 = 0;
          break;
        case 96:
        case 97:
          num1 = 95;
          index1 = 1;
          break;
        case 98:
          num1 = 100;
          index1 = 0;
          break;
        case 99:
        case 100:
          num1 = 98;
          index1 = 1;
          break;
        case 117:
          num1 = 119;
          index1 = 0;
          break;
        case 118:
        case 119:
          num1 = 117;
          index1 = 1;
          break;
        case 134:
          num1 = 136;
          index1 = 0;
          break;
        case 135:
        case 136:
          num1 = 134;
          index1 = 1;
          break;
        case 454:
          num1 = 459;
          index1 = 0;
          break;
        case 455:
        case 456:
        case 457:
        case 458:
        case 459:
          num1 = 454;
          index1 = 1;
          break;
        case 510:
          num1 = 512;
          index1 = 0;
          break;
        case 511:
        case 512:
          num1 = 510;
          index1 = 1;
          break;
        case 513:
          num1 = 515;
          index1 = 0;
          break;
        case 514:
        case 515:
          num1 = 513;
          index1 = 1;
          break;
        case 621:
          num1 = 623;
          index1 = 0;
          break;
        case 622:
        case 623:
          num1 = 621;
          index1 = 1;
          break;
      }
      if (index1 != -1)
      {
        if (seekHead && index1 == 1)
        {
          index = -1;
          pos = Vector2.Zero;
          return false;
        }
        Vector2 center1 = Main.npc[i].Center;
        int index2 = -1;
        float num2 = -1f;
        int index3 = -1;
        Vector2 center2 = Main.player[Main.myPlayer].Center;
        int index4 = (int) Main.npc[i].ai[index1];
        for (int index5 = 0; index4 >= 0 && index4 < 200 && ++index5 < 100 && Main.npc[index4].active; index4 = (int) Main.npc[index4].ai[index1])
        {
          if (!averageDirection && (index3 == -1 || (double) Main.npc[index4].Distance(center2) < (double) num2))
          {
            num2 = Main.npc[index4].Distance(center2);
            index3 = index4;
          }
          if (Main.npc[index4].type == num1)
          {
            index2 = index4;
            break;
          }
        }
        if (index2 >= 0)
        {
          if (!averageDirection)
          {
            pos = Main.npc[index3].Center;
            index = index3;
          }
          else
          {
            Vector2 vector2 = center1 + Main.npc[index2].Center;
            pos = vector2 / 2f;
            index = index2;
          }
          return true;
        }
        pos = Vector2.Zero;
        index = -1;
        return false;
      }
      pos = Main.npc[i].Center;
      index = i;
      return true;
    }

    public void PopAllAttachedProjectilesAndTakeDamageForThem()
    {
      bool[] attachedExplosive = ProjectileID.Sets.IsAnNPCAttachedExplosive;
      for (int index = 0; index < 1000; ++index)
      {
        Projectile projectile = Main.projectile[index];
        if (projectile.active && projectile.owner == Main.myPlayer && attachedExplosive[projectile.type] && projectile.IsAttachedTo(this))
          projectile.Kill();
      }
    }

    public bool AI_AttemptToFindTeleportSpot(
      ref Vector2 chosenTile,
      int targetTileX,
      int targetTileY,
      int rangeFromTargetTile = 20,
      int telefragPreventionDistanceInTiles = 5,
      int solidTileCheckFluff = 1,
      bool solidTileCheckCentered = false,
      bool teleportInAir = false)
    {
      int num1 = (int) this.Center.X / 16;
      int num2 = (int) this.Center.Y / 16;
      int num3 = 0;
      bool findTeleportSpot = false;
      float num4 = 20f;
      if (Math.Abs(num1 * 16 - targetTileX * 16) + Math.Abs(num2 * 16 - targetTileY * 16) > 2000)
      {
        num3 = 100;
        findTeleportSpot = false;
      }
      while (!findTeleportSpot && num3 < 100)
      {
        ++num3;
        int x = Main.rand.Next(targetTileX - rangeFromTargetTile, targetTileX + rangeFromTargetTile + 1);
        for (int y = Main.rand.Next(targetTileY - rangeFromTargetTile, targetTileY + rangeFromTargetTile + 1); y < targetTileY + rangeFromTargetTile; ++y)
        {
          if ((y < num2 - 1 || y > num2 + 1 || x < num1 - 1 || x > num1 + 1) && (teleportInAir || Main.tile[x, y].nactive()))
          {
            bool flag = true;
            if ((this.type == 32 || this.type >= 281 && this.type <= 286) && !Main.wallDungeon[(int) Main.tile[x, y - 1].wall])
            {
              if (!NPC.AnyNPCs(35))
                flag = false;
            }
            else if (Main.tile[x, y - 1].lava())
              flag = false;
            if (flag && (teleportInAir || Main.tileSolid[(int) Main.tile[x, y].type]))
            {
              if (!solidTileCheckCentered ? !Collision.SolidTiles(x - solidTileCheckFluff, x + solidTileCheckFluff, y - 3 - solidTileCheckFluff, y - 1) : !Collision.SolidTiles(x - solidTileCheckFluff, x + solidTileCheckFluff, y - solidTileCheckFluff, y + solidTileCheckFluff))
              {
                Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(x * 16, y * 16, 16, 16);
                rectangle.Inflate(telefragPreventionDistanceInTiles * 16, telefragPreventionDistanceInTiles * 16);
                for (int index = 0; index < Main.player.Length; ++index)
                {
                  Player player = Main.player[index];
                  if (player != null && player.active && !player.DeadOrGhost)
                  {
                    Microsoft.Xna.Framework.Rectangle hitbox = player.Hitbox;
                    Microsoft.Xna.Framework.Rectangle result = hitbox.Modified((int) ((double) player.velocity.X * (double) num4), (int) ((double) player.velocity.Y * (double) num4), 0, 0);
                    Microsoft.Xna.Framework.Rectangle.Union(ref result, ref hitbox, out result);
                    if (result.Intersects(rectangle))
                    {
                      flag = false;
                      findTeleportSpot = false;
                      break;
                    }
                  }
                }
                if (flag)
                {
                  chosenTile = new Vector2((float) x, (float) y);
                  findTeleportSpot = true;
                  break;
                }
                break;
              }
            }
          }
        }
      }
      return findTeleportSpot;
    }

    public static void TransformElderSlime(int npcIndex)
    {
      if (Main.netMode == 1)
      {
        NetMessage.SendData(140, number: 2, number2: ((float) npcIndex));
      }
      else
      {
        if (NPC.unlockedSlimeOldSpawn || !Main.npc.IndexInRange<NPC>(npcIndex))
          return;
        NPC npc = Main.npc[npcIndex];
        if (npc.type != 685)
          return;
        NPC.unlockedSlimeOldSpawn = true;
        NetMessage.SendData(7);
        Vector2 velocity = npc.velocity;
        npc.Transform(679);
        npc.netUpdate = true;
        npc.velocity = velocity;
        ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.TownSlimeTransform, new ParticleOrchestraSettings()
        {
          PositionInWorld = npc.Center,
          MovementVector = Vector2.Zero,
          UniqueInfoPiece = 2
        });
      }
    }

    public static void TransformCopperSlime(int npcIndex)
    {
      if (Main.netMode == 1)
      {
        NetMessage.SendData(140, number: 1, number2: ((float) npcIndex));
      }
      else
      {
        if (NPC.unlockedSlimeCopperSpawn || !Main.npc.IndexInRange<NPC>(npcIndex))
          return;
        NPC npc = Main.npc[npcIndex];
        if (npc.type < 0 || npc.type >= (int) NPCID.Count || !NPCID.Sets.CanConvertIntoCopperSlimeTownNPC[npc.type])
          return;
        NPC.unlockedSlimeCopperSpawn = true;
        NetMessage.SendData(7);
        Vector2 velocity = npc.velocity;
        npc.Transform(684);
        npc.netUpdate = true;
        npc.velocity = velocity;
        ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.TownSlimeTransform, new ParticleOrchestraSettings()
        {
          PositionInWorld = npc.Center,
          MovementVector = Vector2.Zero,
          UniqueInfoPiece = 1
        });
      }
    }

    public static void HaveDryadDoStardewAnimation()
    {
      for (int index = 0; index < 200; ++index)
      {
        NPC npc = Main.npc[index];
        if (npc.active && npc.type == 20)
        {
          npc.localAI[2] = 480f;
          npc.ai[0] = 24f;
          npc.ai[1] = 480f;
          npc.ai[2] = 0.0f;
          npc.localAI[3] = 0.0f;
          npc.netUpdate = true;
          npc.direction = 1;
          npc.spriteDirection = 1;
          Vector2 vec = npc.Bottom + new Vector2(100f, 0.0f);
          Point tileCoordinates = vec.ToTileCoordinates();
          tileCoordinates.Y = Utils.Clamp<int>(tileCoordinates.Y - 10, 10, Main.maxTilesY - 10);
          int y1 = tileCoordinates.Y;
          int num1 = 15;
          int num2 = tileCoordinates.Y + num1;
          bool flag = false;
          for (int y2 = tileCoordinates.Y; y2 < num2; ++y2)
          {
            Tile tile = Main.tile[tileCoordinates.X, y2];
            tileCoordinates.Y = y2;
            if (tile.active() && Main.tileSolid[(int) tile.type])
            {
              if (y2 == y1)
              {
                flag = true;
                break;
              }
              break;
            }
          }
          Vector2 vector2_1 = new Vector2(0.0f, -52f);
          Vector2 vector2_2 = tileCoordinates.ToWorldCoordinates(autoAddY: 0.0f);
          if (flag)
            vector2_2 = vec;
          Projectile.NewProjectile((IEntitySource) new EntitySource_DebugCommand(), vector2_2 + vector2_1, Vector2.Zero, 995, 0, 0.0f, Main.myPlayer);
          break;
        }
      }
    }

    private void AI_047_GolemFist()
    {
      float myBalance = this.GetMyBalance();
      if (Main.getGoodWorld)
        myBalance += 3f;
      if (!Main.player[this.target].ZoneLihzhardTemple && !Main.player[this.target].ZoneJungle || (double) Main.player[this.target].Center.Y < Main.worldSurface * 16.0)
        myBalance *= 2f;
      if (NPC.golemBoss < 0)
      {
        this.StrikeNPCNoInteraction(9999, 0.0f, 0);
      }
      else
      {
        if (this.alpha > 0)
        {
          this.alpha -= 10;
          if (this.alpha < 0)
            this.alpha = 0;
          this.ai[1] = 0.0f;
        }
        Player player = Main.player[this.target];
        NPC npc = Main.npc[NPC.golemBoss];
        Vector2 vector2_1 = npc.Center + npc.velocity + new Vector2(0.0f, -9f * this.scale);
        vector2_1.X += (this.type == 247 ? -84f : 78f) * this.scale;
        Vector2 vector2_2 = vector2_1 - this.Center;
        float num1 = vector2_2.Length();
        if ((double) this.ai[0] == 0.0)
        {
          this.noTileCollide = true;
          float num2 = 14f;
          if (this.life < this.lifeMax / 2)
            num2 += 3f;
          if (this.life < this.lifeMax / 4)
            num2 += 3f;
          if (Main.npc[NPC.golemBoss].life < Main.npc[NPC.golemBoss].lifeMax)
            num2 += 8f;
          float num3 = num2 * (float) (((double) myBalance + 3.0) / 4.0);
          if ((double) num3 > 32.0)
            num3 = 32f;
          float x = vector2_2.X;
          float y = vector2_2.Y;
          float num4 = num1;
          if ((double) num4 < 12.0 + (double) num3)
          {
            this.rotation = 0.0f;
            this.velocity.X = x;
            this.velocity.Y = y;
            float num5 = myBalance;
            this.ai[1] += num5;
            if (this.life < this.lifeMax / 2)
              this.ai[1] += num5;
            if (this.life < this.lifeMax / 4)
              this.ai[1] += num5;
            if (Main.npc[NPC.golemBoss].life < Main.npc[NPC.golemBoss].lifeMax)
              this.ai[1] += 10f * num5;
            if ((double) this.ai[1] < 60.0)
              return;
            this.TargetClosest();
            if (this.type == 247 && (double) this.Center.X + 100.0 > (double) Main.player[this.target].Center.X || this.type == 248 && (double) this.Center.X - 100.0 < (double) Main.player[this.target].Center.X)
            {
              this.ai[1] = 0.0f;
              this.ai[0] = 1f;
            }
            else
              this.ai[1] = 0.0f;
          }
          else
          {
            float num6 = num3 / num4;
            this.velocity.X = x * num6;
            this.velocity.Y = y * num6;
            this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
            if (this.type != 247)
              return;
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
          }
        }
        else if ((double) this.ai[0] == 1.0)
        {
          ++this.ai[1];
          this.Center = vector2_1;
          this.rotation = 0.0f;
          this.velocity = Vector2.Zero;
          if ((double) this.ai[1] <= 15.0)
          {
            for (int index = 0; index < 1; ++index)
            {
              Vector2 vector2_3 = Main.rand.NextVector2Circular(80f, 80f);
              Vector2 vector2_4 = vector2_3 * -1f * 0.05f;
              Vector2 vector2_5 = Main.rand.NextVector2Circular(20f, 20f);
              Dust dust = Dust.NewDustPerfect(this.Center + vector2_4 + vector2_3 + vector2_5, 228, new Vector2?(vector2_4));
              dust.fadeIn = 1.5f;
              dust.scale = 0.5f;
              if (Main.getGoodWorld)
                dust.noLight = true;
              dust.noGravity = true;
            }
          }
          if ((double) this.ai[1] < 30.0)
            return;
          this.noTileCollide = true;
          this.collideX = false;
          this.collideY = false;
          this.ai[0] = 2f;
          this.ai[1] = 0.0f;
          float num7 = 12f;
          if (this.life < this.lifeMax / 2)
            num7 += 4f;
          if (this.life < this.lifeMax / 4)
            num7 += 4f;
          if (Main.npc[NPC.golemBoss].life < Main.npc[NPC.golemBoss].lifeMax)
            num7 += 10f;
          float num8 = num7 * (float) (((double) myBalance + 3.0) / 4.0);
          if ((double) num8 > 48.0)
            num8 = 48f;
          Vector2 vector2_6 = new Vector2(this.Center.X, this.Center.Y);
          float num9 = Main.player[this.target].Center.X - vector2_6.X;
          float num10 = Main.player[this.target].Center.Y - vector2_6.Y;
          float num11 = (float) Math.Sqrt((double) num9 * (double) num9 + (double) num10 * (double) num10);
          float num12 = num8 / num11;
          this.velocity.X = num9 * num12;
          this.velocity.Y = num10 * num12;
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
          if (this.type != 247)
            return;
          this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
        }
        else if ((double) this.ai[0] == 2.0)
        {
          if (Main.netMode != 1 && Main.getGoodWorld)
          {
            for (int tileX = (int) ((double) this.position.X / 16.0) - 1; (double) tileX < ((double) this.position.X + (double) this.width) / 16.0 + 1.0; ++tileX)
            {
              for (int tileY = (int) ((double) this.position.Y / 16.0) - 1; (double) tileY < ((double) this.position.Y + (double) this.width) / 16.0 + 1.0; ++tileY)
              {
                if (Main.tile[tileX, tileY].type == (ushort) 4)
                {
                  Main.tile[tileX, tileY].active(false);
                  if (Main.netMode == 2)
                    NetMessage.SendTileSquare(-1, tileX, tileY);
                }
              }
            }
          }
          ++this.ai[1];
          if ((double) this.ai[1] == 1.0)
            SoundEngine.PlaySound(SoundID.Item14, this.position);
          if (Main.rand.Next(2) == 0)
          {
            Vector2 vector2_7 = this.velocity * 0.5f;
            Vector2 vector2_8 = Main.rand.NextVector2Circular(20f, 20f);
            Dust.NewDustPerfect(this.Center + vector2_7 + vector2_8, 306, new Vector2?(vector2_7), newColor: Main.OurFavoriteColor).scale = 2f;
          }
          if ((double) Math.Abs(this.velocity.X) > (double) Math.Abs(this.velocity.Y))
          {
            if ((double) this.velocity.X > 0.0 && (double) this.Center.X > (double) player.Center.X)
              this.noTileCollide = false;
            if ((double) this.velocity.X < 0.0 && (double) this.Center.X < (double) player.Center.X)
              this.noTileCollide = false;
          }
          else
          {
            if ((double) this.velocity.Y > 0.0 && (double) this.Center.Y > (double) player.Center.Y)
              this.noTileCollide = false;
            if ((double) this.velocity.Y < 0.0 && (double) this.Center.Y < (double) player.Center.Y)
              this.noTileCollide = false;
          }
          if ((double) num1 <= 700.0 && !this.collideX && !this.collideY)
            return;
          this.noTileCollide = true;
          this.ai[0] = 0.0f;
        }
        else
        {
          if ((double) this.ai[0] != 3.0)
            return;
          this.noTileCollide = true;
          float num13 = 0.4f;
          Vector2 vector2_9 = new Vector2(this.Center.X, this.Center.Y);
          float num14 = Main.player[this.target].Center.X - vector2_9.X;
          float num15 = Main.player[this.target].Center.Y - vector2_9.Y;
          float num16 = (float) (12.0 / Math.Sqrt((double) num14 * (double) num14 + (double) num15 * (double) num15));
          float num17 = num14 * num16;
          float num18 = num15 * num16;
          if ((double) this.velocity.X < (double) num17)
          {
            this.velocity.X += num13;
            if ((double) this.velocity.X < 0.0 && (double) num17 > 0.0)
              this.velocity.X += num13 * 2f;
          }
          else if ((double) this.velocity.X > (double) num17)
          {
            this.velocity.X -= num13;
            if ((double) this.velocity.X > 0.0 && (double) num17 < 0.0)
              this.velocity.X -= num13 * 2f;
          }
          if ((double) this.velocity.Y < (double) num18)
          {
            this.velocity.Y += num13;
            if ((double) this.velocity.Y < 0.0 && (double) num18 > 0.0)
              this.velocity.Y += num13 * 2f;
          }
          else if ((double) this.velocity.Y > (double) num18)
          {
            this.velocity.Y -= num13;
            if ((double) this.velocity.Y > 0.0 && (double) num18 < 0.0)
              this.velocity.Y -= num13 * 2f;
          }
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
          if (this.type != 247)
            return;
          this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
        }
      }
    }

    private void AI_045_Golem()
    {
      NPC.golemBoss = this.whoAmI;
      float myBalance = this.GetMyBalance();
      if (Main.getGoodWorld)
        myBalance += 2f;
      if (!Main.player[this.target].ZoneLihzhardTemple && !Main.player[this.target].ZoneJungle || (double) Main.player[this.target].Center.Y < Main.worldSurface * 16.0)
        myBalance *= 2f;
      if ((double) this.localAI[0] == 0.0)
      {
        this.localAI[0] = 1f;
        NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) this.Center.X - 84, (int) this.Center.Y - 9, 247);
        NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) this.Center.X + 78, (int) this.Center.Y - 9, 248);
        NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) this.Center.X - 3, (int) this.Center.Y - 57, 246);
      }
      if (this.target >= 0 && Main.player[this.target].dead)
      {
        this.TargetClosest();
        if (Main.player[this.target].dead)
          this.noTileCollide = true;
      }
      if (this.alpha > 0)
      {
        this.alpha -= 10;
        if (this.alpha < 0)
          this.alpha = 0;
        this.ai[1] = 0.0f;
      }
      bool flag1 = false;
      bool flag2 = false;
      bool flag3 = false;
      this.dontTakeDamage = false;
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active && Main.npc[index].type == 246)
          flag1 = true;
        if (Main.npc[index].active && Main.npc[index].type == 247)
          flag2 = true;
        if (Main.npc[index].active && Main.npc[index].type == 248)
          flag3 = true;
      }
      this.dontTakeDamage = flag1;
      if (Main.netMode != 1 && Main.getGoodWorld && (double) this.velocity.Y > 0.0)
      {
        for (int tileX = (int) ((double) this.position.X / 16.0); (double) tileX < ((double) this.position.X + (double) this.width) / 16.0; ++tileX)
        {
          for (int tileY = (int) ((double) this.position.Y / 16.0); (double) tileY < ((double) this.position.Y + (double) this.width) / 16.0; ++tileY)
          {
            if (Main.tile[tileX, tileY].type == (ushort) 4)
            {
              Main.tile[tileX, tileY].active(false);
              if (Main.netMode == 2)
                NetMessage.SendTileSquare(-1, tileX, tileY);
            }
          }
        }
      }
      this.position = this.position + this.netOffset;
      if (!Main.getGoodWorld)
      {
        if (!flag2)
        {
          int index1 = Dust.NewDust(new Vector2(this.Center.X - 80f * this.scale, this.Center.Y - 9f), 8, 8, 31, Alpha: 100);
          Main.dust[index1].alpha += Main.rand.Next(100);
          Main.dust[index1].velocity *= 0.2f;
          Main.dust[index1].velocity.Y -= (float) (0.5 + (double) Main.rand.Next(10) * 0.10000000149011612);
          Main.dust[index1].fadeIn = (float) (0.5 + (double) Main.rand.Next(10) * 0.10000000149011612);
          if (Main.rand.Next(10) == 0)
          {
            int index2 = Dust.NewDust(new Vector2(this.Center.X - 80f * this.scale, this.Center.Y - 9f), 8, 8, 6);
            if (Main.rand.Next(20) != 0)
            {
              Main.dust[index2].noGravity = true;
              Main.dust[index2].scale *= (float) (1.0 + (double) Main.rand.Next(10) * 0.10000000149011612);
              --Main.dust[index2].velocity.Y;
            }
          }
        }
        if (!flag3)
        {
          int index3 = Dust.NewDust(new Vector2(this.Center.X + 62f * this.scale, this.Center.Y - 9f), 8, 8, 31, Alpha: 100);
          Main.dust[index3].alpha += Main.rand.Next(100);
          Main.dust[index3].velocity *= 0.2f;
          Main.dust[index3].velocity.Y -= (float) (0.5 + (double) Main.rand.Next(10) * 0.10000000149011612);
          Main.dust[index3].fadeIn = (float) (0.5 + (double) Main.rand.Next(10) * 0.10000000149011612);
          if (Main.rand.Next(10) == 0)
          {
            int index4 = Dust.NewDust(new Vector2(this.Center.X + 62f * this.scale, this.Center.Y - 9f), 8, 8, 6);
            if (Main.rand.Next(20) != 0)
            {
              Main.dust[index4].noGravity = true;
              Main.dust[index4].scale *= (float) (1.0 + (double) Main.rand.Next(10) * 0.10000000149011612);
              --Main.dust[index4].velocity.Y;
            }
          }
        }
      }
      this.position = this.position - this.netOffset;
      if (this.noTileCollide && !Main.player[this.target].dead)
      {
        if ((double) this.velocity.Y > 0.0 && (double) this.Bottom.Y > (double) Main.player[this.target].Top.Y)
          this.noTileCollide = false;
        else if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].Center, 1, 1) && !Collision.SolidTiles(this.position, this.width, this.height))
          this.noTileCollide = false;
      }
      if ((double) this.ai[0] == 0.0)
      {
        if ((double) this.velocity.Y == 0.0)
        {
          this.velocity.X *= 0.8f;
          float num = 1f;
          if ((double) this.ai[1] > 0.0)
          {
            if (!flag2)
              num += 2f;
            if (!flag3)
              num += 2f;
            if (!flag1)
              num += 2f;
            if (this.life < this.lifeMax)
              ++num;
            if (this.life < this.lifeMax / 2)
              num += 4f;
            if (this.life < this.lifeMax / 3)
              num += 8f;
            num *= myBalance;
            if (Main.getGoodWorld)
              num += 100f;
          }
          this.ai[1] += num;
          if ((double) this.ai[1] >= 300.0)
          {
            this.ai[1] = -20f;
            this.frameCounter = 0.0;
          }
          else if ((double) this.ai[1] == -1.0)
          {
            this.noTileCollide = true;
            this.TargetClosest();
            this.velocity.X = (float) (4 * this.direction);
            if (this.life < this.lifeMax)
            {
              this.velocity.Y = (float) (-12.100000381469727 * ((double) myBalance + 9.0) / 10.0);
              if ((double) this.velocity.Y < -19.1)
                this.velocity.Y = -19.1f;
            }
            else
              this.velocity.Y = -12.1f;
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
          }
        }
      }
      else if ((double) this.ai[0] == 1.0)
      {
        if ((double) this.velocity.Y == 0.0)
        {
          SoundEngine.PlaySound(SoundID.Item14, this.position);
          this.ai[0] = 0.0f;
          for (int index5 = (int) this.position.X - 20; index5 < (int) this.position.X + this.width + 40; index5 += 20)
          {
            for (int index6 = 0; index6 < 4; ++index6)
            {
              int index7 = Dust.NewDust(new Vector2(this.position.X - 20f, this.position.Y + (float) this.height), this.width + 20, 4, 31, Alpha: 100, Scale: 1.5f);
              Main.dust[index7].velocity *= 0.2f;
            }
            int index8 = Gore.NewGore(new Vector2((float) (index5 - 20), (float) ((double) this.position.Y + (double) this.height - 8.0)), new Vector2(), Main.rand.Next(61, 64));
            Main.gore[index8].velocity *= 0.4f;
          }
        }
        else
        {
          this.TargetClosest();
          if ((double) this.position.X < (double) Main.player[this.target].position.X && (double) this.position.X + (double) this.width > (double) Main.player[this.target].position.X + (double) Main.player[this.target].width)
          {
            this.velocity.X *= 0.9f;
            if ((double) this.Bottom.Y < (double) Main.player[this.target].position.Y)
              this.velocity.Y += (float) (0.20000000298023224 * ((double) myBalance + 1.0) / 2.0);
          }
          else
          {
            if (this.direction < 0)
              this.velocity.X -= 0.2f;
            else if (this.direction > 0)
              this.velocity.X += 0.2f;
            float num1 = 3f;
            if (this.life < this.lifeMax)
              ++num1;
            if (this.life < this.lifeMax / 2)
              ++num1;
            if (this.life < this.lifeMax / 4)
              ++num1;
            float num2 = num1 * (float) (((double) myBalance + 1.0) / 2.0);
            if ((double) this.velocity.X < -(double) num2)
              this.velocity.X = -num2;
            if ((double) this.velocity.X > (double) num2)
              this.velocity.X = num2;
          }
        }
      }
      if (this.target <= 0 || this.target == (int) byte.MaxValue || Main.player[this.target].dead)
        this.TargetClosest();
      int num3 = 3000;
      if ((double) Math.Abs(this.Center.X - Main.player[this.target].Center.X) + (double) Math.Abs(this.Center.Y - Main.player[this.target].Center.Y) <= (double) num3)
        return;
      this.TargetClosest();
      if ((double) Math.Abs(this.Center.X - Main.player[this.target].Center.X) + (double) Math.Abs(this.Center.Y - Main.player[this.target].Center.Y) <= (double) num3)
        return;
      this.active = false;
    }

    public static bool IsMechQueenUp
    {
      get
      {
        if (NPC.mechQueen < 0 || NPC.mechQueen >= 200)
          return false;
        if (Main.npc[NPC.mechQueen].active && Main.npc[NPC.mechQueen].type == (int) sbyte.MaxValue)
          return true;
        NPC.mechQueen = -1;
        return false;
      }
    }

    public static bool SpawnMechQueen(int onWhichPlayer)
    {
      if (NPC.AnyNPCs((int) sbyte.MaxValue) || NPC.AnyNPCs(134) || NPC.AnyNPCs(125) || NPC.AnyNPCs(126) || !Main.remixWorld && !Main.getGoodWorld)
        return false;
      if (Main.netMode == 1)
      {
        NetMessage.SendData(61, number: onWhichPlayer, number2: -16f);
      }
      else
      {
        NPC.mechQueen = -2;
        NPC.SpawnOnPlayer(onWhichPlayer, (int) sbyte.MaxValue);
        NPC.mechQueen = NPC.FindFirstNPC((int) sbyte.MaxValue);
        NPC.NewNPC(NPC.GetBossSpawnSource(onWhichPlayer), (int) Main.npc[NPC.mechQueen].Center.X, (int) Main.npc[NPC.mechQueen].Center.Y, 125, 1);
        NPC.NewNPC(NPC.GetBossSpawnSource(onWhichPlayer), (int) Main.npc[NPC.mechQueen].Center.X, (int) Main.npc[NPC.mechQueen].Center.Y, 126, 1);
        int ai2 = NPC.NewNPC(NPC.GetBossSpawnSource(onWhichPlayer), (int) Main.npc[NPC.mechQueen].Center.X, (int) Main.npc[NPC.mechQueen].Center.Y, 134, 1);
        NPC.NewNPC(NPC.GetBossSpawnSource(onWhichPlayer), (int) Main.npc[NPC.mechQueen].Center.X, (int) Main.npc[NPC.mechQueen].Center.Y, 139, 1, ai2: ((float) ai2), ai3: -1f);
        NPC.NewNPC(NPC.GetBossSpawnSource(onWhichPlayer), (int) Main.npc[NPC.mechQueen].Center.X, (int) Main.npc[NPC.mechQueen].Center.Y, 139, 1, ai2: ((float) ai2), ai3: 1f);
      }
      return true;
    }

    public void AI()
    {
      // ISSUE: The method is too long to display (123675 instructions)
    }

    private void AI_124_ElderSlimeChest() => this.velocity.Y += 0.2f;

    private void AI_125_ClumsySlimeBalloon()
    {
      if ((double) this.localAI[0] == 0.0 && Main.netMode != 1)
      {
        this.TargetClosest();
        this.localAI[0] = 1f;
        this.netUpdate = true;
      }
      this.spriteDirection = this.direction;
      this.rotation = this.velocity.X * 0.05f;
      NPCAimedTarget targetData = this.GetTargetData();
      float num1 = float.PositiveInfinity;
      int num2 = 0;
      Vector2 zero = Vector2.Zero;
      if (!targetData.Invalid)
      {
        Vector2 vector2 = targetData.Center - this.Bottom;
        if ((double) vector2.Y < 0.0)
          num2 = (int) vector2.Y / -16;
        num1 = vector2.Length();
        if (this.direction != Math.Sign(vector2.X))
          num2 = 0;
      }
      if (this.wet || this.collideX || this.collideY && (double) this.oldVelocity.Y < 0.0)
      {
        this.position.X -= this.oldVelocity.X + (float) (this.direction * 8);
        this.TargetClosest(false);
        this.direction *= -1;
        this.velocity.X = (float) (this.direction * 2);
        this.life = -1;
        this.HitEffect();
        this.active = false;
        this.netUpdate = true;
        SoundEngine.PlaySound(this.DeathSound, this.position);
      }
      else
      {
        if (this.collideY)
        {
          this.velocity.Y = (double) this.oldVelocity.Y > 0.0 ? 1f : -1f;
          this.TargetClosest(false);
        }
        float num3 = (float) (3.0 + (double) Math.Abs(Main.windSpeedTarget) * 2.0);
        if (Math.Sign(this.velocity.X) != this.direction || (double) Math.Abs(this.velocity.X) < (double) num3)
        {
          this.velocity.X += (float) this.direction * 0.04f;
          if ((double) this.velocity.X * (double) this.direction < 0.0)
          {
            if ((double) Math.Abs(this.velocity.X) > (double) num3)
              this.velocity.X += (float) this.direction * 0.15f;
            else
              this.velocity.X += (float) this.direction * 0.1f;
          }
          else if ((double) Math.Abs(this.velocity.X) > (double) num3)
            this.velocity.X = (float) this.direction * num3;
        }
        int index1 = (int) (((double) this.position.X + (double) (this.width / 2)) / 16.0) + this.direction;
        int num4 = (int) (((double) this.position.Y + (double) this.height) / 16.0);
        bool flag1 = true;
        int num5 = 8 + num2;
        bool flag2 = false;
        for (int index2 = num4; index2 < num4 + num5; ++index2)
        {
          if (Main.tile[index1, index2] == null)
            Main.tile[index1, index2] = new Tile();
          if (Main.tile[index1, index2].nactive() && Main.tileSolid[(int) Main.tile[index1, index2].type] || Main.tile[index1, index2].liquid > (byte) 0)
          {
            if (index2 < num4 + 5 + num2)
              flag2 = true;
            flag1 = false;
            break;
          }
        }
        if ((double) num1 < 400.0 && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
        {
          float num6 = 2f;
          float num7 = 0.035f;
          if ((double) this.Center.Y + (double) (this.height / 4) > (double) Main.player[this.target].position.Y + (double) (Main.player[this.target].height / 4) && (double) this.velocity.Y > -(double) num6)
          {
            this.velocity.Y -= num7;
            if ((double) this.velocity.Y <= 0.0)
              return;
            this.velocity.Y -= num7;
          }
          else
          {
            if ((double) this.Center.Y + (double) (this.height / 4) >= (double) Main.player[this.target].position.Y + (double) (Main.player[this.target].height / 4) || (double) this.velocity.Y >= (double) num6)
              return;
            this.velocity.Y += num7;
            if ((double) this.velocity.Y >= 0.0)
              return;
            this.velocity.Y += num7;
          }
        }
        else
        {
          if (flag1)
            this.velocity.Y += 0.05f;
          else
            this.velocity.Y -= 0.1f;
          if (flag2)
            this.velocity.Y -= 0.2f;
          if ((double) this.velocity.Y > 2.0)
            this.velocity.Y = 2f;
          if ((double) this.velocity.Y >= -4.0)
            return;
          this.velocity.Y = -4f;
        }
      }
    }

    private void SpawnStardustMark_StardustTower()
    {
      List<int> intList = new List<int>();
      if (NPC.CountNPCS(405) + NPC.CountNPCS(406) < 2)
        intList.Add(405);
      if (NPC.CountNPCS(402) < 2)
        intList.Add(402);
      if (NPC.CountNPCS(407) < 1)
        intList.Add(407);
      if (intList.Count > 0)
      {
        int num1 = Utils.SelectRandom<int>(Main.rand, intList.ToArray());
        this.ai[1] = (float) (30 * Main.rand.Next(5, 16));
        int num2 = Main.rand.Next(3, 6);
        int num3 = Main.rand.Next(0, 4);
        int index1 = 0;
        List<Tuple<Vector2, int, int>> tupleList = new List<Tuple<Vector2, int, int>>();
        List<Vector2> vector2List = new List<Vector2>();
        tupleList.Add(Tuple.Create<Vector2, int, int>(this.Top - Vector2.UnitY * 120f, num2, 0));
        int num4 = 0;
        int count = tupleList.Count;
        while (tupleList.Count > 0)
        {
          Vector2 vector2_1 = tupleList[0].Item1;
          int num5 = 1;
          int num6 = 1;
          if (num4 > 0 && num3 > 0 && (Main.rand.Next(3) != 0 || num4 == 1))
          {
            num6 = Main.rand.Next(Math.Max(1, tupleList[0].Item2));
            ++num5;
            --num3;
          }
          for (int index2 = 0; index2 < num5; ++index2)
          {
            int num7 = tupleList[0].Item3;
            if (num4 == 0)
              num7 = Utils.SelectRandom<int>(Main.rand, -1, 1);
            else if (index2 == 1)
              num7 *= -1;
            float radians = (float) ((num4 % 2 == 0 ? 0.0 : 3.1415927410125732) + (0.5 - (double) Main.rand.NextFloat()) * 0.78539818525314331 + (double) num7 * 0.78539818525314331 * (double) (num4 % 2 == 0).ToDirectionInt());
            float num8 = (float) (100.0 + 50.0 * (double) Main.rand.NextFloat());
            int num9 = tupleList[0].Item2;
            if (index2 != 0)
              num9 = num6;
            if (num4 == 0)
            {
              radians = (float) ((0.5 - (double) Main.rand.NextFloat()) * 0.78539818525314331);
              num8 = (float) (100.0 + 100.0 * (double) Main.rand.NextFloat());
            }
            Vector2 vector2_2 = (-Vector2.UnitY).RotatedBy((double) radians) * num8;
            if (num9 - 1 < 0)
              vector2_2 = Vector2.Zero;
            index1 = Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_1.X, vector2_1.Y, vector2_2.X, vector2_2.Y, 540, 0, 0.0f, Main.myPlayer, (float) -num4 * 10f, (float) (0.5 + (double) Main.rand.NextFloat() * 0.5));
            vector2List.Add(vector2_1 + vector2_2);
            if (num4 < num2 && tupleList[0].Item2 > 0)
              tupleList.Add(Tuple.Create<Vector2, int, int>(vector2_1 + vector2_2, num9 - 1, num7));
          }
          tupleList.Remove(tupleList[0]);
          if (--count == 0)
          {
            count = tupleList.Count;
            ++num4;
          }
        }
        Main.projectile[index1].localAI[0] = (float) num1;
      }
      else
        this.ai[1] = 30f;
    }

    private void SpawnStardustMark_StardustWorm()
    {
      List<int> intList = new List<int>();
      if (NPC.CountNPCS(405) + NPC.CountNPCS(406) < 2)
        intList.Add(405);
      if (NPC.CountNPCS(402) < 3)
        intList.Add(402);
      if (NPC.CountNPCS(407) < 1)
        intList.Add(407);
      if (intList.Count <= 0)
        return;
      int num1 = Utils.SelectRandom<int>(Main.rand, intList.ToArray());
      int num2 = Main.rand.Next(3, 6);
      int num3 = Main.rand.Next(0, 4);
      int index1 = 0;
      List<Tuple<Vector2, int, int>> tupleList = new List<Tuple<Vector2, int, int>>();
      List<Vector2> vector2List = new List<Vector2>();
      tupleList.Add(Tuple.Create<Vector2, int, int>(this.Center, num2, 0));
      int num4 = 0;
      int count = tupleList.Count;
      while (tupleList.Count > 0)
      {
        Vector2 vector2_1 = tupleList[0].Item1;
        int num5 = 1;
        int num6 = 1;
        if (num4 > 0 && num3 > 0 && (Main.rand.Next(3) != 0 || num4 == 1))
        {
          num6 = Main.rand.Next(Math.Max(1, tupleList[0].Item2));
          ++num5;
          --num3;
        }
        for (int index2 = 0; index2 < num5; ++index2)
        {
          int num7 = tupleList[0].Item3;
          if (num4 == 0)
            num7 = Utils.SelectRandom<int>(Main.rand, -1, 1);
          else if (index2 == 1)
            num7 *= -1;
          float radians = (float) ((num4 % 2 == 0 ? 0.0 : 3.1415927410125732) + (0.5 - (double) Main.rand.NextFloat()) * 0.78539818525314331 + (double) num7 * 0.78539818525314331 * (double) (num4 % 2 == 0).ToDirectionInt());
          float num8 = (float) (100.0 + 50.0 * (double) Main.rand.NextFloat());
          int num9 = tupleList[0].Item2;
          if (index2 != 0)
            num9 = num6;
          if (num4 == 0)
          {
            radians = (float) ((0.5 - (double) Main.rand.NextFloat()) * 0.78539818525314331);
            num8 = (float) (100.0 + 100.0 * (double) Main.rand.NextFloat());
          }
          Vector2 vector2_2 = (-Vector2.UnitY).RotatedBy((double) radians) * num8;
          if (num9 - 1 < 0)
            vector2_2 = Vector2.Zero;
          index1 = Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_1.X, vector2_1.Y, vector2_2.X, vector2_2.Y, 540, 0, 0.0f, Main.myPlayer, (float) -num4 * 10f, (float) (0.5 + (double) Main.rand.NextFloat() * 0.5));
          vector2List.Add(vector2_1 + vector2_2);
          if (num4 < num2 && tupleList[0].Item2 > 0)
            tupleList.Add(Tuple.Create<Vector2, int, int>(vector2_1 + vector2_2, num9 - 1, num7));
        }
        tupleList.Remove(tupleList[0]);
        if (--count == 0)
        {
          count = tupleList.Count;
          ++num4;
        }
      }
      Main.projectile[index1].localAI[0] = (float) num1;
    }

    public static bool IsDeerclopsHostile()
    {
      if (NPC.deerclopsBoss == -1)
        return false;
      NPC npc = Main.npc[NPC.deerclopsBoss];
      if (!npc.active || npc.type != 668)
        return false;
      switch ((int) npc.ai[0])
      {
        case 6:
        case 7:
        case 8:
          Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int) Main.screenPosition.X, (int) Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
          rectangle.Inflate(960, 960);
          if (!npc.Hitbox.Intersects(rectangle))
            return false;
          break;
      }
      return true;
    }

    private void AI_123_Deerclops()
    {
      NPC.deerclopsBoss = this.whoAmI;
      int Damage = 15;
      NPCAimedTarget targetData1 = this.GetTargetData();
      bool haltMovement = false;
      bool goHome = false;
      this.localAI[3] = MathHelper.Clamp(this.localAI[3] + (float) ((double) this.Distance(targetData1.Center) >= 450.0).ToDirectionInt(), 0.0f, 30f);
      this.dontTakeDamage = (double) this.localAI[3] >= 30.0;
      float lifePercent = (float) this.life / (float) this.lifeMax;
      bool expertMode = Main.expertMode;
      int shadowHandDamage = 10;
      float num1 = Utils.Remap(this.localAI[3], 0.0f, 30f, 0.0f, 1f);
      if ((double) num1 > 0.0)
      {
        float num2 = (float) ((double) Main.rand.NextFloat() * (double) num1 * 3.0);
        while ((double) num2 > 0.0)
        {
          --num2;
          Dust.NewDustDirect(this.position, this.width, this.height, 109, SpeedY: -3f, Scale: 1.4f).noGravity = true;
        }
      }
      if (this.homeTileX == -1 && this.homeTileY == -1)
      {
        Point tileCoordinates = this.Bottom.ToTileCoordinates();
        this.homeTileX = tileCoordinates.X;
        this.homeTileY = tileCoordinates.Y;
        this.ai[2] = (float) this.homeTileX;
        this.ai[3] = (float) this.homeTileY;
        this.netUpdate = true;
        this.timeLeft = 86400;
      }
      this.timeLeft -= Main.dayRate;
      if (this.timeLeft < 0)
        this.timeLeft = 0;
      this.homeTileX = (int) this.ai[2];
      this.homeTileY = (int) this.ai[3];
      if (!expertMode)
        this.localAI[2] = 0.0f;
      if (expertMode && Main.netMode != 1)
        this.SpawnPassiveShadowHands(lifePercent, shadowHandDamage);
      switch (this.ai[0])
      {
        case -1f:
          this.localAI[3] = -10f;
          break;
        case 0.0f:
          this.TargetClosest();
          NPCAimedTarget targetData2 = this.GetTargetData();
          if (this.ShouldRunAway(ref targetData2, true))
          {
            this.ai[0] = 6f;
            this.ai[1] = 0.0f;
            this.localAI[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          ++this.ai[1];
          Vector2 point = this.Bottom + new Vector2(0.0f, -32f);
          Vector2 vector2_1 = targetData2.Hitbox.ClosestPointInRect(point);
          Vector2 vector2_2 = vector2_1 - point;
          double num3 = (double) (vector2_1 - this.Center).Length();
          float num4 = 0.6f;
          bool flag1 = (double) Math.Abs(vector2_2.X) >= (double) Math.Abs(vector2_2.Y) * (double) num4 || (double) vector2_2.Length() < 48.0;
          bool flag2 = (double) vector2_2.Y <= (double) (100 + targetData2.Height) && (double) vector2_2.Y >= -200.0;
          if ((!((double) Math.Abs(vector2_2.X) < 120.0 & flag2) || (double) this.velocity.Y != 0.0 ? 0 : ((double) this.localAI[1] >= 2.0 ? 1 : 0)) != 0)
          {
            this.velocity.X = 0.0f;
            this.ai[0] = 4f;
            this.ai[1] = 0.0f;
            this.localAI[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          if (((!((double) Math.Abs(vector2_2.X) < 120.0 & flag2) ? 0 : ((double) this.velocity.Y == 0.0 ? 1 : 0)) & (flag1 ? 1 : 0)) != 0)
          {
            this.velocity.X = 0.0f;
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            ++this.localAI[1];
            this.netUpdate = true;
            break;
          }
          bool flag3 = (double) this.ai[1] >= 240.0;
          if ((((double) this.velocity.Y != 0.0 ? 0 : ((double) this.velocity.X != 0.0 ? 1 : 0)) & (flag3 ? 1 : 0)) != 0)
          {
            this.velocity.X = 0.0f;
            this.ai[0] = 2f;
            this.ai[1] = 0.0f;
            this.localAI[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          bool flag4 = (double) this.ai[1] >= 90.0;
          if ((((double) this.velocity.Y != 0.0 ? 0 : ((double) this.velocity.X == 0.0 ? 1 : 0)) & (flag4 ? 1 : 0)) != 0)
          {
            this.velocity.X = 0.0f;
            this.ai[0] = 5f;
            this.ai[1] = 0.0f;
            this.localAI[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          bool flag5 = (double) this.ai[1] >= 120.0;
          int type1 = 32;
          bool flag6 = targetData2.Type == NPCTargetType.Player && !Main.player[this.target].buffImmune[type1] && Main.player[this.target].FindBuffIndex(type1) == -1;
          if ((!((double) this.velocity.Y == 0.0 & flag5 & flag6) ? 0 : ((double) Math.Abs(vector2_2.X) > 100.0 ? 1 : 0)) != 0)
          {
            this.velocity.X = 0.0f;
            this.ai[0] = 3f;
            this.ai[1] = 0.0f;
            this.localAI[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 1f:
          ++this.ai[1];
          haltMovement = true;
          this.AI_123_Deerclops_MakeSpikesForward(1, targetData1);
          if ((double) this.ai[1] >= 80.0)
          {
            this.ai[0] = 0.0f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 2f:
          int num5 = 8 * 4;
          ++this.ai[1];
          if ((double) this.ai[1] == (double) (num5 - 20))
            SoundEngine.PlaySound(SoundID.DeerclopsScream, this.Center);
          if ((double) this.ai[1] == (double) num5)
            SoundEngine.PlaySound(SoundID.DeerclopsRubbleAttack, this.Center);
          haltMovement = true;
          if (Main.netMode != 1 && (double) this.ai[1] >= (double) num5)
          {
            Point tileCoordinates = this.Top.ToTileCoordinates();
            int howMany = 20;
            int distancedByThisManyTiles = 1;
            float upBiasPerSpike = 200f;
            tileCoordinates.X += this.direction * 3;
            tileCoordinates.Y -= 10;
            int num6 = (int) this.ai[1] - num5;
            if (num6 == 0)
            {
              PunchCameraModifier modifier = new PunchCameraModifier(this.Center, new Vector2(0.0f, -1f), 20f, 6f, 30, 1000f, "Deerclops");
              Main.instance.CameraModifiers.Add((ICameraModifier) modifier);
            }
            int num7 = 1;
            int num8 = num6 / num7 * num7;
            int num9 = num8 + num7;
            if (num6 % num7 != 0)
              num9 = num8;
            for (int whichOne = num8; whichOne < num9 && whichOne < howMany; ++whichOne)
              this.AI_123_Deerclops_ShootRubbleUp(ref targetData1, ref tileCoordinates, howMany, distancedByThisManyTiles, upBiasPerSpike, whichOne);
          }
          if ((double) this.ai[1] >= 60.0)
          {
            this.ai[0] = 0.0f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 3f:
          if ((double) this.ai[1] == 30.0)
            SoundEngine.PlaySound(SoundID.DeerclopsScream, this.Center);
          ++this.ai[1];
          haltMovement = true;
          if ((int) this.ai[1] % 4 == 0 && (double) this.ai[1] >= 28.0)
          {
            PunchCameraModifier modifier = new PunchCameraModifier(this.Center, (Main.rand.NextFloat() * 6.28318548f).ToRotationVector2(), 20f, 6f, 20, 1000f, "Deerclops");
            Main.instance.CameraModifiers.Add((ICameraModifier) modifier);
            if (Main.netMode != 2)
            {
              Player player1 = Main.player[Main.myPlayer];
              int player2 = Main.myPlayer;
              int type2 = 32;
              int timeToAdd = 720;
              if (!player1.dead && player1.active && player1.FindBuffIndex(type2) == -1 && (double) (player1.Center - this.Center).Length() < 800.0 && !player1.creativeGodMode)
                player1.AddBuff(type2, timeToAdd);
            }
          }
          if ((double) this.ai[1] == 30.0)
            this.TargetClosest();
          if ((double) this.ai[1] >= 60.0)
          {
            this.ai[0] = 0.0f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 4f:
          ++this.ai[1];
          haltMovement = true;
          this.TargetClosest();
          this.AI_123_Deerclops_MakeSpikesBothSides(1, targetData1);
          if ((double) this.ai[1] >= 90.0)
          {
            this.ai[0] = 0.0f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 5f:
          if ((double) this.ai[1] == 30.0)
            SoundEngine.PlaySound(SoundID.DeerclopsScream, this.Center);
          ++this.ai[1];
          haltMovement = true;
          if ((int) this.ai[1] % 4 == 0 && (double) this.ai[1] >= 28.0)
          {
            PunchCameraModifier modifier = new PunchCameraModifier(this.Center, (Main.rand.NextFloat() * 6.28318548f).ToRotationVector2(), 20f, 6f, 20, 1000f, "Deerclops");
            Main.instance.CameraModifiers.Add((ICameraModifier) modifier);
          }
          if ((double) this.ai[1] == 30.0)
          {
            this.TargetClosest();
            if (Main.netMode != 1)
            {
              for (int index = 0; index < 6; ++index)
              {
                Vector2 spawnposition;
                Vector2 spawnvelocity;
                float ai0;
                float ai1;
                Projectile.RandomizeInsanityShadowFor((Entity) Main.player[this.target], true, out spawnposition, out spawnvelocity, out ai0, out ai1);
                Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), spawnposition, spawnvelocity, 965, Damage, 0.0f, Main.myPlayer, ai0, ai1);
              }
            }
          }
          if ((double) this.ai[1] >= 60.0)
          {
            this.ai[0] = 0.0f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 6f:
          this.TargetClosest(false);
          NPCAimedTarget targetData3 = this.GetTargetData();
          if (Main.netMode != 1)
          {
            if (!this.ShouldRunAway(ref targetData3, false))
            {
              this.ai[0] = 0.0f;
              this.ai[1] = 0.0f;
              this.localAI[1] = 0.0f;
              this.netUpdate = true;
              break;
            }
            if (this.timeLeft <= 0)
            {
              this.ai[0] = 8f;
              this.ai[1] = 0.0f;
              this.localAI[1] = 0.0f;
              this.netUpdate = true;
              break;
            }
          }
          if (this.direction != this.oldDirection)
            this.netUpdate = true;
          goHome = true;
          ++this.ai[1];
          Vector2 Other = new Vector2((float) (this.homeTileX * 16), (float) (this.homeTileY * 16));
          bool flag7 = (double) this.Top.Y > (double) Other.Y + 1600.0;
          int num10 = (double) this.Distance(Other) < 1020.0 ? 1 : 0;
          double num11 = (double) this.Distance(targetData3.Center);
          float num12 = this.ai[1] % 600f;
          if (num10 != 0 && (double) num12 < 420.0)
            haltMovement = true;
          bool flag8 = false;
          int num13 = 300;
          if (flag7 && (double) this.ai[1] >= (double) num13)
            flag8 = true;
          int num14 = 1500;
          if (num10 == 0 && (double) this.ai[1] >= (double) num14)
            flag8 = true;
          if (flag8)
          {
            this.ai[0] = 7f;
            this.ai[1] = 0.0f;
            this.localAI[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 7f:
          if ((double) this.ai[1] == 30.0)
            SoundEngine.PlaySound(SoundID.DeerclopsScream, this.Center);
          ++this.ai[1];
          haltMovement = true;
          if ((int) this.ai[1] % 4 == 0 && (double) this.ai[1] >= 28.0)
          {
            PunchCameraModifier modifier = new PunchCameraModifier(this.Center, (Main.rand.NextFloat() * 6.28318548f).ToRotationVector2(), 20f, 6f, 20, 1000f, "Deerclops");
            Main.instance.CameraModifiers.Add((ICameraModifier) modifier);
          }
          if ((double) this.ai[1] == 40.0)
          {
            this.TargetClosest();
            if (Main.netMode != 1)
            {
              this.netUpdate = true;
              this.Bottom = new Vector2((float) (this.homeTileX * 16), (float) (this.homeTileY * 16));
            }
          }
          if ((double) this.ai[1] >= 60.0)
          {
            this.ai[0] = 0.0f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 8f:
          if ((double) this.ai[1] == 30.0)
            SoundEngine.PlaySound(SoundID.DeerclopsScream, this.Center);
          ++this.ai[1];
          haltMovement = true;
          if ((int) this.ai[1] % 4 == 0 && (double) this.ai[1] >= 28.0)
          {
            PunchCameraModifier modifier = new PunchCameraModifier(this.Center, (Main.rand.NextFloat() * 6.28318548f).ToRotationVector2(), 20f, 6f, 20, 1000f, "Deerclops");
            Main.instance.CameraModifiers.Add((ICameraModifier) modifier);
          }
          if ((double) this.ai[1] >= 40.0)
          {
            this.life = -1;
            this.HitEffect();
            this.active = false;
            if (Main.netMode == 1)
              return;
            NetMessage.SendData(28, number: this.whoAmI, number2: -1f);
            return;
          }
          break;
      }
      this.AI_123_Deerclops_Movement(haltMovement, goHome);
    }

    private bool ShouldRunAway(ref NPCAimedTarget targetData, bool isChasing)
    {
      if (targetData.Type == NPCTargetType.Player)
      {
        Player player = Main.player[this.target];
        bool zoneSnow = player.ZoneSnow;
        Vector2 Other = new Vector2((float) (this.homeTileX * 16), (float) (this.homeTileY * 16));
        int num = 480;
        bool flag = zoneSnow | (double) player.Distance(Other) <= (double) num;
        return ((player.dead ? 1 : 0) | (isChasing ? 0 : (!flag ? 1 : 0)) | ((double) this.Distance(player.Center) >= 2400.0 ? 1 : 0)) != 0;
      }
      return targetData.Type == NPCTargetType.None;
    }

    private void SpawnPassiveShadowHands(float lifePercent, int shadowHandDamage)
    {
      int num1 = (int) Utils.Remap(lifePercent, 1f, 0.0f, 80f, 40f);
      ++this.localAI[2];
      int num2 = (int) this.localAI[2];
      if (num2 % num1 != 0)
        return;
      int num3 = num2 / num1;
      if (num2 / num1 >= 3)
        this.localAI[2] = 0.0f;
      for (int playerIndex = 0; playerIndex < (int) byte.MaxValue; ++playerIndex)
      {
        if (this.Boss_CanShootExtraAt(playerIndex, num3 % 3, 3, 1200f, false))
        {
          Vector2 spawnposition;
          Vector2 spawnvelocity;
          float ai0;
          float ai1;
          Projectile.RandomizeInsanityShadowFor((Entity) Main.player[playerIndex], true, out spawnposition, out spawnvelocity, out ai0, out ai1);
          Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), spawnposition, spawnvelocity, 965, shadowHandDamage, 0.0f, Main.myPlayer, ai0, ai1);
        }
      }
    }

    private void AI_123_Deerclops_ShootRubbleUp(
      ref NPCAimedTarget targetData,
      ref Point sourceTileCoords,
      int howMany,
      int distancedByThisManyTiles,
      float upBiasPerSpike,
      int whichOne)
    {
      int Damage = 18;
      int num = whichOne * distancedByThisManyTiles;
      for (int index = 0; index < 35; ++index)
      {
        int i = sourceTileCoords.X + num * this.direction;
        int j = sourceTileCoords.Y + index;
        if (WorldGen.SolidTile(i, j))
        {
          (targetData.Center + new Vector2((float) (num * this.direction * 20), (float) (-(double) upBiasPerSpike * (double) howMany + (double) num * (double) upBiasPerSpike / (double) distancedByThisManyTiles)) - new Vector2((float) (i * 16 + 8), (float) (j * 16 + 8))).SafeNormalize(-Vector2.UnitY);
          Vector2 vector2 = new Vector2(0.0f, -1f).RotatedBy((double) (whichOne * this.direction) * 0.699999988079071 * (0.78539818525314331 / (double) howMany));
          Main.rand.Next(Main.projFrames[962] * 4);
          int ai1 = 6 + Main.rand.Next(6);
          Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), new Vector2((float) (i * 16 + 8), (float) (j * 16 - 8)), vector2 * (float) (8.0 + (double) Main.rand.NextFloat() * 8.0), 962, Damage, 0.0f, Main.myPlayer, ai1: ((float) ai1));
          break;
        }
      }
    }

    private void AI_123_Deerclops_MakeSpikesForward(
      int AISLOT_PhaseCounter,
      NPCAimedTarget targetData)
    {
      int num1 = 9;
      int num2 = 4;
      if (Main.netMode == 1)
        return;
      int num3 = num1 * num2;
      if ((double) this.ai[AISLOT_PhaseCounter] < (double) num3)
        return;
      Point tileCoordinates = this.Bottom.ToTileCoordinates();
      int howMany = 20;
      int num4 = 1;
      tileCoordinates.X += this.direction * 3;
      int num5 = (int) this.ai[AISLOT_PhaseCounter] - num3;
      if (num5 == 0)
      {
        PunchCameraModifier modifier = new PunchCameraModifier(this.Center, new Vector2(0.0f, 1f), 20f, 6f, 30, 1000f, "Deerclops");
        Main.instance.CameraModifiers.Add((ICameraModifier) modifier);
      }
      int num6 = 4;
      int num7 = num5 / num6 * num6;
      int num8 = num7 + num6;
      if (num5 % num6 != 0)
        num8 = num7;
      for (int whichOne = num7; whichOne < num8 && whichOne < howMany; ++whichOne)
      {
        int xOffset = whichOne * num4;
        this.AI_123_Deerclops_TryMakingSpike(ref tileCoordinates, this.direction, howMany, whichOne, xOffset);
      }
    }

    private void AI_123_Deerclops_MakeSpikesBothSides(
      int AISLOT_PhaseCounter,
      NPCAimedTarget targetData)
    {
      if (Main.netMode == 1)
        return;
      int num1 = 56;
      if ((double) this.ai[AISLOT_PhaseCounter] < (double) num1)
        return;
      Point tileCoordinates = this.Bottom.ToTileCoordinates();
      int howMany = 15;
      int num2 = 1;
      int num3 = (int) this.ai[AISLOT_PhaseCounter] - num1;
      if (num3 == 0)
      {
        PunchCameraModifier modifier = new PunchCameraModifier(this.Center, new Vector2(0.0f, 1f), 20f, 6f, 30, 1000f, "Deerclops");
        Main.instance.CameraModifiers.Add((ICameraModifier) modifier);
      }
      int num4 = 2;
      int num5 = num3 / num4 * num4;
      int num6 = num5 + num4;
      if (num3 % num4 != 0)
        num6 = num5;
      for (int index = num5; index >= 0 && index < num6 && index < howMany; ++index)
      {
        int xOffset = index * num2;
        this.AI_123_Deerclops_TryMakingSpike(ref tileCoordinates, this.direction, howMany, -index, xOffset);
        this.AI_123_Deerclops_TryMakingSpike(ref tileCoordinates, -this.direction, howMany, -index, xOffset);
      }
    }

    public static bool IsADeerclopsNearScreen() => NPC.npcsFoundForCheckActive[668];

    private void AI_123_Deerclops_FindSpotToSpawnSpike(
      int howMany,
      int whichOne,
      ref int x,
      ref int y)
    {
      if (WorldGen.ActiveAndWalkableTile(x, y))
        return;
      Microsoft.Xna.Framework.Rectangle targetRect = this.targetRect;
      int num1 = targetRect.Center.X / 16;
      int num2 = (targetRect.Bottom - 16) / 16;
      int num3 = num2 - y > 0 ? 1 : -1;
      int num4 = y;
      for (int index = 1; index <= 10; ++index)
      {
        int j = y + num3 * index;
        if (j >= 20 && j <= Main.maxTilesY - 20 && WorldGen.ActiveAndWalkableTile(x, j))
          num4 = j;
      }
      if (num4 != y)
      {
        y = num4;
      }
      else
      {
        y = (int) MathHelper.Lerp((float) num2, (float) y, (float) Math.Abs(num1 - x) * 0.1f);
        for (int index = 0; index < 4; ++index)
        {
          int j = y + index;
          if (j >= 20 && j <= Main.maxTilesY - 20 && WorldGen.ActiveAndWalkableTile(x, j))
          {
            y = j;
            break;
          }
        }
      }
    }

    private void AI_123_Deerclops_TryMakingSpike(
      ref Point sourceTileCoords,
      int dir,
      int howMany,
      int whichOne,
      int xOffset)
    {
      int Damage = 13;
      int num = sourceTileCoords.X + xOffset * dir;
      int bestY = this.AI_123_Deerclops_TryMakingSpike_FindBestY(ref sourceTileCoords, num);
      if (!WorldGen.ActiveAndWalkableTile(num, bestY))
        return;
      Vector2 position = new Vector2((float) (num * 16 + 8), (float) (bestY * 16 - 8));
      Vector2 velocity = new Vector2(0.0f, -1f).RotatedBy((double) (whichOne * dir) * 0.699999988079071 * (0.78539818525314331 / (double) howMany));
      Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), position, velocity, 961, Damage, 0.0f, Main.myPlayer, ai1: ((float) (0.10000000149011612 + (double) Main.rand.NextFloat() * 0.10000000149011612 + (double) xOffset * 1.1000000238418579 / (double) howMany)));
    }

    private int AI_123_Deerclops_TryMakingSpike_FindBestY(ref Point sourceTileCoords, int x)
    {
      int y = sourceTileCoords.Y;
      NPCAimedTarget targetData = this.GetTargetData();
      if (!targetData.Invalid)
      {
        Microsoft.Xna.Framework.Rectangle hitbox = targetData.Hitbox;
        Vector2 Target = new Vector2((float) hitbox.Center.X, (float) hitbox.Bottom);
        int num1 = (int) ((double) Target.Y / 16.0);
        int num2 = Math.Sign(num1 - y);
        int num3 = num1 + num2 * 15;
        int? nullable = new int?();
        float num4 = float.PositiveInfinity;
        for (int index = y; index != num3; index += num2)
        {
          if (WorldGen.ActiveAndWalkableTile(x, index))
          {
            float num5 = new Point(x, index).ToWorldCoordinates().Distance(Target);
            if (!nullable.HasValue || (double) num5 < (double) num4)
            {
              nullable = new int?(index);
              num4 = num5;
            }
          }
        }
        if (nullable.HasValue)
          y = nullable.Value;
      }
      for (int index = 0; index < 20 && y >= 10 && WorldGen.SolidTile(x, y); ++index)
        --y;
      for (int index = 0; index < 20 && y <= Main.maxTilesY - 10 && !WorldGen.ActiveAndWalkableTile(x, y); ++index)
        ++y;
      return y;
    }

    private void AI_123_Deerclops_Movement(bool haltMovement, bool goHome)
    {
      float num1 = (float) (3.5 + 1.0 * (double) (1f - (float) this.life / (float) this.lifeMax));
      float num2 = 4f;
      float num3 = -0.4f;
      float min = -8f;
      float num4 = 0.4f;
      Microsoft.Xna.Framework.Rectangle rectangle = this.GetTargetData().Hitbox;
      if (goHome)
      {
        rectangle = new Microsoft.Xna.Framework.Rectangle(this.homeTileX * 16, this.homeTileY * 16, 16, 16);
        if ((double) this.Distance(rectangle.Center.ToVector2()) < 240.0)
          rectangle.X = (int) ((double) this.Center.X + (double) (160 * this.direction));
      }
      float num5 = (float) rectangle.Center.X - this.Center.X;
      double num6 = (double) Math.Abs(num5);
      if (goHome && (double) num5 != 0.0)
        this.direction = this.spriteDirection = Math.Sign(num5);
      bool flag1 = num6 < 80.0;
      bool flag2 = flag1 | haltMovement;
      if ((double) this.ai[0] == -1.0)
      {
        num5 = 5f;
        num1 = 5.35f;
        flag2 = false;
      }
      if (flag2)
      {
        this.velocity.X *= 0.9f;
        if ((double) this.velocity.X > -0.1 && (double) this.velocity.X < 0.1)
          this.velocity.X = 0.0f;
      }
      else
        this.velocity.X = MathHelper.Lerp(this.velocity.X, (float) Math.Sign(num5) * num1, 1f / num2);
      int Width = 40;
      int Height = 20;
      int num7 = 0;
      Vector2 Position = new Vector2(this.Center.X - (float) (Width / 2), this.position.Y + (float) this.height - (float) Height + (float) num7);
      int num8 = (double) Position.X >= (double) rectangle.X ? 0 : ((double) Position.X + (double) this.width > (double) (rectangle.X + rectangle.Width) ? 1 : 0);
      bool flag3 = (double) Position.Y + (double) Height < (double) (rectangle.Y + rectangle.Height - 16);
      bool acceptTopSurfaces = (double) this.Bottom.Y >= (double) rectangle.Top;
      bool flag4 = Collision.SolidCollision(Position, Width, Height, acceptTopSurfaces);
      bool flag5 = Collision.SolidCollision(Position, Width, Height - 4, acceptTopSurfaces);
      bool flag6 = !Collision.SolidCollision(Position + new Vector2((float) (Width * this.direction), 0.0f), 16, 80, acceptTopSurfaces);
      float num9 = 8f;
      if (flag4 | flag5)
        this.localAI[0] = 0.0f;
      int num10 = flag1 ? 1 : 0;
      if (((num8 | num10) & (flag3 ? 1 : 0)) != 0)
        this.velocity.Y = MathHelper.Clamp(this.velocity.Y + num4 * 2f, 1f / 1000f, 16f);
      else if (flag4 && !flag5)
        this.velocity.Y = 0.0f;
      else if (flag4)
        this.velocity.Y = MathHelper.Clamp(this.velocity.Y + num3, min, 0.0f);
      else if ((double) this.velocity.Y == 0.0 & flag6)
      {
        this.velocity.Y = -num9;
        this.localAI[0] = 1f;
      }
      else
        this.velocity.Y = MathHelper.Clamp(this.velocity.Y + num4, -num9, 16f);
    }

    private void AI_124_DeerclopsLeg()
    {
      int index = (int) this.ai[0];
      if (index < 0 || index > 200)
      {
        this.active = false;
        if (Main.netMode == 1)
          return;
        NetMessage.SendData(23, number: this.whoAmI);
      }
      else
      {
        NPC npc = Main.npc[index];
        if (!npc.active || npc.type != 668)
        {
          this.active = false;
          if (Main.netMode == 1)
            return;
          NetMessage.SendData(23, number: this.whoAmI);
        }
        else
        {
          NPCAimedTarget targetData = npc.GetTargetData();
          Vector2 vector2_1 = targetData.Center - this.Center;
          double num1 = (double) targetData.Center.X - (double) (this.width / 2);
          double num2 = num1 + (double) -Math.Sign((float) num1 - this.position.X) * (double) Math.Min(50f, Math.Abs((float) num1 - this.position.X));
          double num3 = (double) Math.Abs(vector2_1.X);
          double x = (double) this.Center.X;
          if ((double) Math.Abs((float) (num2 - x)) >= 30.0 && (double) this.localAI[0] == 0.0)
            this.localAI[0] = 1f;
          float num4 = 4f;
          float num5 = 30f;
          if ((double) this.localAI[0] < 0.0)
            ++this.localAI[0];
          if ((double) this.localAI[0] > 0.0)
          {
            ++this.localAI[0];
            if ((double) this.localAI[0] >= (double) num5)
              this.localAI[0] = -num4;
          }
          int num6 = (double) this.ai[1] == 0.0 ? -1 : 1;
          if ((double) this.localAI[0] > 0.0)
          {
            Vector2 vector2_2 = new Vector2((float) (num6 * 14), -20f);
            Vector2 searchStartPositionInWorld = npc.Bottom + vector2_2 + new Vector2(0.0f, 30f);
            int searchRange = 16;
            int tilesTraveled = 0;
            float? nullable = NPC.TryFindingFloor(searchStartPositionInWorld, searchRange, out tilesTraveled);
            float amount = 0.333333343f;
            Vector2 vector2_3 = new Vector2(searchStartPositionInWorld.X, searchStartPositionInWorld.Y + 100f);
            float num7 = this.localAI[0] / num5;
            if (nullable.HasValue && tilesTraveled > 2)
            {
              Vector2 vector2_4 = new Vector2(searchStartPositionInWorld.X, nullable.Value * 16f);
              vector2_3 = new Vector2(searchStartPositionInWorld.X, nullable.Value * 16f);
              amount = num7;
            }
            vector2_3.Y -= (float) ((1.0 - (double) num7) * 30.0);
            this.Bottom = Vector2.Lerp(this.Bottom, vector2_3, amount);
          }
          int num8 = num6;
          if ((double) Math.Abs(vector2_1.X) > 30.0)
            num8 = Math.Sign(vector2_1.X);
          this.spriteDirection = -num8;
        }
      }
    }

    private static float? TryFindingFloor(
      Vector2 searchStartPositionInWorld,
      int searchRange,
      out int tilesTraveled)
    {
      Point tileCoordinates = searchStartPositionInWorld.ToTileCoordinates();
      int x = tileCoordinates.X;
      for (int y = tileCoordinates.Y; y < tileCoordinates.Y + searchRange; ++y)
      {
        if (Main.tile[x, y] == null)
          Main.tile[x, y] = new Tile();
        if (Main.tile[x, y].nactive() && Main.tileSolid[(int) Main.tile[x, y].type])
        {
          tilesTraveled = y - tileCoordinates.Y;
          return new float?((float) y);
        }
      }
      tilesTraveled = 0;
      return new float?();
    }

    private void AI_87_BigMimic_FireStuffCannonBurst()
    {
      int num = 10;
      for (int index = 0; index < num; ++index)
        this.AI_87_BigMimic_ShootItem(ItemID.Sets.ItemsForStuffCannon[Main.rand.Next(ItemID.Sets.ItemsForStuffCannon.Length)]);
    }

    private void AI_87_BigMimic_ShootItem(int itemID)
    {
      NPC npc = this;
      int number = Item.NewItem(this.GetItemSource_Loot(), (int) npc.position.X, (int) npc.position.Y, npc.width, npc.height, itemID, pfix: -1, noGrabDelay: true);
      double num1 = (double) Main.rand.Next(10, 26);
      Vector2 vector2_1 = new Vector2(npc.position.X + (float) npc.width * 0.5f, npc.position.Y + (float) npc.height * 0.5f);
      Vector2 vector2_2 = Main.player[this.target].Center - new Vector2(0.0f, 120f);
      float num2 = vector2_2.X - vector2_1.X;
      float num3 = vector2_2.Y - vector2_1.Y;
      float num4 = num2 + (float) Main.rand.Next(-50, 51) * 0.1f;
      float num5 = num3 + (float) Main.rand.Next(-50, 51) * 0.1f;
      double num6 = Math.Sqrt((double) num4 * (double) num4 + (double) num5 * (double) num5);
      float num7 = (float) (num1 / num6);
      float num8 = num4 * num7;
      float num9 = num5 * num7;
      float num10 = num8 + (float) Main.rand.Next(-50, 51) * 0.1f;
      float num11 = num9 + (float) Main.rand.Next(-50, 51) * 0.1f;
      Main.item[number].velocity.X = num10;
      Main.item[number].velocity.Y = num11;
      Main.item[number].noGrabDelay = 100;
      if (Main.netMode == 0)
        return;
      NetMessage.SendData(21, number: number);
    }

    public void AI_122_PirateGhost()
    {
      if ((double) this.localAI[0] == 0.0)
      {
        this.localAI[0] = 1f;
        SoundEngine.PlaySound(SoundID.NPCHit6, this.position);
      }
      NPCAimedTarget targetData = this.GetTargetData();
      if (targetData.Invalid)
      {
        this.TargetClosest();
        targetData = this.GetTargetData();
      }
      if (targetData.Invalid)
      {
        this.velocity = this.velocity * 0.9f;
        this.alpha = Utils.Clamp<int>(this.alpha + 5, 0, (int) byte.MaxValue);
        if (this.alpha < (int) byte.MaxValue)
          return;
        this.StrikeNPCNoInteraction(9999, 0.0f, 0);
      }
      else
      {
        this.alpha = Utils.Clamp<int>(this.alpha - 5, 0, (int) byte.MaxValue);
        this.velocity = this.velocity.MoveTowards(Vector2.Zero.MoveTowards(targetData.Center - this.Center, 4f), 0.13333334f);
        for (int index = 0; index < 200; ++index)
        {
          if (Main.npc[index].active && Main.npc[index].type == this.type && index != this.whoAmI)
          {
            Vector2 vector2 = Main.npc[index].Center - this.Center;
            if ((double) vector2.Length() < 50.0)
            {
              vector2.Normalize();
              vector2 *= 0.1f;
              this.velocity = this.velocity - vector2;
              this.velocity.X -= vector2.X * 1f;
            }
          }
        }
      }
    }

    public void AI_000_TransformBoundNPC(int playerID, int npcType)
    {
      this.Transform(npcType);
      Main.BestiaryTracker.Chats.RegisterChatStartWith(this);
      Main.player[playerID].SetTalkNPC(this.whoAmI);
      if (Main.netMode != 2)
        return;
      NetMessage.SendData(40, number: playerID);
    }

    private void AI_065_Butterflies()
    {
      float num1 = this.ai[0];
      float num2 = this.ai[1];
      if (this.type == 661)
      {
        Lighting.AddLight(this.Center, Main.hslToRgb((float) ((double) Main.GlobalTimeWrappedHourly * 0.33000001311302185 % 1.0), 1f, 0.5f).ToVector3() * 0.3f + Vector3.One * 0.1f);
        int from = 60;
        bool flag = false;
        int max = 50;
        NPCAimedTarget targetData = this.GetTargetData();
        if (targetData.Invalid || (double) targetData.Center.Distance(this.Center) >= 300.0)
          flag = true;
        if (!Main.remixWorld && !targetData.Invalid && targetData.Type == NPCTargetType.Player && !Main.player[this.target].ZoneHallow)
        {
          max = from;
          flag = true;
        }
        this.ai[2] = MathHelper.Clamp(this.ai[2] + (float) flag.ToDirectionInt(), 0.0f, (float) max);
        if ((double) this.ai[2] >= (double) from)
        {
          this.active = false;
          if (Main.netMode == 1)
            return;
          NetMessage.SendData(23, number: this.whoAmI);
          return;
        }
        this.Opacity = Utils.GetLerpValue((float) from, (float) max / 2f, this.ai[2], true);
        if ((double) this.ai[2] > 0.0)
        {
          int num3 = 1;
          for (int index = 0; index < num3; ++index)
          {
            if (Main.rand.Next(5) == 0)
            {
              float num4 = MathHelper.Lerp(0.9f, 0.6f, this.Opacity);
              int dustIndex = Dust.NewDust(this.position, this.width, this.height, 267, newColor: (Main.hslToRgb((float) ((double) Main.GlobalTimeWrappedHourly * 0.30000001192092896 % 1.0), 1f, 0.5f) * 0.5f));
              Main.dust[dustIndex].position = this.Center + Main.rand.NextVector2Circular((float) this.width, (float) this.height);
              Main.dust[dustIndex].velocity *= Main.rand.NextFloat() * 0.8f;
              Main.dust[dustIndex].velocity += this.velocity * 0.6f;
              Main.dust[dustIndex].noGravity = true;
              Main.dust[dustIndex].fadeIn = (float) (0.60000002384185791 + (double) Main.rand.NextFloat() * 0.699999988079071 * (double) num4);
              Main.dust[dustIndex].scale = 0.35f;
              if (dustIndex != 6000)
              {
                Dust dust = Dust.CloneDust(dustIndex);
                dust.scale /= 2f;
                dust.fadeIn *= 0.85f;
                dust.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue) * 0.5f;
              }
            }
          }
        }
        this.dontTakeDamage = (double) this.ai[2] >= (double) (max / 2);
      }
      if (Main.netMode != 1)
      {
        if ((double) this.ai[2] == 0.0 && this.type != 661)
        {
          int num5 = 0;
          int num6 = 4;
          int num7 = 6;
          int num8 = 3;
          int num9 = 7;
          int num10 = 2;
          int num11 = 1;
          int num12 = 5;
          int num13 = Main.rand.Next(100);
          this.ai[2] = (float) (1 + (num13 != 0 ? (num13 >= 3 ? (num13 >= 9 ? (num13 >= 19 ? (num13 >= 34 ? (num13 >= 53 ? (num13 >= 75 ? num5 : num6) : num7) : num8) : num9) : num10) : num11) : num12));
        }
        if ((double) this.ai[3] == 0.0)
          this.ai[3] = (float) Main.rand.Next(75, 111) * 0.01f;
        --this.localAI[0];
        if ((double) this.localAI[0] <= 0.0)
        {
          this.localAI[0] = (float) Main.rand.Next(90, 240);
          this.TargetClosest();
          float num14 = Math.Abs(this.Center.X - Main.player[this.target].Center.X);
          if ((double) num14 > 700.0 && (double) this.localAI[3] == 0.0)
          {
            float num15 = (float) Main.rand.Next(50, 151) * 0.01f;
            if ((double) num14 > 1000.0)
              num15 = (float) Main.rand.Next(150, 201) * 0.01f;
            else if ((double) num14 > 850.0)
              num15 = (float) Main.rand.Next(100, 151) * 0.01f;
            int num16 = this.direction * Main.rand.Next(100, 251);
            int num17 = Main.rand.Next(-50, 51);
            if ((double) this.position.Y > (double) Main.player[this.target].position.Y - 100.0)
              num17 -= Main.rand.Next(100, 251);
            float num18 = num15 / (float) Math.Sqrt((double) (num16 * num16 + num17 * num17));
            num1 = (float) num16 * num18;
            num2 = (float) num17 * num18;
          }
          else
          {
            this.localAI[3] = 1f;
            double num19 = (double) Main.rand.Next(26, 301) * 0.0099999997764825821;
            int num20 = Main.rand.Next(-100, 101);
            int num21 = Main.rand.Next(-100, 101);
            double num22 = Math.Sqrt((double) (num20 * num20 + num21 * num21));
            float num23 = (float) (num19 / num22);
            num1 = (float) num20 * num23;
            num2 = (float) num21 * num23;
          }
          this.netUpdate = true;
        }
      }
      this.scale = this.ai[3];
      int num24 = 60;
      this.velocity.X = (this.velocity.X * (float) (num24 - 1) + num1) / (float) num24;
      this.velocity.Y = (this.velocity.Y * (float) (num24 - 1) + num2) / (float) num24;
      if ((double) this.velocity.Y > 0.0)
      {
        int num25 = 3;
        int index1 = (int) this.Center.X / 16;
        int num26 = (int) this.Center.Y / 16;
        for (int index2 = num26; index2 < num26 + num25; ++index2)
        {
          if (Main.tile[index1, index2] != null && (Main.tile[index1, index2].nactive() && Main.tileSolid[(int) Main.tile[index1, index2].type] || Main.tile[index1, index2].liquid > (byte) 0))
          {
            num2 *= -1f;
            if ((double) this.velocity.Y > 0.0)
              this.velocity.Y *= 0.9f;
          }
        }
      }
      if ((double) this.velocity.Y < 0.0)
      {
        int num27 = 30;
        bool flag = false;
        int index3 = (int) this.Center.X / 16;
        int num28 = (int) this.Center.Y / 16;
        for (int index4 = num28; index4 < num28 + num27; ++index4)
        {
          if (Main.tile[index3, index4] != null && Main.tile[index3, index4].nactive() && Main.tileSolid[(int) Main.tile[index3, index4].type])
            flag = true;
        }
        if (!flag)
        {
          num2 *= -1f;
          if ((double) this.velocity.Y < 0.0)
            this.velocity.Y *= 0.9f;
        }
      }
      if ((double) this.localAI[1] > 0.0)
      {
        --this.localAI[1];
      }
      else
      {
        this.localAI[1] = 15f;
        if (this.type == 661)
          this.localAI[1] = 10f;
        float num29 = 0.0f;
        Vector2 zero = Vector2.Zero;
        for (int index = 0; index < 200; ++index)
        {
          NPC npc = Main.npc[index];
          if (npc.active && npc.damage > 0 && !npc.friendly && (double) npc.Hitbox.Distance(this.Center) <= 100.0)
          {
            ++num29;
            zero += this.DirectionFrom(npc.Center);
          }
        }
        if ((double) num29 > 0.0)
        {
          this.velocity = this.velocity + zero / num29 * 2f;
          if ((double) this.velocity.Length() > 16.0)
            this.velocity = this.velocity.SafeNormalize(Vector2.Zero) * 16f;
        }
      }
      if (this.collideX)
      {
        num1 = (double) this.velocity.X >= 0.0 ? -Math.Abs(num1) : Math.Abs(num1);
        this.velocity.X *= -0.2f;
      }
      if ((double) this.velocity.X < 0.0)
        this.direction = -1;
      if ((double) this.velocity.X > 0.0)
        this.direction = 1;
      this.ai[0] = num1;
      this.ai[1] = num2;
      if (this.type == 356)
        this.catchItem = (short) (1994.0 + (double) this.ai[2] - 1.0);
      if (this.type != 653)
        return;
      this.position = this.position + this.netOffset;
      Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.6f, 0.3f, 0.1f);
      if (Main.rand.Next(60) == 0)
      {
        int index = Dust.NewDust(this.position, this.width, this.height, 6, Alpha: 254);
        Main.dust[index].velocity *= 0.0f;
      }
      this.position = this.position - this.netOffset;
    }

    public static Color AI_121_QueenSlime_GetDustColor() => Color.Lerp(new Color(0, 160, (int) byte.MaxValue), Color.Lerp(new Color(200, 200, 200), new Color((int) byte.MaxValue, 80, (int) byte.MaxValue), Main.rand.NextFloat()), Main.rand.NextFloat());

    private void AI_121_QueenSlime_FlyMovement()
    {
      this.noTileCollide = true;
      this.noGravity = true;
      float num1 = 12f;
      float moveSpeed = 0.085f;
      float num2 = 250f;
      this.TargetClosest();
      Vector2 vector2 = this.Center;
      if (this.timeLeft > 10)
      {
        if (!Collision.CanHit((Entity) this, (Entity) Main.player[this.target]))
        {
          bool flag = false;
          Vector2 center = Main.player[this.target].Center;
          for (int index = 0; index < 16; ++index)
          {
            float num3 = (float) (16 * index);
            Point tileCoordinates = (center + new Vector2(0.0f, -num3)).ToTileCoordinates();
            if (WorldGen.SolidOrSlopedTile(tileCoordinates.X, tileCoordinates.Y))
            {
              vector2 = center + new Vector2(0.0f, (float) (-(double) num3 + 16.0)) - this.Center;
              flag = true;
              break;
            }
          }
          if (!flag)
            vector2 = center - this.Center;
        }
        else
          vector2 = Main.player[this.target].Center + new Vector2(0.0f, -num2) - this.Center;
      }
      else
        vector2 = this.Center + new Vector2(500f * (float) this.direction, -num2) - this.Center;
      float num4 = vector2.Length();
      if ((double) Math.Abs(vector2.X) < 40.0)
        vector2.X = this.velocity.X;
      float num5 = num1 - 2f;
      if ((double) num4 > 100.0 && ((double) this.velocity.X < -(double) num5 && (double) vector2.X > 0.0 || (double) this.velocity.X > (double) num5 && (double) vector2.X < 0.0))
        moveSpeed *= 2f;
      Vector2 desiredVelocity;
      if ((double) num4 < 40.0)
        desiredVelocity = this.velocity;
      else if ((double) num4 < 80.0)
      {
        vector2.Normalize();
        desiredVelocity = vector2 * (num1 * 0.65f);
      }
      else
      {
        vector2.Normalize();
        desiredVelocity = vector2 * num1;
      }
      this.SimpleFlyMovement(desiredVelocity, moveSpeed);
      this.rotation = this.velocity.X * 0.1f;
      if ((double) this.rotation > 0.5)
        this.rotation = 0.5f;
      if ((double) this.rotation >= -0.5)
        return;
      this.rotation = -0.5f;
    }

    private void AI_121_QueenSlime()
    {
      int Damage1 = 30;
      int Damage2 = 40;
      int num1 = Main.expertMode ? 1 : 0;
      float num2 = 1f;
      bool flag1 = false;
      bool flag2 = this.life <= this.lifeMax / 2;
      if ((double) this.localAI[0] == 0.0)
      {
        this.ai[1] = -100f;
        this.localAI[0] = (float) this.lifeMax;
        this.TargetClosest();
        this.netUpdate = true;
      }
      Lighting.AddLight(this.Center, 1f, 0.7f, 0.9f);
      int num3 = 500;
      if (Main.player[this.target].dead || (double) Math.Abs(this.Center.X - Main.player[this.target].Center.X) / 16.0 > (double) num3)
      {
        this.TargetClosest();
        if (Main.player[this.target].dead || (double) Math.Abs(this.Center.X - Main.player[this.target].Center.X) / 16.0 > (double) num3)
        {
          this.EncourageDespawn(10);
          if ((double) Main.player[this.target].Center.X < (double) this.Center.X)
            this.direction = 1;
          else
            this.direction = -1;
        }
      }
      if (!Main.player[this.target].dead && this.timeLeft > 10 && !flag2 && (double) this.ai[3] >= 300.0 && (double) this.ai[0] == 0.0 && (double) this.velocity.Y == 0.0)
      {
        this.ai[0] = 2f;
        this.ai[1] = 0.0f;
        if (Main.netMode != 1)
        {
          this.netUpdate = true;
          this.TargetClosest(false);
          Point tileCoordinates1 = this.Center.ToTileCoordinates();
          Point tileCoordinates2 = Main.player[this.target].Center.ToTileCoordinates();
          Vector2 vector2 = Main.player[this.target].Center - this.Center;
          int num4 = 10;
          int num5 = 0;
          int num6 = 7;
          int num7 = 0;
          bool flag3 = false;
          if ((double) this.ai[3] >= 360.0 || (double) vector2.Length() > 2000.0)
          {
            if ((double) this.ai[3] > 360.0)
              this.ai[3] = 360f;
            flag3 = true;
            num7 = 100;
          }
          while (!flag3 && num7 < 100)
          {
            ++num7;
            int index1 = Main.rand.Next(tileCoordinates2.X - num4, tileCoordinates2.X + num4 + 1);
            int index2 = Main.rand.Next(tileCoordinates2.Y - num4, tileCoordinates2.Y + 1);
            if ((index2 < tileCoordinates2.Y - num6 || index2 > tileCoordinates2.Y + num6 || index1 < tileCoordinates2.X - num6 || index1 > tileCoordinates2.X + num6) && (index2 < tileCoordinates1.Y - num5 || index2 > tileCoordinates1.Y + num5 || index1 < tileCoordinates1.X - num5 || index1 > tileCoordinates1.X + num5) && !Main.tile[index1, index2].nactive())
            {
              int index3 = index2;
              int num8 = 0;
              if ((!Main.tile[index1, index3].nactive() || !Main.tileSolid[(int) Main.tile[index1, index3].type] ? 0 : (!Main.tileSolidTop[(int) Main.tile[index1, index3].type] ? 1 : 0)) != 0)
              {
                num8 = 1;
              }
              else
              {
                for (; num8 < 150 && index3 + num8 < Main.maxTilesY; ++num8)
                {
                  int index4 = index3 + num8;
                  if ((!Main.tile[index1, index4].nactive() || !Main.tileSolid[(int) Main.tile[index1, index4].type] ? 0 : (!Main.tileSolidTop[(int) Main.tile[index1, index4].type] ? 1 : 0)) != 0)
                  {
                    --num8;
                    break;
                  }
                }
              }
              int index5 = index2 + num8;
              bool flag4 = true;
              if (flag4 && Main.tile[index1, index5].lava())
                flag4 = false;
              if (flag4 && !Collision.CanHitLine(this.Center, 0, 0, Main.player[this.target].Center, 0, 0))
                flag4 = false;
              if (flag4)
              {
                this.localAI[1] = (float) (index1 * 16 + 8);
                this.localAI[2] = (float) (index5 * 16 + 16);
                break;
              }
            }
          }
          if (num7 >= 100)
          {
            Vector2 bottom = Main.player[(int) Player.FindClosest(this.position, this.width, this.height)].Bottom;
            this.localAI[1] = bottom.X;
            this.localAI[2] = bottom.Y;
            this.ai[3] = 0.0f;
          }
        }
      }
      if (!flag2 && (!Collision.CanHitLine(this.Center, 0, 0, Main.player[this.target].Center, 0, 0) || (double) Math.Abs(this.Top.Y - Main.player[this.target].Bottom.Y) > 320.0))
      {
        this.ai[3] += 1.5f;
      }
      else
      {
        float num9 = this.ai[3];
        --this.ai[3];
        if ((double) this.ai[3] < 0.0)
        {
          if (Main.netMode != 1 && (double) num9 > 0.0)
            this.netUpdate = true;
          this.ai[3] = 0.0f;
        }
      }
      if (this.timeLeft <= 10 && (flag2 && (double) this.ai[0] != 0.0 || !flag2 && (double) this.ai[0] != 3.0))
      {
        this.ai[0] = !flag2 ? 3f : 0.0f;
        this.ai[1] = 0.0f;
        this.ai[2] = 0.0f;
        this.ai[3] = 0.0f;
        this.netUpdate = true;
      }
      this.noTileCollide = false;
      this.noGravity = false;
      if (flag2)
      {
        ++this.localAI[3];
        if ((double) this.localAI[3] >= 24.0)
          this.localAI[3] = 0.0f;
        if ((double) this.ai[0] == 4.0 && (double) this.ai[2] == 1.0)
          this.localAI[3] = 6f;
        if ((double) this.ai[0] == 5.0 && (double) this.ai[2] != 1.0)
          this.localAI[3] = 7f;
      }
      switch ((int) this.ai[0])
      {
        case 0:
          if (flag2)
          {
            this.AI_121_QueenSlime_FlyMovement();
          }
          else
          {
            this.noTileCollide = false;
            this.noGravity = false;
            if ((double) this.velocity.Y == 0.0)
            {
              this.velocity.X *= 0.8f;
              if ((double) this.velocity.X > -0.1 && (double) this.velocity.X < 0.1)
                this.velocity.X = 0.0f;
            }
          }
          if (this.timeLeft > 10 && (flag2 || (double) this.velocity.Y == 0.0))
          {
            ++this.ai[1];
            int num10 = 60;
            if (flag2)
              num10 = 120;
            if ((double) this.ai[1] > (double) num10)
            {
              this.ai[1] = 0.0f;
              if (flag2)
              {
                Player player = Main.player[this.target];
                this.ai[0] = Main.rand.Next(2) == 1 ? 5f : 4f;
                if ((double) this.ai[0] == 4.0)
                {
                  this.ai[2] = 1f;
                  if (player != null && player.active && !player.dead && ((double) player.Bottom.Y < (double) this.Bottom.Y || (double) Math.Abs(player.Center.X - this.Center.X) > 250.0))
                  {
                    this.ai[0] = 5f;
                    this.ai[2] = 0.0f;
                  }
                }
              }
              else
              {
                switch (Main.rand.Next(3))
                {
                  case 1:
                    this.ai[0] = 4f;
                    break;
                  case 2:
                    this.ai[0] = 5f;
                    break;
                  default:
                    this.ai[0] = 3f;
                    break;
                }
              }
              this.netUpdate = true;
              break;
            }
            break;
          }
          break;
        case 1:
          this.rotation = 0.0f;
          ++this.ai[1];
          num2 = (float) (0.5 + (double) MathHelper.Clamp(this.ai[1] / 30f, 0.0f, 1f) * 0.5);
          if ((double) this.ai[1] >= 30.0 && Main.netMode != 1)
          {
            this.ai[0] = 0.0f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            this.TargetClosest();
          }
          if (Main.netMode == 1 && (double) this.ai[1] >= 60.0)
          {
            this.ai[0] = 0.0f;
            this.ai[1] = 0.0f;
            this.TargetClosest();
          }
          Color dustColor1 = NPC.AI_121_QueenSlime_GetDustColor() with
          {
            A = 150
          };
          for (int index6 = 0; index6 < 10; ++index6)
          {
            int index7 = Dust.NewDust(this.position + Vector2.UnitX * -20f, this.width + 40, this.height, 4, this.velocity.X, this.velocity.Y, 50, dustColor1, 1.5f);
            Main.dust[index7].noGravity = true;
            Main.dust[index7].velocity *= 2f;
          }
          break;
        case 2:
          this.rotation = 0.0f;
          ++this.ai[1];
          num2 = (float) (0.5 + (double) MathHelper.Clamp((float) ((60.0 - (double) this.ai[1]) / 60.0), 0.0f, 1f) * 0.5);
          if ((double) this.ai[1] >= 60.0)
            flag1 = true;
          if ((double) this.ai[1] == 60.0)
            Gore.NewGore(this.Center + new Vector2(-40f, (float) (-this.height / 2)), this.velocity, 1258);
          if ((double) this.ai[1] >= 60.0 && Main.netMode != 1)
          {
            this.Bottom = new Vector2(this.localAI[1], this.localAI[2]);
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
          }
          if (Main.netMode == 1 && (double) this.ai[1] >= 120.0)
          {
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
          }
          if (!flag1)
          {
            Color dustColor2 = NPC.AI_121_QueenSlime_GetDustColor() with
            {
              A = 150
            };
            for (int index8 = 0; index8 < 10; ++index8)
            {
              int index9 = Dust.NewDust(this.position + Vector2.UnitX * -20f, this.width + 40, this.height, 4, this.velocity.X, this.velocity.Y, 50, dustColor2, 1.5f);
              Main.dust[index9].noGravity = true;
              Main.dust[index9].velocity *= 0.5f;
            }
            break;
          }
          break;
        case 3:
          this.rotation = 0.0f;
          if ((double) this.velocity.Y == 0.0)
          {
            this.velocity.X *= 0.8f;
            if ((double) this.velocity.X > -0.1 && (double) this.velocity.X < 0.1)
              this.velocity.X = 0.0f;
            this.ai[1] += 4f;
            if ((double) this.life < (double) this.lifeMax * 0.66)
              this.ai[1] += 4f;
            if ((double) this.life < (double) this.lifeMax * 0.33)
              this.ai[1] += 4f;
            if ((double) this.ai[1] >= 0.0)
            {
              this.netUpdate = true;
              this.TargetClosest();
              if ((double) this.ai[2] == 3.0)
              {
                this.velocity.Y = -13f;
                this.velocity.X += 3.5f * (float) this.direction;
                this.ai[1] = 0.0f;
                this.ai[2] = 0.0f;
                if (this.timeLeft > 10)
                {
                  this.ai[0] = 0.0f;
                  break;
                }
                this.ai[1] = -60f;
                break;
              }
              if ((double) this.ai[2] == 2.0)
              {
                this.velocity.Y = -6f;
                this.velocity.X += 4.5f * (float) this.direction;
                this.ai[1] = -40f;
                ++this.ai[2];
                break;
              }
              this.velocity.Y = -8f;
              this.velocity.X += 4f * (float) this.direction;
              this.ai[1] = -40f;
              ++this.ai[2];
              break;
            }
            break;
          }
          if (this.target < (int) byte.MaxValue)
          {
            float num11 = 3f;
            if (Main.getGoodWorld)
              num11 = 7f;
            if (this.direction == 1 && (double) this.velocity.X < (double) num11 || this.direction == -1 && (double) this.velocity.X > -(double) num11)
            {
              if (this.direction == -1 && (double) this.velocity.X < 0.1 || this.direction == 1 && (double) this.velocity.X > -0.1)
              {
                this.velocity.X += 0.2f * (float) this.direction;
                break;
              }
              this.velocity.X *= 0.93f;
              break;
            }
            break;
          }
          break;
        case 4:
          this.rotation *= 0.9f;
          this.noTileCollide = true;
          this.noGravity = true;
          if ((double) this.ai[2] == 1.0)
          {
            this.noTileCollide = false;
            this.noGravity = false;
            int num12 = 30;
            if (flag2)
              num12 = 10;
            if (Main.getGoodWorld)
              num12 = 0;
            Player player = Main.player[this.target];
            Vector2 center1 = this.Center;
            if (!player.dead && player.active && (double) Math.Abs(this.Center.X - player.Center.X) / 16.0 <= (double) num3)
            {
              Vector2 center2 = player.Center;
            }
            if ((double) this.velocity.Y == 0.0)
            {
              this.ai[0] = 0.0f;
              this.ai[1] = 0.0f;
              this.ai[2] = 0.0f;
              this.netUpdate = true;
              SoundEngine.PlaySound(SoundID.Item167, this.Center);
              if (Main.netMode != 1)
                Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Bottom, Vector2.Zero, 922, Damage2, 0.0f, Main.myPlayer);
              for (int index10 = 0; index10 < 20; ++index10)
              {
                int index11 = Dust.NewDust(this.Bottom - new Vector2((float) (this.width / 2), 30f), this.width, 30, 31, this.velocity.X, this.velocity.Y, 40, NPC.AI_121_QueenSlime_GetDustColor());
                Main.dust[index11].noGravity = true;
                Main.dust[index11].velocity.Y = (float) ((double) Main.rand.NextFloat() * -3.0 - 5.0);
                Main.dust[index11].velocity.X *= 7f;
              }
            }
            else if ((double) this.ai[1] >= (double) num12)
            {
              for (int index12 = 0; index12 < 4; ++index12)
              {
                Vector2 Position = this.Bottom - new Vector2(Main.rand.NextFloatDirection() * 16f, (float) Main.rand.Next(8));
                int index13 = Dust.NewDust(Position, 2, 2, 31, this.velocity.X, this.velocity.Y, 40, NPC.AI_121_QueenSlime_GetDustColor(), 1.4f);
                Main.dust[index13].position = Position;
                Main.dust[index13].noGravity = true;
                Main.dust[index13].velocity.Y = this.velocity.Y * 0.9f;
                Main.dust[index13].velocity.X = (float) ((Main.rand.Next(2) == 0 ? -10.0 : 10.0) + (double) Main.rand.NextFloatDirection() * 3.0);
              }
            }
            this.velocity.X *= 0.8f;
            float num13 = this.ai[1];
            ++this.ai[1];
            if ((double) this.ai[1] >= (double) num12)
            {
              if ((double) num13 < (double) num12)
                this.netUpdate = true;
              if (flag2 && (double) this.ai[1] > (double) (num12 + 120))
              {
                this.ai[0] = 0.0f;
                this.ai[1] = 0.0f;
                this.ai[2] = 0.0f;
                this.velocity.Y *= 0.8f;
                this.netUpdate = true;
                break;
              }
              ++this.velocity.Y;
              float num14 = 14f;
              if (Main.getGoodWorld)
              {
                ++this.velocity.Y;
                num14 = 15.99f;
              }
              if ((double) this.velocity.Y == 0.0)
                this.velocity.Y = 0.01f;
              if ((double) this.velocity.Y >= (double) num14)
              {
                this.velocity.Y = num14;
                break;
              }
              break;
            }
            this.velocity.Y *= 0.8f;
            break;
          }
          if (Main.netMode != 1 && (double) this.ai[1] == 0.0)
          {
            this.TargetClosest();
            this.netUpdate = true;
          }
          ++this.ai[1];
          if ((double) this.ai[1] >= 30.0)
          {
            if ((double) this.ai[1] >= 60.0)
            {
              this.ai[1] = 60f;
              if (Main.netMode != 1)
              {
                this.ai[1] = 0.0f;
                this.ai[2] = 1f;
                this.velocity.Y = -3f;
                this.netUpdate = true;
              }
            }
            Player player = Main.player[this.target];
            Vector2 center = this.Center;
            if (!player.dead && player.active && (double) Math.Abs(this.Center.X - player.Center.X) / 16.0 <= (double) num3)
              center = player.Center;
            center.Y -= 384f;
            if ((double) this.velocity.Y == 0.0)
            {
              this.velocity = center - this.Center;
              this.velocity = this.velocity.SafeNormalize(Vector2.Zero);
              this.velocity = this.velocity * 20f;
              break;
            }
            this.velocity.Y *= 0.95f;
            break;
          }
          break;
        case 5:
          this.rotation *= 0.9f;
          this.noTileCollide = true;
          this.noGravity = true;
          if (flag2)
            this.ai[3] = 0.0f;
          if ((double) this.ai[2] == 1.0)
          {
            ++this.ai[1];
            if ((double) this.ai[1] >= 10.0)
            {
              if (Main.netMode != 1)
              {
                int num15 = 10;
                if (Main.getGoodWorld)
                  num15 = 15;
                int num16 = num15;
                if (!flag2)
                  num16 = 6;
                for (int index = 0; index < num16; ++index)
                {
                  Vector2 spinningpoint = new Vector2(9f, 0.0f);
                  spinningpoint = spinningpoint.RotatedBy((double) -index * 6.2831854820251465 / (double) num15, Vector2.Zero);
                  Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X, this.Center.Y, spinningpoint.X, spinningpoint.Y, 926, Damage1, 0.0f, Main.myPlayer);
                }
              }
              this.ai[0] = 0.0f;
              this.ai[1] = 0.0f;
              this.ai[2] = 0.0f;
              this.netUpdate = true;
              break;
            }
            break;
          }
          if (Main.netMode != 1 && (double) this.ai[1] == 0.0)
          {
            this.TargetClosest();
            this.netUpdate = true;
          }
          ++this.ai[1];
          if ((double) this.ai[1] >= 50.0)
          {
            this.ai[1] = 50f;
            if (Main.netMode != 1)
            {
              this.ai[1] = 0.0f;
              this.ai[2] = 1f;
              this.netUpdate = true;
            }
          }
          float num17 = 100f;
          for (int index14 = 0; index14 < 4; ++index14)
          {
            Vector2 Position = this.Center + Main.rand.NextVector2CircularEdge(num17, num17);
            if (!flag2)
              Position += new Vector2(0.0f, 20f);
            Vector2 vector2 = (Position - this.Center).SafeNormalize(Vector2.Zero) * -8f;
            int index15 = Dust.NewDust(Position, 2, 2, 31, vector2.X, vector2.Y, 40, NPC.AI_121_QueenSlime_GetDustColor(), 1.8f);
            Main.dust[index15].position = Position;
            Main.dust[index15].noGravity = true;
            Main.dust[index15].alpha = 250;
            Main.dust[index15].velocity = vector2;
            Main.dust[index15].customData = (object) this;
          }
          if (flag2)
          {
            this.AI_121_QueenSlime_FlyMovement();
            break;
          }
          break;
      }
      this.dontTakeDamage = this.hide = flag1;
      if ((double) num2 != (double) this.scale)
      {
        this.position.X += (float) (this.width / 2);
        this.position.Y += (float) this.height;
        this.scale = num2;
        this.width = (int) (114.0 * (double) this.scale);
        this.height = (int) (100.0 * (double) this.scale);
        this.position.X -= (float) (this.width / 2);
        this.position.Y -= (float) this.height;
      }
      if (this.life <= 0)
        return;
      if (Main.rand.Next(360) == 0)
        SoundEngine.PlaySound(65, this.position);
      if (Main.netMode == 1)
        return;
      if ((double) this.localAI[0] >= (double) (this.lifeMax / 2) && this.life < this.lifeMax / 2)
      {
        this.localAI[0] = (float) this.life;
        this.ai[0] = 0.0f;
        this.ai[1] = 0.0f;
        this.ai[2] = 0.0f;
        this.netUpdate = true;
      }
      int num18 = (int) ((double) this.lifeMax * 0.019999999552965164);
      if (flag2)
        num18 = (int) ((double) this.lifeMax * 0.014999999664723873);
      if ((double) (this.life + num18) >= (double) this.localAI[0])
        return;
      this.localAI[0] = (float) this.life;
      int num19 = Main.rand.Next(1, 3);
      for (int index = 0; index < num19; ++index)
      {
        int X = (int) ((double) this.position.X + (double) Main.rand.Next(this.width - 32));
        int Y = (int) ((double) this.position.Y + (double) Main.rand.Next(this.height - 32));
        int Type = 658;
        switch (Main.rand.Next(3))
        {
          case 0:
            Type = 658;
            break;
          case 1:
            Type = 659;
            break;
          case 2:
            Type = 660;
            break;
        }
        int number = NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), X, Y, Type);
        Main.npc[number].SetDefaults(Type);
        Main.npc[number].velocity.X = (float) Main.rand.Next(-15, 16) * 0.1f;
        Main.npc[number].velocity.Y = (float) Main.rand.Next(-30, 1) * 0.1f;
        Main.npc[number].ai[0] = (float) (-500 * Main.rand.Next(3));
        Main.npc[number].ai[1] = 0.0f;
        if (Main.netMode == 2 && number < 200)
          NetMessage.SendData(23, number: number);
      }
    }

    public bool AI_120_HallowBoss_IsInPhase2() => (double) this.ai[3] == 1.0 || (double) this.ai[3] == 3.0;

    public bool AI_120_HallowBoss_IsGenuinelyEnraged() => (double) this.ai[3] == 2.0 || (double) this.ai[3] == 3.0;

    private void AI_120_HallowBoss_DoMagicEffect(Vector2 spot, int effectType, float progress)
    {
      float num1 = 4f;
      float num2 = 1f;
      float num3 = 0.0f;
      float num4 = 0.5f;
      int num5 = 2;
      int Type = 267;
      switch (effectType)
      {
        case 1:
          num2 = 0.5f;
          num3 = 2f;
          num4 = 0.0f;
          break;
        case 2:
        case 4:
          num1 = 50f;
          num2 = 0.5f;
          num3 = 0.0f;
          num4 = 0.0f;
          num5 = 4;
          break;
        case 3:
          num1 = 30f;
          num2 = 0.1f;
          num3 = 2.5f;
          num4 = 0.0f;
          break;
        case 5:
          if ((double) progress == 0.0)
          {
            num5 = 0;
          }
          else
          {
            num5 = 5;
            Type = Main.rand.Next(86, 92);
          }
          if ((double) progress >= 1.0)
          {
            num5 = 0;
            break;
          }
          break;
      }
      for (int index = 0; index < num5; ++index)
      {
        Dust dust = Dust.NewDustPerfect(spot, Type, new Vector2?(Main.rand.NextVector2CircularEdge(num1, num1) * (Main.rand.NextFloat() * (1f - num4) + num4)), newColor: Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f), Scale: ((float) ((double) Main.rand.NextFloat() * 2.0 + 2.0) * num2));
        dust.fadeIn = num3;
        dust.noGravity = true;
        switch (effectType)
        {
          case 2:
          case 4:
            dust.velocity *= 0.005f;
            dust.scale = 3f * Utils.GetLerpValue(0.7f, 0.0f, progress, true) * Utils.GetLerpValue(0.0f, 0.3f, progress, true);
            dust.velocity = ((float) (6.2831854820251465 * ((double) index / 4.0) + 0.78539818525314331)).ToRotationVector2() * 8f * Utils.GetLerpValue(1f, 0.0f, progress, true);
            dust.velocity += this.velocity * 0.3f;
            float num6 = 0.0f;
            if (effectType == 4)
              num6 = 0.5f;
            dust.color = Main.hslToRgb((float) (((double) index / 5.0 + (double) num6 + (double) progress * 0.5) % 1.0), 1f, 0.5f);
            dust.color.A /= (byte) 2;
            dust.alpha = (int) sbyte.MaxValue;
            break;
          case 5:
            if ((double) progress == 0.0)
            {
              dust.customData = (object) this;
              dust.scale = 1.5f;
              dust.fadeIn = 0.0f;
              dust.velocity = new Vector2(0.0f, -1f) + Main.rand.NextVector2Circular(1f, 1f);
              dust.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 80) * 0.3f;
              break;
            }
            dust.color = Main.hslToRgb((float) ((double) progress * 2.0 % 1.0), 1f, 0.5f);
            dust.alpha = 0;
            dust.scale = 1f;
            dust.fadeIn = 1.3f;
            dust.velocity *= 3f;
            dust.velocity.X *= 0.1f;
            dust.velocity += this.velocity * 1f;
            break;
        }
      }
    }

    public static bool ShouldEmpressBeEnraged()
    {
      if (!Main.remixWorld)
        return Main.dayTime;
      if (NPC.empressRageMode)
        return true;
      int index1 = -1;
      for (int index2 = 0; index2 < 200; ++index2)
      {
        if (Main.npc[index2].type == 636)
        {
          index1 = index2;
          break;
        }
      }
      if (index1 >= 0 && (double) Main.npc[index1].Center.Y < Main.worldSurface * 16.0)
      {
        NPC.empressRageMode = true;
        return true;
      }
      NPC.empressRageMode = false;
      return false;
    }

    private void AI_120_HallowBoss()
    {
      Vector2 vector2_1 = new Vector2(-150f, -250f);
      Vector2 vector2_2 = new Vector2(150f, -250f);
      Vector2 vector2_3 = new Vector2(0.0f, -350f);
      Vector2 vector2_4 = new Vector2(0.0f, -350f);
      Vector2 vector2_5 = new Vector2(-80f, -500f);
      float moveSpeed = 0.5f;
      float num1 = 12f;
      float num2 = 40f;
      float num3 = 6400f;
      int Damage1 = 40;
      int normalDamage1 = 50;
      int normalDamage2 = 70;
      int normalDamage3 = 45;
      int normalDamage4 = 45;
      int normalDamage5 = 50;
      bool flag1 = this.AI_120_HallowBoss_IsInPhase2();
      bool flag2 = Main.expertMode;
      bool flag3 = flag1 & flag2;
      bool flag4 = NPC.ShouldEmpressBeEnraged();
      if (this.life == this.lifeMax & flag4 && !this.AI_120_HallowBoss_IsGenuinelyEnraged())
        this.ai[3] += 2f;
      bool flag5 = true;
      int expertDamage1 = 30;
      int expertDamage2 = 30;
      int expertDamage3 = 30;
      int expertDamage4 = 35;
      int expertDamage5 = 65;
      if (flag1)
      {
        normalDamage1 = 60;
        normalDamage3 = 50;
        normalDamage4 = 50;
        normalDamage5 = 60;
        normalDamage2 = 65;
        expertDamage1 = 35;
        expertDamage2 = 35;
        expertDamage3 = 35;
        expertDamage4 = 40;
        expertDamage5 = 30;
      }
      int Damage2 = this.GetAttackDamage_ForProjectiles((float) normalDamage1, (float) expertDamage1);
      int Damage3 = this.GetAttackDamage_ForProjectiles((float) normalDamage3, (float) expertDamage2);
      int Damage4 = this.GetAttackDamage_ForProjectiles((float) normalDamage4, (float) expertDamage3);
      int Damage5 = this.GetAttackDamage_ForProjectiles((float) normalDamage5, (float) expertDamage4);
      int Damage6 = this.GetAttackDamage_ForProjectiles((float) normalDamage2, (float) expertDamage5);
      if (flag4)
      {
        Damage2 = 9999;
        Damage3 = 9999;
        Damage4 = 9999;
        Damage5 = 9999;
        Damage6 = 9999;
        flag2 = true;
      }
      float num4 = flag2 ? 0.3f : 1f;
      bool flag6 = true;
      int num5 = 0;
      if (flag1)
        num5 += 15;
      if (flag2)
        num5 += 5;
      switch ((int) this.ai[0])
      {
        case 0:
          if ((double) this.ai[1] == 0.0)
          {
            this.velocity = new Vector2(0.0f, 5f);
            if (Main.netMode != 1)
              Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center + new Vector2(0.0f, -80f), Vector2.Zero, 874, 0, 0.0f, Main.myPlayer);
          }
          if ((double) this.ai[1] == 10.0)
            SoundEngine.PlaySound(SoundID.Item161, this.Center);
          this.velocity = this.velocity * 0.95f;
          if ((double) this.ai[1] > 10.0 && (double) this.ai[1] < 150.0)
          {
            int num6 = 2;
            for (int index = 0; index < num6; ++index)
            {
              float num7 = MathHelper.Lerp(1.3f, 0.7f, this.Opacity) * Utils.GetLerpValue(0.0f, 120f, this.ai[1], true);
              int dustIndex = Dust.NewDust(this.position, this.width, this.height, 267, newColor: Main.hslToRgb(this.ai[1] / 180f, 1f, 0.5f));
              Main.dust[dustIndex].position = this.Center + Main.rand.NextVector2Circular((float) this.width * 3f, (float) this.height * 3f) + new Vector2(0.0f, -150f);
              Main.dust[dustIndex].velocity *= Main.rand.NextFloat() * 0.8f;
              Main.dust[dustIndex].noGravity = true;
              Main.dust[dustIndex].fadeIn = (float) (0.60000002384185791 + (double) Main.rand.NextFloat() * 0.699999988079071 * (double) num7);
              Main.dust[dustIndex].velocity += Vector2.UnitY * 3f;
              Main.dust[dustIndex].scale = 0.35f;
              if (dustIndex != 6000)
              {
                Dust dust = Dust.CloneDust(dustIndex);
                dust.scale /= 2f;
                dust.fadeIn *= 0.85f;
                dust.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
              }
            }
          }
          ++this.ai[1];
          flag5 = false;
          flag6 = false;
          this.Opacity = MathHelper.Clamp(this.ai[1] / 180f, 0.0f, 1f);
          if ((double) this.ai[1] >= 180.0)
          {
            if (flag4 && !this.AI_120_HallowBoss_IsGenuinelyEnraged())
              this.ai[3] += 2f;
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            this.TargetClosest();
            break;
          }
          break;
        case 1:
          float num8 = flag1 ? 20f : 45f;
          if (Main.getGoodWorld)
            num8 /= 2f;
          if ((double) this.ai[1] <= 10.0)
          {
            if ((double) this.ai[1] == 0.0)
              this.TargetClosest();
            NPCAimedTarget targetData = this.GetTargetData();
            if (targetData.Invalid)
            {
              this.ai[0] = 13f;
              this.ai[1] = 0.0f;
              ++this.ai[2];
              this.velocity = this.velocity / 4f;
              this.netUpdate = true;
              break;
            }
            this.AI_120_HallowBoss_DashTo(targetData.Center);
            this.netUpdate = true;
          }
          if ((double) this.velocity.Length() > 16.0 && (double) this.ai[1] > 10.0)
            this.velocity = this.velocity / 2f;
          this.velocity = this.velocity * 0.92f;
          ++this.ai[1];
          if ((double) this.ai[1] >= (double) num8)
          {
            int num9 = (int) this.ai[2];
            int num10 = 2;
            int num11 = 0;
            if (!flag1)
            {
              int num12 = num11;
              int num13 = num12 + 1;
              int num14 = num12;
              int num15 = num13;
              int num16 = num15 + 1;
              int num17 = num15;
              int num18 = num16;
              int num19 = num18 + 1;
              int num20 = num18;
              int num21 = num19;
              int num22 = num21 + 1;
              int num23 = num21;
              int num24 = num22;
              int num25 = num24 + 1;
              int num26 = num24;
              int num27 = num25;
              int num28 = num27 + 1;
              int num29 = num27;
              int num30 = num28;
              int num31 = num30 + 1;
              int num32 = num30;
              int num33 = num31;
              int num34 = num33 + 1;
              int num35 = num33;
              int num36 = num34;
              int num37 = num36 + 1;
              int num38 = num36;
              int num39 = num37;
              num11 = num39 + 1;
              int num40 = num39;
              if (num9 % num11 == num14)
                num10 = 2;
              if (num9 % num11 == num17)
                num10 = 8;
              if (num9 % num11 == num20)
                num10 = 6;
              if (num9 % num11 == num23)
                num10 = 8;
              if (num9 % num11 == num26)
                num10 = 5;
              if (num9 % num11 == num29)
                num10 = 2;
              if (num9 % num11 == num32)
                num10 = 8;
              if (num9 % num11 == num35)
                num10 = 4;
              if (num9 % num11 == num38)
                num10 = 8;
              if (num9 % num11 == num40)
                num10 = 5;
              if ((double) this.life / (double) this.lifeMax <= 0.5)
                num10 = 10;
            }
            if (flag1)
            {
              int num41 = num11;
              int num42 = num41 + 1;
              int num43 = num41;
              int num44 = num42;
              int num45 = num44 + 1;
              int num46 = num44;
              int num47 = num45;
              int num48 = num47 + 1;
              int num49 = num47;
              int num50 = -1;
              if (flag2)
                num50 = num48++;
              int num51 = num48;
              int num52 = num51 + 1;
              int num53 = num51;
              int num54 = num52;
              int num55 = num54 + 1;
              int num56 = num54;
              int num57 = num55;
              int num58 = num57 + 1;
              int num59 = num57;
              int num60 = num58;
              int num61 = num60 + 1;
              int num62 = num60;
              int num63 = num61;
              int num64 = num63 + 1;
              int num65 = num63;
              int num66 = num64;
              int num67 = num66 + 1;
              int num68 = num66;
              if (num9 % num67 == num43)
                num10 = 7;
              if (num9 % num67 == num46)
                num10 = 2;
              if (num9 % num67 == num49)
                num10 = 8;
              if (num9 % num67 == num53)
                num10 = 5;
              if (num9 % num67 == num56)
                num10 = 2;
              if (num9 % num67 == num59)
                num10 = 6;
              if (num9 % num67 == num59)
                num10 = 6;
              if (num9 % num67 == num62)
                num10 = 4;
              if (num9 % num67 == num65)
                num10 = 8;
              if (num9 % num67 == num50)
                num10 = 11;
              if (num9 % num67 == num68)
                num10 = 12;
            }
            this.TargetClosest();
            NPCAimedTarget targetData = this.GetTargetData();
            bool flag7 = false;
            if (this.AI_120_HallowBoss_IsGenuinelyEnraged())
            {
              if (!Main.dayTime)
                flag7 = true;
              if (Main.dayTime && Main.time >= 53400.0)
                flag7 = true;
            }
            if (((targetData.Invalid ? 1 : ((double) this.Distance(targetData.Center) > (double) num3 ? 1 : 0)) | (flag7 ? 1 : 0)) != 0)
              num10 = 13;
            if (num10 == 8 && (double) targetData.Center.X > (double) this.Center.X)
              num10 = 9;
            if (flag2 && (num10 == 5 ? 1 : (num10 == 12 ? 1 : 0)) == 0)
              this.velocity = this.DirectionFrom(targetData.Center).SafeNormalize(Vector2.Zero).RotatedBy(1.5707963705062866 * (double) ((double) targetData.Center.X > (double) this.Center.X).ToDirectionInt()) * 20f;
            this.ai[0] = (float) num10;
            this.ai[1] = 0.0f;
            ++this.ai[2];
            this.netUpdate = true;
            break;
          }
          break;
        case 2:
          if ((double) this.ai[1] == 0.0)
            SoundEngine.PlaySound(SoundID.Item164, this.Center);
          float num69 = 90f - (float) num5;
          Vector2 vector2_6 = new Vector2(-55f, -30f);
          NPCAimedTarget targetData1 = this.GetTargetData();
          Vector2 vector2_7 = targetData1.Invalid ? this.Center : targetData1.Center;
          if ((double) this.Distance(vector2_7 + vector2_1) > (double) num2)
            this.SimpleFlyMovement(this.DirectionTo(vector2_7 + vector2_1).SafeNormalize(Vector2.Zero) * num1, moveSpeed);
          if ((double) this.ai[1] < 60.0)
            this.AI_120_HallowBoss_DoMagicEffect(this.Center + vector2_6, 1, Utils.GetLerpValue(0.0f, 60f, this.ai[1], true));
          int num70 = 3;
          if (flag2)
            num70 = 2;
          if ((int) this.ai[1] % num70 == 0 && (double) this.ai[1] < 60.0)
          {
            float ai1 = this.ai[1] / 60f;
            Vector2 velocity = new Vector2(0.0f, -6f).RotatedBy(1.5707963705062866 * (double) Main.rand.NextFloatDirection());
            if (flag3)
              velocity = new Vector2(0.0f, -10f).RotatedBy(6.2831854820251465 * (double) Main.rand.NextFloat());
            if (Main.netMode != 1)
              Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center + vector2_6, velocity, 873, Damage3, 0.0f, Main.myPlayer, (float) this.target, ai1);
            if (Main.netMode != 1)
            {
              int num71 = (int) ((double) this.ai[1] / (double) num70);
              for (int index = 0; index < (int) byte.MaxValue; ++index)
              {
                if (this.Boss_CanShootExtraAt(index, num71 % 3, 3, 2400f))
                  Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center + vector2_6, velocity, 873, Damage3, 0.0f, Main.myPlayer, (float) index, ai1);
              }
            }
          }
          ++this.ai[1];
          if ((double) this.ai[1] >= 60.0 + (double) num69)
          {
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 3:
          ++this.ai[1];
          NPCAimedTarget targetData2 = this.GetTargetData();
          Vector2 vector2_8 = targetData2.Invalid ? this.Center : targetData2.Center;
          if ((double) this.Distance(vector2_8 + vector2_2) > (double) num2)
            this.SimpleFlyMovement(this.DirectionTo(vector2_8 + vector2_2).SafeNormalize(Vector2.Zero) * num1, moveSpeed);
          if ((int) this.ai[1] % 180 == 0)
          {
            Vector2 vector2_9 = new Vector2(0.0f, -100f);
            Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), targetData2.Center + vector2_9, Vector2.Zero, 874, Damage1, 0.0f, Main.myPlayer);
          }
          if ((double) this.ai[1] >= 120.0)
          {
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 4:
          float num72 = (float) (20 - num5);
          Vector2 vector2_10 = new Vector2(0.0f, -100f);
          if ((double) this.ai[1] == 0.0)
            SoundEngine.PlaySound(SoundID.Item162, this.Center);
          if ((double) this.ai[1] >= 6.0 && (double) this.ai[1] < 54.0)
          {
            this.AI_120_HallowBoss_DoMagicEffect(this.Center + new Vector2(-55f, -20f), 2, Utils.GetLerpValue(0.0f, 100f, this.ai[1], true));
            this.AI_120_HallowBoss_DoMagicEffect(this.Center + new Vector2(55f, -20f), 4, Utils.GetLerpValue(0.0f, 100f, this.ai[1], true));
          }
          NPCAimedTarget targetData3 = this.GetTargetData();
          Vector2 vector2_11 = targetData3.Invalid ? this.Center : targetData3.Center;
          if ((double) this.Distance(vector2_11 + vector2_3) > (double) num2)
            this.SimpleFlyMovement(this.DirectionTo(vector2_11 + vector2_3).SafeNormalize(Vector2.Zero) * num1, moveSpeed);
          int num73 = 4;
          if (flag2)
            num73 = 5;
          if ((int) this.ai[1] % 4 == 0 && (double) this.ai[1] < 100.0)
          {
            int num74 = 1;
            for (int index = 0; index < num74; ++index)
            {
              int num75 = (int) this.ai[1] / 4;
              Vector2 vector2_12 = Vector2.UnitX.RotatedBy(3.1415927410125732 / (double) (num73 * 2) + (double) num75 * (3.1415927410125732 / (double) num73) + 0.0);
              if (!flag2)
                vector2_12.X += (double) vector2_12.X > 0.0 ? 0.5f : -0.5f;
              vector2_12.Normalize();
              float num76 = 300f;
              if (flag2)
                num76 = 450f;
              Vector2 center1 = targetData3.Center;
              if ((double) this.Distance(center1) <= 2400.0)
              {
                if ((double) Vector2.Dot(targetData3.Velocity.SafeNormalize(Vector2.UnitY), vector2_12) > 0.0)
                  vector2_12 *= -1f;
                int num77 = 90;
                Vector2 vector2_13 = center1 + targetData3.Velocity * (float) num77;
                Vector2 vector2_14 = center1 + vector2_12 * num76 - targetData3.Velocity * 30f;
                if ((double) vector2_14.Distance(center1) < (double) num76)
                {
                  Vector2 vector2_15 = center1 - vector2_14;
                  if (vector2_15 == Vector2.Zero)
                    vector2_15 = vector2_12;
                  vector2_14 = center1 - Vector2.Normalize(vector2_15) * num76;
                }
                Vector2 vector2_16 = vector2_14;
                Vector2 v1 = vector2_13 - vector2_16;
                if (Main.netMode != 1)
                  Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_14, Vector2.Zero, 919, Damage2, 0.0f, Main.myPlayer, v1.ToRotation(), this.ai[1] / 100f);
                if (Main.netMode != 1)
                {
                  int num78 = (int) ((double) this.ai[1] / 4.0);
                  for (int playerIndex = 0; playerIndex < (int) byte.MaxValue; ++playerIndex)
                  {
                    if (this.Boss_CanShootExtraAt(playerIndex, num78 % 3, 3, 2400f))
                    {
                      Player player = Main.player[playerIndex];
                      Vector2 center2 = player.Center;
                      if ((double) Vector2.Dot(player.velocity.SafeNormalize(Vector2.UnitY), vector2_12) > 0.0)
                        vector2_12 *= -1f;
                      Vector2 vector2_17 = center2 + player.velocity * (float) num77;
                      Vector2 vector2_18 = center2 + vector2_12 * num76 - player.velocity * 30f;
                      if ((double) vector2_18.Distance(center2) < (double) num76)
                      {
                        Vector2 vector2_19 = center2 - vector2_18;
                        if (vector2_19 == Vector2.Zero)
                          vector2_19 = vector2_12;
                        vector2_18 = center2 - Vector2.Normalize(vector2_19) * num76;
                      }
                      Vector2 vector2_20 = vector2_18;
                      Vector2 v2 = vector2_17 - vector2_20;
                      Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_18, Vector2.Zero, 919, Damage2, 0.0f, Main.myPlayer, v2.ToRotation(), this.ai[1] / 100f);
                    }
                  }
                }
              }
            }
          }
          ++this.ai[1];
          if ((double) this.ai[1] >= 100.0 + (double) num72)
          {
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 5:
          if ((double) this.ai[1] == 0.0)
            SoundEngine.PlaySound(SoundID.Item163, this.Center);
          float num79 = 30f - (float) num5;
          Vector2 vector2_21 = new Vector2(55f, -30f);
          Vector2 vector2_22 = this.Center + vector2_21;
          if ((double) this.ai[1] < 42.0)
            this.AI_120_HallowBoss_DoMagicEffect(this.Center + vector2_21, 3, Utils.GetLerpValue(0.0f, 42f, this.ai[1], true));
          NPCAimedTarget targetData4 = this.GetTargetData();
          Vector2 vector2_23 = targetData4.Invalid ? this.Center : targetData4.Center;
          if ((double) this.Distance(vector2_23 + vector2_4) > (double) num2)
            this.SimpleFlyMovement(this.DirectionTo(vector2_23 + vector2_4).SafeNormalize(Vector2.Zero) * num1, moveSpeed);
          if ((int) this.ai[1] % 42 == 0 && (double) this.ai[1] < 42.0)
          {
            float num80 = 6.28318548f * Main.rand.NextFloat();
            for (float num81 = 0.0f; (double) num81 < 1.0; num81 += 0.07692308f)
            {
              float ai1 = num81;
              Vector2 spinningpoint = Vector2.UnitY.RotatedBy(1.5707963705062866 + 6.2831854820251465 * (double) ai1 + (double) num80);
              if (Main.netMode != 1)
                Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_22 + spinningpoint.RotatedBy(-1.5707963705062866) * 30f, spinningpoint * 8f, 872, Damage4, 0.0f, Main.myPlayer, ai1: ai1);
            }
          }
          ++this.ai[1];
          if ((double) this.ai[1] >= 42.0 + (double) num79)
          {
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 6:
          float num82 = (float) (120 - num5);
          Vector2 position = this.Center + new Vector2(0.0f, -100f);
          NPCAimedTarget targetData5 = this.GetTargetData();
          Vector2 vector2_24 = targetData5.Invalid ? this.Center : targetData5.Center;
          if ((double) this.Distance(vector2_24 + vector2_5) > (double) num2)
            this.SimpleFlyMovement(this.DirectionTo(vector2_24 + vector2_5).SafeNormalize(Vector2.Zero) * num1 * 0.3f, moveSpeed * 0.7f);
          if ((int) this.ai[1] % 60 == 0 && (double) this.ai[1] < 180.0)
          {
            int num83 = (int) this.ai[1] / 60;
            int num84 = (double) targetData5.Center.X > (double) this.Center.X ? 1 : 0;
            float num85 = 6f;
            if (flag2)
              num85 = 8f;
            float num86 = 1f / num85;
            for (float num87 = 0.0f; (double) num87 < 1.0; num87 += num86)
            {
              float ai0 = (float) (6.2831854820251465 * (((double) num87 + (double) num86 * 0.5 + (double) num83 * (double) num86 * 0.5) % 1.0 + (double) num84));
              if (Main.netMode != 1)
                Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), position, Vector2.Zero, 923, Damage5, 0.0f, Main.myPlayer, ai0, (float) this.whoAmI);
            }
          }
          ++this.ai[1];
          if ((double) this.ai[1] >= 180.0 + (double) num82)
          {
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 7:
          float num88 = 20f;
          float num89 = 60f;
          float num90 = num89 * 4f;
          if (flag2)
          {
            num88 = 40f;
            num89 = 40f;
            num90 = num89 * 6f;
          }
          float num91 = num88 - (float) num5;
          NPCAimedTarget targetData6 = this.GetTargetData();
          Vector2 vector2_25 = targetData6.Invalid ? this.Center : targetData6.Center;
          if ((double) this.Distance(vector2_25 + vector2_4) > (double) num2)
            this.SimpleFlyMovement(this.DirectionTo(vector2_25 + vector2_4).SafeNormalize(Vector2.Zero) * num1 * 0.4f, moveSpeed);
          if ((double) (int) this.ai[1] % (double) num89 == 0.0 && (double) this.ai[1] < (double) num90)
          {
            SoundEngine.PlaySound(SoundID.Item162, this.Center);
            double num92 = (double) Main.rand.NextFloat();
            int num93 = (int) this.ai[1] / (int) num89;
            float num94 = 13f;
            float num95 = 150f;
            float y = num94 * num95;
            Vector2 center = targetData6.Center;
            if ((double) this.Distance(center) <= 3200.0)
            {
              Vector2 vector2_26 = Vector2.Zero;
              Vector2 vector2_27 = Vector2.UnitY;
              float num96 = 0.4f;
              float num97 = 1.4f;
              float num98 = 1f;
              if (flag2)
              {
                num94 += 5f;
                num95 += 50f;
                num98 *= 1f;
                y *= 0.5f;
              }
              switch (num93)
              {
                case 0:
                  center += new Vector2((float) (-(double) y / 2.0), 0.0f) * num98;
                  vector2_26 = new Vector2(0.0f, y);
                  vector2_27 = Vector2.UnitX;
                  break;
                case 1:
                  center += new Vector2(y / 2f, num95 / 2f) * num98;
                  vector2_26 = new Vector2(0.0f, y);
                  vector2_27 = -Vector2.UnitX;
                  break;
                case 2:
                  center += new Vector2(-y, -y) * num96 * num98;
                  vector2_26 = new Vector2(y * num97, 0.0f);
                  vector2_27 = new Vector2(1f, 1f);
                  break;
                case 3:
                  center += new Vector2((float) ((double) y * (double) num96 + (double) num95 / 2.0), -y * num96) * num98;
                  vector2_26 = new Vector2(-y * num97, 0.0f);
                  vector2_27 = new Vector2(-1f, 1f);
                  break;
                case 4:
                  center += new Vector2(-y, y) * num96 * num98;
                  vector2_26 = new Vector2(y * num97, 0.0f);
                  vector2_27 = center.DirectionTo(targetData6.Center);
                  break;
                case 5:
                  center += new Vector2((float) ((double) y * (double) num96 + (double) num95 / 2.0), y * num96) * num98;
                  vector2_26 = new Vector2(-y * num97, 0.0f);
                  vector2_27 = center.DirectionTo(targetData6.Center);
                  break;
              }
              for (float num99 = 0.0f; (double) num99 <= 1.0; num99 += 1f / num94)
              {
                Vector2 vector2_28 = center + vector2_26 * (num99 - 0.5f);
                Vector2 v = vector2_27;
                if (flag2)
                {
                  Vector2 vector2_29 = targetData6.Velocity * 20f * num99;
                  Vector2 vector2_30 = vector2_28.DirectionTo(targetData6.Center + vector2_29);
                  v = Vector2.Lerp(vector2_27, vector2_30, 0.75f).SafeNormalize(Vector2.UnitY);
                }
                float ai1 = num99;
                if (Main.netMode != 1)
                  Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_28, Vector2.Zero, 919, Damage6, 0.0f, Main.myPlayer, v.ToRotation(), ai1);
              }
            }
          }
          ++this.ai[1];
          if ((double) this.ai[1] >= (double) num90 + (double) num91)
          {
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 8:
        case 9:
          float num100 = (float) (20 - num5);
          Vector2 vector2_31 = this.Center + new Vector2(0.0f, -100f);
          flag6 = (double) this.ai[1] < 6.0 || (double) this.ai[1] > 40.0;
          int num101 = (double) this.ai[0] == 8.0 ? -1 : 1;
          this.AI_120_HallowBoss_DoMagicEffect(this.Center, 5, Utils.GetLerpValue(40f, 90f, this.ai[1], true));
          if ((double) this.ai[1] <= 40.0)
          {
            if ((double) this.ai[1] == 20.0)
              SoundEngine.PlaySound(SoundID.Item160, this.Center);
            NPCAimedTarget targetData7 = this.GetTargetData();
            this.SimpleFlyMovement(this.DirectionTo((targetData7.Invalid ? this.Center : targetData7.Center) + new Vector2((float) (num101 * -550), 0.0f)).SafeNormalize(Vector2.Zero) * num1, moveSpeed * 2f);
            if ((double) this.ai[1] == 40.0)
              this.velocity = this.velocity * 0.3f;
          }
          else if ((double) this.ai[1] <= 90.0)
          {
            this.velocity = Vector2.Lerp(this.velocity, new Vector2((float) (num101 * 50), 0.0f), 0.05f);
            if ((double) this.ai[1] == 90.0)
              this.velocity = this.velocity * 0.7f;
            num4 *= 1.5f;
          }
          else
            this.velocity = this.velocity * 0.92f;
          ++this.ai[1];
          if ((double) this.ai[1] >= 90.0 + (double) num100)
          {
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 10:
          float num102 = (float) (20 - num5);
          if ((double) this.ai[1] == 0.0)
            SoundEngine.PlaySound(SoundID.Item161, this.Center);
          flag6 = (double) this.ai[1] < 30.0 || (double) this.ai[1] > 170.0;
          this.velocity = this.velocity * 0.95f;
          if ((double) this.ai[1] == 90.0)
          {
            if ((double) this.ai[3] == 0.0)
              this.ai[3] = 1f;
            if ((double) this.ai[3] == 2.0)
              this.ai[3] = 3f;
            this.Center = this.GetTargetData().Center + new Vector2(0.0f, -250f);
            this.netUpdate = true;
          }
          ++this.ai[1];
          if ((double) this.ai[1] >= 180.0 + (double) num102)
          {
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.ai[2] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 11:
          if ((double) this.ai[1] == 0.0)
            SoundEngine.PlaySound(SoundID.Item162, this.Center);
          float num103 = (float) (20 - num5);
          Vector2 vector2_32 = new Vector2(0.0f, -100f);
          if ((double) this.ai[1] >= 6.0 && (double) this.ai[1] < 54.0)
          {
            this.AI_120_HallowBoss_DoMagicEffect(this.Center + new Vector2(-55f, -20f), 2, Utils.GetLerpValue(0.0f, 100f, this.ai[1], true));
            this.AI_120_HallowBoss_DoMagicEffect(this.Center + new Vector2(55f, -20f), 4, Utils.GetLerpValue(0.0f, 100f, this.ai[1], true));
          }
          NPCAimedTarget targetData8 = this.GetTargetData();
          Vector2 vector2_33 = targetData8.Invalid ? this.Center : targetData8.Center;
          if ((double) this.Distance(vector2_33 + vector2_3) > (double) num2)
            this.SimpleFlyMovement(this.DirectionTo(vector2_33 + vector2_3).SafeNormalize(Vector2.Zero) * num1, moveSpeed);
          if ((int) this.ai[1] % 3 == 0 && (double) this.ai[1] < 100.0)
          {
            int num104 = 1;
            for (int index = 0; index < num104; ++index)
            {
              Vector2 v3 = -targetData8.Velocity;
              v3.SafeNormalize(-Vector2.UnitY);
              float num105 = 100f;
              Vector2 center3 = targetData8.Center;
              if ((double) this.Distance(center3) <= 2400.0)
              {
                int num106 = 90;
                Vector2 vector2_34 = center3 + targetData8.Velocity * (float) num106;
                Vector2 vector2_35 = center3 + v3 * num105;
                if ((double) vector2_35.Distance(center3) < (double) num105)
                {
                  Vector2 vector2_36 = center3 - vector2_35;
                  if (vector2_36 == Vector2.Zero)
                    vector2_36 = v3;
                  vector2_35 = center3 - Vector2.Normalize(vector2_36) * num105;
                }
                Vector2 vector2_37 = vector2_35;
                Vector2 v4 = vector2_34 - vector2_37;
                if (Main.netMode != 1)
                  Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_35, Vector2.Zero, 919, Damage2, 0.0f, Main.myPlayer, v4.ToRotation(), this.ai[1] / 100f);
                if (Main.netMode != 1)
                {
                  int num107 = (int) ((double) this.ai[1] / 3.0);
                  for (int playerIndex = 0; playerIndex < (int) byte.MaxValue; ++playerIndex)
                  {
                    if (this.Boss_CanShootExtraAt(playerIndex, num107 % 3, 3, 2400f))
                    {
                      Player player = Main.player[playerIndex];
                      Vector2 v5 = -player.velocity;
                      v5.SafeNormalize(-Vector2.UnitY);
                      float num108 = 100f;
                      Vector2 center4 = player.Center;
                      int num109 = 90;
                      Vector2 vector2_38 = center4 + player.velocity * (float) num109;
                      Vector2 vector2_39 = center4 + v5 * num108;
                      if ((double) vector2_39.Distance(center4) < (double) num108)
                      {
                        Vector2 vector2_40 = center4 - vector2_39;
                        if (vector2_40 == Vector2.Zero)
                          vector2_40 = v5;
                        vector2_39 = center4 - Vector2.Normalize(vector2_40) * num108;
                      }
                      Vector2 vector2_41 = vector2_39;
                      Vector2 v6 = vector2_38 - vector2_41;
                      Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_39, Vector2.Zero, 919, Damage2, 0.0f, Main.myPlayer, v6.ToRotation(), this.ai[1] / 100f);
                    }
                  }
                }
              }
            }
          }
          ++this.ai[1];
          if ((double) this.ai[1] >= 100.0 + (double) num103)
          {
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 12:
          float num110 = 90f - (float) num5;
          Vector2 vector2_42 = new Vector2(-55f, -30f);
          if ((double) this.ai[1] == 0.0)
          {
            SoundEngine.PlaySound(SoundID.Item165, this.Center);
            this.velocity = new Vector2(0.0f, -12f);
          }
          this.velocity = this.velocity * 0.95f;
          bool flag8 = (double) this.ai[1] < 60.0 && (double) this.ai[1] >= 10.0;
          if (flag8)
            this.AI_120_HallowBoss_DoMagicEffect(this.Center + vector2_42, 1, Utils.GetLerpValue(0.0f, 60f, this.ai[1], true));
          int num111 = 6;
          if (flag2)
            num111 = 4;
          float ai1_1 = (float) (((double) this.ai[1] - 10.0) / 50.0);
          if ((int) this.ai[1] % num111 == 0 & flag8)
          {
            double num112 = (double) this.ai[1] / 60.0;
            Vector2 velocity = new Vector2(0.0f, -20f).RotatedBy(6.2831854820251465 * (double) ai1_1);
            if (Main.netMode != 1)
              Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center + vector2_42, velocity, 873, Damage3, 0.0f, Main.myPlayer, (float) this.target, ai1_1);
            if (Main.netMode != 1)
            {
              int num113 = (int) ((double) this.ai[1] % (double) num111);
              for (int index = 0; index < (int) byte.MaxValue; ++index)
              {
                if (this.Boss_CanShootExtraAt(index, num113 % 3, 3, 2400f))
                  Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center + vector2_42, velocity, 873, Damage3, 0.0f, Main.myPlayer, (float) index, ai1_1);
              }
            }
          }
          ++this.ai[1];
          if ((double) this.ai[1] >= 60.0 + (double) num110)
          {
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 13:
          Vector2 vector2_43 = new Vector2(-55f, -30f);
          if ((double) this.ai[1] == 0.0)
          {
            SoundEngine.PlaySound(SoundID.Item165, this.Center);
            this.velocity = new Vector2(0.0f, -7f);
          }
          this.velocity = this.velocity * 0.95f;
          this.TargetClosest();
          NPCAimedTarget targetData9 = this.GetTargetData();
          flag5 = false;
          bool flag9 = false;
          bool flag10 = false;
          if (!flag9)
          {
            if (this.AI_120_HallowBoss_IsGenuinelyEnraged())
            {
              if (!Main.dayTime)
                flag10 = true;
              if (Main.dayTime && Main.time >= 53400.0)
                flag10 = true;
            }
            flag9 |= flag10;
          }
          if (!flag9)
          {
            bool flag11 = targetData9.Invalid || (double) this.Distance(targetData9.Center) > (double) num3;
            flag9 |= flag11;
          }
          this.alpha = Utils.Clamp<int>(this.alpha + flag9.ToDirectionInt() * 5, 0, (int) byte.MaxValue);
          bool flag12 = this.alpha == 0 || this.alpha == (int) byte.MaxValue;
          int num114 = 5;
          for (int index = 0; index < num114; ++index)
          {
            float num115 = MathHelper.Lerp(1.3f, 0.7f, this.Opacity);
            int dustIndex = Dust.NewDust(this.position - this.Size * 0.5f, this.width * 2, this.height * 2, 267, newColor: Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f));
            Main.dust[dustIndex].position = this.Center + Main.rand.NextVector2Circular((float) this.width, (float) this.height);
            Main.dust[dustIndex].velocity *= Main.rand.NextFloat() * 0.8f;
            Main.dust[dustIndex].noGravity = true;
            Main.dust[dustIndex].scale = (float) (0.89999997615814209 + (double) Main.rand.NextFloat() * 1.2000000476837158);
            Main.dust[dustIndex].fadeIn = (float) (0.40000000596046448 + (double) Main.rand.NextFloat() * 1.2000000476837158 * (double) num115);
            Main.dust[dustIndex].velocity += Vector2.UnitY * -2f;
            Main.dust[dustIndex].scale = 0.35f;
            if (dustIndex != 6000)
            {
              Dust dust = Dust.CloneDust(dustIndex);
              dust.scale /= 2f;
              dust.fadeIn *= 0.85f;
              dust.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
            }
          }
          ++this.ai[1];
          if ((double) this.ai[1] >= 20.0 & flag12)
          {
            if (this.alpha == (int) byte.MaxValue)
            {
              this.active = false;
              if (Main.netMode == 1)
                return;
              NetMessage.SendData(23, number: this.whoAmI);
              return;
            }
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
      }
      this.dontTakeDamage = !flag6;
      this.damage = this.GetAttackDamage_ScaledByStrength((float) this.defDamage * num4);
      if (flag4)
        this.damage = 9999;
      this.defense = !flag1 ? this.defDefense : (int) ((double) this.defDefense * 1.2000000476837158);
      if ((double) ++this.localAI[0] >= 44.0)
        this.localAI[0] = 0.0f;
      if (flag5)
        this.alpha = Utils.Clamp<int>(this.alpha - 5, 0, (int) byte.MaxValue);
      Lighting.AddLight(this.Center, Vector3.One * this.Opacity);
    }

    private void AI_120_HallowBoss_DashTo(Vector2 targetPosition)
    {
      this.DirectionTo(targetPosition);
      targetPosition += new Vector2(0.0f, -300f);
      if ((double) this.Distance(targetPosition) > 200.0)
        targetPosition -= this.DirectionTo(targetPosition) * 100f;
      Vector2 v = targetPosition - this.Center;
      float lerpValue = Utils.GetLerpValue(100f, 600f, v.Length(), true);
      float num = v.Length();
      if ((double) num > 18.0)
        num = 18f;
      this.velocity = Vector2.Lerp(v.SafeNormalize(Vector2.Zero) * num, v / 6f, lerpValue);
    }

    public bool Boss_CanShootExtraAt(
      int playerIndex,
      int rotationIndexToAttack,
      int rotationSize,
      float attackScanDistance,
      bool alwaysSkipMainTarget = true)
    {
      if (playerIndex == this.target & alwaysSkipMainTarget || playerIndex % rotationSize != rotationIndexToAttack)
        return false;
      Player player = Main.player[playerIndex];
      return player.active && !player.dead && this.playerInteraction[playerIndex] && (double) this.Distance(player.Center) <= (double) attackScanDistance;
    }

    private void AI_119_Dandelion()
    {
      if (!Main.IsItAHappyWindyDay && this.timeLeft > 10)
        this.timeLeft = 10;
      bool flag = false;
      float num1 = 0.0f;
      float num2 = 0.0f;
      NPCUtils.TargetClosestDownwindFromNPC(this, 600f);
      NPCAimedTarget targetData = this.GetTargetData();
      if (targetData.Type == NPCTargetType.Player)
      {
        Microsoft.Xna.Framework.Rectangle hitbox = targetData.Hitbox;
        float windSpeedCurrent = Main.windSpeedCurrent;
        num1 = (float) hitbox.Center.X - this.Center.X;
        num2 = Math.Abs(num1);
        flag = (double) Math.Abs((float) hitbox.Center.Y - this.Center.Y) < 100.0 && (double) num2 < 600.0 && ((double) num1 > 0.0 && (double) windSpeedCurrent > 0.0 || (double) num1 < 0.0 && (double) windSpeedCurrent < 0.0);
      }
      if ((double) this.ai[0] == 1.0)
      {
        this.localAI[0] = 0.0f;
        if ((double) num2 < 500.0)
          this.localAI[0] = 1f;
        if (Main.netMode == 1)
          return;
        if (!flag)
        {
          this.ai[0] = 0.0f;
          this.netUpdate = true;
        }
        else
        {
          if ((double) this.localAI[0] != 1.0)
            return;
          ++this.localAI[1];
          if ((double) this.localAI[1] > 80.0)
          {
            this.ai[0] = 0.0f;
            this.netUpdate = true;
          }
          else
          {
            if ((double) this.localAI[1] != 40.0)
              return;
            for (int index = 0; index < 1 + Main.rand.Next(3); ++index)
            {
              int num3 = -1;
              if ((double) num1 > 0.0)
                num3 = 1;
              Vector2 vector2 = new Vector2((float) (num3 * Main.rand.Next(-2, 10)), (float) (10 + Main.rand.Next(-6, 6)));
              Vector2 velocity = new Vector2(2f * (float) num3, -2f);
              velocity += vector2 * 0.25f;
              if ((double) velocity.Y > -3.0)
                velocity.Y = -3f;
              Vector2 position = this.Center + vector2;
              position.X += (float) (num3 * 6);
              int Damage = 7;
              Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), position, velocity, 836, Damage, 1f, Main.myPlayer, ai1: ((float) this.target));
            }
            this.netUpdate = true;
          }
        }
      }
      else
      {
        if ((double) this.ai[0] != 0.0)
          return;
        this.localAI[0] = 0.0f;
        this.localAI[1] = 0.0f;
        if (!(Main.netMode != 1 & flag))
          return;
        this.ai[0] = 1f;
        this.netUpdate = true;
      }
    }

    private void AI_118_Seahorses()
    {
      this.noGravity = this.wet;
      float waterLineHeight;
      Collision.GetWaterLineIterate(this.Center.ToTileCoordinates(), out waterLineHeight);
      bool flag1 = (double) waterLineHeight > 0.0 && (double) this.Top.Y - (double) waterLineHeight < 20.0;
      if (!this.wet)
      {
        if ((double) this.velocity.Y == 0.0)
          this.velocity.X *= 0.95f;
        this.rotation += (float) (((double) this.velocity.X + (double) this.velocity.Y) / 2.0 * 0.05000000074505806);
      }
      else
      {
        --this.ai[1];
        if ((double) this.ai[1] <= 0.0)
        {
          this.velocity = this.velocity + this.ai[0].ToRotationVector2() * 0.06f;
          float num = this.velocity.Length();
          if ((double) num > 3.0 || (double) num < -3.0)
          {
            this.velocity.X = Math.Min(3f, Math.Max(-3f, this.velocity.X));
            this.ai[1] = (float) Main.rand.Next(450, 600);
            this.ai[0] = Main.rand.NextFloat() * 6.28318548f;
            if (flag1 && (double) this.ai[0] > 3.1415927410125732)
              this.ai[0] -= 3.14159274f;
            this.netUpdate = true;
          }
        }
        else
          this.velocity = this.velocity * 0.95f;
        this.rotation = this.velocity.X * 0.1f;
      }
      bool flag2 = this.collideY && this.wet && (!flag1 || (double) this.velocity.Y < 0.0);
      if (!(this.collideX | flag2))
        return;
      Vector2 rotationVector2 = this.ai[0].ToRotationVector2();
      if (this.collideX)
        rotationVector2.X *= -1f;
      if (flag2)
        rotationVector2.Y *= -1f;
      this.ai[0] = rotationVector2.ToRotation();
      this.velocity = this.ai[0].ToRotationVector2() * this.velocity.Length();
      this.netUpdate = true;
    }

    private void AI_117_BloodNautilus()
    {
      float moveSpeed = 0.15f;
      float num1 = 7.5f;
      float num2 = 60f;
      float num3 = 90f;
      float num4 = 180f;
      float num5 = 90f;
      float num6 = 90f;
      int num7 = 3;
      float num8 = 180f;
      bool flag = false;
      if ((double) this.localAI[0] == 0.0)
      {
        this.localAI[0] = 1f;
        this.alpha = (int) byte.MaxValue;
        if (Main.netMode != 1)
        {
          this.ai[0] = -1f;
          this.netUpdate = true;
        }
      }
      if ((double) this.ai[0] != -1.0 && Main.rand.Next(4) == 0)
      {
        this.position = this.position + this.netOffset;
        Dust dust = Dust.NewDustDirect(this.position + new Vector2(5f), this.width - 10, this.height - 10, 5);
        dust.velocity *= 0.5f;
        if ((double) dust.velocity.Y < 0.0)
          dust.velocity.Y *= -1f;
        dust.alpha = 120;
        dust.scale = (float) (1.0 + (double) Main.rand.NextFloat() * 0.40000000596046448);
        dust.velocity += this.velocity * 0.3f;
        this.position = this.position - this.netOffset;
      }
      if (this.target == (int) byte.MaxValue)
      {
        this.TargetClosest();
        this.ai[2] = (float) this.direction;
      }
      if (Main.player[this.target].dead || (double) Vector2.Distance(Main.player[this.target].Center, this.Center) > 2000.0)
        this.TargetClosest();
      NPCAimedTarget npcAimedTarget = this.GetTargetData();
      if (Main.dayTime || !Main.bloodMoon)
        npcAimedTarget = new NPCAimedTarget();
      int num9 = -1;
      switch (this.ai[0])
      {
        case -1f:
          this.velocity = this.velocity * 0.98f;
          int num10 = Math.Sign(npcAimedTarget.Center.X - this.Center.X);
          if (num10 != 0)
          {
            this.direction = num10;
            this.spriteDirection = -this.direction;
          }
          if ((double) this.localAI[1] == 0.0 && this.alpha < 100)
          {
            this.localAI[1] = 1f;
            int num11 = 36;
            for (int index1 = 0; index1 < num11; ++index1)
            {
              this.position = this.position + this.netOffset;
              Vector2 vector2_1 = (Vector2.Normalize(this.velocity) * new Vector2((float) this.width / 2f, (float) this.height) * 0.75f * 0.5f).RotatedBy((double) (index1 - (num11 / 2 - 1)) * 6.2831854820251465 / (double) num11) + this.Center;
              Vector2 vector2_2 = vector2_1 - this.Center;
              int index2 = Dust.NewDust(vector2_1 + vector2_2, 0, 0, 5, vector2_2.X * 2f, vector2_2.Y * 2f, 100, Scale: 1.4f);
              Main.dust[index2].noGravity = true;
              Main.dust[index2].velocity = Vector2.Normalize(vector2_2) * 3f;
              this.position = this.position - this.netOffset;
            }
          }
          if ((double) this.ai[2] > 5.0)
          {
            this.velocity.Y = -2.5f;
            this.alpha -= 10;
            if (Collision.SolidCollision(this.position, this.width, this.height))
            {
              this.alpha += 15;
              if (this.alpha > 150)
                this.alpha = 150;
            }
            if (this.alpha < 0)
              this.alpha = 0;
          }
          ++this.ai[2];
          if ((double) this.ai[2] >= 50.0)
          {
            this.ai[0] = 0.0f;
            this.ai[1] = 0.0f;
            this.ai[2] = 0.0f;
            this.ai[3] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 0.0f:
          Vector2 vector2_3 = npcAimedTarget.Center + new Vector2((float) (-(double) this.ai[2] * 300.0), -200f);
          if ((double) this.Center.Distance(vector2_3) > 50.0)
            this.SimpleFlyMovement(this.DirectionTo(vector2_3) * num1, moveSpeed);
          this.direction = (double) this.Center.X < (double) npcAimedTarget.Center.X ? 1 : -1;
          float targetAngle1 = this.Center.DirectionTo(npcAimedTarget.Center).ToRotation() - 0.471238941f * (float) this.spriteDirection;
          if (this.spriteDirection == -1)
            targetAngle1 += 3.14159274f;
          if (this.spriteDirection != this.direction)
          {
            this.spriteDirection = this.direction;
            this.rotation = -this.rotation;
            targetAngle1 = -targetAngle1;
          }
          this.rotation = this.rotation.AngleTowards(targetAngle1, 0.02f);
          ++this.ai[1];
          if ((double) this.ai[1] > (double) num2)
          {
            int num12 = (int) this.ai[3];
            if (num12 % 7 == 3)
            {
              num9 = 3;
              break;
            }
            if (num12 % 2 == 0)
            {
              SoundEngine.PlaySound(SoundID.Item170, this.Center);
              num9 = 2;
              break;
            }
            SoundEngine.PlaySound(SoundID.Item170, this.Center);
            num9 = 1;
            break;
          }
          break;
        case 1f:
          this.direction = (double) this.Center.X < (double) npcAimedTarget.Center.X ? -1 : 1;
          float targetAngle2 = this.Center.DirectionFrom(npcAimedTarget.Center).ToRotation() - 0.471238941f * (float) this.spriteDirection;
          if (this.spriteDirection == -1)
            targetAngle2 += 3.14159274f;
          if (this.spriteDirection != this.direction & (double) this.ai[1] < (double) num3)
          {
            this.spriteDirection = this.direction;
            this.rotation = -this.rotation;
            targetAngle2 = -targetAngle2;
          }
          if ((double) this.ai[1] < (double) num3)
          {
            if ((double) this.ai[1] == (double) num3 - 1.0)
              SoundEngine.PlaySound(SoundID.Item172, this.Center);
            flag = true;
            this.velocity = this.velocity * 0.95f;
            this.rotation = this.rotation.AngleLerp(targetAngle2, 0.02f);
            this.position = this.position + this.netOffset;
            Vector2 mouthPosition;
            Vector2 mouthDirection;
            this.BloodNautilus_GetMouthPositionAndRotation(out mouthPosition, out mouthDirection);
            Dust dust1 = Dust.NewDustDirect(mouthPosition + mouthDirection * 60f - new Vector2(40f), 80, 80, 16, Alpha: 150, newColor: Color.Transparent, Scale: 0.6f);
            dust1.fadeIn = 1f;
            dust1.velocity = dust1.position.DirectionTo(mouthPosition + Main.rand.NextVector2Circular(15f, 15f)) * dust1.velocity.Length();
            dust1.noGravity = true;
            Dust dust2 = Dust.NewDustDirect(mouthPosition + mouthDirection * 100f - new Vector2(30f), 60, 60, 16, Alpha: 100, newColor: Color.Transparent, Scale: 0.9f);
            dust2.fadeIn = 1.5f;
            dust2.velocity = dust2.position.DirectionTo(mouthPosition + Main.rand.NextVector2Circular(15f, 15f)) * (dust2.velocity.Length() + 5f);
            dust2.noGravity = true;
            this.position = this.position - this.netOffset;
          }
          else if ((double) this.ai[1] < (double) num3 + (double) num4)
          {
            this.position = this.position + this.netOffset;
            this.rotation = this.rotation.AngleLerp(targetAngle2, 0.05f);
            Vector2 mouthPosition;
            Vector2 mouthDirection;
            this.BloodNautilus_GetMouthPositionAndRotation(out mouthPosition, out mouthDirection);
            if ((double) this.Center.Distance(npcAimedTarget.Center) > 150.0)
              this.velocity = mouthDirection * -16f + this.Center.DirectionTo(npcAimedTarget.Center) * 1.5f;
            for (int index = 0; index < 4; ++index)
            {
              Dust dust3 = Dust.NewDustDirect(mouthPosition + mouthDirection * 60f - new Vector2(15f), 30, 30, 5, newColor: Color.Transparent, Scale: 1.5f);
              dust3.velocity = dust3.position.DirectionFrom(mouthPosition + Main.rand.NextVector2Circular(5f, 5f)) * dust3.velocity.Length();
              dust3.position -= mouthDirection * 60f;
              Dust dust4 = Dust.NewDustDirect(mouthPosition + mouthDirection * 100f - new Vector2(20f), 40, 40, 5, Alpha: 100, newColor: Color.Transparent, Scale: 1.5f);
              dust4.velocity = dust4.position.DirectionFrom(mouthPosition + Main.rand.NextVector2Circular(10f, 10f)) * (dust4.velocity.Length() + 5f);
              dust4.position -= mouthDirection * 100f;
            }
            this.position = this.position - this.netOffset;
          }
          ++this.ai[1];
          if ((double) this.ai[1] >= (double) num3 + (double) num4)
          {
            num9 = 0;
            break;
          }
          break;
        case 2f:
          this.direction = (double) this.Center.X < (double) npcAimedTarget.Center.X ? 1 : -1;
          float targetAngle3 = this.Center.DirectionTo(npcAimedTarget.Center).ToRotation() - 0.471238941f * (float) this.spriteDirection;
          if (this.spriteDirection == -1)
            targetAngle3 += 3.14159274f;
          if (this.spriteDirection != this.direction)
          {
            this.spriteDirection = this.direction;
            this.rotation = -this.rotation;
            targetAngle3 = -targetAngle3;
          }
          this.rotation = this.rotation.AngleLerp(targetAngle3, 0.2f);
          if ((double) this.ai[1] < (double) num5)
          {
            this.position = this.position + this.netOffset;
            this.velocity = this.velocity * 0.95f;
            Vector2 mouthPosition;
            Vector2 mouthDirection;
            this.BloodNautilus_GetMouthPositionAndRotation(out mouthPosition, out mouthDirection);
            if (Main.rand.Next(4) != 0)
            {
              Dust dust5 = Dust.NewDustDirect(mouthPosition + mouthDirection * 60f - new Vector2(60f), 120, 120, 16, Alpha: 150, newColor: Color.Transparent, Scale: 0.6f);
              dust5.fadeIn = 1f;
              dust5.velocity = dust5.position.DirectionTo(mouthPosition + Main.rand.NextVector2Circular(15f, 15f)) * (dust5.velocity.Length() + 3f);
              dust5.noGravity = true;
              Dust dust6 = Dust.NewDustDirect(mouthPosition + mouthDirection * 100f - new Vector2(80f), 160, 160, 16, Alpha: 100, newColor: Color.Transparent, Scale: 0.9f);
              dust6.fadeIn = 1.5f;
              dust6.velocity = dust6.position.DirectionTo(mouthPosition + Main.rand.NextVector2Circular(15f, 15f)) * (dust6.velocity.Length() + 5f);
              dust6.noGravity = true;
            }
            this.position = this.position - this.netOffset;
          }
          else if ((double) this.ai[1] < (double) num5 + (double) num6)
          {
            this.position = this.position + this.netOffset;
            this.velocity = this.velocity * 0.9f;
            float num13 = (float) (((double) this.ai[1] - (double) num5) % ((double) num6 / (double) num7));
            Vector2 mouthPosition;
            Vector2 mouthDirection;
            this.BloodNautilus_GetMouthPositionAndRotation(out mouthPosition, out mouthDirection);
            if ((double) num13 < (double) num6 / (double) num7 * 0.800000011920929)
            {
              for (int index = 0; index < 5; ++index)
              {
                Dust dust7 = Dust.NewDustDirect(mouthPosition + mouthDirection * 50f - new Vector2(15f), 30, 30, 5, newColor: Color.Transparent, Scale: 1.5f);
                dust7.velocity = dust7.position.DirectionFrom(mouthPosition + Main.rand.NextVector2Circular(5f, 5f)) * dust7.velocity.Length();
                dust7.position -= mouthDirection * 60f;
                Dust dust8 = Dust.NewDustDirect(mouthPosition + mouthDirection * 90f - new Vector2(20f), 40, 40, 5, Alpha: 100, newColor: Color.Transparent, Scale: 1.5f);
                dust8.velocity = dust8.position.DirectionFrom(mouthPosition + Main.rand.NextVector2Circular(10f, 10f)) * (dust8.velocity.Length() + 5f);
                dust8.position -= mouthDirection * 100f;
              }
            }
            if ((int) num13 == 0)
            {
              this.velocity = this.velocity + mouthDirection * -8f;
              for (int index = 0; index < 20; ++index)
              {
                Dust dust9 = Dust.NewDustDirect(mouthPosition + mouthDirection * 60f - new Vector2(15f), 30, 30, 5, newColor: Color.Transparent, Scale: 1.5f);
                dust9.velocity = dust9.position.DirectionFrom(mouthPosition + Main.rand.NextVector2Circular(5f, 5f)) * dust9.velocity.Length();
                dust9.position -= mouthDirection * 60f;
                Dust dust10 = Dust.NewDustDirect(mouthPosition + mouthDirection * 100f - new Vector2(20f), 40, 40, 5, Alpha: 100, newColor: Color.Transparent, Scale: 1.5f);
                dust10.velocity = dust10.position.DirectionFrom(mouthPosition + Main.rand.NextVector2Circular(10f, 10f)) * (dust10.velocity.Length() + 5f);
                dust10.position -= mouthDirection * 100f;
              }
              if (Main.netMode != 1)
              {
                int num14 = Main.rand.Next(5, 11);
                Vector2 vector2_4 = mouthDirection * 10f;
                int damageForProjectiles = this.GetAttackDamage_ForProjectiles(30f, 25f);
                for (int index = 0; index < num14; ++index)
                {
                  Vector2 velocity = vector2_4 + Main.rand.NextVector2Square(-6f, 6f);
                  Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), mouthPosition - mouthDirection * 5f, velocity, 814, damageForProjectiles, 0.0f, Main.myPlayer);
                }
              }
            }
            this.position = this.position - this.netOffset;
          }
          ++this.ai[1];
          if ((double) this.ai[1] >= (double) num5 + (double) num6)
          {
            num9 = 0;
            break;
          }
          break;
        case 3f:
          this.direction = (double) this.Center.X < (double) npcAimedTarget.Center.X ? 1 : -1;
          float targetAngle4 = 0.0f;
          this.spriteDirection = this.direction;
          if ((double) this.ai[1] < (double) num8)
          {
            this.position = this.position + this.netOffset;
            this.velocity = Vector2.Lerp(this.velocity, new Vector2(0.0f, MathHelper.Clamp((float) (1.0 - (double) this.ai[1] / (double) num8 * 1.5), 0.0f, 1f) * -1.5f), 0.03f);
            this.velocity = Vector2.Zero;
            this.rotation = this.rotation.AngleLerp(targetAngle4, 0.02f);
            this.BloodNautilus_GetMouthPositionAndRotation(out Vector2 _, out Vector2 _);
            float t = this.ai[1] / num8;
            Lighting.AddLight(this.Center, new Vector3(1f, 0.5f, 0.5f) * (Utils.GetLerpValue(0.0f, 0.5f, t, false) * Utils.GetLerpValue(1f, 0.5f, t, false)));
            if (Main.rand.Next(3) != 0)
            {
              Dust dust = Dust.NewDustDirect(this.Center - new Vector2(6f), 12, 12, 5, Alpha: 60, newColor: Color.Transparent, Scale: 1.4f);
              dust.position += new Vector2((float) (this.spriteDirection * 12), 12f);
              dust.velocity *= 0.1f;
            }
            this.position = this.position - this.netOffset;
          }
          if ((double) this.ai[1] == 10.0 || (double) this.ai[1] == 20.0 || (double) this.ai[1] == 30.0)
            this.BloodNautilus_CallForHelp();
          ++this.ai[1];
          if ((double) this.ai[1] >= (double) num8)
          {
            num9 = 0;
            break;
          }
          break;
      }
      if (num9 != -1)
      {
        this.ai[0] = (float) num9;
        this.ai[1] = 0.0f;
        this.ai[2] = 0.0f;
        this.netUpdate = true;
        this.TargetClosest();
        if (num9 == 0)
          this.ai[2] = (float) this.direction;
        else
          ++this.ai[3];
      }
      this.reflectsProjectiles = flag;
    }

    private void BloodNautilus_CallForHelp()
    {
      if (Main.netMode == 1 || !Main.player[this.target].active || Main.player[this.target].dead || (double) this.Distance(Main.player[this.target].Center) > 2000.0 || NPC.CountNPCS(619) >= 3)
        return;
      Point tileCoordinates = this.Center.ToTileCoordinates();
      Point point = tileCoordinates;
      int num1 = 20;
      int num2 = 3;
      int num3 = 8;
      int num4 = 2;
      int num5 = 0;
      bool flag1 = false;
      while (!flag1 && num5 < 100)
      {
        ++num5;
        int index1 = Main.rand.Next(point.X - num1, point.X + num1 + 1);
        int index2 = Main.rand.Next(point.Y - num1, point.Y + num1 + 1);
        if ((index2 < point.Y - num3 || index2 > point.Y + num3 || index1 < point.X - num3 || index1 > point.X + num3) && (index2 < tileCoordinates.Y - num2 || index2 > tileCoordinates.Y + num2 || index1 < tileCoordinates.X - num2 || index1 > tileCoordinates.X + num2) && !Main.tile[index1, index2].nactive())
        {
          bool flag2 = true;
          if (flag2 && Main.tile[index1, index2].lava())
            flag2 = false;
          if (flag2 && Collision.SolidTiles(index1 - num4, index1 + num4, index2 - num4, index2 + num4))
            flag2 = false;
          if (flag2 && !Collision.CanHitLine(this.Center, 0, 0, Main.player[this.target].Center, 0, 0))
            flag2 = false;
          if (flag2)
          {
            Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), (float) (index1 * 16 + 8), (float) (index2 * 16 + 8), 0.0f, 0.0f, 813, 0, 0.0f, Main.myPlayer);
            break;
          }
        }
      }
    }

    public static bool TooWindyForButterflies => (double) Math.Abs(Main.windSpeedTarget) >= 0.40000000596046448;

    private void AI_116_WaterStriders()
    {
      bool flag1 = false;
      float waterLineHeight;
      if (Collision.GetWaterLine(this.Center.ToTileCoordinates(), out waterLineHeight))
      {
        float num = this.Bottom.Y - 1f;
        if ((double) this.Center.Y > (double) waterLineHeight)
        {
          this.velocity.Y -= 0.8f;
          if ((double) this.velocity.Y < -4.0)
            this.velocity.Y = -4f;
          if ((double) num + (double) this.velocity.Y < (double) waterLineHeight)
            this.velocity.Y = waterLineHeight - num;
        }
        else
        {
          this.velocity.Y = MathHelper.Min(this.velocity.Y, waterLineHeight - num);
          flag1 = true;
        }
      }
      else if (this.wet)
        this.velocity.Y -= 0.2f;
      if ((int) this.ai[0] != 0)
        return;
      ++this.ai[1];
      this.velocity.X *= 0.9f;
      if ((double) this.velocity.Y == 0.0)
        this.velocity.X *= 0.6f;
      bool flag2 = this.wet | flag1;
      bool flag3 = flag2 || (double) this.velocity.Y == 0.0;
      int num1 = Main.rand.Next(120, 241);
      if (!flag2)
        num1 = Main.rand.Next(60, 241);
      if (!flag3 || (double) this.ai[1] < (double) num1)
        return;
      this.ai[1] = 0.0f;
      this.velocity.X = Main.rand.NextFloatDirection() * 5f;
      this.netUpdate = true;
      if (flag2)
        return;
      if ((double) this.velocity.Y == 0.0)
        this.velocity.Y = -2f;
      this.ai[1] = 60f;
    }

    private void AI_115_LadyBugs()
    {
      if (Main.netMode != 1)
      {
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = (float) ((double) Main.rand.NextFloat() * 0.20000000298023224 + 0.699999988079071);
          this.netUpdate = true;
        }
        if ((double) --this.localAI[0] <= 0.0)
        {
          this.localAI[0] = (float) Main.rand.Next(60, 181);
          if (Main.rand.Next(5) == 0)
          {
            if ((double) this.ai[2] == 0.0)
            {
              this.ai[2] = 1f;
              this.ai[0] = 0.0f;
              this.netUpdate = true;
            }
            else if ((double) this.ai[2] == 1.0)
            {
              this.TargetClosest();
              this.ai[2] = 0.0f;
              this.ai[0] = Main.rand.NextFloat() * 6.28318548f;
              if ((double) this.Distance(Main.player[this.target].Center) > 700.0)
                this.ai[0] = this.AngleTo(Main.player[this.target].Center) + Main.rand.NextFloatDirection() * 0.3f;
              this.netUpdate = true;
            }
          }
          this.TargetClosest();
          this.ai[0] = Main.rand.NextFloat() * 6.28318548f;
          if ((double) this.Distance(Main.player[this.target].Center) > 700.0)
            this.ai[0] = this.AngleTo(Main.player[this.target].Center) + Main.rand.NextFloatDirection() * 0.3f;
          this.netUpdate = true;
        }
      }
      this.scale = this.ai[1];
      if ((double) this.ai[2] == 0.0)
      {
        Vector2 vector2 = this.ai[0].ToRotationVector2() * 1f;
        vector2.X += Main.windSpeedTarget * 0.8f;
        this.velocity = Vector2.Lerp(this.velocity, vector2, 0.0125f);
        if ((double) this.velocity.Y > 0.0)
        {
          int num1 = 4;
          int index1 = (int) this.Center.X / 16;
          int num2 = (int) this.Center.Y / 16;
          for (int index2 = num2; index2 < num2 + num1; ++index2)
          {
            if (Main.tile[index1, index2] != null && (Main.tile[index1, index2].nactive() && Main.tileSolid[(int) Main.tile[index1, index2].type] || Main.tile[index1, index2].liquid > (byte) 0))
            {
              this.ai[0] = -this.ai[0];
              if ((double) this.velocity.Y > 0.0)
                this.velocity.Y *= 0.9f;
            }
          }
        }
        if ((double) this.velocity.Y < 0.0)
        {
          int num3 = 30;
          bool flag = false;
          int index3 = (int) this.Center.X / 16;
          int num4 = (int) this.Center.Y / 16;
          for (int index4 = num4; index4 < num4 + num3; ++index4)
          {
            if (Main.tile[index3, index4] != null && (Main.tile[index3, index4].nactive() && Main.tileSolid[(int) Main.tile[index3, index4].type] || Main.tile[index3, index4].liquid > (byte) 0))
              flag = true;
          }
          if (!flag)
          {
            this.ai[0] = -this.ai[0];
            if ((double) this.velocity.Y < 0.0)
              this.velocity.Y *= 0.9f;
          }
        }
        if (this.collideX)
        {
          this.ai[0] = (float) (-(double) this.ai[0] + 3.1415927410125732);
          this.velocity.X *= -0.2f;
        }
      }
      else
      {
        if ((double) this.velocity.Y > 0.0)
        {
          int num5 = 4;
          int index5 = (int) this.Center.X / 16 + this.direction;
          int num6 = (int) this.Center.Y / 16;
          for (int index6 = num6; index6 < num6 + num5; ++index6)
          {
            if (Main.tile[index5, index6] != null && Main.tile[index5, index6].liquid > (byte) 0)
            {
              this.TargetClosest();
              this.velocity.Y = -1f;
              this.ai[2] = 0.0f;
              this.ai[0] = (float) ((double) Main.rand.NextFloat() * 0.78539818525314331 - 1.5707963705062866);
              if ((double) this.Distance(Main.player[this.target].Center) > 700.0)
                this.ai[0] = this.AngleTo(Main.player[this.target].Center) + Main.rand.NextFloatDirection() * 0.3f;
              this.netUpdate = true;
              return;
            }
          }
        }
        if ((double) this.velocity.Y != 0.0)
        {
          this.velocity.X *= 0.98f;
          this.velocity.Y = MathHelper.Lerp(this.velocity.Y, 2f, 0.005f);
        }
        else
        {
          this.velocity = Vector2.Lerp(this.velocity, Vector2.UnitX * (float) this.direction, 0.05f);
          this.velocity.Y += 0.2f;
          if (this.collideX)
          {
            this.direction *= -1;
            this.velocity.X *= -0.2f;
            this.netUpdate = true;
          }
        }
      }
      this.direction = (double) this.velocity.X > 0.0 ? 1 : -1;
    }

    private void AI_114_Dragonflies()
    {
      if ((double) this.localAI[0] == 0.0 && Main.netMode != 1)
      {
        this.localAI[0] = 1f;
        Vector2 center = this.Center;
        this.ai[2] = center.X;
        this.ai[3] = center.Y;
        this.velocity = (Main.rand.NextVector2Circular(5f, 3f) + Main.rand.NextVector2CircularEdge(5f, 3f)) * 0.4f;
        this.ai[1] = 0.0f;
        this.ai[0] = 1f;
        this.netUpdate = true;
      }
      switch ((int) this.ai[0])
      {
        case 0:
          this.velocity = this.velocity * 0.94f;
          if (Main.netMode != 1 && (double) ++this.ai[1] >= (double) (60 + Main.rand.Next(60)))
          {
            Vector2 vector2 = new Vector2(this.ai[2], this.ai[3]);
            if ((double) this.Distance(vector2) > 96.0)
              this.velocity = this.DirectionTo(vector2) * 3f;
            else if ((double) this.Distance(vector2) > 16.0)
              this.velocity = this.DirectionTo(vector2) * 1f + Main.rand.NextVector2Circular(1f, 0.5f);
            else
              this.velocity = (Main.rand.NextVector2Circular(5f, 3f) + Main.rand.NextVector2CircularEdge(5f, 3f)) * 0.4f;
            this.ai[1] = 0.0f;
            this.ai[0] = 1f;
            this.netUpdate = true;
            break;
          }
          break;
        case 1:
          int num1 = 4;
          if ((double) this.Distance(new Vector2(this.ai[2], this.ai[3])) > 112.0)
            num1 = 200;
          if ((double) ++this.ai[1] >= (double) num1)
          {
            this.ai[1] = 0.0f;
            this.ai[0] = 0.0f;
            this.netUpdate = true;
          }
          int index1 = (int) this.Center.X / 16;
          int num2 = (int) this.Center.Y / 16;
          int num3 = 3;
          for (int index2 = num2; index2 < num2 + num3; ++index2)
          {
            if (Main.tile[index1, index2] != null && (Main.tile[index1, index2].nactive() && Main.tileSolid[(int) Main.tile[index1, index2].type] || Main.tile[index1, index2].liquid > (byte) 0))
            {
              if ((double) this.velocity.Y > 0.0)
                this.velocity.Y *= 0.9f;
              this.velocity.Y -= 0.2f;
            }
          }
          if ((double) this.velocity.Y < 0.0)
          {
            int num4 = 30;
            bool flag = false;
            for (int index3 = num2; index3 < num2 + num4; ++index3)
            {
              if (Main.tile[index1, index3] != null && Main.tile[index1, index3].nactive() && Main.tileSolid[(int) Main.tile[index1, index3].type])
              {
                flag = true;
                break;
              }
            }
            if (!flag && (double) this.velocity.Y < 0.0)
            {
              this.velocity.Y *= 0.9f;
              break;
            }
            break;
          }
          break;
      }
      if ((double) this.velocity.X != 0.0)
        this.direction = (double) this.velocity.X > 0.0 ? 1 : -1;
      if (this.wet)
        this.velocity.Y = -3f;
      if ((double) this.localAI[1] > 0.0)
      {
        --this.localAI[1];
      }
      else
      {
        this.localAI[1] = 15f;
        float num5 = 0.0f;
        Vector2 zero = Vector2.Zero;
        for (int index4 = 0; index4 < 200; ++index4)
        {
          NPC npc = Main.npc[index4];
          if (npc.active && npc.damage > 0 && !npc.friendly && (double) npc.Hitbox.Distance(this.Center) <= 100.0)
          {
            ++num5;
            zero += this.DirectionFrom(npc.Center);
          }
        }
        for (int index5 = 0; index5 < (int) byte.MaxValue; ++index5)
        {
          Player player = Main.player[index5];
          if (player.active && (double) player.Hitbox.Distance(this.Center) <= 150.0)
          {
            ++num5;
            zero += this.DirectionFrom(player.Center);
          }
        }
        if ((double) num5 > 0.0)
        {
          float num6 = 2f;
          Vector2 vector2_1 = zero / num5 * num6;
          this.velocity = this.velocity + vector2_1;
          if ((double) this.velocity.Length() > 16.0)
            this.velocity = this.velocity.SafeNormalize(Vector2.Zero) * 16f;
          Vector2 vector2_2 = this.Center + vector2_1 * 10f;
          this.ai[1] = -10f;
          this.ai[0] = 1f;
          this.ai[2] = vector2_2.X;
          this.ai[3] = vector2_2.Y;
          this.netUpdate = true;
        }
        else
        {
          if (Main.netMode == 1 || (double) (new Vector2(this.ai[2], this.ai[3]) - this.Center).Length() >= 16.0)
            return;
          int maxValue = 30;
          if (Main.tile[(int) this.ai[2] / 16, (int) this.ai[3] / 16].type != (ushort) 519)
            maxValue = 4;
          if (Main.rand.Next(maxValue) != 0)
            return;
          int cattailX = (int) this.ai[2];
          int cattailY = (int) this.ai[2];
          if (NPC.FindCattailTop((int) this.ai[2] / 16, (int) this.ai[3] / 16, out cattailX, out cattailY))
          {
            this.ai[2] = (float) (cattailX * 16);
            this.ai[3] = (float) (cattailY * 16);
            this.netUpdate = true;
          }
          else
          {
            int i = (int) ((double) this.Center.X / 16.0);
            int j = (int) ((double) this.Center.Y / 16.0);
            while (!WorldGen.SolidTile(i, j) && (double) j < Main.worldSurface)
              ++j;
            int num7 = j - Main.rand.Next(3, 6);
            this.ai[2] = (float) (i * 16);
            this.ai[3] = (float) (num7 * 16);
            this.netUpdate = true;
          }
        }
      }
    }

    private void AI_113_WindyBalloon()
    {
      if ((double) this.localAI[0] == 0.0 && Main.netMode != 1)
      {
        this.TargetClosest();
        this.localAI[0] = 1f;
        this.ai[2] = (float) (Main.rand.Next(7) + 1);
        int index = NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) this.position.X, (int) this.position.Y, 1);
        if (Main.rand.Next(180) == 0)
          Main.npc[index].SetDefaults(-4);
        else if (Main.rand.Next(10) == 0)
          Main.npc[index].SetDefaults(-7);
        else if (Main.rand.Next(3) == 0)
          Main.npc[index].SetDefaults(-3);
        Main.npc[index].ai[0] = -999f;
        Main.npc[index].netUpdate = true;
        this.ai[3] = (float) index;
        this.netUpdate = true;
        this.ai[1] = Main.npc[index].scale;
      }
      this.position = this.Center;
      this.Size = new Vector2(20f, 20f) * this.ai[1];
      this.scale = this.ai[1];
      this.Center = this.position;
      NPC slaveNpc = this.AI_113_WindyBalloon_GetSlaveNPC();
      this.rotation = this.velocity.X * 0.05f;
      if (slaveNpc != null)
      {
        NPCAimedTarget targetData = this.GetTargetData();
        float num1 = float.PositiveInfinity;
        int num2 = 0;
        Vector2 zero = Vector2.Zero;
        if (!targetData.Invalid)
        {
          Vector2 vector2 = targetData.Center - this.Bottom;
          if ((double) vector2.Y < 0.0)
            num2 = (int) vector2.Y / -16;
          num1 = vector2.Length();
          if (this.direction != Math.Sign(vector2.X))
            num2 = 0;
        }
        if (this.wet || slaveNpc.wet || this.collideX || this.collideY && (double) this.oldVelocity.Y < 0.0)
        {
          float num3 = this.oldVelocity.X + (float) (this.direction * 8);
          this.position.X -= num3;
          slaveNpc.position.X -= num3;
          this.TargetClosest(false);
          this.direction *= -1;
          this.velocity.X = (float) (this.direction * 2);
          this.life = -1;
          this.HitEffect();
          this.active = false;
          this.netUpdate = true;
          SoundEngine.PlaySound(this.DeathSound, this.position);
        }
        else
        {
          if (this.collideY)
          {
            this.velocity.Y = (double) this.oldVelocity.Y > 0.0 ? 1f : -1f;
            this.TargetClosest(false);
          }
          float num4 = (float) (2.0 + (double) Math.Abs(Main.windSpeedTarget) * 2.0);
          if (Math.Sign(this.velocity.X) != this.direction || (double) Math.Abs(this.velocity.X) < (double) num4)
          {
            this.velocity.X += (float) this.direction * 0.01f;
            if ((double) this.velocity.X * (double) this.direction < 0.0)
            {
              if ((double) Math.Abs(this.velocity.X) > (double) num4)
                this.velocity.X += (float) this.direction * 0.1f;
              else
                this.velocity.X += (float) this.direction * 0.05f;
            }
            else if ((double) Math.Abs(this.velocity.X) > (double) num4)
              this.velocity.X = (float) this.direction * num4;
          }
          int index1 = (int) (((double) this.position.X + (double) (this.width / 2)) / 16.0) + this.direction;
          int num5 = (int) (((double) this.position.Y + (double) this.height) / 16.0);
          bool flag1 = true;
          int num6 = 8 + num2;
          bool flag2 = false;
          for (int index2 = num5; index2 < num5 + num6; ++index2)
          {
            if (Main.tile[index1, index2] == null)
              Main.tile[index1, index2] = new Tile();
            if (Main.tile[index1, index2].nactive() && Main.tileSolid[(int) Main.tile[index1, index2].type] || Main.tile[index1, index2].liquid > (byte) 0)
            {
              if (index2 < num5 + 5 + num2)
                flag2 = true;
              flag1 = false;
              break;
            }
          }
          if ((double) num1 < 400.0 && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
          {
            float num7 = 2f;
            float num8 = 0.035f;
            if ((double) this.Center.Y + (double) (this.height / 4) > (double) Main.player[this.target].position.Y + (double) (Main.player[this.target].height / 4) && (double) this.velocity.Y > -(double) num7)
            {
              this.velocity.Y -= num8;
              if ((double) this.velocity.Y > 0.0)
                this.velocity.Y -= num8;
            }
            else if ((double) this.Center.Y + (double) (this.height / 4) < (double) Main.player[this.target].position.Y + (double) (Main.player[this.target].height / 4) && (double) this.velocity.Y < (double) num7)
            {
              this.velocity.Y += num8;
              if ((double) this.velocity.Y < 0.0)
                this.velocity.Y += num8;
            }
          }
          else
          {
            if (flag1)
              this.velocity.Y += 0.05f;
            else
              this.velocity.Y -= 0.1f;
            if (flag2)
              this.velocity.Y -= 0.2f;
            if ((double) this.velocity.Y > 2.0)
              this.velocity.Y = 2f;
            if ((double) this.velocity.Y < -4.0)
              this.velocity.Y = -4f;
          }
          slaveNpc.Center = this.Bottom + new Vector2(0.0f, -8f) + new Vector2(0.0f, 56f * this.ai[1]);
          slaveNpc.velocity = this.velocity;
        }
      }
      else
      {
        this.velocity.Y = MathHelper.Clamp(this.velocity.Y - 0.2f, -8f, 8f);
        this.velocity.X = MathHelper.Clamp(this.velocity.X + Main.windSpeedTarget * 0.3f, -4f, 4f);
        if (!this.collideX && !this.collideY)
          return;
        this.position.X -= this.oldVelocity.X + (float) (this.direction * 8);
        this.TargetClosest(false);
        this.direction *= -1;
        this.velocity.X = (float) (this.direction * 2);
        this.life = -1;
        this.HitEffect();
        this.active = false;
        this.netUpdate = true;
        SoundEngine.PlaySound(this.DeathSound, this.position);
      }
    }

    public NPC AI_113_WindyBalloon_GetSlaveNPC()
    {
      int index = (int) this.ai[3];
      NPC slaveNpc;
      if (index >= 0 && index < 200)
      {
        slaveNpc = Main.npc[index];
        if (!slaveNpc.active || slaveNpc.type != 1 || (double) slaveNpc.ai[0] != -999.0)
        {
          slaveNpc = (NPC) null;
          this.ai[3] = -1f;
          this.netUpdate = true;
        }
      }
      else
        slaveNpc = (NPC) null;
      return slaveNpc;
    }

    private void AI_112_FairyCritter()
    {
      bool flag1 = false;
      this.lavaImmune = true;
      if (Main.netMode != 1 && (double) this.ai[2] > 1.0)
      {
        int num = 18000;
        ++this.localAI[1];
        if ((double) this.localAI[1] >= (double) num)
        {
          this.ai[2] = 7f;
          if ((double) Main.player[this.target].Center.X < (double) this.Center.X)
            this.direction = 1;
          else
            this.direction = -1;
          this.netUpdate = true;
        }
      }
      switch ((int) this.ai[2])
      {
        case 0:
          this.lavaImmune = false;
          this.noTileCollide = false;
          if ((double) this.ai[0] == 0.0 && (double) this.ai[1] == 0.0)
          {
            this.ai[0] = this.Center.X;
            this.ai[1] = this.Center.Y;
          }
          if ((double) this.localAI[0] == 0.0)
          {
            this.localAI[0] = 1f;
            this.velocity = new Vector2(MathHelper.Lerp(2f, 4f, Main.rand.NextFloat()) * (float) (Main.rand.Next(2) * 2 - 1), MathHelper.Lerp(1f, 2f, Main.rand.NextFloat()) * (float) (Main.rand.Next(2) * 2 - 1));
            this.velocity = this.velocity * 0.7f;
            this.netUpdate = true;
          }
          Vector2 vector2_1 = new Vector2(this.ai[0], this.ai[1]) - this.Center;
          if ((double) vector2_1.Length() > 20.0)
          {
            this.velocity = this.velocity + new Vector2((double) vector2_1.X > 0.0 ? 1f : -1f, (double) vector2_1.Y > 0.0 ? 1f : -1f) * 0.04f;
            if ((double) Math.Abs(this.velocity.Y) > 2.0)
              this.velocity.Y *= 0.95f;
          }
          this.TargetClosest();
          Player player = Main.player[this.target];
          if (!player.dead && (double) player.Distance(this.Center) < 250.0)
          {
            this.ai[2] = 1f;
            this.direction = (double) player.Center.X > (double) this.Center.X ? -1 : 1;
            if ((double) this.velocity.X * (double) this.direction < 0.0)
              this.velocity.X = (float) (this.direction * 2);
            this.ai[3] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 1:
          this.lavaImmune = false;
          this.noTileCollide = false;
          if (this.collideX)
          {
            this.direction *= -1;
            this.velocity.X = (float) (this.direction * 2);
          }
          if (this.collideY)
            this.velocity.Y = (double) this.oldVelocity.Y > 0.0 ? 1f : -1f;
          float num1 = 4.5f;
          if (Math.Sign(this.velocity.X) != this.direction || (double) Math.Abs(this.velocity.X) < (double) num1)
          {
            this.velocity.X += (float) this.direction * 0.04f;
            if ((double) this.velocity.X * (double) this.direction < 0.0)
            {
              if ((double) Math.Abs(this.velocity.X) > (double) num1)
                this.velocity.X += (float) this.direction * 0.4f;
              else
                this.velocity.X += (float) this.direction * 0.2f;
            }
            else if ((double) Math.Abs(this.velocity.X) > (double) num1)
              this.velocity.X = (float) this.direction * num1;
          }
          int num2 = (int) (((double) this.position.X + (double) (this.width / 2)) / 16.0);
          int num3 = 20;
          if (this.direction < 0)
            num2 -= num3;
          int num4 = (int) (((double) this.position.Y + (double) this.height) / 16.0);
          bool flag2 = true;
          int num5 = 8;
          bool flag3 = false;
          for (int index1 = num2; index1 <= num2 + num3; ++index1)
          {
            for (int index2 = num4; index2 < num4 + num5; ++index2)
            {
              if (Main.tile[index1, index2] == null)
                Main.tile[index1, index2] = new Tile();
              if (Main.tile[index1, index2].nactive() && Main.tileSolid[(int) Main.tile[index1, index2].type] || Main.tile[index1, index2].liquid > (byte) 0)
              {
                if (index2 < num4 + 5)
                  flag3 = true;
                flag2 = false;
                break;
              }
            }
          }
          if (flag2)
            this.velocity.Y += 0.05f;
          else
            this.velocity.Y -= 0.2f;
          if (flag3)
            this.velocity.Y -= 0.3f;
          if ((double) this.velocity.Y > 3.0)
            this.velocity.Y = 3f;
          if ((double) this.velocity.Y < -5.0)
          {
            this.velocity.Y = -5f;
            break;
          }
          break;
        case 2:
          this.noTileCollide = true;
          NPCAimedTarget targetData1 = this.GetTargetData();
          bool flag4 = false;
          if (targetData1.Type == NPCTargetType.Player)
            flag4 = Main.player[this.target].dead;
          if (flag4)
          {
            this.ai[2] = 1f;
            this.direction = (double) targetData1.Center.X > (double) this.Center.X ? -1 : 1;
            if ((double) this.velocity.X * (double) this.direction < 0.0)
              this.velocity.X = (float) (this.direction * 2);
            this.ai[3] = 0.0f;
            this.netUpdate = true;
            break;
          }
          Microsoft.Xna.Framework.Rectangle r1 = Utils.CenteredRectangle(targetData1.Center, new Vector2((float) (targetData1.Width + 60), (float) (targetData1.Height / 2)));
          if (Main.netMode != 1 && this.Hitbox.Intersects(r1))
          {
            Point treasureCoords;
            if (this.GetFairyTreasureCoords(out treasureCoords))
            {
              this.ai[0] = (float) treasureCoords.X;
              this.ai[1] = (float) treasureCoords.Y;
              this.ai[2] = 3f;
              this.ai[3] = 0.0f;
              this.netUpdate = true;
              break;
            }
            this.ai[2] = 6f;
            this.ai[3] = 0.0f;
            this.netUpdate = true;
            break;
          }
          Vector2 vector2_2 = r1.ClosestPointInRect(this.Center);
          Vector2 vector2_3 = this.DirectionTo(vector2_2) * 2f;
          float num6 = this.Distance(vector2_2);
          if ((double) num6 > 150.0)
            vector2_3 *= 2f;
          else if ((double) num6 > 80.0)
            vector2_3 *= 1.5f;
          this.velocity = Vector2.Lerp(this.velocity, vector2_3, 0.07f);
          Point tileCoordinates1 = this.Center.ToTileCoordinates();
          if ((double) this.ai[3] < 300.0)
          {
            bool goDownwards;
            bool goUpwards;
            this.GetBirdFlightRecommendation(6, 3, tileCoordinates1, out goDownwards, out goUpwards);
            if (goDownwards)
              this.velocity.Y += 0.05f;
            if (goUpwards)
              this.velocity.Y -= 0.02f;
            if ((double) this.velocity.Y > 2.0)
              this.velocity.Y = 2f;
            if ((double) this.velocity.Y < -4.0)
              this.velocity.Y = -4f;
          }
          if (WorldGen.InWorld(tileCoordinates1.X, tileCoordinates1.Y))
          {
            this.ai[3] = !WorldGen.SolidTile(tileCoordinates1) ? Math.Max(this.ai[3] - 1f, 0.0f) : Math.Min(this.ai[3] + 2f, 400f);
            break;
          }
          break;
        case 3:
          this.noTileCollide = true;
          if ((double) this.ai[3] == 15.0)
            SoundEngine.PlaySound(27, (int) this.position.X, (int) this.position.Y);
          if ((double) this.ai[3] <= 15.0)
          {
            this.velocity = this.velocity * 0.9f;
          }
          else
          {
            this.spriteDirection = (double) Main.player[this.target].Center.X <= (double) this.Center.X ? 1 : -1;
            flag1 = true;
            float num7 = 0.0f;
            float num8 = this.ai[3] - 15f;
            float circleHeight = 22f;
            if ((double) num8 <= 65.0)
            {
              num7 = 0.3926991f;
              circleHeight = 14f;
            }
            else if ((double) num8 <= 130.0)
            {
              num7 = -0.3926991f;
              circleHeight = 18f;
            }
            float circleRotation = num7 * (float) this.direction;
            Vector2 fairyCircleOffset = this.GetFairyCircleOffset(num8 / 65f, circleRotation, circleHeight);
            this.velocity = this.GetFairyCircleOffset((float) ((double) num8 / 65.0 + 1.0 / 65.0), circleRotation, circleHeight) - fairyCircleOffset;
          }
          ++this.ai[3];
          if ((double) this.ai[3] >= 210.0)
          {
            this.ai[2] = 4f;
            this.TargetClosest();
            this.ai[3] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 4:
          this.noTileCollide = true;
          NPCAimedTarget targetData2 = this.GetTargetData();
          bool flag5 = false;
          if (targetData2.Type == NPCTargetType.Player)
            flag5 = Main.player[this.target].dead;
          if (flag5)
          {
            this.ai[2] = 1f;
            this.direction = (double) targetData2.Center.X > (double) this.Center.X ? -1 : 1;
            if ((double) this.velocity.X * (double) this.direction < 0.0)
              this.velocity.X = (float) (this.direction * 2);
            this.ai[3] = 0.0f;
            this.netUpdate = true;
            break;
          }
          Microsoft.Xna.Framework.Rectangle r2 = Utils.CenteredRectangle(new Vector2((float) ((double) this.ai[0] * 16.0 + 8.0), (float) ((double) this.ai[1] * 16.0 + 8.0)), Vector2.One * 5f);
          if (this.Hitbox.Intersects(r2))
          {
            this.ai[2] = 5f;
            this.ai[3] = 0.0f;
            this.netUpdate = true;
            break;
          }
          float num9 = this.Distance(targetData2.Center);
          float num10 = 300f;
          if ((double) num9 > (double) num10)
          {
            if ((double) num9 < (double) num10 + 100.0 && !Collision.SolidCollision(this.position, this.width, this.height))
            {
              this.noTileCollide = false;
              if (this.collideX)
                this.velocity.X *= -1f;
              if (this.collideY)
                this.velocity.Y *= -1f;
            }
            flag1 = true;
            this.spriteDirection = (double) Main.player[this.target].Center.X <= (double) this.Center.X ? 1 : -1;
            Vector2 vector2_4 = this.DirectionFrom(targetData2.Center);
            if ((double) num9 > (double) num10 + 60.0)
            {
              this.velocity = this.velocity + vector2_4 * -0.1f;
              if (Main.rand.Next(30) == 0)
                SoundEngine.PlaySound(27, (int) this.position.X, (int) this.position.Y);
            }
            else if ((double) num9 < (double) num10 + 30.0)
              this.velocity = this.velocity + this.DirectionTo(r2.ClosestPointInRect(this.Center)) * 0.1f;
            if ((double) this.velocity.Length() > 1.0)
            {
              this.velocity = this.velocity * (1f / this.velocity.Length());
              break;
            }
            break;
          }
          Vector2 vector2_5 = r2.ClosestPointInRect(this.Center);
          Vector2 vector2_6 = this.DirectionTo(vector2_5);
          float num11 = this.Distance(vector2_5);
          if ((double) num11 > 150.0)
            vector2_6 *= 3f;
          else if ((double) num11 > 80.0)
            vector2_6 *= 2f;
          Point tileCoordinates2 = this.Center.ToTileCoordinates();
          if ((double) this.ai[3] < 300.0)
          {
            this.velocity = Vector2.Lerp(this.velocity, vector2_6, 0.07f);
            bool goDownwards;
            bool goUpwards;
            this.GetBirdFlightRecommendation(4, 2, tileCoordinates2, out goDownwards, out goUpwards);
            if (goDownwards)
              this.velocity.Y += 0.05f;
            if (goUpwards)
              this.velocity.Y -= 0.05f;
            if ((double) this.velocity.Y > 1.0)
              this.velocity.Y = 1f;
            if ((double) this.velocity.Y < -1.0)
              this.velocity.Y = -1f;
          }
          else
            this.velocity = Vector2.Lerp(this.velocity, vector2_6, 0.07f);
          this.ai[3] = !WorldGen.SolidTile(tileCoordinates2) ? Math.Max(this.ai[3] - 1f, 0.0f) : Math.Min(this.ai[3] + 2f, 400f);
          break;
        case 5:
          this.localAI[1] = 0.0f;
          this.noTileCollide = true;
          bool flag6 = false;
          Tile tileSafely = Framing.GetTileSafely(new Point((int) this.ai[0], (int) this.ai[1]));
          if (!tileSafely.active() || !SceneMetrics.IsValidForOreFinder(tileSafely))
            flag6 = true;
          if ((double) this.ai[3] == 15.0)
            SoundEngine.PlaySound(27, (int) this.position.X, (int) this.position.Y);
          if ((double) this.ai[3] <= 15.0)
          {
            this.velocity = this.velocity * 0.9f;
          }
          else
          {
            flag1 = true;
            float num12 = this.ai[3] - 15f;
            int num13;
            float num14 = (float) (Math.Cos((double) (num13 = (int) ((double) num12 / 50.0)) * 1.0) * 6.2831854820251465 / 16.0);
            float circleHeight = (float) (Math.Cos((double) num13 * 2.0) * 10.0 + 8.0);
            float circleRotation = num14 * (float) this.direction;
            Vector2 fairyCircleOffset = this.GetFairyCircleOffset(num12 / 50f, circleRotation, circleHeight);
            this.velocity = this.GetFairyCircleOffset((float) ((double) num12 / 50.0 + 0.019999999552965164), circleRotation, circleHeight) - fairyCircleOffset;
            this.spriteDirection = (double) Main.player[this.target].Center.X <= (double) this.Center.X ? 1 : -1;
          }
          ++this.ai[3];
          if (Main.netMode != 1 && (double) this.ai[3] > 200.0)
          {
            this.active = false;
            switch (Main.netMode)
            {
              case 0:
                NPC.FairyEffects(this.Center, this.type - 583);
                break;
              case 2:
                this.netSkip = -1;
                this.life = 0;
                NetMessage.SendData(23, number: this.whoAmI);
                NetMessage.SendData(112, number: 2, number2: ((float) (int) this.Center.X), number3: ((float) (int) this.Center.Y), number5: (this.type - 583));
                break;
            }
          }
          else
            break;
          break;
        case 6:
          this.noTileCollide = true;
          Vector2 vector2_7 = Main.player[this.target].Center - this.Center;
          if ((double) vector2_7.Length() > 100.0)
          {
            this.ai[2] = 2f;
            this.TargetClosest();
            this.ai[3] = 0.0f;
            this.netUpdate = true;
            break;
          }
          if (!Collision.SolidCollision(this.position, this.width, this.height))
          {
            this.noTileCollide = false;
            if (this.collideX)
              this.velocity.X *= -1f;
            if (this.collideY)
              this.velocity.Y *= -1f;
          }
          if ((double) vector2_7.Length() > 20.0)
          {
            this.velocity = this.velocity + new Vector2((double) vector2_7.X > 0.0 ? 1f : -1f, (double) vector2_7.Y > 0.0 ? 1f : -1f) * 0.04f;
            if ((double) Math.Abs(this.velocity.Y) > 2.0)
              this.velocity.Y *= 0.95f;
          }
          Point treasureCoords1;
          if (Main.netMode != 1 && this.GetFairyTreasureCoords(out treasureCoords1))
          {
            this.ai[0] = (float) treasureCoords1.X;
            this.ai[1] = (float) treasureCoords1.Y;
            this.ai[2] = 3f;
            this.ai[3] = 0.0f;
            this.netUpdate = true;
            break;
          }
          break;
        case 7:
          this.noTileCollide = true;
          this.velocity.X += 0.05f * (float) this.direction;
          this.velocity.X = MathHelper.Clamp(this.velocity.X, -10f, 10f);
          this.velocity.Y -= 0.025f;
          this.velocity.Y = MathHelper.Clamp(this.velocity.Y, -5f, 5f);
          this.EncourageDespawn(10);
          break;
      }
      this.dontTakeDamage = this.dontTakeDamageFromHostiles = (double) this.ai[2] > 1.0;
      for (int index = 0; index < 200; ++index)
      {
        if (index != this.whoAmI && Main.npc[index].active && Main.npc[index].aiStyle == 112 && (double) Math.Abs(this.position.X - Main.npc[index].position.X) + (double) Math.Abs(this.position.Y - Main.npc[index].position.Y) < (double) this.width * 1.5)
        {
          if ((double) this.position.Y < (double) Main.npc[index].position.Y)
            this.velocity.Y -= 0.05f;
          else
            this.velocity.Y += 0.05f;
        }
      }
      if (!flag1)
      {
        this.direction = (double) this.velocity.X >= 0.0 ? 1 : -1;
        this.spriteDirection = -this.direction;
      }
      Color color1 = Color.HotPink;
      Color color2 = Color.LightPink;
      int num15 = 4;
      if (this.type == 584)
      {
        color1 = Color.LimeGreen;
        color2 = Color.LightSeaGreen;
      }
      if (this.type == 585)
      {
        color1 = Color.RoyalBlue;
        color2 = Color.LightBlue;
      }
      if ((int) Main.timeForVisualEffects % 2 == 0)
      {
        this.position = this.position + this.netOffset;
        Dust dust = Dust.NewDustDirect(this.Center - new Vector2((float) num15) * 0.5f, num15 + 4, num15 + 4, 278, Alpha: 200, newColor: Color.Lerp(color1, color2, Main.rand.NextFloat()), Scale: 0.65f);
        dust.velocity *= 0.0f;
        dust.velocity += this.velocity * 0.3f;
        dust.noGravity = true;
        dust.noLight = true;
        this.position = this.position - this.netOffset;
      }
      Lighting.AddLight(this.Center, color1.ToVector3() * 0.7f);
      if (Main.netMode == 2)
        return;
      Player localPlayer = Main.LocalPlayer;
      if (localPlayer.dead || !localPlayer.HitboxForBestiaryNearbyCheck.Intersects(this.Hitbox))
        return;
      AchievementsHelper.HandleSpecialEvent(localPlayer, 22);
    }

    public static void FairyEffects(Vector2 Position, int type)
    {
      Color color1 = Color.HotPink;
      Color color2 = Color.LightPink;
      int num = 4;
      if (type == 1)
      {
        color1 = Color.LimeGreen;
        color2 = Color.LightSeaGreen;
      }
      if (type == 2)
      {
        color1 = Color.RoyalBlue;
        color2 = Color.LightBlue;
      }
      for (int index = 0; index < 40; ++index)
      {
        Dust dust = Dust.NewDustDirect(Position - new Vector2((float) num) * 0.5f, num + 4, num + 4, 278, Alpha: 200, newColor: Color.Lerp(color1, color2, Main.rand.NextFloat()), Scale: 0.65f);
        dust.velocity *= 1.5f;
        if (index >= 30)
          dust.velocity *= 3.5f;
        else if (index >= 20)
          dust.velocity *= 2f;
        dust.fadeIn = (float) Main.rand.Next(0, 17) * 0.1f;
        dust.noGravity = true;
      }
      SoundEngine.PlaySound(SoundID.Item4, (int) Position.X, (int) Position.Y);
    }

    private void GetBirdFlightRecommendation(
      int downScanRange,
      int upRange,
      Point tCoords,
      out bool goDownwards,
      out bool goUpwards)
    {
      tCoords.X += this.direction;
      goDownwards = true;
      goUpwards = false;
      int x = tCoords.X;
      for (int y = tCoords.Y; y < tCoords.Y + downScanRange && WorldGen.InWorld(x, y); ++y)
      {
        Tile tile = Main.tile[x, y];
        if (tile == null)
          break;
        if (tile.nactive() && Main.tileSolid[(int) tile.type] || tile.liquid > (byte) 0)
        {
          if (y < tCoords.Y + upRange)
            goUpwards = true;
          goDownwards = false;
          break;
        }
      }
    }

    private Vector2 GetFairyCircleOffset(
      float elapsedTime,
      float circleRotation,
      float circleHeight)
    {
      return ((((float) (6.2831854820251465 * (double) elapsedTime + 1.5707963705062866)).ToRotationVector2() + new Vector2(0.0f, -1f)) * new Vector2((float) (6 * -this.direction), circleHeight)).RotatedBy((double) circleRotation);
    }

    private bool GetFairyTreasureCoords(out Point treasureCoords)
    {
      treasureCoords = new Point();
      Point tileCoordinates = this.Center.ToTileCoordinates();
      Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle(tileCoordinates.X, tileCoordinates.Y, 1, 1);
      rectangle1.Inflate(75, 50);
      int num1 = 40;
      Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle(0, 0, Main.maxTilesX, Main.maxTilesY);
      rectangle2.Inflate(-num1, -num1);
      Microsoft.Xna.Framework.Rectangle rectangle3 = Microsoft.Xna.Framework.Rectangle.Intersect(rectangle1, rectangle2);
      int num2 = -1;
      float num3 = -1f;
      for (int left = rectangle3.Left; left <= rectangle3.Right; ++left)
      {
        for (int top = rectangle3.Top; top <= rectangle3.Bottom; ++top)
        {
          Tile t = Main.tile[left, top];
          if (t != null && t.active() && TileID.Sets.FriendlyFairyCanLureTo[(int) t.type] && SceneMetrics.IsValidForOreFinder(t))
          {
            short num4 = Main.tileOreFinderPriority[(int) t.type];
            if (TileID.Sets.Ore[(int) t.type])
            {
              int num5 = 3;
              int num6 = 3;
              int num7 = 40;
              int num8 = 0;
              for (int index1 = left - num5; index1 <= left + num5; ++index1)
              {
                for (int index2 = top - num6; index2 <= top + num6; ++index2)
                {
                  if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == (int) t.type)
                    ++num8;
                }
              }
              if (num8 < num7)
                num4 = (short) -1;
            }
            if (num2 <= (int) num4)
            {
              float num9 = this.Distance(new Vector2((float) (left * 16 + 8), (float) (top * 16 + 8)));
              if (num2 != (int) num4 || (double) num9 < (double) num3)
              {
                num2 = (int) num4;
                num3 = num9;
                treasureCoords.X = left;
                treasureCoords.Y = top;
              }
            }
          }
        }
      }
      return num2 != -1;
    }

    private void AI_069_DukeFishron()
    {
      bool expertMode = Main.expertMode;
      float num1 = expertMode ? 1.2f : 1f;
      bool flag1 = (double) this.life <= (double) this.lifeMax * 0.5;
      bool flag2 = expertMode && (double) this.life <= (double) this.lifeMax * 0.15;
      bool flag3 = (double) this.ai[0] > 4.0;
      bool flag4 = (double) this.ai[0] > 9.0;
      bool flag5 = (double) this.ai[3] < 10.0;
      if (flag4)
      {
        this.damage = (int) ((double) this.defDamage * 1.1000000238418579 * (double) num1);
        this.defense = 0;
      }
      else if (flag3)
      {
        this.damage = (int) ((double) this.defDamage * 1.2000000476837158 * (double) num1);
        this.defense = (int) ((double) this.defDefense * 0.800000011920929);
      }
      else
      {
        this.damage = this.defDamage;
        this.defense = this.defDefense;
      }
      int num2 = expertMode ? 40 : 60;
      float moveSpeed = expertMode ? 0.55f : 0.45f;
      float num3 = expertMode ? 8.5f : 7.5f;
      if (flag4)
      {
        moveSpeed = 0.7f;
        num3 = 12f;
        num2 = 30;
      }
      else if (flag3 & flag5)
      {
        moveSpeed = expertMode ? 0.6f : 0.5f;
        num3 = expertMode ? 10f : 8f;
        num2 = expertMode ? 40 : 20;
      }
      else if (flag5 && !flag3 && !flag4)
        num2 = 30;
      int num4 = expertMode ? 28 : 30;
      float num5 = expertMode ? 17f : 16f;
      if (flag4)
      {
        num4 = 25;
        num5 = 27f;
      }
      else if (flag5 & flag3)
      {
        num4 = expertMode ? 27 : 30;
        if (expertMode)
          num5 = 21f;
      }
      int num6 = 80;
      int num7 = 4;
      float num8 = 0.3f;
      float num9 = 5f;
      int num10 = 90;
      int num11 = 180;
      int num12 = 180;
      int num13 = 30;
      int num14 = 120;
      int num15 = 4;
      float num16 = 6f;
      float num17 = 20f;
      float num18 = 6.28318548f / (float) (num14 / 2);
      int num19 = 75;
      Vector2 center = this.Center;
      Player player = Main.player[this.target];
      if (this.target < 0 || this.target == (int) byte.MaxValue || player.dead || !player.active || (double) Vector2.Distance(player.Center, center) > 5600.0)
      {
        this.TargetClosest();
        player = Main.player[this.target];
        this.netUpdate = true;
      }
      if (player.dead || (double) Vector2.Distance(player.Center, center) > 5600.0)
      {
        this.velocity.Y -= 0.4f;
        this.EncourageDespawn(10);
        this.ai[0] = (double) this.ai[0] <= 4.0 ? 0.0f : 5f;
        this.ai[2] = 0.0f;
      }
      bool flag6 = (double) player.position.Y < 800.0 || (double) player.position.Y > Main.worldSurface * 16.0 || (double) player.position.X > 6400.0 && (double) player.position.X < (double) (Main.maxTilesX * 16 - 6400);
      if (flag6)
      {
        num2 = 10;
        this.damage = this.defDamage * 2;
        this.defense = this.defDefense * 2;
        num5 += 6f;
      }
      bool flag7 = true;
      if ((double) this.localAI[0] == 0.0)
      {
        this.localAI[0] = 1f;
        this.alpha = (int) byte.MaxValue;
        this.rotation = 0.0f;
        if (Main.netMode != 1)
        {
          this.ai[0] = -1f;
          this.netUpdate = true;
        }
      }
      float num20 = (float) Math.Atan2((double) player.Center.Y - (double) center.Y, (double) player.Center.X - (double) center.X);
      if (this.spriteDirection == 1)
        num20 += 3.14159274f;
      if ((double) num20 < 0.0)
        num20 += 6.28318548f;
      if ((double) num20 > 6.2831854820251465)
        num20 -= 6.28318548f;
      if ((double) this.ai[0] == -1.0)
        num20 = 0.0f;
      if ((double) this.ai[0] == 3.0)
        num20 = 0.0f;
      if ((double) this.ai[0] == 4.0)
        num20 = 0.0f;
      if ((double) this.ai[0] == 8.0)
        num20 = 0.0f;
      float num21 = 0.04f;
      if ((double) this.ai[0] == 1.0 || (double) this.ai[0] == 6.0)
        num21 = 0.0f;
      if ((double) this.ai[0] == 7.0)
        num21 = 0.0f;
      if ((double) this.ai[0] == 3.0)
        num21 = 0.01f;
      if ((double) this.ai[0] == 4.0)
        num21 = 0.01f;
      if ((double) this.ai[0] == 8.0)
        num21 = 0.01f;
      if ((double) this.rotation < (double) num20)
      {
        if ((double) num20 - (double) this.rotation > Math.PI)
          this.rotation -= num21;
        else
          this.rotation += num21;
      }
      if ((double) this.rotation > (double) num20)
      {
        if ((double) this.rotation - (double) num20 > Math.PI)
          this.rotation += num21;
        else
          this.rotation -= num21;
      }
      if ((double) this.rotation > (double) num20 - (double) num21 && (double) this.rotation < (double) num20 + (double) num21)
        this.rotation = num20;
      if ((double) this.rotation < 0.0)
        this.rotation += 6.28318548f;
      if ((double) this.rotation > 6.2831854820251465)
        this.rotation -= 6.28318548f;
      if ((double) this.rotation > (double) num20 - (double) num21 && (double) this.rotation < (double) num20 + (double) num21)
        this.rotation = num20;
      if ((double) this.ai[0] != -1.0 && (double) this.ai[0] < 9.0)
      {
        if (Collision.SolidCollision(this.position, this.width, this.height))
          this.alpha += 15;
        else
          this.alpha -= 15;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.alpha > 150)
          this.alpha = 150;
      }
      if ((double) this.ai[0] == -1.0)
      {
        flag7 = false;
        this.velocity = this.velocity * 0.98f;
        int num22 = Math.Sign(player.Center.X - center.X);
        if (num22 != 0)
        {
          this.direction = num22;
          this.spriteDirection = -this.direction;
        }
        if ((double) this.ai[2] > 20.0)
        {
          this.velocity.Y = -2f;
          this.alpha -= 5;
          if (Collision.SolidCollision(this.position, this.width, this.height))
            this.alpha += 15;
          if (this.alpha < 0)
            this.alpha = 0;
          if (this.alpha > 150)
            this.alpha = 150;
        }
        if ((double) this.ai[2] == (double) (num10 - 30))
        {
          int num23 = 36;
          for (int index1 = 0; index1 < num23; ++index1)
          {
            Vector2 vector2_1 = (Vector2.Normalize(this.velocity) * new Vector2((float) this.width / 2f, (float) this.height) * 0.75f * 0.5f).RotatedBy((double) (index1 - (num23 / 2 - 1)) * 6.2831854820251465 / (double) num23) + this.Center;
            Vector2 vector2_2 = vector2_1 - this.Center;
            int index2 = Dust.NewDust(vector2_1 + vector2_2, 0, 0, 172, vector2_2.X * 2f, vector2_2.Y * 2f, 100, Scale: 1.4f);
            Main.dust[index2].noGravity = true;
            Main.dust[index2].noLight = true;
            Main.dust[index2].velocity = Vector2.Normalize(vector2_2) * 3f;
          }
          SoundEngine.PlaySound(29, (int) center.X, (int) center.Y, 20);
        }
        ++this.ai[2];
        if ((double) this.ai[2] >= (double) num19)
        {
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 0.0 && !player.dead)
      {
        if ((double) this.ai[1] == 0.0)
          this.ai[1] = (float) (300 * Math.Sign((center - player.Center).X));
        Vector2 vector2 = Vector2.Normalize(player.Center + new Vector2(this.ai[1], -200f) - center - this.velocity) * num3;
        if ((double) this.velocity.X < (double) vector2.X)
        {
          this.velocity.X += moveSpeed;
          if ((double) this.velocity.X < 0.0 && (double) vector2.X > 0.0)
            this.velocity.X += moveSpeed;
        }
        else if ((double) this.velocity.X > (double) vector2.X)
        {
          this.velocity.X -= moveSpeed;
          if ((double) this.velocity.X > 0.0 && (double) vector2.X < 0.0)
            this.velocity.X -= moveSpeed;
        }
        if ((double) this.velocity.Y < (double) vector2.Y)
        {
          this.velocity.Y += moveSpeed;
          if ((double) this.velocity.Y < 0.0 && (double) vector2.Y > 0.0)
            this.velocity.Y += moveSpeed;
        }
        else if ((double) this.velocity.Y > (double) vector2.Y)
        {
          this.velocity.Y -= moveSpeed;
          if ((double) this.velocity.Y > 0.0 && (double) vector2.Y < 0.0)
            this.velocity.Y -= moveSpeed;
        }
        int num24 = Math.Sign(player.Center.X - center.X);
        if (num24 != 0)
        {
          if ((double) this.ai[2] == 0.0 && num24 != this.direction)
            this.rotation += 3.14159274f;
          this.direction = num24;
          if (this.spriteDirection != -this.direction)
            this.rotation += 3.14159274f;
          this.spriteDirection = -this.direction;
        }
        ++this.ai[2];
        if ((double) this.ai[2] >= (double) num2)
        {
          int num25 = 0;
          switch ((int) this.ai[3])
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              num25 = 1;
              break;
            case 10:
              this.ai[3] = 1f;
              num25 = 2;
              break;
            case 11:
              this.ai[3] = 0.0f;
              num25 = 3;
              break;
          }
          if (flag6 && num25 == 2)
            num25 = 3;
          if (flag1)
            num25 = 4;
          switch (num25)
          {
            case 1:
              this.ai[0] = 1f;
              this.ai[1] = 0.0f;
              this.ai[2] = 0.0f;
              this.velocity = Vector2.Normalize(player.Center - center) * num5;
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
              if (num24 != 0)
              {
                this.direction = num24;
                if (this.spriteDirection == 1)
                  this.rotation += 3.14159274f;
                this.spriteDirection = -this.direction;
                break;
              }
              break;
            case 2:
              this.ai[0] = 2f;
              this.ai[1] = 0.0f;
              this.ai[2] = 0.0f;
              break;
            case 3:
              this.ai[0] = 3f;
              this.ai[1] = 0.0f;
              this.ai[2] = 0.0f;
              if (flag6)
              {
                this.ai[2] = (float) (num10 - 40);
                break;
              }
              break;
            case 4:
              this.ai[0] = 4f;
              this.ai[1] = 0.0f;
              this.ai[2] = 0.0f;
              break;
          }
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 1.0)
      {
        int num26 = 7;
        for (int index3 = 0; index3 < num26; ++index3)
        {
          Vector2 vector2_3 = (Vector2.Normalize(this.velocity) * new Vector2((float) (this.width + 50) / 2f, (float) this.height) * 0.75f).RotatedBy((double) (index3 - (num26 / 2 - 1)) * Math.PI / (double) num26) + center;
          Vector2 vector2_4 = ((float) (Main.rand.NextDouble() * 3.1415927410125732) - 1.57079637f).ToRotationVector2() * (float) Main.rand.Next(3, 8);
          Vector2 vector2_5 = vector2_4;
          int index4 = Dust.NewDust(vector2_3 + vector2_5, 0, 0, 172, vector2_4.X * 2f, vector2_4.Y * 2f, 100, Scale: 1.4f);
          Main.dust[index4].noGravity = true;
          Main.dust[index4].noLight = true;
          Main.dust[index4].velocity /= 4f;
          Main.dust[index4].velocity -= this.velocity;
        }
        ++this.ai[2];
        if ((double) this.ai[2] >= (double) num4)
        {
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
          this.ai[3] += 2f;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 2.0)
      {
        if ((double) this.ai[1] == 0.0)
          this.ai[1] = (float) (300 * Math.Sign((center - player.Center).X));
        Vector2 vector2_6 = Vector2.Normalize(player.Center + new Vector2(this.ai[1], -200f) - center - this.velocity) * num9;
        if ((double) this.velocity.X < (double) vector2_6.X)
        {
          this.velocity.X += num8;
          if ((double) this.velocity.X < 0.0 && (double) vector2_6.X > 0.0)
            this.velocity.X += num8;
        }
        else if ((double) this.velocity.X > (double) vector2_6.X)
        {
          this.velocity.X -= num8;
          if ((double) this.velocity.X > 0.0 && (double) vector2_6.X < 0.0)
            this.velocity.X -= num8;
        }
        if ((double) this.velocity.Y < (double) vector2_6.Y)
        {
          this.velocity.Y += num8;
          if ((double) this.velocity.Y < 0.0 && (double) vector2_6.Y > 0.0)
            this.velocity.Y += num8;
        }
        else if ((double) this.velocity.Y > (double) vector2_6.Y)
        {
          this.velocity.Y -= num8;
          if ((double) this.velocity.Y > 0.0 && (double) vector2_6.Y < 0.0)
            this.velocity.Y -= num8;
        }
        if ((double) this.ai[2] == 0.0)
          SoundEngine.PlaySound(29, (int) center.X, (int) center.Y, 20);
        if ((double) this.ai[2] % (double) num7 == 0.0)
        {
          SoundEngine.PlaySound(4, (int) this.Center.X, (int) this.Center.Y, 19);
          if (Main.netMode != 1)
          {
            Vector2 vector2_7 = Vector2.Normalize(player.Center - center) * (float) (this.width + 20) / 2f + center;
            NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) vector2_7.X, (int) vector2_7.Y + 45, 371);
          }
        }
        int num27 = Math.Sign(player.Center.X - center.X);
        if (num27 != 0)
        {
          this.direction = num27;
          if (this.spriteDirection != -this.direction)
            this.rotation += 3.14159274f;
          this.spriteDirection = -this.direction;
        }
        ++this.ai[2];
        if ((double) this.ai[2] >= (double) num6)
        {
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 3.0)
      {
        this.velocity = this.velocity * 0.98f;
        this.velocity.Y = MathHelper.Lerp(this.velocity.Y, 0.0f, 0.02f);
        if ((double) this.ai[2] == (double) (num10 - 30))
          SoundEngine.PlaySound(29, (int) center.X, (int) center.Y, 9);
        if (Main.netMode != 1 && (double) this.ai[2] == (double) (num10 - 30))
        {
          Vector2 vector2 = this.rotation.ToRotationVector2() * (Vector2.UnitX * (float) this.direction) * (float) (this.width + 20) / 2f + center;
          Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2.X, vector2.Y, (float) (this.direction * 2), 8f, 385, 0, 0.0f, Main.myPlayer);
          Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2.X, vector2.Y, (float) (-this.direction * 2), 8f, 385, 0, 0.0f, Main.myPlayer);
        }
        ++this.ai[2];
        if ((double) this.ai[2] >= (double) num10)
        {
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 4.0)
      {
        flag7 = false;
        this.velocity = this.velocity * 0.98f;
        this.velocity.Y = MathHelper.Lerp(this.velocity.Y, 0.0f, 0.02f);
        if ((double) this.ai[2] == (double) (num11 - 60))
          SoundEngine.PlaySound(29, (int) center.X, (int) center.Y, 20);
        ++this.ai[2];
        if ((double) this.ai[2] >= (double) num11)
        {
          this.ai[0] = 5f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
          this.ai[3] = 0.0f;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 5.0 && !player.dead)
      {
        if ((double) this.ai[1] == 0.0)
          this.ai[1] = (float) (300 * Math.Sign((center - player.Center).X));
        Vector2 vector2 = Vector2.Normalize(player.Center + new Vector2(this.ai[1], -200f) - center - this.velocity) * num3;
        if ((double) this.velocity.X < (double) vector2.X)
        {
          this.velocity.X += moveSpeed;
          if ((double) this.velocity.X < 0.0 && (double) vector2.X > 0.0)
            this.velocity.X += moveSpeed;
        }
        else if ((double) this.velocity.X > (double) vector2.X)
        {
          this.velocity.X -= moveSpeed;
          if ((double) this.velocity.X > 0.0 && (double) vector2.X < 0.0)
            this.velocity.X -= moveSpeed;
        }
        if ((double) this.velocity.Y < (double) vector2.Y)
        {
          this.velocity.Y += moveSpeed;
          if ((double) this.velocity.Y < 0.0 && (double) vector2.Y > 0.0)
            this.velocity.Y += moveSpeed;
        }
        else if ((double) this.velocity.Y > (double) vector2.Y)
        {
          this.velocity.Y -= moveSpeed;
          if ((double) this.velocity.Y > 0.0 && (double) vector2.Y < 0.0)
            this.velocity.Y -= moveSpeed;
        }
        int num28 = Math.Sign(player.Center.X - center.X);
        if (num28 != 0)
        {
          if ((double) this.ai[2] == 0.0 && num28 != this.direction)
            this.rotation += 3.14159274f;
          this.direction = num28;
          if (this.spriteDirection != -this.direction)
            this.rotation += 3.14159274f;
          this.spriteDirection = -this.direction;
        }
        ++this.ai[2];
        if ((double) this.ai[2] >= (double) num2)
        {
          int num29 = 0;
          switch ((int) this.ai[3])
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
              num29 = 1;
              break;
            case 6:
              this.ai[3] = 1f;
              num29 = 2;
              break;
            case 7:
              this.ai[3] = 0.0f;
              num29 = 3;
              break;
          }
          if (flag2)
            num29 = 4;
          if (flag6 && num29 == 2)
            num29 = 3;
          switch (num29)
          {
            case 1:
              this.ai[0] = 6f;
              this.ai[1] = 0.0f;
              this.ai[2] = 0.0f;
              this.velocity = Vector2.Normalize(player.Center - center) * num5;
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
              if (num28 != 0)
              {
                this.direction = num28;
                if (this.spriteDirection == 1)
                  this.rotation += 3.14159274f;
                this.spriteDirection = -this.direction;
                break;
              }
              break;
            case 2:
              this.velocity = Vector2.Normalize(player.Center - center) * num17;
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
              if (num28 != 0)
              {
                this.direction = num28;
                if (this.spriteDirection == 1)
                  this.rotation += 3.14159274f;
                this.spriteDirection = -this.direction;
              }
              this.ai[0] = 7f;
              this.ai[1] = 0.0f;
              this.ai[2] = 0.0f;
              break;
            case 3:
              this.ai[0] = 8f;
              this.ai[1] = 0.0f;
              this.ai[2] = 0.0f;
              break;
            case 4:
              this.ai[0] = 9f;
              this.ai[1] = 0.0f;
              this.ai[2] = 0.0f;
              break;
          }
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 6.0)
      {
        int num30 = 7;
        for (int index5 = 0; index5 < num30; ++index5)
        {
          Vector2 vector2_8 = (Vector2.Normalize(this.velocity) * new Vector2((float) (this.width + 50) / 2f, (float) this.height) * 0.75f).RotatedBy((double) (index5 - (num30 / 2 - 1)) * Math.PI / (double) num30) + center;
          Vector2 vector2_9 = ((float) (Main.rand.NextDouble() * 3.1415927410125732) - 1.57079637f).ToRotationVector2() * (float) Main.rand.Next(3, 8);
          Vector2 vector2_10 = vector2_9;
          int index6 = Dust.NewDust(vector2_8 + vector2_10, 0, 0, 172, vector2_9.X * 2f, vector2_9.Y * 2f, 100, Scale: 1.4f);
          Main.dust[index6].noGravity = true;
          Main.dust[index6].noLight = true;
          Main.dust[index6].velocity /= 4f;
          Main.dust[index6].velocity -= this.velocity;
        }
        ++this.ai[2];
        if ((double) this.ai[2] >= (double) num4)
        {
          this.ai[0] = 5f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
          this.ai[3] += 2f;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 7.0)
      {
        if ((double) this.ai[2] == 0.0)
          SoundEngine.PlaySound(29, (int) center.X, (int) center.Y, 20);
        if ((double) this.ai[2] % (double) num15 == 0.0)
        {
          SoundEngine.PlaySound(4, (int) this.Center.X, (int) this.Center.Y, 19);
          if (Main.netMode != 1)
          {
            Vector2 vector2 = Vector2.Normalize(this.velocity) * (float) (this.width + 20) / 2f + center;
            int index = NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) vector2.X, (int) vector2.Y + 45, 371);
            Main.npc[index].target = this.target;
            Main.npc[index].velocity = Vector2.Normalize(this.velocity).RotatedBy(1.5707963705062866 * (double) this.direction) * num16;
            Main.npc[index].netUpdate = true;
            Main.npc[index].ai[3] = (float) Main.rand.Next(80, 121) / 100f;
          }
        }
        this.velocity = this.velocity.RotatedBy(-(double) num18 * (double) this.direction);
        this.rotation -= num18 * (float) this.direction;
        ++this.ai[2];
        if ((double) this.ai[2] >= (double) num14)
        {
          this.ai[0] = 5f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 8.0)
      {
        this.velocity = this.velocity * 0.98f;
        this.velocity.Y = MathHelper.Lerp(this.velocity.Y, 0.0f, 0.02f);
        if ((double) this.ai[2] == (double) (num10 - 30))
          SoundEngine.PlaySound(29, (int) center.X, (int) center.Y, 20);
        if (Main.netMode != 1 && (double) this.ai[2] == (double) (num10 - 30))
          Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), center.X, center.Y, 0.0f, 0.0f, 385, 0, 0.0f, Main.myPlayer, 1f, (float) (this.target + 1), flag6 ? 1f : 0.0f);
        ++this.ai[2];
        if ((double) this.ai[2] >= (double) num10)
        {
          this.ai[0] = 5f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 9.0)
      {
        flag7 = false;
        if ((double) this.ai[2] < (double) (num12 - 90))
        {
          if (Collision.SolidCollision(this.position, this.width, this.height))
            this.alpha += 15;
          else
            this.alpha -= 15;
          if (this.alpha < 0)
            this.alpha = 0;
          if (this.alpha > 150)
            this.alpha = 150;
        }
        else if (this.alpha < (int) byte.MaxValue)
        {
          this.alpha += 4;
          if (this.alpha > (int) byte.MaxValue)
            this.alpha = (int) byte.MaxValue;
        }
        this.velocity = this.velocity * 0.98f;
        this.velocity.Y = MathHelper.Lerp(this.velocity.Y, 0.0f, 0.02f);
        if ((double) this.ai[2] == (double) (num12 - 60))
          SoundEngine.PlaySound(29, (int) center.X, (int) center.Y, 20);
        ++this.ai[2];
        if ((double) this.ai[2] >= (double) num12)
        {
          this.ai[0] = 10f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
          this.ai[3] = 0.0f;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 10.0 && !player.dead)
      {
        this.chaseable = false;
        if (this.alpha < (int) byte.MaxValue)
        {
          this.alpha += 25;
          if (this.alpha > (int) byte.MaxValue)
            this.alpha = (int) byte.MaxValue;
        }
        if ((double) this.ai[1] == 0.0)
          this.ai[1] = (float) (360 * Math.Sign((center - player.Center).X));
        this.SimpleFlyMovement(Vector2.Normalize(player.Center + new Vector2(this.ai[1], -200f) - center - this.velocity) * num3, moveSpeed);
        int num31 = Math.Sign(player.Center.X - center.X);
        if (num31 != 0)
        {
          if ((double) this.ai[2] == 0.0 && num31 != this.direction)
          {
            this.rotation += 3.14159274f;
            for (int index = 0; index < this.oldPos.Length; ++index)
              this.oldPos[index] = Vector2.Zero;
          }
          this.direction = num31;
          if (this.spriteDirection != -this.direction)
            this.rotation += 3.14159274f;
          this.spriteDirection = -this.direction;
        }
        ++this.ai[2];
        if ((double) this.ai[2] >= (double) num2)
        {
          int num32 = 0;
          switch ((int) this.ai[3])
          {
            case 0:
            case 2:
            case 3:
            case 5:
            case 6:
            case 7:
              num32 = 1;
              break;
            case 1:
            case 4:
            case 8:
              num32 = 2;
              break;
          }
          switch (num32)
          {
            case 1:
              this.ai[0] = 11f;
              this.ai[1] = 0.0f;
              this.ai[2] = 0.0f;
              this.velocity = Vector2.Normalize(player.Center - center) * num5;
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
              if (num31 != 0)
              {
                this.direction = num31;
                if (this.spriteDirection == 1)
                  this.rotation += 3.14159274f;
                this.spriteDirection = -this.direction;
                break;
              }
              break;
            case 2:
              this.ai[0] = 12f;
              this.ai[1] = 0.0f;
              this.ai[2] = 0.0f;
              break;
            case 3:
              this.ai[0] = 13f;
              this.ai[1] = 0.0f;
              this.ai[2] = 0.0f;
              break;
          }
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 11.0)
      {
        this.chaseable = true;
        this.alpha -= 25;
        if (this.alpha < 0)
          this.alpha = 0;
        int num33 = 7;
        for (int index7 = 0; index7 < num33; ++index7)
        {
          Vector2 vector2_11 = (Vector2.Normalize(this.velocity) * new Vector2((float) (this.width + 50) / 2f, (float) this.height) * 0.75f).RotatedBy((double) (index7 - (num33 / 2 - 1)) * Math.PI / (double) num33) + center;
          Vector2 vector2_12 = ((float) (Main.rand.NextDouble() * 3.1415927410125732) - 1.57079637f).ToRotationVector2() * (float) Main.rand.Next(3, 8);
          Vector2 vector2_13 = vector2_12;
          int index8 = Dust.NewDust(vector2_11 + vector2_13, 0, 0, 172, vector2_12.X * 2f, vector2_12.Y * 2f, 100, Scale: 1.4f);
          Main.dust[index8].noGravity = true;
          Main.dust[index8].noLight = true;
          Main.dust[index8].velocity /= 4f;
          Main.dust[index8].velocity -= this.velocity;
        }
        ++this.ai[2];
        if ((double) this.ai[2] >= (double) num4)
        {
          this.ai[0] = 10f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
          ++this.ai[3];
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 12.0)
      {
        flag7 = false;
        this.chaseable = false;
        if (this.alpha < (int) byte.MaxValue)
        {
          this.alpha += 17;
          if (this.alpha > (int) byte.MaxValue)
            this.alpha = (int) byte.MaxValue;
        }
        this.velocity = this.velocity * 0.98f;
        this.velocity.Y = MathHelper.Lerp(this.velocity.Y, 0.0f, 0.02f);
        if ((double) this.ai[2] == (double) (num13 / 2))
          SoundEngine.PlaySound(29, (int) center.X, (int) center.Y, 20);
        if (Main.netMode != 1 && (double) this.ai[2] == (double) (num13 / 2))
        {
          if ((double) this.ai[1] == 0.0)
            this.ai[1] = (float) (300 * Math.Sign((center - player.Center).X));
          Vector2 vector2 = this.Center = player.Center + new Vector2(-this.ai[1], -200f);
          int num34 = Math.Sign(player.Center.X - vector2.X);
          if (num34 != 0)
          {
            if ((double) this.ai[2] == 0.0 && num34 != this.direction)
            {
              this.rotation += 3.14159274f;
              for (int index = 0; index < this.oldPos.Length; ++index)
                this.oldPos[index] = Vector2.Zero;
            }
            this.direction = num34;
            if (this.spriteDirection != -this.direction)
              this.rotation += 3.14159274f;
            this.spriteDirection = -this.direction;
          }
        }
        ++this.ai[2];
        if ((double) this.ai[2] >= (double) num13)
        {
          this.ai[0] = 10f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
          ++this.ai[3];
          if ((double) this.ai[3] >= 9.0)
            this.ai[3] = 0.0f;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 13.0)
      {
        if ((double) this.ai[2] == 0.0)
          SoundEngine.PlaySound(29, (int) center.X, (int) center.Y, 20);
        this.velocity = this.velocity.RotatedBy(-(double) num18 * (double) this.direction);
        this.rotation -= num18 * (float) this.direction;
        ++this.ai[2];
        if ((double) this.ai[2] >= (double) num14)
        {
          this.ai[0] = 10f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
          ++this.ai[3];
          this.netUpdate = true;
        }
      }
      this.dontTakeDamage = !flag7;
    }

    private void AI_037_Destroyer()
    {
      int num1 = 0;
      int num2 = 10;
      if (NPC.IsMechQueenUp && this.type != 134)
      {
        for (int index = (int) this.ai[1]; index > 0 && index < 200; index = (int) Main.npc[index].ai[1])
        {
          if (Main.npc[index].active && Main.npc[index].type >= 134 && Main.npc[index].type <= 136)
          {
            ++num1;
            if (Main.npc[index].type != 134)
            {
              if (num1 >= num2)
              {
                num1 = 0;
                break;
              }
            }
            else
              break;
          }
          else
          {
            num1 = 0;
            break;
          }
        }
      }
      if ((double) this.ai[3] > 0.0)
        this.realLife = (int) this.ai[3];
      if (this.target < 0 || this.target == (int) byte.MaxValue || Main.player[this.target].dead)
        this.TargetClosest();
      if (this.type >= 134 && this.type <= 136)
      {
        double num3 = (double) this.velocity.Length();
        if (this.type == 134 || this.type != 134 && Main.npc[(int) this.ai[1]].alpha < 128)
        {
          if (this.alpha != 0)
          {
            for (int index1 = 0; index1 < 2; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 182, Alpha: 100, Scale: 2f);
              Main.dust[index2].noGravity = true;
              Main.dust[index2].noLight = true;
            }
          }
          this.alpha -= 42;
          if (this.alpha < 0)
            this.alpha = 0;
        }
      }
      if (this.type > 134)
      {
        bool flag = false;
        if ((double) this.ai[1] <= 0.0)
          flag = true;
        else if (Main.npc[(int) this.ai[1]].life <= 0)
          flag = true;
        if (flag)
        {
          this.life = 0;
          this.HitEffect();
          this.checkDead();
        }
      }
      if (Main.netMode != 1)
      {
        if ((double) this.ai[0] == 0.0 && this.type == 134)
        {
          this.ai[3] = (float) this.whoAmI;
          this.realLife = this.whoAmI;
          int index3 = this.whoAmI;
          int destroyerSegmentsCount = NPC.GetDestroyerSegmentsCount();
          for (int index4 = 0; index4 <= destroyerSegmentsCount; ++index4)
          {
            int Type = 135;
            if (index4 == destroyerSegmentsCount)
              Type = 136;
            int number = NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) ((double) this.position.X + (double) (this.width / 2)), (int) ((double) this.position.Y + (double) this.height), Type, this.whoAmI);
            Main.npc[number].ai[3] = (float) this.whoAmI;
            Main.npc[number].realLife = this.whoAmI;
            Main.npc[number].ai[1] = (float) index3;
            Main.npc[index3].ai[0] = (float) number;
            NetMessage.SendData(23, number: number);
            index3 = number;
          }
        }
        if (this.type == 135)
        {
          this.localAI[0] += (float) Main.rand.Next(4);
          if ((double) this.localAI[0] >= (double) Main.rand.Next(1400, 26000))
          {
            this.localAI[0] = 0.0f;
            this.TargetClosest();
            if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
            {
              Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) (this.height / 2));
              float num4 = Main.player[this.target].position.X + (float) Main.player[this.target].width * 0.5f - vector2.X + (float) Main.rand.Next(-20, 21);
              float num5 = Main.player[this.target].position.Y + (float) Main.player[this.target].height * 0.5f - vector2.Y + (float) Main.rand.Next(-20, 21);
              float num6 = (float) (8.0 / Math.Sqrt((double) num4 * (double) num4 + (double) num5 * (double) num5));
              float num7 = num4 * num6;
              float num8 = num5 * num6;
              float SpeedX = num7 + (float) Main.rand.Next(-20, 21) * 0.05f;
              float SpeedY = num8 + (float) Main.rand.Next(-20, 21) * 0.05f;
              int damageForProjectiles = this.GetAttackDamage_ForProjectiles(22f, 18f);
              int Type = 100;
              vector2.X += SpeedX * 5f;
              vector2.Y += SpeedY * 5f;
              int index = Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2.X, vector2.Y, SpeedX, SpeedY, Type, damageForProjectiles, 0.0f, Main.myPlayer);
              Main.projectile[index].timeLeft = 300;
              this.netUpdate = true;
            }
          }
        }
      }
      int num9 = (int) ((double) this.position.X / 16.0) - 1;
      int num10 = (int) (((double) this.position.X + (double) this.width) / 16.0) + 2;
      int num11 = (int) ((double) this.position.Y / 16.0) - 1;
      int num12 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + 2;
      if (num9 < 0)
        num9 = 0;
      if (num10 > Main.maxTilesX)
        num10 = Main.maxTilesX;
      if (num11 < 0)
        num11 = 0;
      if (num12 > Main.maxTilesY)
        num12 = Main.maxTilesY;
      bool flag1 = false;
      if (!flag1)
      {
        for (int index5 = num9; index5 < num10; ++index5)
        {
          for (int index6 = num11; index6 < num12; ++index6)
          {
            if (Main.tile[index5, index6] != null && (Main.tile[index5, index6].nactive() && (Main.tileSolid[(int) Main.tile[index5, index6].type] || Main.tileSolidTop[(int) Main.tile[index5, index6].type] && Main.tile[index5, index6].frameY == (short) 0) || Main.tile[index5, index6].liquid > (byte) 64))
            {
              Vector2 vector2;
              vector2.X = (float) (index5 * 16);
              vector2.Y = (float) (index6 * 16);
              if ((double) this.position.X + (double) this.width > (double) vector2.X && (double) this.position.X < (double) vector2.X + 16.0 && (double) this.position.Y + (double) this.height > (double) vector2.Y && (double) this.position.Y < (double) vector2.Y + 16.0)
              {
                flag1 = true;
                break;
              }
            }
          }
        }
      }
      if (!flag1)
      {
        if (this.type != 135 || (double) this.ai[2] != 1.0)
          Lighting.AddLight((int) (((double) this.position.X + (double) (this.width / 2)) / 16.0), (int) (((double) this.position.Y + (double) (this.height / 2)) / 16.0), 0.3f, 0.1f, 0.05f);
        this.localAI[1] = 1f;
        if (this.type == 134)
        {
          Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height);
          int num13 = 1000;
          bool flag2 = true;
          if ((double) this.position.Y > (double) Main.player[this.target].position.Y)
          {
            for (int index = 0; index < (int) byte.MaxValue; ++index)
            {
              if (Main.player[index].active)
              {
                Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int) Main.player[index].position.X - num13, (int) Main.player[index].position.Y - num13, num13 * 2, num13 * 2);
                if (rectangle1.Intersects(rectangle2))
                {
                  flag2 = false;
                  break;
                }
              }
            }
            if (flag2)
              flag1 = true;
          }
        }
      }
      else
        this.localAI[1] = 0.0f;
      float num14 = 16f;
      if (Main.IsItDay() || Main.player[this.target].dead)
      {
        flag1 = false;
        ++this.velocity.Y;
        if ((double) this.position.Y > Main.worldSurface * 16.0)
        {
          ++this.velocity.Y;
          num14 = 32f;
        }
        if ((double) this.position.Y > Main.rockLayer * 16.0)
        {
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].aiStyle == this.aiStyle)
              Main.npc[index].active = false;
          }
        }
      }
      float num15 = 0.1f;
      float num16 = 0.15f;
      if (Main.getGoodWorld)
      {
        num15 *= 1.2f;
        num16 *= 1.2f;
      }
      Vector2 vector2_1 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
      float num17 = Main.player[this.target].position.X + (float) (Main.player[this.target].width / 2);
      float num18 = Main.player[this.target].position.Y + (float) (Main.player[this.target].height / 2);
      float num19 = (float) ((int) ((double) num17 / 16.0) * 16);
      float num20 = (float) ((int) ((double) num18 / 16.0) * 16);
      vector2_1.X = (float) ((int) ((double) vector2_1.X / 16.0) * 16);
      vector2_1.Y = (float) ((int) ((double) vector2_1.Y / 16.0) * 16);
      float x1 = num19 - vector2_1.X;
      float y = num20 - vector2_1.Y;
      float num21 = (float) Math.Sqrt((double) x1 * (double) x1 + (double) y * (double) y);
      if ((double) this.ai[1] > 0.0 && (double) this.ai[1] < (double) Main.npc.Length)
      {
        int num22 = (int) (44.0 * (double) this.scale);
        try
        {
          vector2_1 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          x1 = Main.npc[(int) this.ai[1]].position.X + (float) (Main.npc[(int) this.ai[1]].width / 2) - vector2_1.X;
          y = Main.npc[(int) this.ai[1]].position.Y + (float) (Main.npc[(int) this.ai[1]].height / 2) - vector2_1.Y;
        }
        catch
        {
        }
        if (num1 > 0)
        {
          float num23 = (float) num22 - (float) num22 * (float) (((double) num1 - 1.0) * 0.10000000149011612);
          if ((double) num23 < 0.0)
            num23 = 0.0f;
          if ((double) num23 > (double) num22)
            num23 = (float) num22;
          y = Main.npc[(int) this.ai[1]].position.Y + (float) (Main.npc[(int) this.ai[1]].height / 2) + num23 - vector2_1.Y;
        }
        this.rotation = (float) Math.Atan2((double) y, (double) x1) + 1.57f;
        float num24 = (float) Math.Sqrt((double) x1 * (double) x1 + (double) y * (double) y);
        if (num1 > 0)
          num22 = num22 / num2 * num1;
        float num25 = (num24 - (float) num22) / num24;
        float num26 = x1 * num25;
        float num27 = y * num25;
        this.velocity = Vector2.Zero;
        this.position.X += num26;
        this.position.Y += num27;
        float x2 = Main.npc[(int) this.ai[1]].position.X + (float) (Main.npc[(int) this.ai[1]].width / 2) - vector2_1.X;
        this.rotation = (float) Math.Atan2((double) (Main.npc[(int) this.ai[1]].position.Y + (float) (Main.npc[(int) this.ai[1]].height / 2) - vector2_1.Y), (double) x2) + 1.57f;
      }
      else
      {
        if (!flag1)
        {
          this.TargetClosest();
          this.velocity.Y += 0.15f;
          if ((double) this.velocity.Y > (double) num14)
            this.velocity.Y = num14;
          if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num14 * 0.4)
          {
            if ((double) this.velocity.X < 0.0)
              this.velocity.X -= num15 * 1.1f;
            else
              this.velocity.X += num15 * 1.1f;
          }
          else if ((double) this.velocity.Y == (double) num14)
          {
            if ((double) this.velocity.X < (double) x1)
              this.velocity.X += num15;
            else if ((double) this.velocity.X > (double) x1)
              this.velocity.X -= num15;
          }
          else if ((double) this.velocity.Y > 4.0)
          {
            if ((double) this.velocity.X < 0.0)
              this.velocity.X += num15 * 0.9f;
            else
              this.velocity.X -= num15 * 0.9f;
          }
        }
        else
        {
          if (this.soundDelay == 0)
          {
            float num28 = num21 / 40f;
            if ((double) num28 < 10.0)
              num28 = 10f;
            if ((double) num28 > 20.0)
              num28 = 20f;
            this.soundDelay = (int) num28;
            SoundEngine.PlaySound(15, (int) this.position.X, (int) this.position.Y);
          }
          float num29 = (float) Math.Sqrt((double) x1 * (double) x1 + (double) y * (double) y);
          float num30 = Math.Abs(x1);
          float num31 = Math.Abs(y);
          float num32 = num14 / num29;
          float num33 = x1 * num32;
          float num34 = y * num32;
          if (((double) this.velocity.X > 0.0 && (double) num33 > 0.0 || (double) this.velocity.X < 0.0 && (double) num33 < 0.0) && ((double) this.velocity.Y > 0.0 && (double) num34 > 0.0 || (double) this.velocity.Y < 0.0 && (double) num34 < 0.0))
          {
            if ((double) this.velocity.X < (double) num33)
              this.velocity.X += num16;
            else if ((double) this.velocity.X > (double) num33)
              this.velocity.X -= num16;
            if ((double) this.velocity.Y < (double) num34)
              this.velocity.Y += num16;
            else if ((double) this.velocity.Y > (double) num34)
              this.velocity.Y -= num16;
          }
          if ((double) this.velocity.X > 0.0 && (double) num33 > 0.0 || (double) this.velocity.X < 0.0 && (double) num33 < 0.0 || (double) this.velocity.Y > 0.0 && (double) num34 > 0.0 || (double) this.velocity.Y < 0.0 && (double) num34 < 0.0)
          {
            if ((double) this.velocity.X < (double) num33)
              this.velocity.X += num15;
            else if ((double) this.velocity.X > (double) num33)
              this.velocity.X -= num15;
            if ((double) this.velocity.Y < (double) num34)
              this.velocity.Y += num15;
            else if ((double) this.velocity.Y > (double) num34)
              this.velocity.Y -= num15;
            if ((double) Math.Abs(num34) < (double) num14 * 0.2 && ((double) this.velocity.X > 0.0 && (double) num33 < 0.0 || (double) this.velocity.X < 0.0 && (double) num33 > 0.0))
            {
              if ((double) this.velocity.Y > 0.0)
                this.velocity.Y += num15 * 2f;
              else
                this.velocity.Y -= num15 * 2f;
            }
            if ((double) Math.Abs(num33) < (double) num14 * 0.2 && ((double) this.velocity.Y > 0.0 && (double) num34 < 0.0 || (double) this.velocity.Y < 0.0 && (double) num34 > 0.0))
            {
              if ((double) this.velocity.X > 0.0)
                this.velocity.X += num15 * 2f;
              else
                this.velocity.X -= num15 * 2f;
            }
          }
          else if ((double) num30 > (double) num31)
          {
            if ((double) this.velocity.X < (double) num33)
              this.velocity.X += num15 * 1.1f;
            else if ((double) this.velocity.X > (double) num33)
              this.velocity.X -= num15 * 1.1f;
            if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num14 * 0.5)
            {
              if ((double) this.velocity.Y > 0.0)
                this.velocity.Y += num15;
              else
                this.velocity.Y -= num15;
            }
          }
          else
          {
            if ((double) this.velocity.Y < (double) num34)
              this.velocity.Y += num15 * 1.1f;
            else if ((double) this.velocity.Y > (double) num34)
              this.velocity.Y -= num15 * 1.1f;
            if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num14 * 0.5)
            {
              if ((double) this.velocity.X > 0.0)
                this.velocity.X += num15;
              else
                this.velocity.X -= num15;
            }
          }
        }
        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        if (this.type == 134)
        {
          if (flag1)
          {
            if ((double) this.localAI[0] != 1.0)
              this.netUpdate = true;
            this.localAI[0] = 1f;
          }
          else
          {
            if ((double) this.localAI[0] != 0.0)
              this.netUpdate = true;
            this.localAI[0] = 0.0f;
          }
          if (((double) this.velocity.X > 0.0 && (double) this.oldVelocity.X < 0.0 || (double) this.velocity.X < 0.0 && (double) this.oldVelocity.X > 0.0 || (double) this.velocity.Y > 0.0 && (double) this.oldVelocity.Y < 0.0 || (double) this.velocity.Y < 0.0 && (double) this.oldVelocity.Y > 0.0) && !this.justHit)
            this.netUpdate = true;
        }
      }
      if (!NPC.IsMechQueenUp || this.type != 134)
        return;
      NPC npc = Main.npc[NPC.mechQueen];
      Vector2 mechQueenCenter = npc.GetMechQueenCenter();
      Vector2 vector2_2 = new Vector2(0.0f, 100f);
      Vector2 spinningpoint = mechQueenCenter + vector2_2;
      float radians = npc.velocity.X * 0.025f;
      this.position = spinningpoint.RotatedBy((double) radians, mechQueenCenter) - this.Size / 2f + npc.velocity;
      this.velocity.X = 0.0f;
      this.velocity.Y = 0.0f;
      this.rotation = (float) ((double) radians * 0.75 + 3.1415927410125732);
    }

    private void AI_005_EaterOfSouls()
    {
      if (this.type == 210 || this.type == 211)
        NPCUtils.TargetClosestNonBees(this);
      else if (this.target < 0 || this.target <= (int) byte.MaxValue || Main.player[this.target].dead)
        this.TargetClosest();
      if (this.type == 619)
      {
        if (Main.dayTime)
        {
          this.velocity.Y -= 0.3f;
          this.EncourageDespawn(60);
        }
        this.position = this.position + this.netOffset;
        if (this.alpha == (int) byte.MaxValue)
        {
          this.spriteDirection = this.direction;
          this.velocity.Y = -6f;
          for (int index = 0; index < 35; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 5);
            dust.velocity *= 1f;
            dust.scale = (float) (1.0 + (double) Main.rand.NextFloat() * 0.5);
            dust.fadeIn = (float) (1.5 + (double) Main.rand.NextFloat() * 0.5);
            dust.velocity += this.velocity * 0.5f;
          }
        }
        this.alpha -= 15;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.alpha != 0)
        {
          for (int index = 0; index < 2; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 5);
            dust.velocity *= 1f;
            dust.scale = (float) (1.0 + (double) Main.rand.NextFloat() * 0.5);
            dust.fadeIn = (float) (1.5 + (double) Main.rand.NextFloat() * 0.5);
            dust.velocity += this.velocity * 0.3f;
          }
        }
        this.position = this.position - this.netOffset;
      }
      NPCAimedTarget targetData = this.GetTargetData();
      bool flag1 = false;
      if (targetData.Type == NPCTargetType.Player)
        flag1 = Main.player[this.target].dead;
      float num1 = 6f;
      float num2 = 0.05f;
      if (this.type == 6 || this.type == 173)
      {
        num1 = 4f;
        num2 = 0.02f;
        if (this.type == 6 && Main.expertMode)
          num2 = 0.035f;
        if (Main.remixWorld)
        {
          num2 = 0.06f;
          num1 = 5f;
        }
      }
      else if (this.type == 94)
      {
        num1 = 4.2f;
        num2 = 0.022f;
      }
      else if (this.type == 619)
      {
        num1 = 6f;
        num2 = 0.1f;
      }
      else if (this.type == 252)
      {
        if (targetData.Type != NPCTargetType.None && Collision.CanHit((Entity) this, targetData))
        {
          num1 = 6f;
          num2 = 0.1f;
        }
        else
        {
          num2 = 0.01f;
          num1 = 2f;
        }
      }
      else if (this.type == 42 || this.type >= 231 && this.type <= 235)
      {
        float num3 = 3.5f;
        float num4 = 0.021f;
        if (this.type == 231)
        {
          num3 = 3f;
          num4 = 0.017f;
        }
        num1 = num3 * (1f - this.scale);
        num2 = num4 * (1f - this.scale);
        if ((double) this.position.Y / 16.0 < Main.worldSurface)
        {
          if ((double) Main.player[this.target].position.Y - (double) this.position.Y > 300.0 && (double) this.velocity.Y < 0.0)
            this.velocity.Y *= 0.97f;
          if ((double) Main.player[this.target].position.Y - (double) this.position.Y < 80.0 && (double) this.velocity.Y > 0.0)
            this.velocity.Y *= 0.97f;
        }
      }
      else if (this.type == 205)
      {
        num1 = 3.25f;
        num2 = 0.018f;
      }
      else if (this.type == 176)
      {
        num1 = 4f;
        num2 = 0.017f;
      }
      else if (this.type == 23)
      {
        num1 = 1f;
        num2 = 0.03f;
      }
      else if (this.type == 5)
      {
        num1 = 5f;
        num2 = 0.03f;
      }
      else if (this.type == 210 || this.type == 211)
      {
        ++this.ai[1];
        float num5 = (float) (((double) this.ai[1] - 60.0) / 60.0);
        if ((double) num5 > 1.0)
        {
          num5 = 1f;
        }
        else
        {
          if ((double) this.velocity.X > 6.0)
            this.velocity.X = 6f;
          if ((double) this.velocity.X < -6.0)
            this.velocity.X = -6f;
          if ((double) this.velocity.Y > 6.0)
            this.velocity.Y = 6f;
          if ((double) this.velocity.Y < -6.0)
            this.velocity.Y = -6f;
        }
        num1 = 5f;
        num2 = 0.1f * num5;
      }
      else if (this.type == 139 && Main.zenithWorld)
        num1 = 3f;
      Vector2 vector2_1 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
      float num6 = targetData.Position.X + (float) (targetData.Width / 2);
      float num7 = targetData.Position.Y + (float) (targetData.Height / 2);
      float num8 = (float) ((int) ((double) num6 / 8.0) * 8);
      float num9 = (float) ((int) ((double) num7 / 8.0) * 8);
      vector2_1.X = (float) ((int) ((double) vector2_1.X / 8.0) * 8);
      vector2_1.Y = (float) ((int) ((double) vector2_1.Y / 8.0) * 8);
      float num10 = num8 - vector2_1.X;
      float num11 = num9 - vector2_1.Y;
      float num12 = (float) Math.Sqrt((double) num10 * (double) num10 + (double) num11 * (double) num11);
      float num13 = num12;
      bool flag2 = false;
      if ((double) num12 > 600.0)
        flag2 = true;
      float x;
      float y;
      if ((double) num12 == 0.0)
      {
        x = this.velocity.X;
        y = this.velocity.Y;
      }
      else
      {
        float num14 = num1 / num12;
        x = num10 * num14;
        y = num11 * num14;
      }
      int num15 = this.type == 6 || this.type == 139 || this.type == 173 ? 1 : (this.type == 205 ? 1 : 0);
      bool flag3 = this.type == 42 || this.type == 94 || this.type == 619 || this.type == 176 || this.type == 210 || this.type == 211 || this.type >= 231 && this.type <= 235;
      bool flag4 = this.type != 173 && this.type != 6 && this.type != 42 && (this.type < 231 || this.type > 235) && this.type != 94 && this.type != 139 && this.type != 619;
      int num16 = flag3 ? 1 : 0;
      if ((num15 | num16) != 0)
      {
        if ((double) num13 > 100.0 | flag3)
        {
          ++this.ai[0];
          if ((double) this.ai[0] > 0.0)
            this.velocity.Y += 23f / 1000f;
          else
            this.velocity.Y -= 23f / 1000f;
          if ((double) this.ai[0] < -100.0 || (double) this.ai[0] > 100.0)
            this.velocity.X += 23f / 1000f;
          else
            this.velocity.X -= 23f / 1000f;
          if ((double) this.ai[0] > 200.0)
            this.ai[0] = -200f;
        }
        if ((double) num13 < 150.0 && (this.type == 6 || this.type == 94 || this.type == 173 || this.type == 619))
        {
          this.velocity.X += x * 0.007f;
          this.velocity.Y += y * 0.007f;
        }
      }
      if (flag1)
      {
        x = (float) ((double) this.direction * (double) num1 / 2.0);
        y = (float) (-(double) num1 / 2.0);
      }
      else if (this.type == 619 && (double) this.Center.Y > (double) targetData.Center.Y - 200.0)
        this.velocity.Y -= 0.3f;
      if (this.type == 139 && (double) this.ai[3] != 0.0)
      {
        if (NPC.IsMechQueenUp)
        {
          NPC npc1 = Main.npc[NPC.mechQueen];
          Vector2 vector2_2 = new Vector2(26f * this.ai[3], 0.0f);
          int firstNpc = (int) this.ai[2];
          if (firstNpc < 0 || firstNpc >= 200)
          {
            firstNpc = NPC.FindFirstNPC(134);
            this.ai[2] = (float) firstNpc;
            this.netUpdate = true;
          }
          if (firstNpc > -1)
          {
            NPC npc2 = Main.npc[firstNpc];
            if (!npc2.active || npc2.type != 134)
            {
              this.dontTakeDamage = false;
              if ((double) this.ai[3] > 0.0)
                this.netUpdate = true;
              this.ai[3] = 0.0f;
            }
            else
            {
              this.Center = (npc2.Center + vector2_2).RotatedBy((double) npc2.rotation, npc2.Center);
              this.velocity = npc1.velocity;
              this.dontTakeDamage = true;
            }
          }
          else
          {
            this.dontTakeDamage = false;
            if ((double) this.ai[3] > 0.0)
              this.netUpdate = true;
            this.ai[3] = 0.0f;
          }
        }
        else
        {
          this.dontTakeDamage = false;
          if ((double) this.ai[3] > 0.0)
            this.netUpdate = true;
          this.ai[3] = 0.0f;
        }
      }
      else
      {
        if (this.type == 139)
          this.dontTakeDamage = false;
        if ((double) this.velocity.X < (double) x)
        {
          this.velocity.X += num2;
          if (flag4 && (double) this.velocity.X < 0.0 && (double) x > 0.0)
            this.velocity.X += num2;
        }
        else if ((double) this.velocity.X > (double) x)
        {
          this.velocity.X -= num2;
          if (flag4 && (double) this.velocity.X > 0.0 && (double) x < 0.0)
            this.velocity.X -= num2;
        }
        if ((double) this.velocity.Y < (double) y)
        {
          this.velocity.Y += num2;
          if (flag4 && (double) this.velocity.Y < 0.0 && (double) y > 0.0)
            this.velocity.Y += num2;
        }
        else if ((double) this.velocity.Y > (double) y)
        {
          this.velocity.Y -= num2;
          if (flag4 && (double) this.velocity.Y > 0.0 && (double) y < 0.0)
            this.velocity.Y -= num2;
        }
      }
      if (this.type == 23)
      {
        if ((double) x > 0.0)
        {
          this.spriteDirection = 1;
          this.rotation = (float) Math.Atan2((double) y, (double) x);
        }
        else if ((double) x < 0.0)
        {
          this.spriteDirection = -1;
          this.rotation = (float) Math.Atan2((double) y, (double) x) + 3.14f;
        }
      }
      else if (this.type == 139)
      {
        ++this.localAI[0];
        if ((double) this.ai[3] != 0.0)
          this.localAI[0] += 2f;
        if (this.justHit)
          this.localAI[0] = 0.0f;
        float num17 = 120f;
        if (NPC.IsMechQueenUp)
          num17 = 360f;
        if (Main.netMode != 1 && (double) this.localAI[0] >= (double) num17)
        {
          this.localAI[0] = 0.0f;
          if (targetData.Type != NPCTargetType.None && Collision.CanHit((Entity) this, targetData))
          {
            int damageForProjectiles = this.GetAttackDamage_ForProjectiles(25f, 22f);
            int Type = 84;
            Vector2 vector2_3 = new Vector2(x, y);
            if (NPC.IsMechQueenUp)
            {
              Vector2 v = targetData.Center - this.Center - targetData.Velocity * 20f;
              float num18 = 8f;
              Vector2 unitY = Vector2.UnitY;
              vector2_3 = v.SafeNormalize(unitY) * num18;
            }
            Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_1.X, vector2_1.Y, vector2_3.X, vector2_3.Y, Type, damageForProjectiles, 0.0f, Main.myPlayer);
          }
        }
        int num19 = (int) this.position.X + this.width / 2;
        int num20 = (int) this.position.Y + this.height / 2;
        int num21 = num19 / 16;
        int num22 = num20 / 16;
        if (WorldGen.InWorld(num21, num22) && !WorldGen.SolidTile(num21, num22))
          Lighting.AddLight((int) (((double) this.position.X + (double) (this.width / 2)) / 16.0), (int) (((double) this.position.Y + (double) (this.height / 2)) / 16.0), 0.3f, 0.1f, 0.05f);
        if ((double) x > 0.0)
        {
          this.spriteDirection = 1;
          this.rotation = (float) Math.Atan2((double) y, (double) x);
        }
        if ((double) x < 0.0)
        {
          this.spriteDirection = -1;
          this.rotation = (float) Math.Atan2((double) y, (double) x) + 3.14f;
        }
      }
      else if (this.type == 6 || this.type == 94 || this.type == 173 || this.type == 619)
        this.rotation = (float) Math.Atan2((double) y, (double) x) - 1.57f;
      else if (this.type == 42 || this.type == 176 || this.type == 205 || this.type >= 231 && this.type <= 235)
      {
        if ((double) this.velocity.X > 0.0)
          this.spriteDirection = 1;
        if ((double) this.velocity.X < 0.0)
          this.spriteDirection = -1;
        this.rotation = this.velocity.X * 0.1f;
      }
      else
        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) - 1.57f;
      if (this.type == 6 || this.type == 619 || this.type == 23 || this.type == 42 || this.type == 94 || this.type == 139 || this.type == 173 || this.type == 176 || this.type == 205 || this.type == 210 || this.type == 211 || this.type >= 231 && this.type <= 235)
      {
        float num23 = 0.7f;
        if (this.type == 6 || this.type == 173)
          num23 = 0.4f;
        if (this.collideX)
        {
          this.netUpdate = true;
          this.velocity.X = this.oldVelocity.X * -num23;
          if (this.direction == -1 && (double) this.velocity.X > 0.0 && (double) this.velocity.X < 2.0)
            this.velocity.X = 2f;
          if (this.direction == 1 && (double) this.velocity.X < 0.0 && (double) this.velocity.X > -2.0)
            this.velocity.X = -2f;
        }
        if (this.collideY)
        {
          this.netUpdate = true;
          this.velocity.Y = this.oldVelocity.Y * -num23;
          if ((double) this.velocity.Y > 0.0 && (double) this.velocity.Y < 1.5)
            this.velocity.Y = 2f;
          if ((double) this.velocity.Y < 0.0 && (double) this.velocity.Y > -1.5)
            this.velocity.Y = -2f;
        }
        this.position = this.position + this.netOffset;
        if (this.type == 619)
        {
          int index = Dust.NewDust(this.position, this.width, this.height, 5, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100);
          Main.dust[index].velocity *= 0.5f;
        }
        else if (this.type != 42 && this.type != 139 && this.type != 176 && this.type != 205 && this.type != 210 && this.type != 211 && this.type != 252 && (this.type < 231 || this.type > 235) && Main.rand.Next(20) == 0)
        {
          int Type = 18;
          if (this.type == 173)
            Type = 5;
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float) this.height * 0.25f), this.width, (int) ((double) this.height * 0.5), Type, this.velocity.X, 2f, 75, this.color, this.scale);
          Main.dust[index].velocity.X *= 0.5f;
          Main.dust[index].velocity.Y *= 0.1f;
        }
        this.position = this.position - this.netOffset;
      }
      else if (this.type != 252 && Main.rand.Next(40) == 0)
      {
        int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float) this.height * 0.25f), this.width, (int) ((double) this.height * 0.5), 5, this.velocity.X, 2f);
        Main.dust[index].velocity.X *= 0.5f;
        Main.dust[index].velocity.Y *= 0.1f;
      }
      if ((this.type == 6 || this.type == 94 || this.type == 173 || this.type == 619) && this.wet)
      {
        if ((double) this.velocity.Y > 0.0)
          this.velocity.Y *= 0.95f;
        this.velocity.Y -= 0.3f;
        if ((double) this.velocity.Y < -2.0)
          this.velocity.Y = -2f;
      }
      if (this.type == 205 && this.wet)
      {
        if ((double) this.velocity.Y > 0.0)
          this.velocity.Y *= 0.95f;
        this.velocity.Y -= 0.5f;
        if ((double) this.velocity.Y < -4.0)
          this.velocity.Y = -4f;
        this.TargetClosest();
      }
      if (this.type == 42 || this.type == 176 || this.type >= 231 && this.type <= 235)
      {
        if (this.wet)
        {
          if ((double) this.velocity.Y > 0.0)
            this.velocity.Y *= 0.95f;
          this.velocity.Y -= 0.5f;
          if ((double) this.velocity.Y < -4.0)
            this.velocity.Y = -4f;
          this.TargetClosest();
        }
        if ((double) this.ai[1] == 101.0)
        {
          SoundEngine.PlaySound(SoundID.Item17, this.position);
          this.ai[1] = 0.0f;
        }
        if (Main.netMode != 1)
        {
          this.ai[1] += (float) Main.rand.Next(5, 20) * 0.1f * this.scale;
          if (this.type == 176)
            this.ai[1] += (float) Main.rand.Next(5, 20) * 0.1f * this.scale;
          if (Main.getGoodWorld)
            this.ai[1] += (float) Main.rand.Next(5, 20) * 0.1f * this.scale;
          if (targetData.Type == NPCTargetType.Player)
          {
            Player player = Main.player[this.target];
            if (player != null && (double) player.stealth == 0.0 && player.itemAnimation == 0)
              this.ai[1] = 0.0f;
          }
          if ((double) this.ai[1] >= 130.0)
          {
            if (targetData.Type != NPCTargetType.None && Collision.CanHit((Entity) this, targetData))
            {
              float num24 = 8f;
              Vector2 vector2_4 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) (this.height / 2));
              float num25 = targetData.Center.X - vector2_4.X + (float) Main.rand.Next(-20, 21);
              float num26 = targetData.Center.Y - vector2_4.Y + (float) Main.rand.Next(-20, 21);
              if ((double) num25 < 0.0 && (double) this.velocity.X < 0.0 || (double) num25 > 0.0 && (double) this.velocity.X > 0.0)
              {
                float num27 = (float) Math.Sqrt((double) num25 * (double) num25 + (double) num26 * (double) num26);
                float num28 = num24 / num27;
                float SpeedX = num25 * num28;
                float SpeedY = num26 * num28;
                int Damage = (int) (10.0 * (double) this.scale);
                if (this.type == 176)
                  Damage = (int) (30.0 * (double) this.scale);
                int Type = 55;
                int index = Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_4.X, vector2_4.Y, SpeedX, SpeedY, Type, Damage, 0.0f, Main.myPlayer);
                Main.projectile[index].timeLeft = 300;
                this.ai[1] = 101f;
                this.netUpdate = true;
              }
              else
                this.ai[1] = 0.0f;
            }
            else
              this.ai[1] = 0.0f;
          }
        }
      }
      if (this.type == 139 & flag2)
      {
        if ((double) this.velocity.X > 0.0 && (double) x > 0.0 || (double) this.velocity.X < 0.0 && (double) x < 0.0)
        {
          int num29 = 12;
          if (NPC.IsMechQueenUp)
            num29 = 5;
          if ((double) Math.Abs(this.velocity.X) < (double) num29)
            this.velocity.X *= 1.05f;
        }
        else
          this.velocity.X *= 0.9f;
      }
      if (this.type == 139 && NPC.IsMechQueenUp && (double) this.ai[2] == 0.0)
      {
        Vector2 center = this.GetTargetData().Center;
        Vector2 v = center - this.Center;
        int num30 = 120;
        if ((double) v.Length() < (double) num30)
          this.Center = center - v.SafeNormalize(Vector2.UnitY) * (float) num30;
      }
      if (Main.netMode != 1)
      {
        if (Main.getGoodWorld && this.type == 6 && NPC.AnyNPCs(13))
        {
          if (this.justHit)
            this.localAI[0] = 0.0f;
          ++this.localAI[0];
          if ((double) this.localAI[0] == 60.0)
          {
            if (targetData.Type != NPCTargetType.None && Collision.CanHit((Entity) this, targetData))
              NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) ((double) this.position.X + (double) (this.width / 2) + (double) this.velocity.X), (int) ((double) this.position.Y + (double) (this.height / 2) + (double) this.velocity.Y), 666);
            this.localAI[0] = 0.0f;
          }
        }
        if (this.type == 94 && !flag1)
        {
          if (this.justHit)
            this.localAI[0] = 0.0f;
          ++this.localAI[0];
          if ((double) this.localAI[0] == 180.0)
          {
            if (targetData.Type != NPCTargetType.None && Collision.CanHit((Entity) this, targetData))
              NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) ((double) this.position.X + (double) (this.width / 2) + (double) this.velocity.X), (int) ((double) this.position.Y + (double) (this.height / 2) + (double) this.velocity.Y), 112);
            this.localAI[0] = 0.0f;
          }
        }
        if (this.type == 619 && !flag1)
        {
          if (this.justHit)
            this.localAI[0] += 10f;
          ++this.localAI[0];
          if ((double) this.localAI[0] >= 120.0)
          {
            if (targetData.Type != NPCTargetType.None && Collision.CanHit((Entity) this, targetData))
            {
              if ((double) (this.Center - targetData.Center).Length() < 400.0)
              {
                this.velocity = -this.DirectionTo(new Vector2(targetData.Center.X, targetData.Position.Y)) * 5f;
                this.netUpdate = true;
                this.localAI[0] = 0.0f;
                Vector2 vector2_5 = this.DirectionTo(new Vector2(targetData.Center.X + (float) Main.rand.Next(-100, 101), targetData.Position.Y + (float) Main.rand.Next(-100, 101)));
                Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center, vector2_5 * 15f, 811, 35, 1f, Main.myPlayer);
              }
              else
                this.localAI[0] = 50f;
            }
            else
              this.localAI[0] = 50f;
          }
        }
      }
      if (((!Main.IsItDay() || this.type == 173 || this.type == 619 || this.type == 6 || this.type == 23 || this.type == 42 || this.type == 94 || this.type == 176 || this.type == 205 || this.type == 210 || this.type == 211 || this.type == 252 ? 0 : (this.type < 231 ? 1 : (this.type > 235 ? 1 : 0))) | (flag1 ? 1 : 0)) != 0)
      {
        this.velocity.Y -= num2 * 2f;
        this.EncourageDespawn(10);
      }
      if (((double) this.velocity.X <= 0.0 || (double) this.oldVelocity.X >= 0.0) && ((double) this.velocity.X >= 0.0 || (double) this.oldVelocity.X <= 0.0) && ((double) this.velocity.Y <= 0.0 || (double) this.oldVelocity.Y >= 0.0) && ((double) this.velocity.Y >= 0.0 || (double) this.oldVelocity.Y <= 0.0) || this.justHit)
        return;
      this.netUpdate = true;
    }

    public void CopyInteractions(NPC npc)
    {
      for (int index = 0; index < this.playerInteraction.Length; ++index)
        this.playerInteraction[index] = npc.playerInteraction[index];
      this.lastInteraction = npc.lastInteraction;
    }

    public static int GetEaterOfWorldsSegmentsCount() => !Main.expertMode ? 65 : 70;

    public static int GetEaterOfWorldsSegmentsCountByGamemode(int gamemode)
    {
      GameModeData gameModeData;
      return !Main.RegisteredGameModes.TryGetValue(gamemode, out gameModeData) || !gameModeData.IsExpertMode ? 65 : 70;
    }

    public static int GetBrainOfCthuluCreepersCount() => Main.getGoodWorld ? 40 : 20;

    public static int GetDestroyerSegmentsCount() => Main.getGoodWorld ? 100 : 80;

    public Vector2 GetMechQueenCenter() => NPC.IsMechQueenUp && this.type == (int) sbyte.MaxValue ? this.Center + new Vector2(0.0f, -14f) : this.Center;

    private void AI_006_Worms()
    {
      if (this.type == 117 && (double) this.localAI[1] == 0.0)
      {
        this.localAI[1] = 1f;
        SoundEngine.PlaySound(SoundID.NPCDeath13, this.position);
        int num = 1;
        if ((double) this.velocity.X < 0.0)
          num = -1;
        for (int index = 0; index < 20; ++index)
          Dust.NewDust(new Vector2(this.position.X - 20f, this.position.Y - 20f), this.width + 40, this.height + 40, 5, (float) (num * 8), -1f);
      }
      if (this.type == 454 && (double) this.localAI[3] == 0.0)
      {
        SoundEngine.PlaySound(SoundID.Item119, this.position);
        this.localAI[3] = 1f;
      }
      if (this.type >= 454 && this.type <= 459)
      {
        this.dontTakeDamage = this.alpha > 0;
        if (this.type == 454 || this.type != 454 && Main.npc[(int) this.ai[1]].alpha < 85)
        {
          if (this.dontTakeDamage)
          {
            for (int index1 = 0; index1 < 2; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, Alpha: 100, Scale: 2f);
              Main.dust[index2].noGravity = true;
              Main.dust[index2].noLight = true;
            }
          }
          this.alpha -= 42;
          if (this.alpha < 0)
            this.alpha = 0;
        }
      }
      if (this.type >= 621 && this.type <= 623)
      {
        this.position = this.position + this.netOffset;
        this.dontTakeDamage = this.alpha > 0;
        if (this.type == 621 || this.type != 621 && Main.npc[(int) this.ai[1]].alpha < 85)
        {
          if (this.dontTakeDamage)
          {
            for (int index = 0; index < 2; ++index)
              Dust.NewDust(this.position, this.width, this.height, 5, Alpha: 100);
          }
          this.alpha -= 42;
          if (this.alpha < 0)
            this.alpha = 0;
        }
        if (this.alpha == 0 && Main.rand.Next(5) == 0)
          Dust.NewDust(this.position, this.width, this.height, 5, Alpha: 100);
        this.position = this.position - this.netOffset;
      }
      else if (this.type == 402)
      {
        ++this.ai[2];
        float num = 600f;
        float fromMax = num - 30f;
        if ((double) this.velocity.Length() >= 1.0 && (double) this.ai[2] <= (double) fromMax)
          this.velocity = this.velocity * Utils.Remap(this.ai[2], fromMax * 0.5f, fromMax, 1f, 0.5f);
        if ((double) this.ai[2] == (double) fromMax)
        {
          for (int index3 = 0; index3 < 50; ++index3)
          {
            Vector2 vector2 = Main.rand.NextVector2Circular(8f, 8f);
            if (Main.rand.Next(2) == 0)
            {
              int index4 = Dust.NewDust(this.position, this.width, this.height, 180, Alpha: 100);
              Main.dust[index4].scale += (float) Main.rand.Next(50) * 0.04f;
              Main.dust[index4].noGravity = true;
              Main.dust[index4].velocity = vector2;
              Main.dust[index4].fadeIn = Main.rand.NextFloat() * 1.5f;
            }
            if (Main.rand.Next(2) == 0)
            {
              int index5 = Dust.NewDust(this.position, this.width, this.height, 176, Alpha: 100);
              Main.dust[index5].scale += (float) (0.30000001192092896 + (double) Main.rand.Next(50) * 0.0099999997764825821);
              Main.dust[index5].noGravity = true;
              Main.dust[index5].velocity = vector2;
              Main.dust[index5].fadeIn = Main.rand.NextFloat() * 1.5f;
            }
          }
          if (Main.netMode != 1)
          {
            this.SpawnStardustMark_StardustWorm();
            this.velocity = this.velocity.SafeNormalize(Vector2.Zero) * 6f;
            this.netUpdate = true;
          }
        }
        if ((double) this.ai[2] >= (double) num && Main.netMode != 1)
        {
          this.ai[2] = 0.0f;
          this.netUpdate = true;
        }
      }
      if (Main.netMode != 1 && Main.expertMode)
      {
        if (this.type == 14 && ((double) this.position.Y / 16.0 < Main.worldSurface || Main.getGoodWorld))
        {
          int x = (int) ((double) this.Center.X / 16.0);
          int y = (int) ((double) this.Center.Y / 16.0);
          if (WorldGen.InWorld(x, y) && Main.tile[x, y].wall == (ushort) 0)
          {
            int maxValue = 900;
            if (Main.getGoodWorld)
              maxValue /= 2;
            if (Main.rand.Next(maxValue) == 0)
            {
              this.TargetClosest();
              if (Collision.CanHitLine(this.Center, 1, 1, Main.player[this.target].Center, 1, 1))
                NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) ((double) this.position.X + (double) (this.width / 2) + (double) this.velocity.X), (int) ((double) this.position.Y + (double) (this.height / 2) + (double) this.velocity.Y), 666, ai1: 1f);
            }
          }
        }
        else if (this.type == 13)
        {
          int maxValue = 90 + (int) ((double) this.life / (double) this.lifeMax * 60.0 * 5.0);
          if (Main.rand.Next(maxValue) == 0)
          {
            this.TargetClosest();
            if (Collision.CanHitLine(this.Center, 1, 1, Main.player[this.target].Center, 1, 1))
              NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) ((double) this.position.X + (double) (this.width / 2) + (double) this.velocity.X), (int) ((double) this.position.Y + (double) (this.height / 2) + (double) this.velocity.Y), 666, ai1: 1f);
          }
        }
      }
      bool flag1 = false;
      float num1 = 0.2f;
      switch (this.type)
      {
        case 10:
        case 39:
        case 95:
        case 117:
        case 510:
          flag1 = true;
          break;
        case 513:
          flag1 = !Main.player[this.target].ZoneUndergroundDesert;
          num1 = 0.1f;
          break;
        case 621:
          flag1 = false;
          break;
      }
      if (this.type >= 13 && this.type <= 15)
        this.realLife = -1;
      else if ((double) this.ai[3] > 0.0)
        this.realLife = (int) this.ai[3];
      if (this.target < 0 || this.target == (int) byte.MaxValue || Main.player[this.target].dead || flag1 && (double) Main.player[this.target].position.Y < Main.worldSurface * 16.0)
        this.TargetClosest();
      if (Main.player[this.target].dead || flag1 && (double) Main.player[this.target].position.Y < Main.worldSurface * 16.0)
      {
        this.EncourageDespawn(300);
        if (flag1)
          this.velocity.Y += num1;
      }
      if (this.type == 621 && Main.dayTime)
      {
        this.EncourageDespawn(60);
        ++this.velocity.Y;
      }
      if (Main.netMode != 1)
      {
        if (this.type == 87 && (double) this.ai[0] == 0.0)
        {
          this.ai[3] = (float) this.whoAmI;
          this.realLife = this.whoAmI;
          int index6 = this.whoAmI;
          for (int index7 = 0; index7 < 14; ++index7)
          {
            int Type = 89;
            if (index7 == 1 || index7 == 8)
            {
              Type = 88;
            }
            else
            {
              switch (index7)
              {
                case 11:
                  Type = 90;
                  break;
                case 12:
                  Type = 91;
                  break;
                case 13:
                  Type = 92;
                  break;
              }
            }
            int number = NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) ((double) this.position.X + (double) (this.width / 2)), (int) ((double) this.position.Y + (double) this.height), Type, this.whoAmI);
            Main.npc[number].ai[3] = (float) this.whoAmI;
            Main.npc[number].realLife = this.whoAmI;
            Main.npc[number].ai[1] = (float) index6;
            Main.npc[number].CopyInteractions(this);
            Main.npc[index6].ai[0] = (float) number;
            NetMessage.SendData(23, number: number);
            index6 = number;
          }
        }
        if (this.type == 454 && (double) this.ai[0] == 0.0)
        {
          this.ai[3] = (float) this.whoAmI;
          this.realLife = this.whoAmI;
          int index8 = this.whoAmI;
          for (int index9 = 0; index9 < 30; ++index9)
          {
            int Type = 456;
            if ((index9 - 2) % 4 == 0 && index9 < 26)
            {
              Type = 455;
            }
            else
            {
              switch (index9)
              {
                case 27:
                  Type = 457;
                  break;
                case 28:
                  Type = 458;
                  break;
                case 29:
                  Type = 459;
                  break;
              }
            }
            int number = NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) ((double) this.position.X + (double) (this.width / 2)), (int) ((double) this.position.Y + (double) this.height), Type, this.whoAmI);
            Main.npc[number].ai[3] = (float) this.whoAmI;
            Main.npc[number].realLife = this.whoAmI;
            Main.npc[number].ai[1] = (float) index8;
            Main.npc[number].CopyInteractions(this);
            Main.npc[index8].ai[0] = (float) number;
            NetMessage.SendData(23, number: number);
            index8 = number;
          }
        }
        if (this.type == 513 && (double) this.ai[0] == 0.0)
        {
          this.ai[3] = (float) this.whoAmI;
          this.realLife = this.whoAmI;
          int index10 = this.whoAmI;
          int num2 = Main.rand.Next(6, 10);
          for (int index11 = 0; index11 < num2; ++index11)
          {
            int Type = 514;
            if (index11 == num2 - 1)
              Type = 515;
            int number = NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) ((double) this.position.X + (double) (this.width / 2)), (int) ((double) this.position.Y + (double) this.height), Type, this.whoAmI);
            Main.npc[number].ai[3] = (float) this.whoAmI;
            Main.npc[number].realLife = this.whoAmI;
            Main.npc[number].ai[1] = (float) index10;
            Main.npc[number].CopyInteractions(this);
            Main.npc[index10].ai[0] = (float) number;
            NetMessage.SendData(23, number: number);
            index10 = number;
          }
        }
        if (this.type == 510 && (double) this.ai[0] == 0.0)
        {
          this.ai[3] = (float) this.whoAmI;
          this.realLife = this.whoAmI;
          int index12 = this.whoAmI;
          int num3 = Main.rand.Next(12, 21);
          for (int index13 = 0; index13 < num3; ++index13)
          {
            int Type = 511;
            if (index13 == num3 - 1)
              Type = 512;
            int number = NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) ((double) this.position.X + (double) (this.width / 2)), (int) ((double) this.position.Y + (double) this.height), Type, this.whoAmI);
            Main.npc[number].ai[3] = (float) this.whoAmI;
            Main.npc[number].realLife = this.whoAmI;
            Main.npc[number].ai[1] = (float) index12;
            Main.npc[number].CopyInteractions(this);
            Main.npc[index12].ai[0] = (float) number;
            NetMessage.SendData(23, number: number);
            index12 = number;
          }
        }
        if (this.type == 621 && (double) this.ai[0] == 0.0)
        {
          this.ai[3] = (float) this.whoAmI;
          this.realLife = this.whoAmI;
          int index14 = this.whoAmI;
          int num4 = 16;
          for (int index15 = 0; index15 < num4; ++index15)
          {
            int Type = 622;
            if (index15 == num4 - 1)
              Type = 623;
            int number = NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) ((double) this.position.X + (double) (this.width / 2)), (int) ((double) this.position.Y + (double) this.height), Type, this.whoAmI);
            Main.npc[number].ai[3] = (float) this.whoAmI;
            Main.npc[number].realLife = this.whoAmI;
            Main.npc[number].ai[1] = (float) index14;
            Main.npc[number].CopyInteractions(this);
            Main.npc[index14].ai[0] = (float) number;
            NetMessage.SendData(23, number: number);
            index14 = number;
          }
        }
        else if ((this.type == 7 || this.type == 8 || this.type == 10 || this.type == 11 || this.type == 13 || this.type == 14 || this.type == 39 || this.type == 40 || this.type == 95 || this.type == 96 || this.type == 98 || this.type == 99 || this.type == 117 || this.type == 118) && (double) this.ai[0] == 0.0)
        {
          if (this.type == 7 || this.type == 10 || this.type == 13 || this.type == 39 || this.type == 95 || this.type == 98 || this.type == 117)
          {
            if (this.type < 13 || this.type > 15)
            {
              this.ai[3] = (float) this.whoAmI;
              this.realLife = this.whoAmI;
            }
            this.ai[2] = (float) Main.rand.Next(8, 13);
            if (this.type == 10)
              this.ai[2] = (float) Main.rand.Next(4, 7);
            if (this.type == 13)
              this.ai[2] = (float) NPC.GetEaterOfWorldsSegmentsCount();
            if (this.type == 39)
            {
              this.ai[2] = (float) Main.rand.Next(14, 23);
              if (Main.getGoodWorld)
              {
                this.ai[2] += 3f;
                if (Main.remixWorld)
                  this.ai[2] += 4f;
              }
            }
            if (this.type == 95)
              this.ai[2] = (float) Main.rand.Next(6, 12);
            if (this.type == 98)
              this.ai[2] = (float) Main.rand.Next(20, 26);
            if (this.type == 117)
              this.ai[2] = (float) Main.rand.Next(3, 6);
            if (this.type == 7 && Main.remixWorld)
              this.ai[2] *= 2f;
            this.ai[0] = (float) NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) ((double) this.position.X + (double) (this.width / 2)), (int) ((double) this.position.Y + (double) this.height), this.type + 1, this.whoAmI);
            Main.npc[(int) this.ai[0]].CopyInteractions(this);
          }
          else if ((this.type == 8 || this.type == 11 || this.type == 14 || this.type == 40 || this.type == 96 || this.type == 99 || this.type == 118) && (double) this.ai[2] > 0.0)
          {
            this.ai[0] = (float) NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) ((double) this.position.X + (double) (this.width / 2)), (int) ((double) this.position.Y + (double) this.height), this.type, this.whoAmI);
            Main.npc[(int) this.ai[0]].CopyInteractions(this);
          }
          else
          {
            this.ai[0] = (float) NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) ((double) this.position.X + (double) (this.width / 2)), (int) ((double) this.position.Y + (double) this.height), this.type + 1, this.whoAmI);
            Main.npc[(int) this.ai[0]].CopyInteractions(this);
          }
          if (this.type < 13 || this.type > 15)
          {
            Main.npc[(int) this.ai[0]].ai[3] = this.ai[3];
            Main.npc[(int) this.ai[0]].realLife = this.realLife;
          }
          Main.npc[(int) this.ai[0]].ai[1] = (float) this.whoAmI;
          Main.npc[(int) this.ai[0]].ai[2] = this.ai[2] - 1f;
          this.netUpdate = true;
        }
        if (this.type == 412 && (double) this.ai[0] == 0.0)
        {
          this.ai[3] = (float) this.whoAmI;
          this.realLife = this.whoAmI;
          int index16 = this.whoAmI;
          int num5 = 30;
          for (int index17 = 0; index17 < num5; ++index17)
          {
            int Type = 413;
            if (index17 == num5 - 1)
              Type = 414;
            int number = NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) ((double) this.position.X + (double) (this.width / 2)), (int) ((double) this.position.Y + (double) this.height), Type, this.whoAmI);
            Main.npc[number].ai[3] = (float) this.whoAmI;
            Main.npc[number].realLife = this.whoAmI;
            Main.npc[number].ai[1] = (float) index16;
            Main.npc[number].CopyInteractions(this);
            Main.npc[index16].ai[0] = (float) number;
            NetMessage.SendData(23, number: number);
            index16 = number;
          }
        }
        switch (this.type)
        {
          case 8:
          case 9:
          case 11:
          case 12:
          case 40:
          case 41:
          case 88:
          case 89:
          case 90:
          case 91:
          case 92:
          case 96:
          case 97:
          case 99:
          case 100:
          case 118:
          case 119:
          case 413:
          case 414:
          case 455:
          case 456:
          case 457:
          case 458:
          case 459:
          case 511:
          case 512:
          case 514:
          case 515:
          case 622:
          case 623:
            if (!Main.npc[(int) this.ai[1]].active || Main.npc[(int) this.ai[1]].aiStyle != this.aiStyle)
            {
              this.life = 0;
              this.HitEffect();
              this.checkDead();
              this.active = false;
              NetMessage.SendData(28, number: this.whoAmI, number2: -1f);
              return;
            }
            break;
        }
        switch (this.type)
        {
          case 7:
          case 8:
          case 10:
          case 11:
          case 39:
          case 40:
          case 87:
          case 88:
          case 89:
          case 90:
          case 91:
          case 95:
          case 96:
          case 98:
          case 99:
          case 117:
          case 118:
          case 412:
          case 413:
          case 454:
          case 455:
          case 456:
          case 457:
          case 458:
          case 510:
          case 511:
          case 513:
          case 514:
          case 621:
          case 622:
            if (!Main.npc[(int) this.ai[0]].active || Main.npc[(int) this.ai[0]].aiStyle != this.aiStyle)
            {
              this.life = 0;
              this.HitEffect();
              this.checkDead();
              this.active = false;
              NetMessage.SendData(28, number: this.whoAmI, number2: -1f);
              return;
            }
            break;
        }
        if (this.type == 13 || this.type == 14 || this.type == 15)
        {
          if (!Main.npc[(int) this.ai[1]].active && !Main.npc[(int) this.ai[0]].active)
          {
            this.life = 0;
            this.HitEffect();
            this.checkDead();
            this.active = false;
            NetMessage.SendData(28, number: this.whoAmI, number2: -1f);
            return;
          }
          if (this.type == 13 && !Main.npc[(int) this.ai[0]].active)
          {
            this.life = 0;
            this.HitEffect();
            this.checkDead();
            this.active = false;
            NetMessage.SendData(28, number: this.whoAmI, number2: -1f);
            return;
          }
          if (this.type == 15 && !Main.npc[(int) this.ai[1]].active)
          {
            this.life = 0;
            this.HitEffect();
            this.checkDead();
            this.active = false;
            NetMessage.SendData(28, number: this.whoAmI, number2: -1f);
            return;
          }
          if (this.type == 14 && (!Main.npc[(int) this.ai[1]].active || Main.npc[(int) this.ai[1]].aiStyle != this.aiStyle))
          {
            this.type = 13;
            int whoAmI = this.whoAmI;
            float num6 = (float) this.life / (float) this.lifeMax;
            float num7 = this.ai[0];
            this.SetDefaultsKeepPlayerInteraction(this.type);
            this.life = (int) ((double) this.lifeMax * (double) num6);
            this.ai[0] = num7;
            this.TargetClosest();
            this.netUpdate = true;
            this.whoAmI = whoAmI;
            this.alpha = 0;
          }
          if (this.type == 14 && (!Main.npc[(int) this.ai[0]].active || Main.npc[(int) this.ai[0]].aiStyle != this.aiStyle))
          {
            this.type = 15;
            int whoAmI = this.whoAmI;
            float num8 = (float) this.life / (float) this.lifeMax;
            float num9 = this.ai[1];
            this.SetDefaultsKeepPlayerInteraction(this.type);
            this.life = (int) ((double) this.lifeMax * (double) num8);
            this.ai[1] = num9;
            this.TargetClosest();
            this.netUpdate = true;
            this.whoAmI = whoAmI;
            this.alpha = 0;
          }
        }
        if (!this.active && Main.netMode == 2)
          NetMessage.SendData(28, number: this.whoAmI, number2: -1f);
      }
      int num10 = (int) ((double) this.position.X / 16.0) - 1;
      int num11 = (int) (((double) this.position.X + (double) this.width) / 16.0) + 2;
      int num12 = (int) ((double) this.position.Y / 16.0) - 1;
      int num13 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + 2;
      if (num10 < 0)
        num10 = 0;
      if (num11 > Main.maxTilesX)
        num11 = Main.maxTilesX;
      if (num12 < 0)
        num12 = 0;
      if (num13 > Main.maxTilesY)
        num13 = Main.maxTilesY;
      bool flag2 = false;
      if (this.type >= 87 && this.type <= 92)
        flag2 = true;
      if (this.type >= 454 && this.type <= 459)
        flag2 = true;
      if (this.type >= 621 && this.type <= 623)
        flag2 = true;
      if (this.type >= 412 && this.type <= 414)
        flag2 = true;
      if (this.type == 402)
        flag2 = true;
      if (!flag2)
      {
        for (int i = num10; i < num11; ++i)
        {
          for (int j = num12; j < num13; ++j)
          {
            if (Main.tile[i, j] != null && (Main.tile[i, j].nactive() && (Main.tileSolid[(int) Main.tile[i, j].type] || Main.tileSolidTop[(int) Main.tile[i, j].type] && Main.tile[i, j].frameY == (short) 0) || Main.tile[i, j].liquid > (byte) 64))
            {
              Vector2 vector2;
              vector2.X = (float) (i * 16);
              vector2.Y = (float) (j * 16);
              if ((double) this.position.X + (double) this.width > (double) vector2.X && (double) this.position.X < (double) vector2.X + 16.0 && (double) this.position.Y + (double) this.height > (double) vector2.Y && (double) this.position.Y < (double) vector2.Y + 16.0)
              {
                flag2 = true;
                if (Main.rand.Next(100) == 0 && this.type != 117 && Main.tile[i, j].nactive() && Main.tileSolid[(int) Main.tile[i, j].type])
                  WorldGen.KillTile(i, j, true, true);
              }
            }
          }
        }
      }
      if (!flag2 && (this.type == 7 || this.type == 10 || this.type == 13 || this.type == 39 || this.type == 95 || this.type == 98 || this.type == 117 || this.type == 375 || this.type == 454 || this.type == 510 || this.type == 513 || this.type == 621))
      {
        Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height);
        int num14 = 1000;
        bool flag3 = true;
        for (int index = 0; index < (int) byte.MaxValue; ++index)
        {
          if (Main.player[index].active)
          {
            Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int) Main.player[index].position.X - num14, (int) Main.player[index].position.Y - num14, num14 * 2, num14 * 2);
            if (rectangle1.Intersects(rectangle2))
            {
              flag3 = false;
              break;
            }
          }
        }
        if (flag3)
          flag2 = true;
      }
      if (this.type >= 87 && this.type <= 92 || this.type >= 454 && this.type <= 459 || this.type >= 621 && this.type <= 623)
      {
        if ((double) this.velocity.X < 0.0)
          this.spriteDirection = 1;
        else if ((double) this.velocity.X > 0.0)
          this.spriteDirection = -1;
      }
      if (this.type == 414)
      {
        if (this.justHit)
          this.localAI[3] = 3f;
        if ((double) this.localAI[2] > 0.0)
        {
          this.localAI[2] -= 16f;
          if ((double) this.localAI[2] == 0.0)
            this.localAI[2] = (float) sbyte.MinValue;
        }
        else if ((double) this.localAI[2] < 0.0)
          this.localAI[2] += 16f;
        else if ((double) this.localAI[3] > 0.0)
        {
          this.localAI[2] = 128f;
          --this.localAI[3];
        }
      }
      if (this.type == 412)
      {
        this.position = this.position + this.netOffset;
        Vector2 vector2_1 = this.Center + (this.rotation - 1.57079637f).ToRotationVector2() * 8f;
        Vector2 vector2_2 = this.rotation.ToRotationVector2() * 16f;
        Dust dust1 = Main.dust[Dust.NewDust(vector2_1 + vector2_2, 0, 0, 6, this.velocity.X, this.velocity.Y, 100, Color.Transparent, (float) (1.0 + (double) Main.rand.NextFloat() * 3.0))];
        dust1.noGravity = true;
        dust1.noLight = true;
        dust1.position -= new Vector2(4f);
        dust1.fadeIn = 1f;
        dust1.velocity = Vector2.Zero;
        Dust dust2 = Main.dust[Dust.NewDust(vector2_1 - vector2_2, 0, 0, 6, this.velocity.X, this.velocity.Y, 100, Color.Transparent, (float) (1.0 + (double) Main.rand.NextFloat() * 3.0))];
        dust2.noGravity = true;
        dust2.noLight = true;
        dust2.position -= new Vector2(4f);
        dust2.fadeIn = 1f;
        dust2.velocity = Vector2.Zero;
        this.position = this.position - this.netOffset;
      }
      float num15 = 8f;
      float num16 = 0.07f;
      if (this.type == 95)
      {
        num15 = 5.5f;
        num16 = 0.045f;
      }
      if (this.type == 10)
      {
        num15 = 6f;
        num16 = 0.05f;
      }
      if (this.type == 513)
      {
        num15 = 7f;
        num16 = 0.1f;
      }
      if (this.type == 7)
      {
        num15 = 9f;
        num16 = 0.1f;
      }
      if (this.type == 13)
      {
        num15 = 10f;
        num16 = 0.07f;
        if (Main.expertMode)
        {
          num15 = 12f;
          num16 = 0.15f;
        }
        if (Main.getGoodWorld)
        {
          num15 += 4f;
          num16 += 0.05f;
        }
      }
      if (this.type == 510)
      {
        if (!Main.player[this.target].dead && Main.player[this.target].ZoneSandstorm)
        {
          num15 = 16f;
          num16 = 0.35f;
        }
        else
        {
          num15 = 10f;
          num16 = 0.25f;
        }
      }
      if (this.type == 87)
      {
        num15 = 11f;
        num16 = 0.25f;
      }
      if (this.type == 621)
      {
        num15 = 15f;
        num16 = 0.45f;
      }
      if (this.type == 375)
      {
        num15 = 6f;
        num16 = 0.15f;
      }
      if (this.type == 454)
      {
        num15 = 20f;
        num16 = 0.55f;
      }
      if (this.type == 402)
      {
        num15 = 9f;
        num16 = 0.3f;
      }
      if (this.type == 117 && Main.wofNPCIndex >= 0)
      {
        double num17;
        if ((num17 = (double) ((float) Main.npc[Main.wofNPCIndex].life / (float) Main.npc[Main.wofNPCIndex].lifeMax)) < 0.5)
        {
          ++num15;
          num16 += 0.1f;
        }
        if (num17 < 0.25)
        {
          ++num15;
          num16 += 0.1f;
        }
        if (num17 < 0.1)
        {
          num15 += 2f;
          num16 += 0.1f;
        }
      }
      if (this.type == 39)
      {
        num15 = 9f;
        num16 = 0.1f;
        if (Main.getGoodWorld)
        {
          num15 = 10f;
          num16 = 0.12f;
        }
      }
      Vector2 vector2_3 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
      float num18 = Main.player[this.target].position.X + (float) (Main.player[this.target].width / 2);
      float num19 = Main.player[this.target].position.Y + (float) (Main.player[this.target].height / 2);
      if (this.type == 412)
      {
        num15 = 10f;
        num16 = 0.3f;
        int num20 = -1;
        int num21 = (int) ((double) Main.player[this.target].Center.X / 16.0);
        int num22 = (int) ((double) Main.player[this.target].Center.Y / 16.0);
        for (int i = num21 - 2; i <= num21 + 2; ++i)
        {
          for (int j = num22; j <= num22 + 15; ++j)
          {
            if (WorldGen.SolidTile2(i, j))
            {
              num20 = j;
              break;
            }
          }
          if (num20 > 0)
            break;
        }
        if (num20 > 0)
        {
          num20 *= 16;
          float num23 = (float) (num20 - 800);
          if ((double) Main.player[this.target].position.Y > (double) num23)
          {
            num19 = num23;
            if ((double) Math.Abs(this.Center.X - Main.player[this.target].Center.X) < 500.0)
              num18 = (double) this.velocity.X <= 0.0 ? Main.player[this.target].Center.X - 600f : Main.player[this.target].Center.X + 600f;
          }
        }
        else
        {
          num15 = 14f;
          num16 = 0.5f;
        }
        float num24 = num15 * 1.3f;
        float num25 = num15 * 0.7f;
        float num26 = this.velocity.Length();
        if ((double) num26 > 0.0)
        {
          if ((double) num26 > (double) num24)
          {
            this.velocity.Normalize();
            this.velocity = this.velocity * num24;
          }
          else if ((double) num26 < (double) num25)
          {
            this.velocity.Normalize();
            this.velocity = this.velocity * num25;
          }
        }
        if (num20 > 0)
        {
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].active && Main.npc[index].type == this.type && index != this.whoAmI)
            {
              Vector2 vector2_4 = Main.npc[index].Center - this.Center;
              if ((double) vector2_4.Length() < 400.0)
              {
                vector2_4.Normalize();
                Vector2 vector2_5 = vector2_4 * 1000f;
                num18 -= vector2_5.X;
                num19 -= vector2_5.Y;
              }
            }
          }
        }
        else
        {
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].active && Main.npc[index].type == this.type && index != this.whoAmI)
            {
              Vector2 vector2_6 = Main.npc[index].Center - this.Center;
              if ((double) vector2_6.Length() < 60.0)
              {
                vector2_6.Normalize();
                Vector2 vector2_7 = vector2_6 * 200f;
                num18 -= vector2_7.X;
                num19 -= vector2_7.Y;
              }
            }
          }
        }
      }
      float num27 = (float) ((int) ((double) num18 / 16.0) * 16);
      float num28 = (float) ((int) ((double) num19 / 16.0) * 16);
      vector2_3.X = (float) ((int) ((double) vector2_3.X / 16.0) * 16);
      vector2_3.Y = (float) ((int) ((double) vector2_3.Y / 16.0) * 16);
      float x1 = num27 - vector2_3.X;
      float y1 = num28 - vector2_3.Y;
      if (this.type == 375)
      {
        x1 *= -1f;
        y1 *= -1f;
      }
      float num29 = (float) Math.Sqrt((double) x1 * (double) x1 + (double) y1 * (double) y1);
      if ((double) this.ai[1] > 0.0)
      {
        if ((double) this.ai[1] < (double) Main.npc.Length)
        {
          try
          {
            vector2_3 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            x1 = Main.npc[(int) this.ai[1]].position.X + (float) (Main.npc[(int) this.ai[1]].width / 2) - vector2_3.X;
            y1 = Main.npc[(int) this.ai[1]].position.Y + (float) (Main.npc[(int) this.ai[1]].height / 2) - vector2_3.Y;
          }
          catch
          {
          }
          this.rotation = (float) Math.Atan2((double) y1, (double) x1) + 1.57f;
          float num30 = (float) Math.Sqrt((double) x1 * (double) x1 + (double) y1 * (double) y1);
          int num31 = this.width;
          if (this.type >= 87 && this.type <= 92)
            num31 = 42;
          if (this.type >= 454 && this.type <= 459)
            num31 = 36;
          if (this.type >= 13 && this.type <= 15)
            num31 = (int) ((double) num31 * (double) this.scale);
          if (this.type >= 513 && this.type <= 515)
            num31 -= 6;
          if (this.type >= 412 && this.type <= 414)
            num31 += 6;
          if (this.type >= 621 && this.type <= 623)
            num31 = 24;
          if (Main.getGoodWorld && this.type >= 13 && this.type <= 15)
            num31 = 62;
          float num32 = (num30 - (float) num31) / num30;
          float num33 = x1 * num32;
          float num34 = y1 * num32;
          this.velocity = Vector2.Zero;
          this.position.X += num33;
          this.position.Y += num34;
          if (this.type >= 87 && this.type <= 92)
          {
            if ((double) num33 < 0.0)
              this.spriteDirection = 1;
            else if ((double) num33 > 0.0)
              this.spriteDirection = -1;
          }
          if (this.type >= 454 && this.type <= 459)
          {
            if ((double) num33 < 0.0)
              this.spriteDirection = 1;
            else if ((double) num33 > 0.0)
              this.spriteDirection = -1;
          }
          if (this.type >= 621 && this.type <= 623)
          {
            if ((double) num33 < 0.0)
            {
              this.spriteDirection = 1;
              goto label_450;
            }
            else if ((double) num33 > 0.0)
            {
              this.spriteDirection = -1;
              goto label_450;
            }
            else
              goto label_450;
          }
          else
            goto label_450;
        }
      }
      if (!flag2)
      {
        this.TargetClosest();
        if (this.type == 39 && (double) this.velocity.Y < 0.0)
          this.velocity.Y += 0.08f;
        else
          this.velocity.Y += 0.11f;
        if ((double) this.velocity.Y > (double) num15)
          this.velocity.Y = num15;
        if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num15 * 0.4)
        {
          if ((double) this.velocity.X < 0.0)
            this.velocity.X -= num16 * 1.1f;
          else
            this.velocity.X += num16 * 1.1f;
        }
        else if ((double) this.velocity.Y == (double) num15)
        {
          if ((double) this.velocity.X < (double) x1)
            this.velocity.X += num16;
          else if ((double) this.velocity.X > (double) x1)
            this.velocity.X -= num16;
        }
        else if ((double) this.velocity.Y > 4.0)
        {
          if ((double) this.velocity.X < 0.0)
            this.velocity.X += num16 * 0.9f;
          else
            this.velocity.X -= num16 * 0.9f;
        }
      }
      else
      {
        if (this.type != 621 && this.type != 87 && this.type != 117 && this.type != 454 && this.type != 412 && this.soundDelay == 0)
        {
          float num35 = num29 / 40f;
          if ((double) num35 < 10.0)
            num35 = 10f;
          if ((double) num35 > 20.0)
            num35 = 20f;
          this.soundDelay = (int) num35;
          SoundEngine.PlaySound(15, (int) this.position.X, (int) this.position.Y);
        }
        float num36 = (float) Math.Sqrt((double) x1 * (double) x1 + (double) y1 * (double) y1);
        float num37 = Math.Abs(x1);
        float num38 = Math.Abs(y1);
        float num39 = num15 / num36;
        float num40 = x1 * num39;
        float num41 = y1 * num39;
        bool flag4 = false;
        if ((this.type == 7 || this.type == 13) && (!Main.player[this.target].ZoneCorrupt && !Main.player[this.target].ZoneCrimson || Main.player[this.target].dead))
          flag4 = true;
        if (this.type == 513 && (double) Main.player[this.target].position.Y < Main.worldSurface * 16.0 && !Main.player[this.target].ZoneSandstorm && !Main.player[this.target].ZoneUndergroundDesert || Main.player[this.target].dead)
          flag4 = true;
        if (this.type == 510 && (double) Main.player[this.target].position.Y < Main.worldSurface * 16.0 && !Main.player[this.target].ZoneSandstorm && !Main.player[this.target].ZoneUndergroundDesert || Main.player[this.target].dead)
          flag4 = true;
        if (flag4)
        {
          bool flag5 = true;
          for (int index = 0; index < (int) byte.MaxValue; ++index)
          {
            if (Main.player[index].active && !Main.player[index].dead && Main.player[index].ZoneCorrupt)
              flag5 = false;
          }
          if (flag5)
          {
            if (Main.netMode != 1 && (double) this.position.Y / 16.0 > (Main.rockLayer + (double) Main.maxTilesY) / 2.0)
            {
              this.active = false;
              int num42;
              for (int number = (int) this.ai[0]; number > 0 && number < 200 && Main.npc[number].active && Main.npc[number].aiStyle == this.aiStyle; number = num42)
              {
                num42 = (int) Main.npc[number].ai[0];
                Main.npc[number].active = false;
                this.life = 0;
                if (Main.netMode == 2)
                  NetMessage.SendData(23, number: number);
              }
              if (Main.netMode == 2)
                NetMessage.SendData(23, number: this.whoAmI);
            }
            num40 = 0.0f;
            num41 = num15;
          }
        }
        bool flag6 = false;
        if (this.type == 87)
        {
          if (((double) this.velocity.X > 0.0 && (double) num40 < 0.0 || (double) this.velocity.X < 0.0 && (double) num40 > 0.0 || (double) this.velocity.Y > 0.0 && (double) num41 < 0.0 || (double) this.velocity.Y < 0.0 && (double) num41 > 0.0) && (double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) > (double) num16 / 2.0 && (double) num36 < 300.0)
          {
            flag6 = true;
            if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num15)
              this.velocity = this.velocity * 1.1f;
          }
          if ((double) this.position.Y > (double) Main.player[this.target].position.Y || (double) Main.player[this.target].position.Y / 16.0 > Main.worldSurface || Main.player[this.target].dead)
          {
            flag6 = true;
            if ((double) Math.Abs(this.velocity.X) < (double) num15 / 2.0)
            {
              if ((double) this.velocity.X == 0.0)
                this.velocity.X -= (float) this.direction;
              this.velocity.X *= 1.1f;
            }
            else if ((double) this.velocity.Y > -(double) num15)
              this.velocity.Y -= num16;
          }
        }
        if (this.type == 454 || this.type == 621)
        {
          float num43 = 300f;
          if (this.type == 621)
            num43 = 120f;
          if (((double) this.velocity.X > 0.0 && (double) num40 < 0.0 || (double) this.velocity.X < 0.0 && (double) num40 > 0.0 || (double) this.velocity.Y > 0.0 && (double) num41 < 0.0 || (double) this.velocity.Y < 0.0 && (double) num41 > 0.0) && (double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) > (double) num16 / 2.0 && (double) num36 < (double) num43)
          {
            flag6 = true;
            if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num15)
              this.velocity = this.velocity * 1.1f;
          }
          if ((double) this.position.Y > (double) Main.player[this.target].position.Y || Main.player[this.target].dead)
          {
            flag6 = true;
            if ((double) Math.Abs(this.velocity.X) < (double) num15 / 2.0)
            {
              if ((double) this.velocity.X == 0.0)
                this.velocity.X -= (float) this.direction;
              this.velocity.X *= 1.1f;
            }
            else if ((double) this.velocity.Y > -(double) num15)
              this.velocity.Y -= num16;
          }
        }
        if (!flag6)
        {
          if ((double) this.velocity.X > 0.0 && (double) num40 > 0.0 || (double) this.velocity.X < 0.0 && (double) num40 < 0.0 || (double) this.velocity.Y > 0.0 && (double) num41 > 0.0 || (double) this.velocity.Y < 0.0 && (double) num41 < 0.0)
          {
            if ((double) this.velocity.X < (double) num40)
              this.velocity.X += num16;
            else if ((double) this.velocity.X > (double) num40)
              this.velocity.X -= num16;
            if ((double) this.velocity.Y < (double) num41)
              this.velocity.Y += num16;
            else if ((double) this.velocity.Y > (double) num41)
              this.velocity.Y -= num16;
            if ((double) Math.Abs(num41) < (double) num15 * 0.2 && ((double) this.velocity.X > 0.0 && (double) num40 < 0.0 || (double) this.velocity.X < 0.0 && (double) num40 > 0.0))
            {
              if ((double) this.velocity.Y > 0.0)
                this.velocity.Y += num16 * 2f;
              else
                this.velocity.Y -= num16 * 2f;
            }
            if ((double) Math.Abs(num40) < (double) num15 * 0.2 && ((double) this.velocity.Y > 0.0 && (double) num41 < 0.0 || (double) this.velocity.Y < 0.0 && (double) num41 > 0.0))
            {
              if ((double) this.velocity.X > 0.0)
                this.velocity.X += num16 * 2f;
              else
                this.velocity.X -= num16 * 2f;
            }
          }
          else if ((double) num37 > (double) num38)
          {
            if ((double) this.velocity.X < (double) num40)
              this.velocity.X += num16 * 1.1f;
            else if ((double) this.velocity.X > (double) num40)
              this.velocity.X -= num16 * 1.1f;
            if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num15 * 0.5)
            {
              if ((double) this.velocity.Y > 0.0)
                this.velocity.Y += num16;
              else
                this.velocity.Y -= num16;
            }
          }
          else
          {
            if ((double) this.velocity.Y < (double) num41)
              this.velocity.Y += num16 * 1.1f;
            else if ((double) this.velocity.Y > (double) num41)
              this.velocity.Y -= num16 * 1.1f;
            if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num15 * 0.5)
            {
              if ((double) this.velocity.X > 0.0)
                this.velocity.X += num16;
              else
                this.velocity.X -= num16;
            }
          }
        }
      }
      this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
      if (this.type == 7 || this.type == 10 || this.type == 13 || this.type == 39 || this.type == 95 || this.type == 98 || this.type == 117 || this.type == 510 || this.type == 513 || this.type == 621)
      {
        if (flag2)
        {
          if ((double) this.localAI[0] != 1.0)
            this.netUpdate = true;
          this.localAI[0] = 1f;
        }
        else
        {
          if ((double) this.localAI[0] != 0.0)
            this.netUpdate = true;
          this.localAI[0] = 0.0f;
        }
        if (((double) this.velocity.X > 0.0 && (double) this.oldVelocity.X < 0.0 || (double) this.velocity.X < 0.0 && (double) this.oldVelocity.X > 0.0 || (double) this.velocity.Y > 0.0 && (double) this.oldVelocity.Y < 0.0 || (double) this.velocity.Y < 0.0 && (double) this.oldVelocity.Y > 0.0) && !this.justHit)
          this.netUpdate = true;
      }
      if (this.type == 454)
      {
        float num44 = Vector2.Distance(Main.player[this.target].Center, this.Center);
        int num45 = 0;
        if ((double) Vector2.Normalize(Main.player[this.target].Center - this.Center).ToRotation().AngleTowards(this.velocity.ToRotation(), 1.57079637f) == (double) this.velocity.ToRotation() && (double) num44 < 350.0)
          num45 = 4;
        if ((double) num45 > this.frameCounter)
          ++this.frameCounter;
        if ((double) num45 < this.frameCounter)
          --this.frameCounter;
        if (this.frameCounter < 0.0)
          this.frameCounter = 0.0;
        if (this.frameCounter > 4.0)
          this.frameCounter = 4.0;
      }
label_450:
      if (this.type < 13 || this.type > 15 || this.type != 13 && (this.type == 13 || Main.npc[(int) this.ai[1]].alpha >= 85))
        return;
      if (this.alpha > 0 && this.life > 0)
      {
        for (int index18 = 0; index18 < 2; ++index18)
        {
          int index19 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, Alpha: 100, Scale: 2f);
          Main.dust[index19].noGravity = true;
          Main.dust[index19].noLight = true;
        }
      }
      if ((double) (this.position - this.oldPosition).Length() <= 2.0)
        return;
      this.alpha -= 42;
      if (this.alpha >= 0)
        return;
      this.alpha = 0;
    }

    private void AI_002_FloatingEye()
    {
      if ((this.type == 170 || this.type == 171 || this.type == 180) && Main.rand.Next(1000) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, 9);
      this.noGravity = true;
      if (!this.noTileCollide)
      {
        if (this.collideX)
        {
          this.velocity.X = this.oldVelocity.X * -0.5f;
          if (this.direction == -1 && (double) this.velocity.X > 0.0 && (double) this.velocity.X < 2.0)
            this.velocity.X = 2f;
          if (this.direction == 1 && (double) this.velocity.X < 0.0 && (double) this.velocity.X > -2.0)
            this.velocity.X = -2f;
        }
        if (this.collideY)
        {
          this.velocity.Y = this.oldVelocity.Y * -0.5f;
          if ((double) this.velocity.Y > 0.0 && (double) this.velocity.Y < 1.0)
            this.velocity.Y = 1f;
          if ((double) this.velocity.Y < 0.0 && (double) this.velocity.Y > -1.0)
            this.velocity.Y = -1f;
        }
      }
      if (NPC.DespawnEncouragement_AIStyle2_FloatingEye_IsDiscouraged(this.type, this.position, this.target))
      {
        this.EncourageDespawn(10);
        this.directionY = -1;
        if ((double) this.velocity.Y > 0.0)
          this.direction = 1;
        this.direction = -1;
        if ((double) this.velocity.X > 0.0)
          this.direction = 1;
      }
      else
        this.TargetClosest();
      if (this.type == 170 || this.type == 171 || this.type == 180)
      {
        if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
        {
          if ((double) this.ai[1] > 0.0 && !Collision.SolidCollision(this.position, this.width, this.height))
          {
            this.ai[1] = 0.0f;
            this.ai[0] = 0.0f;
            this.netUpdate = true;
          }
        }
        else if ((double) this.ai[1] == 0.0)
          ++this.ai[0];
        if ((double) this.ai[0] >= 300.0)
        {
          this.ai[1] = 1f;
          this.ai[0] = 0.0f;
          this.netUpdate = true;
        }
        if ((double) this.ai[1] == 0.0)
        {
          this.alpha = 0;
          this.noTileCollide = false;
        }
        else
        {
          this.wet = false;
          this.alpha = 200;
          this.noTileCollide = true;
        }
        this.rotation = this.velocity.Y * 0.1f * (float) this.direction;
        this.TargetClosest();
        if (this.direction == -1 && (double) this.velocity.X > -4.0 && (double) this.position.X > (double) Main.player[this.target].position.X + (double) Main.player[this.target].width)
        {
          this.velocity.X -= 0.08f;
          if ((double) this.velocity.X > 4.0)
            this.velocity.X -= 0.04f;
          else if ((double) this.velocity.X > 0.0)
            this.velocity.X -= 0.2f;
          if ((double) this.velocity.X < -4.0)
            this.velocity.X = -4f;
        }
        else if (this.direction == 1 && (double) this.velocity.X < 4.0 && (double) this.position.X + (double) this.width < (double) Main.player[this.target].position.X)
        {
          this.velocity.X += 0.08f;
          if ((double) this.velocity.X < -4.0)
            this.velocity.X += 0.04f;
          else if ((double) this.velocity.X < 0.0)
            this.velocity.X += 0.2f;
          if ((double) this.velocity.X > 4.0)
            this.velocity.X = 4f;
        }
        if (this.directionY == -1 && (double) this.velocity.Y > -2.5 && (double) this.position.Y > (double) Main.player[this.target].position.Y + (double) Main.player[this.target].height)
        {
          this.velocity.Y -= 0.1f;
          if ((double) this.velocity.Y > 2.5)
            this.velocity.Y -= 0.05f;
          else if ((double) this.velocity.Y > 0.0)
            this.velocity.Y -= 0.15f;
          if ((double) this.velocity.Y < -2.5)
            this.velocity.Y = -2.5f;
        }
        else if (this.directionY == 1 && (double) this.velocity.Y < 2.5 && (double) this.position.Y + (double) this.height < (double) Main.player[this.target].position.Y)
        {
          this.velocity.Y += 0.1f;
          if ((double) this.velocity.Y < -2.5)
            this.velocity.Y += 0.05f;
          else if ((double) this.velocity.Y < 0.0)
            this.velocity.Y += 0.15f;
          if ((double) this.velocity.Y > 2.5)
            this.velocity.Y = 2.5f;
        }
      }
      else if (this.type == 116)
      {
        this.TargetClosest();
        Lighting.AddLight((int) ((double) this.position.X + (double) (this.width / 2)) / 16, (int) ((double) this.position.Y + (double) (this.height / 2)) / 16, 0.3f, 0.2f, 0.1f);
        if (this.direction == -1 && (double) this.velocity.X > -6.0)
        {
          this.velocity.X -= 0.1f;
          if ((double) this.velocity.X > 6.0)
            this.velocity.X -= 0.1f;
          else if ((double) this.velocity.X > 0.0)
            this.velocity.X -= 0.2f;
          if ((double) this.velocity.X < -6.0)
            this.velocity.X = -6f;
        }
        else if (this.direction == 1 && (double) this.velocity.X < 6.0)
        {
          this.velocity.X += 0.1f;
          if ((double) this.velocity.X < -6.0)
            this.velocity.X += 0.1f;
          else if ((double) this.velocity.X < 0.0)
            this.velocity.X += 0.2f;
          if ((double) this.velocity.X > 6.0)
            this.velocity.X = 6f;
        }
        if (this.directionY == -1 && (double) this.velocity.Y > -2.5)
        {
          this.velocity.Y -= 0.04f;
          if ((double) this.velocity.Y > 2.5)
            this.velocity.Y -= 0.05f;
          else if ((double) this.velocity.Y > 0.0)
            this.velocity.Y -= 0.15f;
          if ((double) this.velocity.Y < -2.5)
            this.velocity.Y = -2.5f;
        }
        else if (this.directionY == 1 && (double) this.velocity.Y < 1.5)
        {
          this.velocity.Y += 0.04f;
          if ((double) this.velocity.Y < -2.5)
            this.velocity.Y += 0.05f;
          else if ((double) this.velocity.Y < 0.0)
            this.velocity.Y += 0.15f;
          if ((double) this.velocity.Y > 2.5)
            this.velocity.Y = 2.5f;
        }
        if (Main.rand.Next(40) == 0)
        {
          this.position = this.position + this.netOffset;
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float) this.height * 0.25f), this.width, (int) ((double) this.height * 0.5), 5, this.velocity.X, 2f);
          Main.dust[index].velocity.X *= 0.5f;
          Main.dust[index].velocity.Y *= 0.1f;
          this.position = this.position - this.netOffset;
        }
      }
      else if (this.type == 133)
      {
        if ((double) this.life < (double) this.lifeMax * 0.5)
        {
          if (this.direction == -1 && (double) this.velocity.X > -6.0)
          {
            this.velocity.X -= 0.1f;
            if ((double) this.velocity.X > 6.0)
              this.velocity.X -= 0.1f;
            else if ((double) this.velocity.X > 0.0)
              this.velocity.X += 0.05f;
            if ((double) this.velocity.X < -6.0)
              this.velocity.X = -6f;
          }
          else if (this.direction == 1 && (double) this.velocity.X < 6.0)
          {
            this.velocity.X += 0.1f;
            if ((double) this.velocity.X < -6.0)
              this.velocity.X += 0.1f;
            else if ((double) this.velocity.X < 0.0)
              this.velocity.X -= 0.05f;
            if ((double) this.velocity.X > 6.0)
              this.velocity.X = 6f;
          }
          if (this.directionY == -1 && (double) this.velocity.Y > -4.0)
          {
            this.velocity.Y -= 0.1f;
            if ((double) this.velocity.Y > 4.0)
              this.velocity.Y -= 0.1f;
            else if ((double) this.velocity.Y > 0.0)
              this.velocity.Y += 0.05f;
            if ((double) this.velocity.Y < -4.0)
              this.velocity.Y = -4f;
          }
          else if (this.directionY == 1 && (double) this.velocity.Y < 4.0)
          {
            this.velocity.Y += 0.1f;
            if ((double) this.velocity.Y < -4.0)
              this.velocity.Y += 0.1f;
            else if ((double) this.velocity.Y < 0.0)
              this.velocity.Y -= 0.05f;
            if ((double) this.velocity.Y > 4.0)
              this.velocity.Y = 4f;
          }
        }
        else
        {
          if (this.direction == -1 && (double) this.velocity.X > -4.0)
          {
            this.velocity.X -= 0.1f;
            if ((double) this.velocity.X > 4.0)
              this.velocity.X -= 0.1f;
            else if ((double) this.velocity.X > 0.0)
              this.velocity.X += 0.05f;
            if ((double) this.velocity.X < -4.0)
              this.velocity.X = -4f;
          }
          else if (this.direction == 1 && (double) this.velocity.X < 4.0)
          {
            this.velocity.X += 0.1f;
            if ((double) this.velocity.X < -4.0)
              this.velocity.X += 0.1f;
            else if ((double) this.velocity.X < 0.0)
              this.velocity.X -= 0.05f;
            if ((double) this.velocity.X > 4.0)
              this.velocity.X = 4f;
          }
          if (this.directionY == -1 && (double) this.velocity.Y > -1.5)
          {
            this.velocity.Y -= 0.04f;
            if ((double) this.velocity.Y > 1.5)
              this.velocity.Y -= 0.05f;
            else if ((double) this.velocity.Y > 0.0)
              this.velocity.Y += 0.03f;
            if ((double) this.velocity.Y < -1.5)
              this.velocity.Y = -1.5f;
          }
          else if (this.directionY == 1 && (double) this.velocity.Y < 1.5)
          {
            this.velocity.Y += 0.04f;
            if ((double) this.velocity.Y < -1.5)
              this.velocity.Y += 0.05f;
            else if ((double) this.velocity.Y < 0.0)
              this.velocity.Y -= 0.03f;
            if ((double) this.velocity.Y > 1.5)
              this.velocity.Y = 1.5f;
          }
        }
      }
      else
      {
        float num1 = 4f;
        float num2 = 1.5f;
        float num3 = num1 * (float) (1.0 + (1.0 - (double) this.scale));
        float num4 = num2 * (float) (1.0 + (1.0 - (double) this.scale));
        if (this.direction == -1 && (double) this.velocity.X > -(double) num3)
        {
          this.velocity.X -= 0.1f;
          if ((double) this.velocity.X > (double) num3)
            this.velocity.X -= 0.1f;
          else if ((double) this.velocity.X > 0.0)
            this.velocity.X += 0.05f;
          if ((double) this.velocity.X < -(double) num3)
            this.velocity.X = -num3;
        }
        else if (this.direction == 1 && (double) this.velocity.X < (double) num3)
        {
          this.velocity.X += 0.1f;
          if ((double) this.velocity.X < -(double) num3)
            this.velocity.X += 0.1f;
          else if ((double) this.velocity.X < 0.0)
            this.velocity.X -= 0.05f;
          if ((double) this.velocity.X > (double) num3)
            this.velocity.X = num3;
        }
        if (this.directionY == -1 && (double) this.velocity.Y > -(double) num4)
        {
          this.velocity.Y -= 0.04f;
          if ((double) this.velocity.Y > (double) num4)
            this.velocity.Y -= 0.05f;
          else if ((double) this.velocity.Y > 0.0)
            this.velocity.Y += 0.03f;
          if ((double) this.velocity.Y < -(double) num4)
            this.velocity.Y = -num4;
        }
        else if (this.directionY == 1 && (double) this.velocity.Y < (double) num4)
        {
          this.velocity.Y += 0.04f;
          if ((double) this.velocity.Y < -(double) num4)
            this.velocity.Y += 0.05f;
          else if ((double) this.velocity.Y < 0.0)
            this.velocity.Y -= 0.03f;
          if ((double) this.velocity.Y > (double) num4)
            this.velocity.Y = num4;
        }
      }
      if ((this.type == 2 || this.type == 133 || this.type == 190 || this.type == 191 || this.type == 192 || this.type == 193 || this.type == 194) && Main.rand.Next(40) == 0)
      {
        this.position = this.position + this.netOffset;
        int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float) this.height * 0.25f), this.width, (int) ((double) this.height * 0.5), 5, this.velocity.X, 2f);
        Main.dust[index].velocity.X *= 0.5f;
        Main.dust[index].velocity.Y *= 0.1f;
        this.position = this.position - this.netOffset;
      }
      if (!this.wet || this.type == 170 || this.type == 171 || this.type == 172)
        return;
      if ((double) this.velocity.Y > 0.0)
        this.velocity.Y *= 0.95f;
      this.velocity.Y -= 0.5f;
      if ((double) this.velocity.Y < -4.0)
        this.velocity.Y = -4f;
      this.TargetClosest();
    }

    private void StingerExplosion()
    {
      int num1 = Main.rand.Next(4, 9);
      for (int index1 = 0; index1 < num1; ++index1)
      {
        float num2 = 8f;
        Vector2 vector2 = new Vector2(Main.rand.NextFloat() - 0.5f, Main.rand.NextFloat() - 0.5f);
        vector2.Normalize();
        vector2 *= num2;
        int Damage = (int) (10.0 * (double) this.scale);
        if (this.type == 176)
          Damage = (int) (30.0 * (double) this.scale);
        int Type = 55;
        int index2 = Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X, this.Center.Y, vector2.X, vector2.Y, Type, Damage, 0.0f, Main.myPlayer);
        Main.projectile[index2].timeLeft = 300;
      }
    }

    public static bool DespawnEncouragement_AIStyle2_FloatingEye_IsDiscouraged(
      int npcID,
      Vector2 npcPosition,
      int target = 255)
    {
      if (Main.player[target].ZoneGraveyard || !Main.IsItDay() || (double) npcPosition.Y > Main.worldSurface * 16.0)
        return false;
      return npcID == 2 || npcID == 133 || npcID == 190 || npcID == 191 || npcID == 192 || npcID == 193 || npcID == 194 || npcID == 317 || npcID == 318;
    }

    private bool AI_007_TownEntities_IsInAGoodRestingSpot(
      int tileX,
      int tileY,
      int idealRestX,
      int idealRestY)
    {
      return !Main.dayTime && (double) this.ai[0] == 5.0 ? Math.Abs(tileX - idealRestX) <= 7 && Math.Abs(tileY - idealRestY) <= 7 : (this.type != 361 && this.type != 445 && this.type != 687 || !this.wet) && tileX == idealRestX && tileY == idealRestY;
    }

    private void AI_007_FindGoodRestingSpot(
      int myTileX,
      int myTileY,
      out int floorX,
      out int floorY)
    {
      floorX = this.homeTileX;
      floorY = this.homeTileY;
      if (floorX == -1 || floorY == -1)
        return;
      while (!WorldGen.SolidOrSlopedTile(floorX, floorY) && floorY < Main.maxTilesY - 20)
        ++floorY;
      if (Main.dayTime || (double) this.ai[0] == 5.0 && Math.Abs(myTileX - floorX) < 7 && Math.Abs(myTileY - floorY) < 7)
        return;
      Point point1 = new Point(floorX, floorY);
      Point point2 = new Point(-1, -1);
      int num1 = -1;
      if ((this.type == 638 || this.type == 656 || NPCID.Sets.IsTownSlime[this.type] ? 0 : ((double) this.ai[0] != 5.0 ? 1 : 0)) == 0)
        return;
      int num2 = 7;
      int num3 = 6;
      int num4 = 2;
      int num5 = 1;
      int num6 = 2;
      for (int index1 = point1.X - num2; index1 <= point1.X + num2; index1 += num5)
      {
        for (int index2 = point1.Y + num4; index2 >= point1.Y - num3; index2 -= num6)
        {
          Tile tile = Main.tile[index1, index2];
          if (tile != null && tile.active() && TileID.Sets.CanBeSatOnForNPCs[(int) tile.type] && ((int) tile.frameY % 40 != 0 || index2 + 1 <= point1.Y + num4))
          {
            int num7 = Math.Abs(index1 - point1.X) + Math.Abs(index2 - point1.Y);
            if (num1 == -1 || num7 < num1)
            {
              num1 = num7;
              point2.X = index1;
              point2.Y = index2;
            }
          }
        }
      }
      if (num1 == -1)
        return;
      Tile tile1 = Main.tile[point2.X, point2.Y];
      if (tile1.type == (ushort) 497 || tile1.type == (ushort) 15)
      {
        if ((int) tile1.frameY % 40 != 0)
          --point2.Y;
        point2.Y += 2;
      }
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active && Main.npc[index].aiStyle == 7 && Main.npc[index].townNPC && (double) Main.npc[index].ai[0] == 5.0 && (Main.npc[index].Bottom + Vector2.UnitY * -2f).ToTileCoordinates() == point2)
          return;
      }
      floorX = point2.X;
      floorY = point2.Y;
    }

    private void AI_007_TryForcingSitting(int homeFloorX, int homeFloorY)
    {
      Tile tile = Main.tile[homeFloorX, homeFloorY - 1];
      bool flag = this.type != 638 && this.type != 656 && !NPCID.Sets.IsTownSlime[this.type] && (double) this.ai[0] != 5.0;
      if (flag)
        flag = ((flag ? 1 : 0) & (tile == null || !tile.active() ? 0 : (tile.type == (ushort) 15 ? 1 : (tile.type == (ushort) 497 ? 1 : 0)))) != 0;
      if (flag)
        flag = ((flag ? 1 : 0) & (tile.type != (ushort) 15 ? 1 : (tile.frameY < (short) 1080 ? 1 : (tile.frameY > (short) 1098 ? 1 : 0)))) != 0;
      if (flag)
      {
        Point tileCoordinates = (this.Bottom + Vector2.UnitY * -2f).ToTileCoordinates();
        for (int index = 0; index < 200; ++index)
        {
          if (Main.npc[index].active && Main.npc[index].aiStyle == 7 && Main.npc[index].townNPC && (double) Main.npc[index].ai[0] == 5.0 && (Main.npc[index].Bottom + Vector2.UnitY * -2f).ToTileCoordinates() == tileCoordinates)
          {
            flag = false;
            break;
          }
        }
      }
      if (!flag)
        return;
      this.ai[0] = 5f;
      this.ai[1] = (float) (900 + Main.rand.Next(10800));
      this.direction = tile.frameX == (short) 0 ? -1 : 1;
      this.Bottom = new Vector2((float) (homeFloorX * 16 + 8 + 2 * this.direction), (float) (homeFloorY * 16));
      this.velocity = Vector2.Zero;
      this.localAI[3] = 0.0f;
      this.netUpdate = true;
    }

    public void UpdateHomeTileState(bool homeless, int x, int y)
    {
      int num = x != this.homeTileX || y != this.homeTileY ? 1 : (this.homeless != homeless ? 1 : 0);
      this.homeless = homeless;
      this.homeTileX = x;
      this.homeTileY = y;
      if (num == 0 || Main.netMode == 1)
        return;
      NetMessage.SendData(60, number: this.whoAmI, number2: ((float) this.homeTileX), number3: ((float) this.homeTileY), number4: ((float) WorldGen.TownManager.GetHouseholdStatus(this)));
    }

    public Color GetMagicAuraColor()
    {
      Color magicAuraColor = NPCID.Sets.MagicAuraColor[this.type];
      if (this.type == 160 && this.townNpcVariationIndex == 1)
        magicAuraColor = new Color((int) magicAuraColor.B, (int) magicAuraColor.G, (int) magicAuraColor.R, (int) magicAuraColor.A);
      if (this.type == 20 && this.townNpcVariationIndex == 1)
        magicAuraColor = new Color(90, 20, 210, (int) magicAuraColor.A);
      if (this.type == 663 && this.townNpcVariationIndex == 1)
        magicAuraColor = new Color((int) byte.MaxValue, 0, 77, (int) magicAuraColor.A);
      return magicAuraColor;
    }

    private void AI_007_TownEntities()
    {
      NPC.ShimmeredTownNPCs[this.type] = this.IsShimmerVariant;
      if (this.type == 441 && this.GivenName == "Andrew")
        this.defDefense = 200;
      int maxValue1 = 300;
      if (this.type == 638 || this.type == 656 || NPCID.Sets.IsTownSlime[this.type])
        maxValue1 = 0;
      bool flag1 = Main.raining;
      if (!Main.dayTime)
        flag1 = true;
      if (Main.eclipse)
        flag1 = true;
      if (Main.slimeRain)
        flag1 = true;
      float num1 = 1f;
      this.defense = !Main.masterMode ? (!Main.expertMode ? (this.dryadWard ? this.defDefense + 6 : this.defDefense) : (this.dryadWard ? this.defDefense + 10 : this.defDefense)) : (this.dryadWard ? this.defDefense + 14 : this.defDefense);
      if (this.isLikeATownNPC)
      {
        if (NPC.combatBookWasUsed)
        {
          num1 += 0.2f;
          this.defense += 6;
        }
        if (NPC.combatBookVolumeTwoWasUsed)
        {
          num1 += 0.2f;
          this.defense += 6;
        }
        if (NPC.downedBoss1)
        {
          num1 += 0.1f;
          this.defense += 3;
        }
        if (NPC.downedBoss2)
        {
          num1 += 0.1f;
          this.defense += 3;
        }
        if (NPC.downedBoss3)
        {
          num1 += 0.1f;
          this.defense += 3;
        }
        if (NPC.downedQueenBee)
        {
          num1 += 0.1f;
          this.defense += 3;
        }
        if (Main.hardMode)
        {
          num1 += 0.4f;
          this.defense += 12;
        }
        if (NPC.downedQueenSlime)
        {
          num1 += 0.15f;
          this.defense += 6;
        }
        if (NPC.downedMechBoss1)
        {
          num1 += 0.15f;
          this.defense += 6;
        }
        if (NPC.downedMechBoss2)
        {
          num1 += 0.15f;
          this.defense += 6;
        }
        if (NPC.downedMechBoss3)
        {
          num1 += 0.15f;
          this.defense += 6;
        }
        if (NPC.downedPlantBoss)
        {
          num1 += 0.15f;
          this.defense += 8;
        }
        if (NPC.downedEmpressOfLight)
        {
          num1 += 0.15f;
          this.defense += 8;
        }
        if (NPC.downedGolemBoss)
        {
          num1 += 0.15f;
          this.defense += 8;
        }
        if (NPC.downedAncientCultist)
        {
          num1 += 0.15f;
          this.defense += 8;
        }
      }
      if (this.type == 142 && Main.netMode != 1 && !Main.xMas)
      {
        this.StrikeNPCNoInteraction(9999, 0.0f, 0);
        if (Main.netMode == 2)
          NetMessage.SendData(28, number: this.whoAmI, number2: 9999f);
      }
      if ((this.type == 148 || this.type == 149) && (double) this.localAI[0] == 0.0)
        this.localAI[0] = (float) Main.rand.Next(1, 5);
      if (this.type == 124)
      {
        int projectileSearch = NPC.lazyNPCOwnedProjectileSearchArray[this.whoAmI];
        bool flag2 = false;
        if (Main.projectile.IndexInRange<Projectile>(projectileSearch))
        {
          Projectile projectile = Main.projectile[projectileSearch];
          if (projectile.active && projectile.type == 582 && (double) projectile.ai[1] == (double) this.whoAmI)
            flag2 = true;
        }
        this.localAI[0] = (float) flag2.ToInt();
      }
      if ((this.type == 362 || this.type == 364 || this.type == 602 || this.type == 608) && Main.netMode != 1 && ((double) this.velocity.Y > 4.0 || (double) this.velocity.Y < -4.0 || this.wet))
      {
        int direction = this.direction;
        this.Transform(this.type + 1);
        this.TargetClosest();
        this.direction = direction;
        this.netUpdate = true;
      }
      else
      {
        switch (this.type)
        {
          case 107:
            NPC.savedGoblin = true;
            break;
          case 108:
            NPC.savedWizard = true;
            break;
          case 124:
            NPC.savedMech = true;
            break;
          case 353:
            NPC.savedStylist = true;
            break;
          case 369:
            NPC.savedAngler = true;
            break;
          case 441:
            NPC.savedTaxCollector = true;
            break;
          case 550:
            NPC.savedBartender = true;
            break;
          case 588:
            NPC.savedGolfer = true;
            break;
        }
        this.dontTakeDamage = false;
        if ((double) this.ai[0] == 25.0)
        {
          this.dontTakeDamage = true;
          if ((double) this.ai[1] == 0.0)
            this.velocity.X = 0.0f;
          this.shimmerWet = false;
          this.wet = false;
          this.lavaWet = false;
          this.honeyWet = false;
          if ((double) this.ai[1] == 0.0 && Main.netMode == 1)
            return;
          if ((double) this.ai[1] == 0.0 && (double) this.ai[2] < 1.0)
            this.AI_007_TownEntities_Shimmer_TeleportToLandingSpot();
          if ((double) this.ai[2] > 0.0)
          {
            --this.ai[2];
            if ((double) this.ai[2] > 0.0)
              return;
            this.ai[1] = 1f;
          }
          else
          {
            ++this.ai[1];
            if ((double) this.ai[1] >= 30.0)
            {
              if (!Collision.WetCollision(this.position, this.width, this.height))
                this.shimmerTransparency = MathHelper.Clamp(this.shimmerTransparency - 0.0166666675f, 0.0f, 1f);
              else
                this.ai[1] = 30f;
              this.velocity = new Vector2(0.0f, -4f * this.shimmerTransparency);
            }
            Microsoft.Xna.Framework.Rectangle hitbox = this.Hitbox;
            hitbox.Y += 20;
            hitbox.Height -= 20;
            float num2 = Main.rand.NextFloatDirection();
            Lighting.AddLight(this.Center, Main.hslToRgb((float) (Main.timeForVisualEffects / 360.0 % 1.0), 0.6f, 0.65f).ToVector3() * Utils.Remap(this.ai[1], 30f, 90f, 0.0f, 0.7f));
            if ((double) Main.rand.NextFloat() > (double) Utils.Remap(this.ai[1], 30f, 60f, 1f, 0.5f))
              Dust.NewDustPerfect(Main.rand.NextVector2FromRectangle(hitbox) + Main.rand.NextVector2Circular(8f, 0.0f) + new Vector2(0.0f, 4f), 309, new Vector2?(new Vector2(0.0f, -2f).RotatedBy((double) num2 * 6.2831854820251465 * 0.10999999940395355)), Scale: ((float) (1.7000000476837158 - (double) Math.Abs(num2) * 1.2999999523162842)));
            ParticleOrchestraSettings settings;
            if ((double) this.ai[1] > 60.0 && Main.rand.Next(15) == 0)
            {
              for (int index = 0; index < 3; ++index)
              {
                Vector2 Destination = Main.rand.NextVector2FromRectangle(this.Hitbox);
                settings = new ParticleOrchestraSettings();
                settings.PositionInWorld = Destination;
                settings.MovementVector = this.DirectionTo(Destination).RotatedBy(1.4137166738510132 * (double) (Main.rand.Next(2) * 2 - 1)) * Main.rand.NextFloat();
                ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.ShimmerBlock, settings);
              }
            }
            this.TargetClosest();
            NPCAimedTarget targetData = this.GetTargetData();
            if ((double) this.ai[1] < 75.0 || (double) this.shimmerTransparency > 0.0 || Main.netMode == 1)
              return;
            this.ai[0] = 0.0f;
            this.ai[1] = 0.0f;
            this.ai[2] = 0.0f;
            this.ai[3] = 0.0f;
            Math.Sign(targetData.Center.X - this.Center.X);
            this.velocity = new Vector2(0.0f, -4f);
            this.localAI[0] = 0.0f;
            this.localAI[1] = 0.0f;
            this.localAI[2] = 0.0f;
            this.localAI[3] = 0.0f;
            this.netUpdate = true;
            this.townNpcVariationIndex = this.townNpcVariationIndex == 1 ? 0 : 1;
            NetMessage.SendData(56, number: this.whoAmI);
            this.Teleport(this.position, 12);
            settings = new ParticleOrchestraSettings();
            settings.PositionInWorld = this.Center;
            ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.ShimmerTownNPC, settings);
          }
        }
        else
        {
          if (this.type >= 0 && this.type < (int) NPCID.Count && NPCID.Sets.TownCritter[this.type] && this.target == (int) byte.MaxValue)
          {
            this.TargetClosest();
            if ((double) this.position.X < (double) Main.player[this.target].position.X)
            {
              this.direction = 1;
              this.spriteDirection = this.direction;
            }
            if ((double) this.position.X > (double) Main.player[this.target].position.X)
            {
              this.direction = -1;
              this.spriteDirection = this.direction;
            }
            if (this.homeTileX == -1)
              this.UpdateHomeTileState(this.homeless, (int) (((double) this.position.X + (double) (this.width / 2)) / 16.0), this.homeTileY);
          }
          else if (this.homeTileX == -1 && this.homeTileY == -1 && (double) this.velocity.Y == 0.0 && !this.shimmering)
            this.UpdateHomeTileState(this.homeless, (int) this.Center.X / 16, (int) ((double) this.position.Y + (double) this.height + 4.0) / 16);
          bool flag3 = false;
          int index1 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
          int index2 = (int) ((double) this.position.Y + (double) this.height + 1.0) / 16;
          int floorX;
          int floorY;
          this.AI_007_FindGoodRestingSpot(index1, index2, out floorX, out floorY);
          if (this.type == 441)
            NPC.taxCollector = true;
          this.directionY = -1;
          if (this.direction == 0)
            this.direction = 1;
          if ((double) this.ai[0] != 24.0)
          {
            for (int index3 = 0; index3 < (int) byte.MaxValue; ++index3)
            {
              if (Main.player[index3].active && Main.player[index3].talkNPC == this.whoAmI)
              {
                flag3 = true;
                if ((double) this.ai[0] != 0.0)
                  this.netUpdate = true;
                this.ai[0] = 0.0f;
                this.ai[1] = 300f;
                this.localAI[3] = 100f;
                if ((double) Main.player[index3].position.X + (double) (Main.player[index3].width / 2) < (double) this.position.X + (double) (this.width / 2))
                  this.direction = -1;
                else
                  this.direction = 1;
              }
            }
          }
          if ((double) this.ai[3] == 1.0)
          {
            this.life = -1;
            this.HitEffect();
            this.active = false;
            this.netUpdate = true;
            if (this.type != 37)
              return;
            SoundEngine.PlaySound(15, (int) this.position.X, (int) this.position.Y, 0);
          }
          else
          {
            if (this.type == 37 && Main.netMode != 1)
            {
              this.UpdateHomeTileState(false, Main.dungeonX, Main.dungeonY);
              if (NPC.downedBoss3)
              {
                this.ai[3] = 1f;
                this.netUpdate = true;
              }
            }
            if (this.type == 368)
            {
              this.homeless = true;
              if (!Main.dayTime)
              {
                if (!this.shimmering)
                  this.UpdateHomeTileState(this.homeless, (int) ((double) this.Center.X / 16.0), (int) ((double) this.position.Y + (double) this.height + 2.0) / 16);
                if (!flag3 && (double) this.ai[0] == 0.0)
                {
                  this.ai[0] = 1f;
                  this.ai[1] = 200f;
                }
                flag1 = false;
              }
            }
            if (this.type == 369 && this.homeless && this.wet)
            {
              if ((double) this.Center.X / 16.0 < 380.0 || (double) this.Center.X / 16.0 > (double) (Main.maxTilesX - 380))
              {
                this.UpdateHomeTileState(this.homeless, Main.spawnTileX, Main.spawnTileY);
                this.ai[0] = 1f;
                this.ai[1] = 200f;
              }
              if ((double) this.position.X / 16.0 < 300.0)
                this.direction = 1;
              else if ((double) this.position.X / 16.0 > (double) (Main.maxTilesX - 300))
                this.direction = -1;
            }
            if (!WorldGen.InWorld(index1, index2) || Main.tile[index1, index2] == null)
              return;
            if (!this.homeless && Main.netMode != 1 && this.townNPC && (flag1 || this.type == 37 && Main.tileDungeon[(int) Main.tile[index1, index2].type]) && !this.AI_007_TownEntities_IsInAGoodRestingSpot(index1, index2, floorX, floorY))
            {
              bool flag4 = true;
              for (int index4 = 0; index4 < 2 && flag4; ++index4)
              {
                Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int) ((double) this.position.X + (double) (this.width / 2) - (double) (NPC.sWidth / 2) - (double) NPC.safeRangeX), (int) ((double) this.position.Y + (double) (this.height / 2) - (double) (NPC.sHeight / 2) - (double) NPC.safeRangeY), NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
                if (index4 == 1)
                  rectangle = new Microsoft.Xna.Framework.Rectangle(floorX * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX, floorY * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY, NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
                for (int index5 = 0; index5 < (int) byte.MaxValue; ++index5)
                {
                  if (Main.player[index5].active && new Microsoft.Xna.Framework.Rectangle((int) Main.player[index5].position.X, (int) Main.player[index5].position.Y, Main.player[index5].width, Main.player[index5].height).Intersects(rectangle))
                  {
                    flag4 = false;
                    break;
                  }
                }
              }
              if (flag4)
                this.AI_007_TownEntities_TeleportToHome(floorX, floorY);
            }
            bool flag5 = this.type == 300 || this.type == 447 || this.type == 610;
            bool flag6 = this.type == 616 || this.type == 617 || this.type == 625;
            bool flag7 = this.type == 361 || this.type == 445 || this.type == 687;
            bool flag8 = NPCID.Sets.IsTownSlime[this.type];
            int num3 = NPCID.Sets.IsTownPet[this.type] ? 1 : 0;
            bool canBreathUnderWater = flag6 | flag7;
            bool flag9 = flag6 | flag7;
            bool flag10 = flag8;
            bool flag11 = flag8;
            float num4 = 200f;
            if (NPCID.Sets.DangerDetectRange[this.type] != -1)
              num4 = (float) NPCID.Sets.DangerDetectRange[this.type];
            bool flag12 = false;
            bool flag13 = false;
            float num5 = -1f;
            float num6 = -1f;
            int num7 = 0;
            int index6 = -1;
            int index7 = -1;
            if (!flag6 && Main.netMode != 1 && !flag3)
            {
              for (int index8 = 0; index8 < 200; ++index8)
              {
                if (Main.npc[index8].active && !Main.npc[index8].friendly && Main.npc[index8].damage > 0 && (double) Main.npc[index8].Distance(this.Center) < (double) num4 && (this.type != 453 || !NPCID.Sets.Skeletons[Main.npc[index8].type]) && (Main.npc[index8].noTileCollide || Collision.CanHit(this.Center, 0, 0, Main.npc[index8].Center, 0, 0)))
                {
                  bool flag14 = Main.npc[index8].CanBeChasedBy((object) this);
                  flag12 = true;
                  float num8 = Main.npc[index8].Center.X - this.Center.X;
                  if (this.type == 614)
                  {
                    if ((double) num8 < 0.0 && ((double) num5 == -1.0 || (double) num8 > (double) num5))
                    {
                      num6 = num8;
                      index7 = index8;
                    }
                    if ((double) num8 > 0.0 && ((double) num6 == -1.0 || (double) num8 < (double) num6))
                    {
                      num5 = num8;
                      index6 = index8;
                    }
                  }
                  else
                  {
                    if ((double) num8 < 0.0 && ((double) num5 == -1.0 || (double) num8 > (double) num5))
                    {
                      num5 = num8;
                      if (flag14)
                        index6 = index8;
                    }
                    if ((double) num8 > 0.0 && ((double) num6 == -1.0 || (double) num8 < (double) num6))
                    {
                      num6 = num8;
                      if (flag14)
                        index7 = index8;
                    }
                  }
                }
              }
              if (flag12)
              {
                num7 = (double) num5 != -1.0 ? ((double) num6 != -1.0 ? ((double) num6 < -(double) num5).ToDirectionInt() : -1) : 1;
                float num9 = 0.0f;
                if ((double) num5 != -1.0)
                  num9 = -num5;
                if ((double) num9 == 0.0 || (double) num6 < (double) num9 && (double) num6 > 0.0)
                  num9 = num6;
                if ((double) this.ai[0] == 8.0)
                {
                  if (this.direction == -num7)
                  {
                    this.ai[0] = 1f;
                    this.ai[1] = (float) (300 + Main.rand.Next(300));
                    this.ai[2] = 0.0f;
                    this.localAI[3] = 0.0f;
                    this.netUpdate = true;
                  }
                }
                else if ((double) this.ai[0] != 10.0 && (double) this.ai[0] != 12.0 && (double) this.ai[0] != 13.0 && (double) this.ai[0] != 14.0 && (double) this.ai[0] != 15.0)
                {
                  if (NPCID.Sets.PrettySafe[this.type] != -1 && (double) NPCID.Sets.PrettySafe[this.type] < (double) num9)
                  {
                    flag12 = false;
                    flag13 = NPCID.Sets.AttackType[this.type] > -1;
                  }
                  else if ((double) this.ai[0] != 1.0)
                  {
                    int tileX = (int) (((double) this.position.X + (double) (this.width / 2) + (double) (15 * this.direction)) / 16.0);
                    int tileY = (int) (((double) this.position.Y + (double) this.height - 16.0) / 16.0);
                    bool currentlyDrowning = this.wet && !canBreathUnderWater;
                    bool avoidFalling;
                    this.AI_007_TownEntities_GetWalkPrediction(index1, floorX, canBreathUnderWater, currentlyDrowning, tileX, tileY, out bool _, out avoidFalling);
                    if (!avoidFalling)
                    {
                      if (((double) this.ai[0] == 3.0 || (double) this.ai[0] == 4.0 || (double) this.ai[0] == 16.0 ? 1 : ((double) this.ai[0] == 17.0 ? 1 : 0)) != 0)
                      {
                        NPC npc = Main.npc[(int) this.ai[2]];
                        if (npc.active)
                        {
                          npc.ai[0] = 1f;
                          npc.ai[1] = (float) (120 + Main.rand.Next(120));
                          npc.ai[2] = 0.0f;
                          npc.localAI[3] = 0.0f;
                          npc.direction = -num7;
                          npc.netUpdate = true;
                        }
                      }
                      this.ai[0] = 1f;
                      this.ai[1] = (float) (120 + Main.rand.Next(120));
                      this.ai[2] = 0.0f;
                      this.localAI[3] = 0.0f;
                      this.direction = -num7;
                      this.netUpdate = true;
                    }
                  }
                  else if ((double) this.ai[0] == 1.0 && this.direction != -num7)
                  {
                    this.direction = -num7;
                    this.netUpdate = true;
                  }
                }
              }
            }
            if ((double) this.ai[0] == 0.0)
            {
              if ((double) this.localAI[3] > 0.0)
                --this.localAI[3];
              int petIdleChance = 120;
              if (this.type == 638)
                petIdleChance = 60;
              if (flag7 | flag8 && this.wet)
              {
                this.ai[0] = 1f;
                this.ai[1] = (float) (200 + Main.rand.Next(500, 700));
                this.ai[2] = 0.0f;
                this.localAI[3] = 0.0f;
                this.netUpdate = true;
              }
              else if (flag1 && !flag3 && !NPCID.Sets.TownCritter[this.type])
              {
                if (Main.netMode != 1)
                {
                  if (index1 == floorX && index2 == floorY)
                  {
                    if ((double) this.velocity.X != 0.0)
                      this.netUpdate = true;
                    if ((double) this.velocity.X > 0.10000000149011612)
                      this.velocity.X -= 0.1f;
                    else if ((double) this.velocity.X < -0.10000000149011612)
                    {
                      this.velocity.X += 0.1f;
                    }
                    else
                    {
                      this.velocity.X = 0.0f;
                      this.AI_007_TryForcingSitting(floorX, floorY);
                    }
                    if (NPCID.Sets.IsTownPet[this.type])
                      this.AI_007_AttemptToPlayIdleAnimationsForPets(petIdleChance * 4);
                  }
                  else
                  {
                    if (index1 > floorX)
                      this.direction = -1;
                    else
                      this.direction = 1;
                    this.ai[0] = 1f;
                    this.ai[1] = (float) (200 + Main.rand.Next(200));
                    this.ai[2] = 0.0f;
                    this.localAI[3] = 0.0f;
                    this.netUpdate = true;
                  }
                }
              }
              else
              {
                if (flag5)
                  this.velocity.X *= 0.5f;
                if ((double) this.velocity.X > 0.10000000149011612)
                  this.velocity.X -= 0.1f;
                else if ((double) this.velocity.X < -0.10000000149011612)
                  this.velocity.X += 0.1f;
                else
                  this.velocity.X = 0.0f;
                if (Main.netMode != 1)
                {
                  if (!flag3 && NPCID.Sets.IsTownPet[this.type] && (double) this.ai[1] >= 100.0 && (double) this.ai[1] <= 150.0)
                    this.AI_007_AttemptToPlayIdleAnimationsForPets(petIdleChance);
                  if ((double) this.ai[1] > 0.0)
                    --this.ai[1];
                  bool flag15 = true;
                  int tileX = (int) (((double) this.position.X + (double) (this.width / 2) + (double) (15 * this.direction)) / 16.0);
                  int tileY = (int) (((double) this.position.Y + (double) this.height - 16.0) / 16.0);
                  bool currentlyDrowning = this.wet && !canBreathUnderWater;
                  bool avoidFalling;
                  this.AI_007_TownEntities_GetWalkPrediction(index1, floorX, canBreathUnderWater, currentlyDrowning, tileX, tileY, out bool _, out avoidFalling);
                  if (this.wet && !canBreathUnderWater && this.AI_007_TownEntities_CheckIfWillDrown(Collision.DrownCollision(this.position, this.width, this.height, 1f, true)))
                  {
                    this.ai[0] = 1f;
                    this.ai[1] = (float) (200 + Main.rand.Next(300));
                    this.ai[2] = 0.0f;
                    if (NPCID.Sets.TownCritter[this.type])
                      this.ai[1] += (float) Main.rand.Next(200, 400);
                    this.localAI[3] = 0.0f;
                    this.netUpdate = true;
                  }
                  if (avoidFalling)
                    flag15 = false;
                  if ((double) this.ai[1] <= 0.0)
                  {
                    if (flag15 && !avoidFalling)
                    {
                      this.ai[0] = 1f;
                      this.ai[1] = (float) (200 + Main.rand.Next(300));
                      this.ai[2] = 0.0f;
                      if (NPCID.Sets.TownCritter[this.type])
                        this.ai[1] += (float) Main.rand.Next(200, 400);
                      this.localAI[3] = 0.0f;
                      this.netUpdate = true;
                    }
                    else
                    {
                      this.direction *= -1;
                      this.ai[1] = (float) (60 + Main.rand.Next(120));
                      this.netUpdate = true;
                    }
                  }
                }
              }
              if (Main.netMode != 1 && (!flag1 || this.AI_007_TownEntities_IsInAGoodRestingSpot(index1, index2, floorX, floorY)))
              {
                if (index1 < floorX - 25 || index1 > floorX + 25)
                {
                  if ((double) this.localAI[3] == 0.0)
                  {
                    if (index1 < floorX - 50 && this.direction == -1)
                    {
                      this.direction = 1;
                      this.netUpdate = true;
                    }
                    else if (index1 > floorX + 50 && this.direction == 1)
                    {
                      this.direction = -1;
                      this.netUpdate = true;
                    }
                  }
                }
                else if (Main.rand.Next(80) == 0 && (double) this.localAI[3] == 0.0)
                {
                  this.localAI[3] = 200f;
                  this.direction *= -1;
                  this.netUpdate = true;
                }
              }
            }
            else if ((double) this.ai[0] == 1.0)
            {
              if (Main.netMode != 1 & flag1 && this.AI_007_TownEntities_IsInAGoodRestingSpot(index1, index2, floorX, floorY) && !NPCID.Sets.TownCritter[this.type])
              {
                this.ai[0] = 0.0f;
                this.ai[1] = (float) (200 + Main.rand.Next(200));
                this.localAI[3] = 60f;
                this.netUpdate = true;
              }
              else
              {
                bool currentlyDrowning = !canBreathUnderWater && Collision.DrownCollision(this.position, this.width, this.height, 1f, true);
                if (!currentlyDrowning)
                {
                  if (Main.netMode != 1 && !this.homeless && !Main.tileDungeon[(int) Main.tile[index1, index2].type] && (index1 < floorX - 35 || index1 > floorX + 35))
                  {
                    if ((double) this.position.X < (double) (floorX * 16) && this.direction == -1)
                      this.ai[1] -= 5f;
                    else if ((double) this.position.X > (double) (floorX * 16) && this.direction == 1)
                      this.ai[1] -= 5f;
                  }
                  --this.ai[1];
                }
                if ((double) this.ai[1] <= 0.0)
                {
                  this.ai[0] = 0.0f;
                  this.ai[1] = (float) (300 + Main.rand.Next(300));
                  this.ai[2] = 0.0f;
                  if (NPCID.Sets.TownCritter[this.type])
                    this.ai[1] -= (float) Main.rand.Next(100);
                  else
                    this.ai[1] += (float) Main.rand.Next(900);
                  this.localAI[3] = 60f;
                  this.netUpdate = true;
                }
                if (this.closeDoor && (((double) this.position.X + (double) (this.width / 2)) / 16.0 > (double) (this.doorX + 2) || ((double) this.position.X + (double) (this.width / 2)) / 16.0 < (double) (this.doorX - 2)))
                {
                  Tile tileSafely = Framing.GetTileSafely(this.doorX, this.doorY);
                  if (tileSafely.type == (ushort) 11)
                  {
                    if (WorldGen.CloseDoor(this.doorX, this.doorY))
                    {
                      this.closeDoor = false;
                      NetMessage.SendData(19, number: 1, number2: ((float) this.doorX), number3: ((float) this.doorY), number4: ((float) this.direction));
                    }
                    if (((double) this.position.X + (double) (this.width / 2)) / 16.0 > (double) (this.doorX + 4) || ((double) this.position.X + (double) (this.width / 2)) / 16.0 < (double) (this.doorX - 4) || ((double) this.position.Y + (double) (this.height / 2)) / 16.0 > (double) (this.doorY + 4) || ((double) this.position.Y + (double) (this.height / 2)) / 16.0 < (double) (this.doorY - 4))
                      this.closeDoor = false;
                  }
                  else if (tileSafely.type == (ushort) 389)
                  {
                    if (WorldGen.ShiftTallGate(this.doorX, this.doorY, true))
                    {
                      this.closeDoor = false;
                      NetMessage.SendData(19, number: 5, number2: ((float) this.doorX), number3: ((float) this.doorY));
                    }
                    if (((double) this.position.X + (double) (this.width / 2)) / 16.0 > (double) (this.doorX + 4) || ((double) this.position.X + (double) (this.width / 2)) / 16.0 < (double) (this.doorX - 4) || ((double) this.position.Y + (double) (this.height / 2)) / 16.0 > (double) (this.doorY + 4) || ((double) this.position.Y + (double) (this.height / 2)) / 16.0 < (double) (this.doorY - 4))
                      this.closeDoor = false;
                  }
                  else
                    this.closeDoor = false;
                }
                float num10 = 1f;
                float num11 = 0.07f;
                if (this.type == 614 & flag12)
                {
                  num10 = 1.5f;
                  num11 = 0.1f;
                }
                else if (this.type == 299 || this.type == 539 || this.type == 538 || this.type >= 639 && this.type <= 645)
                  num10 = 1.5f;
                else if (flag6)
                {
                  if (this.wet)
                  {
                    num11 = 1f;
                    num10 = 2f;
                  }
                  else
                  {
                    num11 = 0.07f;
                    num10 = 0.5f;
                  }
                }
                if (this.type == 625)
                {
                  if (this.wet)
                  {
                    num11 = 1f;
                    num10 = 2.5f;
                  }
                  else
                  {
                    num11 = 0.07f;
                    num10 = 0.2f;
                  }
                }
                if (flag5)
                {
                  num10 = 2f;
                  num11 = 1f;
                }
                if (this.friendly && flag12 | currentlyDrowning)
                {
                  num10 = 1.5f + (float) (1.0 - (double) this.life / (double) this.lifeMax) * 0.9f;
                  num11 = 0.1f;
                }
                if (flag10 && this.wet)
                {
                  num10 = 2f;
                  num11 = 0.2f;
                }
                if (flag7 && this.wet)
                {
                  if ((double) Math.Abs(this.velocity.X) < 0.05000000074505806 && (double) Math.Abs(this.velocity.Y) < 0.05000000074505806)
                    this.velocity.X += num10 * 10f * (float) this.direction;
                  else
                    this.velocity.X *= 0.9f;
                }
                else if ((double) this.velocity.X < -(double) num10 || (double) this.velocity.X > (double) num10)
                {
                  if ((double) this.velocity.Y == 0.0)
                    this.velocity = this.velocity * 0.8f;
                }
                else if ((double) this.velocity.X < (double) num10 && this.direction == 1)
                {
                  this.velocity.X += num11;
                  if ((double) this.velocity.X > (double) num10)
                    this.velocity.X = num10;
                }
                else if ((double) this.velocity.X > -(double) num10 && this.direction == -1)
                {
                  this.velocity.X -= num11;
                  if ((double) this.velocity.X > (double) num10)
                    this.velocity.X = num10;
                }
                bool holdsMatching = true;
                if ((double) (this.homeTileY * 16 - 32) > (double) this.position.Y)
                  holdsMatching = false;
                if (!holdsMatching && (double) this.velocity.Y == 0.0)
                  Collision.StepDown(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY);
                if ((double) this.velocity.Y >= 0.0)
                  Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, holdsMatching: holdsMatching, specialChecksMode: 1);
                if ((double) this.velocity.Y == 0.0)
                {
                  int num12 = (int) (((double) this.position.X + (double) (this.width / 2) + (double) (15 * this.direction)) / 16.0);
                  int num13 = (int) (((double) this.position.Y + (double) this.height - 16.0) / 16.0);
                  int num14 = 180;
                  bool keepwalking;
                  bool avoidFalling;
                  this.AI_007_TownEntities_GetWalkPrediction(index1, floorX, canBreathUnderWater, currentlyDrowning, num12, num13, out keepwalking, out avoidFalling);
                  bool flag16 = false;
                  bool flag17 = false;
                  if (this.wet && !canBreathUnderWater && this.townNPC && (flag17 = this.AI_007_TownEntities_CheckIfWillDrown(currentlyDrowning)) && (double) this.localAI[3] <= 0.0)
                  {
                    avoidFalling = true;
                    this.localAI[3] = (float) num14;
                    int num15 = 0;
                    for (int index9 = 0; index9 <= 10 && Framing.GetTileSafely(num12 - this.direction, num13 - index9).liquid != (byte) 0; ++index9)
                      ++num15;
                    float num16 = 0.3f;
                    float num17 = (float) Math.Sqrt((double) (num15 * 16 + 16) * 2.0 * (double) num16);
                    if ((double) num17 > 26.0)
                      num17 = 26f;
                    this.velocity.Y = -num17;
                    this.localAI[3] = this.position.X;
                    flag16 = true;
                  }
                  if (avoidFalling && !flag16)
                  {
                    int num18 = (int) (((double) this.position.X + (double) (this.width / 2)) / 16.0);
                    int num19 = 0;
                    for (int index10 = -1; index10 <= 1; ++index10)
                    {
                      Tile tileSafely = Framing.GetTileSafely(num18 + index10, num13 + 1);
                      if (tileSafely.nactive() && Main.tileSolid[(int) tileSafely.type])
                        ++num19;
                    }
                    if (num19 <= 2)
                    {
                      if ((double) this.velocity.X != 0.0)
                        this.netUpdate = true;
                      keepwalking = avoidFalling = false;
                      this.ai[0] = 0.0f;
                      this.ai[1] = (float) (50 + Main.rand.Next(50));
                      this.ai[2] = 0.0f;
                      this.localAI[3] = 40f;
                    }
                  }
                  if ((double) this.position.X == (double) this.localAI[3] && !flag16)
                  {
                    this.direction *= -1;
                    this.netUpdate = true;
                    this.localAI[3] = (float) num14;
                  }
                  if (currentlyDrowning && !flag16)
                  {
                    if ((double) this.localAI[3] > (double) num14)
                      this.localAI[3] = (float) num14;
                    if ((double) this.localAI[3] > 0.0)
                      --this.localAI[3];
                  }
                  else
                    this.localAI[3] = -1f;
                  Tile tileSafely1 = Framing.GetTileSafely(num12, num13);
                  Tile tileSafely2 = Framing.GetTileSafely(num12, num13 - 1);
                  Tile tileSafely3 = Framing.GetTileSafely(num12, num13 - 2);
                  bool flag18 = this.height / 16 < 3;
                  if (this.townNPC && tileSafely3.nactive() && (tileSafely3.type == (ushort) 10 || tileSafely3.type == (ushort) 388) && Main.rand.Next(10) == 0 | flag1)
                  {
                    if (Main.netMode != 1)
                    {
                      if (WorldGen.OpenDoor(num12, num13 - 2, this.direction))
                      {
                        this.closeDoor = true;
                        this.doorX = num12;
                        this.doorY = num13 - 2;
                        NetMessage.SendData(19, number2: ((float) num12), number3: ((float) (num13 - 2)), number4: ((float) this.direction));
                        this.netUpdate = true;
                        this.ai[1] += 80f;
                      }
                      else if (WorldGen.OpenDoor(num12, num13 - 2, -this.direction))
                      {
                        this.closeDoor = true;
                        this.doorX = num12;
                        this.doorY = num13 - 2;
                        NetMessage.SendData(19, number2: ((float) num12), number3: ((float) (num13 - 2)), number4: ((float) -this.direction));
                        this.netUpdate = true;
                        this.ai[1] += 80f;
                      }
                      else if (WorldGen.ShiftTallGate(num12, num13 - 2, false))
                      {
                        this.closeDoor = true;
                        this.doorX = num12;
                        this.doorY = num13 - 2;
                        NetMessage.SendData(19, number: 4, number2: ((float) num12), number3: ((float) (num13 - 2)));
                        this.netUpdate = true;
                        this.ai[1] += 80f;
                      }
                      else
                      {
                        this.direction *= -1;
                        this.netUpdate = true;
                      }
                    }
                  }
                  else
                  {
                    if ((double) this.velocity.X < 0.0 && this.direction == -1 || (double) this.velocity.X > 0.0 && this.direction == 1)
                    {
                      bool flag19 = false;
                      bool flag20 = false;
                      if (tileSafely3.nactive() && Main.tileSolid[(int) tileSafely3.type] && !Main.tileSolidTop[(int) tileSafely3.type] && (!flag18 || tileSafely2.nactive() && Main.tileSolid[(int) tileSafely2.type] && !Main.tileSolidTop[(int) tileSafely2.type]))
                      {
                        if (!Collision.SolidTilesVersatile(num12 - this.direction * 2, num12 - this.direction, num13 - 5, num13 - 1) && !Collision.SolidTiles(num12, num12, num13 - 5, num13 - 3))
                        {
                          this.velocity.Y = -6f;
                          this.netUpdate = true;
                        }
                        else if (flag5)
                        {
                          if (WorldGen.SolidTile((int) ((double) this.Center.X / 16.0) + this.direction, (int) ((double) this.Center.Y / 16.0)))
                          {
                            this.direction *= -1;
                            this.velocity.X *= 0.0f;
                            this.netUpdate = true;
                          }
                        }
                        else if (flag12)
                        {
                          flag20 = true;
                          flag19 = true;
                        }
                        else if (!flag17)
                          flag19 = true;
                      }
                      else if (tileSafely2.nactive() && Main.tileSolid[(int) tileSafely2.type] && !Main.tileSolidTop[(int) tileSafely2.type])
                      {
                        if (!Collision.SolidTilesVersatile(num12 - this.direction * 2, num12 - this.direction, num13 - 4, num13 - 1) && !Collision.SolidTiles(num12, num12, num13 - 4, num13 - 2))
                        {
                          this.velocity.Y = -5f;
                          this.netUpdate = true;
                        }
                        else if (flag12)
                        {
                          flag20 = true;
                          flag19 = true;
                        }
                        else
                          flag19 = true;
                      }
                      else if ((double) this.position.Y + (double) this.height - (double) (num13 * 16) > 20.0 && tileSafely1.nactive() && Main.tileSolid[(int) tileSafely1.type] && !tileSafely1.topSlope())
                      {
                        if (!Collision.SolidTilesVersatile(num12 - this.direction * 2, num12, num13 - 3, num13 - 1))
                        {
                          this.velocity.Y = -4.4f;
                          this.netUpdate = true;
                        }
                        else if (flag12)
                        {
                          flag20 = true;
                          flag19 = true;
                        }
                        else
                          flag19 = true;
                      }
                      else if (avoidFalling)
                      {
                        if (!flag17)
                          flag19 = true;
                        if (flag12)
                          flag20 = true;
                      }
                      else if (flag11 && !Collision.SolidTilesVersatile(num12 - this.direction * 2, num12 - this.direction, num13 - 2, num13 - 1))
                      {
                        this.velocity.Y = -5f;
                        this.netUpdate = true;
                      }
                      if (flag20)
                      {
                        keepwalking = false;
                        this.velocity.X = 0.0f;
                        this.ai[0] = 8f;
                        this.ai[1] = 240f;
                        this.netUpdate = true;
                      }
                      if (flag19)
                      {
                        this.direction *= -1;
                        this.velocity.X *= -1f;
                        this.netUpdate = true;
                      }
                      if (keepwalking)
                      {
                        this.ai[1] = 90f;
                        this.netUpdate = true;
                      }
                      if ((double) this.velocity.Y < 0.0)
                        this.localAI[3] = this.position.X;
                    }
                    if ((double) this.velocity.Y < 0.0 && this.wet)
                      this.velocity.Y *= 1.2f;
                    if ((double) this.velocity.Y < 0.0 && NPCID.Sets.TownCritter[this.type] && !flag5)
                      this.velocity.Y *= 1.2f;
                  }
                }
                else if (flag11 && !this.wet)
                {
                  int num20 = (int) ((double) this.Center.X / 16.0);
                  int num21 = (int) (((double) this.position.Y + (double) this.height - 16.0) / 16.0);
                  int num22 = 0;
                  for (int index11 = -1; index11 <= 1; ++index11)
                  {
                    for (int index12 = 1; index12 <= 6; ++index12)
                    {
                      Tile tileSafely = Framing.GetTileSafely(num20 + index11, num21 + index12);
                      if (tileSafely.liquid > (byte) 0 || tileSafely.nactive() && Main.tileSolid[(int) tileSafely.type])
                        ++num22;
                    }
                  }
                  if (num22 <= 2)
                  {
                    if ((double) this.velocity.X != 0.0)
                      this.netUpdate = true;
                    this.velocity.X *= 0.2f;
                    this.ai[0] = 0.0f;
                    this.ai[1] = (float) (50 + Main.rand.Next(50));
                    this.ai[2] = 0.0f;
                    this.localAI[3] = 40f;
                  }
                }
              }
            }
            else if ((double) this.ai[0] == 2.0 || (double) this.ai[0] == 11.0)
            {
              if (Main.netMode != 1)
              {
                --this.localAI[3];
                if (Main.rand.Next(60) == 0 && (double) this.localAI[3] == 0.0)
                {
                  this.localAI[3] = 60f;
                  this.direction *= -1;
                  this.netUpdate = true;
                }
              }
              --this.ai[1];
              this.velocity.X *= 0.8f;
              if ((double) this.ai[1] <= 0.0)
              {
                this.localAI[3] = 40f;
                this.ai[0] = 0.0f;
                this.ai[1] = (float) (60 + Main.rand.Next(60));
                this.netUpdate = true;
              }
            }
            else if ((double) this.ai[0] == 3.0 || (double) this.ai[0] == 4.0 || (double) this.ai[0] == 5.0 || (double) this.ai[0] == 8.0 || (double) this.ai[0] == 9.0 || (double) this.ai[0] == 16.0 || (double) this.ai[0] == 17.0 || (double) this.ai[0] == 20.0 || (double) this.ai[0] == 21.0 || (double) this.ai[0] == 22.0 || (double) this.ai[0] == 23.0)
            {
              this.velocity.X *= 0.8f;
              --this.ai[1];
              if ((double) this.ai[0] == 8.0 && (double) this.ai[1] < 60.0 & flag12)
              {
                this.ai[1] = 180f;
                this.netUpdate = true;
              }
              if ((double) this.ai[0] == 5.0)
              {
                Point tileCoordinates = (this.Bottom + Vector2.UnitY * -2f).ToTileCoordinates();
                Tile tile = Main.tile[tileCoordinates.X, tileCoordinates.Y];
                if (tile.type != (ushort) 15 && tile.type != (ushort) 497)
                  this.ai[1] = 0.0f;
                else
                  Main.sittingManager.AddNPC(this.whoAmI, tileCoordinates);
              }
              if ((double) this.ai[1] <= 0.0)
              {
                this.ai[0] = 0.0f;
                this.ai[1] = (float) (60 + Main.rand.Next(60));
                this.ai[2] = 0.0f;
                this.localAI[3] = (float) (30 + Main.rand.Next(60));
                this.netUpdate = true;
              }
            }
            else if ((double) this.ai[0] == 6.0 || (double) this.ai[0] == 7.0 || (double) this.ai[0] == 18.0 || (double) this.ai[0] == 19.0)
            {
              if ((double) this.ai[0] == 18.0 && ((double) this.localAI[3] < 1.0 || (double) this.localAI[3] > 2.0))
                this.localAI[3] = 2f;
              this.velocity.X *= 0.8f;
              --this.ai[1];
              int index13 = (int) this.ai[2];
              if (index13 < 0 || index13 > (int) byte.MaxValue || !Main.player[index13].CanBeTalkedTo || (double) Main.player[index13].Distance(this.Center) > 200.0 || !Collision.CanHitLine(this.Top, 0, 0, Main.player[index13].Top, 0, 0))
                this.ai[1] = 0.0f;
              if ((double) this.ai[1] > 0.0)
              {
                int num23 = (double) this.Center.X < (double) Main.player[index13].Center.X ? 1 : -1;
                if (num23 != this.direction)
                  this.netUpdate = true;
                this.direction = num23;
              }
              else
              {
                this.ai[0] = 0.0f;
                this.ai[1] = (float) (60 + Main.rand.Next(60));
                this.ai[2] = 0.0f;
                this.localAI[3] = (float) (30 + Main.rand.Next(60));
                this.netUpdate = true;
              }
            }
            else if ((double) this.ai[0] == 10.0)
            {
              int Type = 0;
              int num24 = 0;
              float KnockBack = 0.0f;
              float num25 = 0.0f;
              int num26 = 0;
              int num27 = 0;
              int maxValue2 = 0;
              float num28 = 0.0f;
              float num29 = (float) NPCID.Sets.DangerDetectRange[this.type];
              float max = 0.0f;
              if ((double) NPCID.Sets.AttackTime[this.type] == (double) this.ai[1])
              {
                this.frameCounter = 0.0;
                this.localAI[3] = 0.0f;
              }
              if (this.type == 38)
              {
                Type = 30;
                num25 = 6f;
                num24 = 20;
                num26 = 10;
                num27 = 180;
                maxValue2 = 120;
                num28 = 16f;
                KnockBack = 7f;
              }
              else if (this.type == 633)
              {
                Type = 880;
                num25 = 24f;
                num24 = 15;
                num26 = 1;
                num28 = 0.0f;
                KnockBack = 7f;
                num27 = 15;
                maxValue2 = 10;
                if (this.ShouldBestiaryGirlBeLycantrope())
                {
                  Type = 929;
                  num24 = (int) ((double) num24 * 1.5);
                }
              }
              else if (this.type == 550)
              {
                Type = 669;
                num25 = 6f;
                num24 = 24;
                num26 = 10;
                num27 = 120;
                maxValue2 = 60;
                num28 = 16f;
                KnockBack = 9f;
              }
              else if (this.type == 588)
              {
                Type = 721;
                num25 = 8f;
                num24 = 15;
                num26 = 5;
                num27 = 20;
                maxValue2 = 10;
                num28 = 16f;
                KnockBack = 9f;
              }
              else if (this.type == 208)
              {
                Type = 588;
                num25 = 6f;
                num24 = 30;
                num26 = 10;
                num27 = 60;
                maxValue2 = 120;
                num28 = 16f;
                KnockBack = 6f;
              }
              else if (this.type == 17)
              {
                Type = 48;
                num25 = 9f;
                num24 = 12;
                num26 = 10;
                num27 = 60;
                maxValue2 = 60;
                num28 = 16f;
                KnockBack = 1.5f;
              }
              else if (this.type == 369)
              {
                Type = 520;
                num25 = 12f;
                num24 = 10;
                num26 = 10;
                num27 = 0;
                maxValue2 = 1;
                num28 = 16f;
                KnockBack = 3f;
              }
              else if (this.type == 453)
              {
                Type = 21;
                num25 = 14f;
                num24 = 14;
                num26 = 10;
                num27 = 0;
                maxValue2 = 1;
                num28 = 16f;
                KnockBack = 3f;
              }
              else if (this.type == 107)
              {
                Type = 24;
                num25 = 5f;
                num24 = 15;
                num26 = 10;
                num27 = 60;
                maxValue2 = 60;
                num28 = 16f;
                KnockBack = 1f;
              }
              else if (this.type == 124)
              {
                Type = 582;
                num25 = 10f;
                num24 = 11;
                num26 = 1;
                num27 = 30;
                maxValue2 = 30;
                KnockBack = 3.5f;
              }
              else if (this.type == 18)
              {
                Type = 583;
                num25 = 8f;
                num24 = 8;
                num26 = 1;
                num27 = 15;
                maxValue2 = 10;
                KnockBack = 2f;
                num28 = 10f;
              }
              else if (this.type == 142)
              {
                Type = 589;
                num25 = 7f;
                num24 = 22;
                num26 = 1;
                num27 = 10;
                maxValue2 = 1;
                KnockBack = 2f;
                num28 = 10f;
              }
              if (Main.expertMode)
                num24 = (int) ((double) num24 * (double) Main.GameModeInfo.TownNPCDamageMultiplier);
              int Damage = (int) ((double) num24 * (double) num1);
              this.velocity.X *= 0.8f;
              --this.ai[1];
              ++this.localAI[3];
              if ((double) this.localAI[3] == (double) num26 && Main.netMode != 1)
              {
                Vector2 vec = -Vector2.UnitY;
                if (num7 == 1 && this.spriteDirection == 1 && index7 != -1)
                  vec = this.DirectionTo(Main.npc[index7].Center + new Vector2(0.0f, -num28 * MathHelper.Clamp(this.Distance(Main.npc[index7].Center) / num29, 0.0f, 1f)));
                if (num7 == -1 && this.spriteDirection == -1 && index6 != -1)
                  vec = this.DirectionTo(Main.npc[index6].Center + new Vector2(0.0f, -num28 * MathHelper.Clamp(this.Distance(Main.npc[index6].Center) / num29, 0.0f, 1f)));
                if (vec.HasNaNs() || Math.Sign(vec.X) != this.spriteDirection)
                  vec = new Vector2((float) this.spriteDirection, -1f);
                Vector2 vector2 = vec * num25 + Utils.RandomVector2(Main.rand, -max, max);
                int index14 = this.type != 124 ? (this.type != 142 ? Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X + (float) (this.spriteDirection * 16), this.Center.Y - 2f, vector2.X, vector2.Y, Type, Damage, KnockBack, Main.myPlayer) : Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X + (float) (this.spriteDirection * 16), this.Center.Y - 2f, vector2.X, vector2.Y, Type, Damage, KnockBack, Main.myPlayer, ai1: ((float) Main.rand.Next(5)))) : Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X + (float) (this.spriteDirection * 16), this.Center.Y - 2f, vector2.X, vector2.Y, Type, Damage, KnockBack, Main.myPlayer, ai1: ((float) this.whoAmI), ai2: ((float) this.townNpcVariationIndex));
                Main.projectile[index14].npcProj = true;
                Main.projectile[index14].noDropItem = true;
                if (this.type == 588)
                  Main.projectile[index14].timeLeft = 480;
              }
              if ((double) this.ai[1] <= 0.0)
              {
                this.ai[0] = (double) this.localAI[2] == 8.0 & flag12 ? 8f : 0.0f;
                this.ai[1] = (float) (num27 + Main.rand.Next(maxValue2));
                this.ai[2] = 0.0f;
                this.localAI[1] = this.localAI[3] = (float) (num27 / 2 + Main.rand.Next(maxValue2));
                this.netUpdate = true;
              }
            }
            else if ((double) this.ai[0] == 12.0)
            {
              int Type = 0;
              int num30 = 0;
              float num31 = 0.0f;
              int num32 = 0;
              int num33 = 0;
              int maxValue3 = 0;
              float KnockBack = 0.0f;
              int num34 = 0;
              bool flag21 = false;
              float max = 0.0f;
              if ((double) NPCID.Sets.AttackTime[this.type] == (double) this.ai[1])
              {
                this.frameCounter = 0.0;
                this.localAI[3] = 0.0f;
              }
              int index15 = -1;
              if (num7 == 1 && this.spriteDirection == 1)
                index15 = index7;
              if (num7 == -1 && this.spriteDirection == -1)
                index15 = index6;
              if (this.type == 19)
              {
                Type = 14;
                num31 = 13f;
                num30 = 24;
                num33 = 14;
                maxValue3 = 4;
                KnockBack = 3f;
                num32 = 1;
                max = 0.5f;
                if ((double) NPCID.Sets.AttackTime[this.type] == (double) this.ai[1])
                {
                  this.frameCounter = 0.0;
                  this.localAI[3] = 0.0f;
                }
                if (Main.hardMode)
                {
                  num30 = 15;
                  if ((double) this.localAI[3] > (double) num32)
                  {
                    num32 = 10;
                    flag21 = true;
                  }
                  if ((double) this.localAI[3] > (double) num32)
                  {
                    num32 = 20;
                    flag21 = true;
                  }
                  if ((double) this.localAI[3] > (double) num32)
                  {
                    num32 = 30;
                    flag21 = true;
                  }
                }
              }
              else if (this.type == 227)
              {
                Type = 587;
                num31 = 10f;
                num30 = 8;
                num33 = 10;
                maxValue3 = 1;
                KnockBack = 1.75f;
                num32 = 1;
                max = 0.5f;
                if ((double) this.localAI[3] > (double) num32)
                {
                  num32 = 12;
                  flag21 = true;
                }
                if ((double) this.localAI[3] > (double) num32)
                {
                  num32 = 24;
                  flag21 = true;
                }
                if (Main.hardMode)
                  num30 += 2;
              }
              else if (this.type == 368)
              {
                Type = 14;
                num31 = 13f;
                num30 = 24;
                num33 = 12;
                maxValue3 = 5;
                KnockBack = 2f;
                num32 = 1;
                max = 0.2f;
                if (Main.hardMode)
                {
                  num30 = 30;
                  Type = 357;
                }
              }
              else if (this.type == 22)
              {
                num31 = 10f;
                num30 = 8;
                num32 = 1;
                if (Main.hardMode)
                {
                  Type = 2;
                  num33 = 15;
                  maxValue3 = 10;
                  num30 += 6;
                }
                else
                {
                  Type = 1;
                  num33 = 30;
                  maxValue3 = 20;
                }
                KnockBack = 2.75f;
                num34 = 4;
                max = 0.7f;
              }
              else if (this.type == 228)
              {
                Type = 267;
                num31 = 14f;
                num30 = 20;
                num32 = 1;
                num33 = 10;
                maxValue3 = 1;
                KnockBack = 3f;
                num34 = 6;
                max = 0.4f;
              }
              else if (this.type == 178)
              {
                Type = 242;
                num31 = 13f;
                num30 = !Main.hardMode ? 11 : 15;
                num33 = 10;
                maxValue3 = 1;
                KnockBack = 2f;
                num32 = 1;
                if ((double) this.localAI[3] > (double) num32)
                {
                  num32 = 8;
                  flag21 = true;
                }
                if ((double) this.localAI[3] > (double) num32)
                {
                  num32 = 16;
                  flag21 = true;
                }
                max = 0.3f;
              }
              else if (this.type == 229)
              {
                Type = 14;
                num31 = 14f;
                num30 = 24;
                num33 = 10;
                maxValue3 = 1;
                KnockBack = 2f;
                num32 = 1;
                max = 0.7f;
                if ((double) this.localAI[3] > (double) num32)
                {
                  num32 = 16;
                  flag21 = true;
                }
                if ((double) this.localAI[3] > (double) num32)
                {
                  num32 = 24;
                  flag21 = true;
                }
                if ((double) this.localAI[3] > (double) num32)
                {
                  num32 = 32;
                  flag21 = true;
                }
                if ((double) this.localAI[3] > (double) num32)
                {
                  num32 = 40;
                  flag21 = true;
                }
                if ((double) this.localAI[3] > (double) num32)
                {
                  num32 = 48;
                  flag21 = true;
                }
                if ((double) this.localAI[3] == 0.0 && index15 != -1 && (double) this.Distance(Main.npc[index15].Center) < (double) NPCID.Sets.PrettySafe[this.type])
                {
                  max = 0.1f;
                  Type = 162;
                  num30 = 50;
                  KnockBack = 10f;
                  num31 = 24f;
                }
              }
              else if (this.type == 209)
              {
                Type = Utils.SelectRandom<int>(Main.rand, 134, 133, 135);
                num32 = 1;
                switch (Type)
                {
                  case 133:
                    num31 = 10f;
                    num30 = 25;
                    num33 = 10;
                    maxValue3 = 1;
                    KnockBack = 6f;
                    max = 0.2f;
                    break;
                  case 134:
                    num31 = 13f;
                    num30 = 20;
                    num33 = 20;
                    maxValue3 = 10;
                    KnockBack = 4f;
                    max = 0.1f;
                    break;
                  case 135:
                    num31 = 12f;
                    num30 = 30;
                    num33 = 30;
                    maxValue3 = 10;
                    KnockBack = 7f;
                    max = 0.2f;
                    break;
                }
              }
              if (Main.expertMode)
                num30 = (int) ((double) num30 * (double) Main.GameModeInfo.TownNPCDamageMultiplier);
              int Damage = (int) ((double) num30 * (double) num1);
              this.velocity.X *= 0.8f;
              --this.ai[1];
              ++this.localAI[3];
              if ((double) this.localAI[3] == (double) num32 && Main.netMode != 1)
              {
                Vector2 vec = Vector2.Zero;
                if (index15 != -1)
                  vec = this.DirectionTo(Main.npc[index15].Center + new Vector2(0.0f, (float) -num34));
                if (vec.HasNaNs() || Math.Sign(vec.X) != this.spriteDirection)
                  vec = new Vector2((float) this.spriteDirection, 0.0f);
                Vector2 vector2 = vec * num31 + Utils.RandomVector2(Main.rand, -max, max);
                int index16 = this.type != 227 ? Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X + (float) (this.spriteDirection * 16), this.Center.Y - 2f, vector2.X, vector2.Y, Type, Damage, KnockBack, Main.myPlayer) : Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X + (float) (this.spriteDirection * 16), this.Center.Y - 2f, vector2.X, vector2.Y, Type, Damage, KnockBack, Main.myPlayer, ai1: ((float) Main.rand.Next(12) / 6f));
                Main.projectile[index16].npcProj = true;
                Main.projectile[index16].noDropItem = true;
              }
              if ((double) this.localAI[3] == (double) num32 & flag21 && index15 != -1)
              {
                Vector2 vector2 = this.DirectionTo(Main.npc[index15].Center);
                if ((double) vector2.Y <= 0.5 && (double) vector2.Y >= -0.5)
                  this.ai[2] = vector2.Y;
              }
              if ((double) this.ai[1] <= 0.0)
              {
                this.ai[0] = (double) this.localAI[2] == 8.0 & flag12 ? 8f : 0.0f;
                this.ai[1] = (float) (num33 + Main.rand.Next(maxValue3));
                this.ai[2] = 0.0f;
                this.localAI[1] = this.localAI[3] = (float) (num33 / 2 + Main.rand.Next(maxValue3));
                this.netUpdate = true;
              }
            }
            else if ((double) this.ai[0] == 13.0)
            {
              this.velocity.X *= 0.8f;
              if ((double) NPCID.Sets.AttackTime[this.type] == (double) this.ai[1])
                this.frameCounter = 0.0;
              --this.ai[1];
              ++this.localAI[3];
              if ((double) this.localAI[3] == 1.0 && Main.netMode != 1)
              {
                Vector2 vec = this.DirectionTo(Main.npc[(int) this.ai[2]].Center + new Vector2(0.0f, -20f));
                if (vec.HasNaNs() || Math.Sign(vec.X) == -this.spriteDirection)
                  vec = new Vector2((float) this.spriteDirection, -1f);
                Vector2 vector2 = vec * 8f;
                int index17 = Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X + (float) (this.spriteDirection * 16), this.Center.Y - 2f, vector2.X, vector2.Y, 584, 0, 0.0f, Main.myPlayer, this.ai[2]);
                Main.projectile[index17].npcProj = true;
                Main.projectile[index17].noDropItem = true;
              }
              if ((double) this.ai[1] <= 0.0)
              {
                this.ai[0] = 0.0f;
                this.ai[1] = (float) (10 + Main.rand.Next(10));
                this.ai[2] = 0.0f;
                this.localAI[3] = (float) (5 + Main.rand.Next(10));
                this.netUpdate = true;
              }
            }
            else if ((double) this.ai[0] == 14.0)
            {
              int Type = 0;
              int num35 = 0;
              float num36 = 0.0f;
              int num37 = 0;
              int num38 = 0;
              int maxValue4 = 0;
              float KnockBack = 0.0f;
              float num39 = 0.0f;
              float num40 = (float) NPCID.Sets.DangerDetectRange[this.type];
              float num41 = 1f;
              float max = 0.0f;
              if ((double) NPCID.Sets.AttackTime[this.type] == (double) this.ai[1])
              {
                this.frameCounter = 0.0;
                this.localAI[3] = 0.0f;
              }
              int index18 = -1;
              if (num7 == 1 && this.spriteDirection == 1)
                index18 = index7;
              if (num7 == -1 && this.spriteDirection == -1)
                index18 = index6;
              if (this.type == 54)
              {
                Type = 585;
                num36 = 10f;
                num35 = 16;
                num37 = 30;
                num38 = 20;
                maxValue4 = 15;
                KnockBack = 2f;
                max = 1f;
              }
              else if (this.type == 108)
              {
                Type = 15;
                num36 = 6f;
                num35 = 18;
                num37 = 15;
                num38 = 15;
                maxValue4 = 5;
                KnockBack = 3f;
                num39 = 20f;
              }
              else if (this.type == 160)
              {
                Type = 590;
                num35 = 40;
                num37 = 15;
                num38 = 10;
                maxValue4 = 1;
                KnockBack = 3f;
                while ((double) this.localAI[3] > (double) num37)
                  num37 += 15;
              }
              else if (this.type == 663)
              {
                Type = 950;
                num35 = !Main.hardMode ? 15 : 20;
                num37 = 15;
                num38 = 0;
                maxValue4 = 0;
                KnockBack = 3f;
                while ((double) this.localAI[3] > (double) num37)
                  num37 += 10;
              }
              else if (this.type == 20)
              {
                Type = 586;
                num37 = 24;
                num38 = 10;
                maxValue4 = 1;
                KnockBack = 3f;
              }
              if (Main.expertMode)
                num35 = (int) ((double) num35 * (double) Main.GameModeInfo.TownNPCDamageMultiplier);
              int Damage = (int) ((double) num35 * (double) num1);
              this.velocity.X *= 0.8f;
              --this.ai[1];
              ++this.localAI[3];
              if ((double) this.localAI[3] == (double) num37 && Main.netMode != 1)
              {
                Vector2 vec = Vector2.Zero;
                if (index18 != -1)
                  vec = this.DirectionTo(Main.npc[index18].Center + new Vector2(0.0f, -num39 * MathHelper.Clamp(this.Distance(Main.npc[index18].Center) / num40, 0.0f, 1f)));
                if (vec.HasNaNs() || Math.Sign(vec.X) != this.spriteDirection)
                  vec = new Vector2((float) this.spriteDirection, 0.0f);
                Vector2 vector2_1 = vec * num36 + Utils.RandomVector2(Main.rand, -max, max);
                if (this.type == 108)
                {
                  int num42 = Utils.SelectRandom<int>(Main.rand, 1, 1, 1, 1, 2, 2, 3);
                  for (int index19 = 0; index19 < num42; ++index19)
                  {
                    Vector2 vector2_2 = Utils.RandomVector2(Main.rand, -3.4f, 3.4f);
                    int index20 = Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X + (float) (this.spriteDirection * 16), this.Center.Y - 2f, vector2_1.X + vector2_2.X, vector2_1.Y + vector2_2.Y, Type, Damage, KnockBack, Main.myPlayer, ai2: ((float) this.townNpcVariationIndex));
                    Main.projectile[index20].npcProj = true;
                    Main.projectile[index20].noDropItem = true;
                  }
                }
                else if (this.type == 160)
                {
                  if (index18 != -1)
                  {
                    Vector2 vector2_3 = Main.npc[index18].position - Main.npc[index18].Size * 2f + Main.npc[index18].Size * Utils.RandomVector2(Main.rand, 0.0f, 1f) * 5f;
                    for (int index21 = 10; index21 > 0 && WorldGen.SolidTile(Framing.GetTileSafely((int) vector2_3.X / 16, (int) vector2_3.Y / 16)); vector2_3 = Main.npc[index18].position - Main.npc[index18].Size * 2f + Main.npc[index18].Size * Utils.RandomVector2(Main.rand, 0.0f, 1f) * 5f)
                      --index21;
                    int index22 = Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_3.X, vector2_3.Y, 0.0f, 0.0f, Type, Damage, KnockBack, Main.myPlayer, ai2: ((float) this.townNpcVariationIndex));
                    Main.projectile[index22].npcProj = true;
                    Main.projectile[index22].noDropItem = true;
                  }
                }
                else if (this.type == 663)
                {
                  if (index18 != -1)
                  {
                    Vector2 vector2_4 = Main.npc[index18].position + Main.npc[index18].Size * Utils.RandomVector2(Main.rand, 0.0f, 1f) * 1f;
                    for (int index23 = 5; index23 > 0 && WorldGen.SolidTile(Framing.GetTileSafely((int) vector2_4.X / 16, (int) vector2_4.Y / 16)); vector2_4 = Main.npc[index18].position + Main.npc[index18].Size * Utils.RandomVector2(Main.rand, 0.0f, 1f) * 1f)
                      --index23;
                    int index24 = Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_4.X, vector2_4.Y, 0.0f, 0.0f, Type, Damage, KnockBack, Main.myPlayer, ai2: ((float) this.townNpcVariationIndex));
                    Main.projectile[index24].npcProj = true;
                    Main.projectile[index24].noDropItem = true;
                  }
                }
                else if (this.type == 20)
                {
                  int index25 = Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X + (float) (this.spriteDirection * 16), this.Center.Y - 2f, vector2_1.X, vector2_1.Y, Type, Damage, KnockBack, Main.myPlayer, ai1: ((float) this.whoAmI), ai2: ((float) this.townNpcVariationIndex));
                  Main.projectile[index25].npcProj = true;
                  Main.projectile[index25].noDropItem = true;
                }
                else
                {
                  int index26 = Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X + (float) (this.spriteDirection * 16), this.Center.Y - 2f, vector2_1.X, vector2_1.Y, Type, Damage, KnockBack, Main.myPlayer);
                  Main.projectile[index26].npcProj = true;
                  Main.projectile[index26].noDropItem = true;
                }
              }
              if ((double) num41 > 0.0)
              {
                Vector3 vector3 = this.GetMagicAuraColor().ToVector3() * num41;
                Lighting.AddLight(this.Center, vector3.X, vector3.Y, vector3.Z);
              }
              if ((double) this.ai[1] <= 0.0)
              {
                this.ai[0] = (double) this.localAI[2] == 8.0 & flag12 ? 8f : 0.0f;
                this.ai[1] = (float) (num38 + Main.rand.Next(maxValue4));
                this.ai[2] = 0.0f;
                this.localAI[1] = this.localAI[3] = (float) (num38 / 2 + Main.rand.Next(maxValue4));
                this.netUpdate = true;
              }
            }
            else if ((double) this.ai[0] == 15.0)
            {
              int num43 = 0;
              int maxValue5 = 0;
              if ((double) NPCID.Sets.AttackTime[this.type] == (double) this.ai[1])
              {
                this.frameCounter = 0.0;
                this.localAI[3] = 0.0f;
              }
              int num44 = 0;
              float num45 = 0.0f;
              int num46 = 0;
              int num47 = 0;
              if (num7 == 1)
              {
                int spriteDirection1 = this.spriteDirection;
              }
              if (num7 == -1)
              {
                int spriteDirection2 = this.spriteDirection;
              }
              if (this.type == 207)
              {
                num44 = 11;
                num46 = num47 = 32;
                num43 = 12;
                maxValue5 = 6;
                num45 = 4.25f;
              }
              else if (this.type == 441)
              {
                num44 = 9;
                num46 = num47 = 28;
                num43 = 9;
                maxValue5 = 3;
                num45 = 3.5f;
                if (this.GivenName == "Andrew")
                {
                  num44 *= 2;
                  num45 *= 2f;
                }
              }
              else if (this.type == 353)
              {
                num44 = 10;
                num46 = num47 = 32;
                num43 = 15;
                maxValue5 = 8;
                num45 = 5f;
              }
              else if (NPCID.Sets.IsTownPet[this.type])
              {
                num44 = 10;
                num46 = num47 = 32;
                num43 = 15;
                maxValue5 = 8;
                num45 = 3f;
              }
              if (Main.expertMode)
                num44 = (int) ((double) num44 * (double) Main.GameModeInfo.TownNPCDamageMultiplier);
              int num48 = (int) ((double) num44 * (double) num1);
              this.velocity.X *= 0.8f;
              --this.ai[1];
              if (Main.netMode != 1)
              {
                Tuple<Vector2, float> swingStats = this.GetSwingStats(NPCID.Sets.AttackTime[this.type] * 2, (int) this.ai[1], this.spriteDirection, num46, num47);
                Microsoft.Xna.Framework.Rectangle itemRectangle = new Microsoft.Xna.Framework.Rectangle((int) swingStats.Item1.X, (int) swingStats.Item1.Y, num46, num47);
                if (this.spriteDirection == -1)
                  itemRectangle.X -= num46;
                itemRectangle.Y -= num47;
                this.TweakSwingStats(NPCID.Sets.AttackTime[this.type] * 2, (int) this.ai[1], this.spriteDirection, ref itemRectangle);
                int player = Main.myPlayer;
                for (int number = 0; number < 200; ++number)
                {
                  NPC npc = Main.npc[number];
                  if (npc.active && npc.immune[player] == 0 && !npc.dontTakeDamage && !npc.friendly && npc.damage > 0 && itemRectangle.Intersects(npc.Hitbox) && (npc.noTileCollide || Collision.CanHit(this.position, this.width, this.height, npc.position, npc.width, npc.height)))
                  {
                    npc.StrikeNPCNoInteraction(num48, num45, this.spriteDirection);
                    if (Main.netMode != 0)
                      NetMessage.SendData(28, number: number, number2: ((float) num48), number3: num45, number4: ((float) this.spriteDirection));
                    npc.netUpdate = true;
                    npc.immune[player] = (int) this.ai[1] + 2;
                  }
                }
              }
              if ((double) this.ai[1] <= 0.0)
              {
                bool flag22 = false;
                if (flag12)
                {
                  if (!Collision.CanHit(this.Center, 0, 0, this.Center + Vector2.UnitX * (float) -num7 * 32f, 0, 0) || (double) this.localAI[2] == 8.0)
                    flag22 = true;
                  if (flag22)
                  {
                    int num49 = NPCID.Sets.AttackTime[this.type];
                    int index27 = num7 == 1 ? index7 : index6;
                    int index28 = num7 == 1 ? index6 : index7;
                    if (index27 != -1 && !Collision.CanHit(this.Center, 0, 0, Main.npc[index27].Center, 0, 0))
                      index27 = index28 == -1 || !Collision.CanHit(this.Center, 0, 0, Main.npc[index28].Center, 0, 0) ? -1 : index28;
                    if (index27 != -1)
                    {
                      this.ai[0] = 15f;
                      this.ai[1] = (float) num49;
                      this.ai[2] = 0.0f;
                      this.localAI[3] = 0.0f;
                      this.direction = (double) this.position.X < (double) Main.npc[index27].position.X ? 1 : -1;
                      this.netUpdate = true;
                    }
                    else
                      flag22 = false;
                  }
                }
                if (!flag22)
                {
                  this.ai[0] = (double) this.localAI[2] == 8.0 & flag12 ? 8f : 0.0f;
                  this.ai[1] = (float) (num43 + Main.rand.Next(maxValue5));
                  this.ai[2] = 0.0f;
                  this.localAI[1] = this.localAI[3] = (float) (num43 / 2 + Main.rand.Next(maxValue5));
                  this.netUpdate = true;
                }
              }
            }
            else if ((double) this.ai[0] == 24.0)
            {
              this.velocity.X *= 0.8f;
              --this.ai[1];
              ++this.localAI[3];
              this.direction = 1;
              this.spriteDirection = 1;
              Vector3 vector3 = this.GetMagicAuraColor().ToVector3();
              Lighting.AddLight(this.Center, vector3.X, vector3.Y, vector3.Z);
              if ((double) this.ai[1] <= 0.0)
              {
                this.ai[0] = 0.0f;
                this.ai[1] = 480f;
                this.ai[2] = 0.0f;
                this.localAI[1] = 480f;
                this.netUpdate = true;
              }
            }
            if (flag10 && this.wet)
            {
              int num50 = (int) ((double) this.Center.X / 16.0);
              int num51 = 5;
              if (this.collideX || num50 < num51 && this.direction == -1 || num50 > Main.maxTilesX - num51 && this.direction == 1)
              {
                this.direction *= -1;
                this.velocity.X *= -0.25f;
                this.netUpdate = true;
              }
              this.velocity.Y *= 0.9f;
              this.velocity.Y -= 0.5f;
              if ((double) this.velocity.Y < -15.0)
                this.velocity.Y = -15f;
            }
            if (flag9 && this.wet)
            {
              if (flag7)
                this.ai[1] = 50f;
              int num52 = (int) ((double) this.Center.X / 16.0);
              int num53 = 5;
              if (this.collideX || num52 < num53 && this.direction == -1 || num52 > Main.maxTilesX - num53 && this.direction == 1)
              {
                this.direction *= -1;
                this.velocity.X *= -0.25f;
                this.netUpdate = true;
              }
              float waterLineHeight;
              if (Collision.GetWaterLine(this.Center.ToTileCoordinates(), out waterLineHeight))
              {
                float num54 = this.Center.Y + 1f;
                if ((double) this.Center.Y > (double) waterLineHeight)
                {
                  this.velocity.Y -= 0.8f;
                  if ((double) this.velocity.Y < -4.0)
                    this.velocity.Y = -4f;
                  if ((double) num54 + (double) this.velocity.Y < (double) waterLineHeight)
                    this.velocity.Y = waterLineHeight - num54;
                }
                else
                  this.velocity.Y = MathHelper.Min(this.velocity.Y, waterLineHeight - num54);
              }
              else
                this.velocity.Y -= 0.2f;
            }
            if (Main.netMode != 1 && this.isLikeATownNPC && !flag3)
            {
              bool flag23 = (double) this.ai[0] < 2.0 && !flag12 && !this.wet;
              bool flag24 = ((double) this.ai[0] < 2.0 || (double) this.ai[0] == 8.0) && flag12 | flag13;
              if ((double) this.localAI[1] > 0.0)
                --this.localAI[1];
              if ((double) this.localAI[1] > 0.0)
                flag24 = false;
              if (flag24 && this.type == 124 && (double) this.localAI[0] == 1.0)
                flag24 = false;
              if (flag24 && this.type == 20)
              {
                flag24 = false;
                for (int index29 = 0; index29 < 200; ++index29)
                {
                  NPC npc = Main.npc[index29];
                  if (npc.active && npc.townNPC && (double) this.Distance(npc.Center) <= 1200.0 && npc.FindBuffIndex(165) == -1)
                  {
                    flag24 = true;
                    break;
                  }
                }
              }
              if (this.CanTalk & flag23 && (double) this.ai[0] == 0.0 && (double) this.velocity.Y == 0.0 && Main.rand.Next(300) == 0)
              {
                int num55 = 420;
                int num56 = Main.rand.Next(2) != 0 ? num55 * Main.rand.Next(1, 3) : num55 * Main.rand.Next(1, 4);
                int num57 = 100;
                int num58 = 20;
                for (int index30 = 0; index30 < 200; ++index30)
                {
                  NPC npc = Main.npc[index30];
                  bool flag25 = (double) npc.ai[0] == 1.0 && npc.closeDoor || (double) npc.ai[0] == 1.0 && (double) npc.ai[1] > 200.0 || (double) npc.ai[0] > 1.0 || npc.wet;
                  if (npc != this && npc.active && npc.CanBeTalkedTo && !flag25 && (double) npc.Distance(this.Center) < (double) num57 && (double) npc.Distance(this.Center) > (double) num58 && Collision.CanHit(this.Center, 0, 0, npc.Center, 0, 0))
                  {
                    int directionInt = ((double) this.position.X < (double) npc.position.X).ToDirectionInt();
                    this.ai[0] = 3f;
                    this.ai[1] = (float) num56;
                    this.ai[2] = (float) index30;
                    this.direction = directionInt;
                    this.netUpdate = true;
                    npc.ai[0] = 4f;
                    npc.ai[1] = (float) num56;
                    npc.ai[2] = (float) this.whoAmI;
                    npc.direction = -directionInt;
                    npc.netUpdate = true;
                    break;
                  }
                }
              }
              else if (this.CanTalk & flag23 && (double) this.ai[0] == 0.0 && (double) this.velocity.Y == 0.0 && Main.rand.Next(1800) == 0)
              {
                int num59 = 420;
                int num60 = Main.rand.Next(2) != 0 ? num59 * Main.rand.Next(1, 3) : num59 * Main.rand.Next(1, 4);
                int num61 = 100;
                int num62 = 20;
                for (int index31 = 0; index31 < 200; ++index31)
                {
                  NPC npc = Main.npc[index31];
                  bool flag26 = (double) npc.ai[0] == 1.0 && npc.closeDoor || (double) npc.ai[0] == 1.0 && (double) npc.ai[1] > 200.0 || (double) npc.ai[0] > 1.0 || npc.wet;
                  if (npc != this && npc.active && npc.CanBeTalkedTo && !NPCID.Sets.IsTownPet[npc.type] && !flag26 && (double) npc.Distance(this.Center) < (double) num61 && (double) npc.Distance(this.Center) > (double) num62 && Collision.CanHit(this.Center, 0, 0, npc.Center, 0, 0))
                  {
                    int directionInt = ((double) this.position.X < (double) npc.position.X).ToDirectionInt();
                    this.ai[0] = 16f;
                    this.ai[1] = (float) num60;
                    this.ai[2] = (float) index31;
                    this.localAI[2] = (float) Main.rand.Next(4);
                    this.localAI[3] = (float) Main.rand.Next(3 - (int) this.localAI[2]);
                    this.direction = directionInt;
                    this.netUpdate = true;
                    npc.ai[0] = 17f;
                    npc.ai[1] = (float) num60;
                    npc.ai[2] = (float) this.whoAmI;
                    npc.localAI[2] = 0.0f;
                    npc.localAI[3] = 0.0f;
                    npc.direction = -directionInt;
                    npc.netUpdate = true;
                    break;
                  }
                }
              }
              else if (!NPCID.Sets.IsTownPet[this.type] & flag23 && (double) this.ai[0] == 0.0 && (double) this.velocity.Y == 0.0 && Main.rand.Next(1200) == 0 && (this.type == 208 || BirthdayParty.PartyIsUp && NPCID.Sets.AttackType[this.type] == NPCID.Sets.AttackType[208]))
              {
                int num63 = 300;
                int num64 = 150;
                for (int index32 = 0; index32 < (int) byte.MaxValue; ++index32)
                {
                  Player player = Main.player[index32];
                  if (player.active && !player.dead && (double) player.Distance(this.Center) < (double) num64 && Collision.CanHitLine(this.Top, 0, 0, player.Top, 0, 0))
                  {
                    int directionInt = ((double) this.position.X < (double) player.position.X).ToDirectionInt();
                    this.ai[0] = 6f;
                    this.ai[1] = (float) num63;
                    this.ai[2] = (float) index32;
                    this.direction = directionInt;
                    this.netUpdate = true;
                    break;
                  }
                }
              }
              else if (flag23 && (double) this.ai[0] == 0.0 && (double) this.velocity.Y == 0.0 && Main.rand.Next(600) == 0 && this.type == 550)
              {
                int num65 = 300;
                int num66 = 150;
                for (int index33 = 0; index33 < (int) byte.MaxValue; ++index33)
                {
                  Player player = Main.player[index33];
                  if (player.active && !player.dead && (double) player.Distance(this.Center) < (double) num66 && Collision.CanHitLine(this.Top, 0, 0, player.Top, 0, 0))
                  {
                    int directionInt = ((double) this.position.X < (double) player.position.X).ToDirectionInt();
                    this.ai[0] = 18f;
                    this.ai[1] = (float) num65;
                    this.ai[2] = (float) index33;
                    this.direction = directionInt;
                    this.netUpdate = true;
                    break;
                  }
                }
              }
              else if (!NPCID.Sets.IsTownPet[this.type] & flag23 && (double) this.ai[0] == 0.0 && (double) this.velocity.Y == 0.0 && Main.rand.Next(1800) == 0)
              {
                this.ai[0] = 2f;
                this.ai[1] = (float) (45 * Main.rand.Next(1, 2));
                this.netUpdate = true;
              }
              else if (flag23 && (double) this.ai[0] == 0.0 && (double) this.velocity.Y == 0.0 && Main.rand.Next(600) == 0 && this.type == 229 && !flag13)
              {
                this.ai[0] = 11f;
                this.ai[1] = (float) (30 * Main.rand.Next(1, 4));
                this.netUpdate = true;
              }
              else if (flag23 && (double) this.ai[0] == 0.0 && (double) this.velocity.Y == 0.0 && Main.rand.Next(1200) == 0)
              {
                int num67 = 220;
                int num68 = 150;
                for (int index34 = 0; index34 < (int) byte.MaxValue; ++index34)
                {
                  Player player = Main.player[index34];
                  if (player.CanBeTalkedTo && (double) player.Distance(this.Center) < (double) num68 && Collision.CanHitLine(this.Top, 0, 0, player.Top, 0, 0))
                  {
                    int directionInt = ((double) this.position.X < (double) player.position.X).ToDirectionInt();
                    this.ai[0] = 7f;
                    this.ai[1] = (float) num67;
                    this.ai[2] = (float) index34;
                    this.direction = directionInt;
                    this.netUpdate = true;
                    break;
                  }
                }
              }
              else if (flag23 && (double) this.ai[0] == 1.0 && (double) this.velocity.Y == 0.0 && maxValue1 > 0 && Main.rand.Next(maxValue1) == 0)
              {
                Point tileCoordinates = (this.Bottom + Vector2.UnitY * -2f).ToTileCoordinates();
                bool flag27 = WorldGen.InWorld(tileCoordinates.X, tileCoordinates.Y, 1);
                if (flag27)
                {
                  for (int index35 = 0; index35 < 200; ++index35)
                  {
                    if (Main.npc[index35].active && Main.npc[index35].aiStyle == 7 && Main.npc[index35].townNPC && (double) Main.npc[index35].ai[0] == 5.0 && (Main.npc[index35].Bottom + Vector2.UnitY * -2f).ToTileCoordinates() == tileCoordinates)
                    {
                      flag27 = false;
                      break;
                    }
                  }
                  for (int index36 = 0; index36 < (int) byte.MaxValue; ++index36)
                  {
                    if (Main.player[index36].active && Main.player[index36].sitting.isSitting && Main.player[index36].Center.ToTileCoordinates() == tileCoordinates)
                    {
                      flag27 = false;
                      break;
                    }
                  }
                }
                if (flag27)
                {
                  Tile tile = Main.tile[tileCoordinates.X, tileCoordinates.Y];
                  bool flag28 = tile.type == (ushort) 15 || tile.type == (ushort) 497;
                  if (flag28 && tile.type == (ushort) 15 && tile.frameY >= (short) 1080 && tile.frameY <= (short) 1098)
                    flag28 = false;
                  if (flag28)
                  {
                    this.ai[0] = 5f;
                    this.ai[1] = (float) (900 + Main.rand.Next(10800));
                    this.direction = tile.frameX == (short) 0 ? -1 : 1;
                    this.Bottom = new Vector2((float) (tileCoordinates.X * 16 + 8 + 2 * this.direction), (float) (tileCoordinates.Y * 16 + 16));
                    this.velocity = Vector2.Zero;
                    this.localAI[3] = 0.0f;
                    this.netUpdate = true;
                  }
                }
              }
              else if (flag23 && (double) this.ai[0] == 1.0 && (double) this.velocity.Y == 0.0 && Main.rand.Next(600) == 0 && Utils.PlotTileLine(this.Top, this.Bottom, (float) this.width, new Utils.TileActionAttempt(DelegateMethods.SearchAvoidedByNPCs)))
              {
                Point tileCoordinates = (this.Center + new Vector2((float) (this.direction * 10), 0.0f)).ToTileCoordinates();
                bool flag29 = WorldGen.InWorld(tileCoordinates.X, tileCoordinates.Y, 1);
                if (flag29)
                {
                  Tile tileSafely = Framing.GetTileSafely(tileCoordinates.X, tileCoordinates.Y);
                  if (!tileSafely.nactive() || !TileID.Sets.InteractibleByNPCs[(int) tileSafely.type])
                    flag29 = false;
                }
                if (flag29)
                {
                  this.ai[0] = 9f;
                  this.ai[1] = (float) (40 + Main.rand.Next(90));
                  this.velocity = Vector2.Zero;
                  this.localAI[3] = 0.0f;
                  this.netUpdate = true;
                }
              }
              if (Main.netMode != 1 && (double) this.ai[0] < 2.0 && (double) this.velocity.Y == 0.0 && this.type == 18 && this.breath > 0)
              {
                int index37 = -1;
                for (int index38 = 0; index38 < 200; ++index38)
                {
                  NPC npc = Main.npc[index38];
                  if (npc.active && npc.townNPC && npc.life != npc.lifeMax && (index37 == -1 || npc.lifeMax - npc.life > Main.npc[index37].lifeMax - Main.npc[index37].life) && Collision.CanHitLine(this.position, this.width, this.height, npc.position, npc.width, npc.height) && (double) this.Distance(npc.Center) < 500.0)
                    index37 = index38;
                }
                if (index37 != -1)
                {
                  this.ai[0] = 13f;
                  this.ai[1] = 34f;
                  this.ai[2] = (float) index37;
                  this.localAI[3] = 0.0f;
                  this.direction = (double) this.position.X < (double) Main.npc[index37].position.X ? 1 : -1;
                  this.netUpdate = true;
                }
              }
              if (flag24 && (double) this.velocity.Y == 0.0 && NPCID.Sets.AttackType[this.type] == 0 && NPCID.Sets.AttackAverageChance[this.type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[this.type] * 2) == 0)
              {
                int num69 = NPCID.Sets.AttackTime[this.type];
                int index39 = num7 == 1 ? index7 : index6;
                int index40 = num7 == 1 ? index6 : index7;
                if (index39 != -1 && !Collision.CanHit(this.Center, 0, 0, Main.npc[index39].Center, 0, 0))
                  index39 = index40 == -1 || !Collision.CanHit(this.Center, 0, 0, Main.npc[index40].Center, 0, 0) ? -1 : index40;
                bool flag30 = index39 != -1;
                if (flag30 && this.type == 633)
                  flag30 = (double) Vector2.Distance(this.Center, Main.npc[index39].Center) <= 50.0;
                if (flag30)
                {
                  this.localAI[2] = this.ai[0];
                  this.ai[0] = 10f;
                  this.ai[1] = (float) num69;
                  this.ai[2] = 0.0f;
                  this.localAI[3] = 0.0f;
                  this.direction = (double) this.position.X < (double) Main.npc[index39].position.X ? 1 : -1;
                  this.netUpdate = true;
                }
              }
              else if (flag24 && (double) this.velocity.Y == 0.0 && NPCID.Sets.AttackType[this.type] == 1 && NPCID.Sets.AttackAverageChance[this.type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[this.type] * 2) == 0)
              {
                int num70 = NPCID.Sets.AttackTime[this.type];
                int index41 = num7 == 1 ? index7 : index6;
                int index42 = num7 == 1 ? index6 : index7;
                if (index41 != -1 && !Collision.CanHitLine(this.Center, 0, 0, Main.npc[index41].Center, 0, 0))
                  index41 = index42 == -1 || !Collision.CanHitLine(this.Center, 0, 0, Main.npc[index42].Center, 0, 0) ? -1 : index42;
                if (index41 != -1)
                {
                  Vector2 vector2 = this.DirectionTo(Main.npc[index41].Center);
                  if ((double) vector2.Y <= 0.5 && (double) vector2.Y >= -0.5)
                  {
                    this.localAI[2] = this.ai[0];
                    this.ai[0] = 12f;
                    this.ai[1] = (float) num70;
                    this.ai[2] = vector2.Y;
                    this.localAI[3] = 0.0f;
                    this.direction = (double) this.position.X < (double) Main.npc[index41].position.X ? 1 : -1;
                    this.netUpdate = true;
                  }
                }
              }
              if (flag24 && (double) this.velocity.Y == 0.0 && NPCID.Sets.AttackType[this.type] == 2 && NPCID.Sets.AttackAverageChance[this.type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[this.type] * 2) == 0)
              {
                int num71 = NPCID.Sets.AttackTime[this.type];
                int index43 = num7 == 1 ? index7 : index6;
                int index44 = num7 == 1 ? index6 : index7;
                if (index43 != -1 && !Collision.CanHitLine(this.Center, 0, 0, Main.npc[index43].Center, 0, 0))
                  index43 = index44 == -1 || !Collision.CanHitLine(this.Center, 0, 0, Main.npc[index44].Center, 0, 0) ? -1 : index44;
                if (index43 != -1)
                {
                  this.localAI[2] = this.ai[0];
                  this.ai[0] = 14f;
                  this.ai[1] = (float) num71;
                  this.ai[2] = 0.0f;
                  this.localAI[3] = 0.0f;
                  this.direction = (double) this.position.X < (double) Main.npc[index43].position.X ? 1 : -1;
                  this.netUpdate = true;
                }
                else if (this.type == 20)
                {
                  this.localAI[2] = this.ai[0];
                  this.ai[0] = 14f;
                  this.ai[1] = (float) num71;
                  this.ai[2] = 0.0f;
                  this.localAI[3] = 0.0f;
                  this.netUpdate = true;
                }
              }
              if (flag24 && (double) this.velocity.Y == 0.0 && NPCID.Sets.AttackType[this.type] == 3 && NPCID.Sets.AttackAverageChance[this.type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[this.type] * 2) == 0)
              {
                int num72 = NPCID.Sets.AttackTime[this.type];
                int index45 = num7 == 1 ? index7 : index6;
                int index46 = num7 == 1 ? index6 : index7;
                if (index45 != -1 && !Collision.CanHit(this.Center, 0, 0, Main.npc[index45].Center, 0, 0))
                  index45 = index46 == -1 || !Collision.CanHit(this.Center, 0, 0, Main.npc[index46].Center, 0, 0) ? -1 : index46;
                if (index45 != -1)
                {
                  this.localAI[2] = this.ai[0];
                  this.ai[0] = 15f;
                  this.ai[1] = (float) num72;
                  this.ai[2] = 0.0f;
                  this.localAI[3] = 0.0f;
                  this.direction = (double) this.position.X < (double) Main.npc[index45].position.X ? 1 : -1;
                  this.netUpdate = true;
                }
              }
            }
            if (this.type == 681)
            {
              float R = 0.0f;
              float G = 0.0f;
              float B = 0.0f;
              TorchID.TorchColor(23, out R, out G, out B);
              float num73 = 0.35f;
              float r = R * num73;
              float g = G * num73;
              B *= num73;
              Lighting.AddLight(this.Center, r, g, B);
            }
            if (this.type != 683 && this.type != 687)
              return;
            float num74 = Utils.WrappedLerp(0.75f, 1f, (float) (Main.timeForVisualEffects % 120.0 / 120.0));
            Lighting.AddLight(this.Center, 0.25f * num74, 0.25f * num74, 0.1f * num74);
          }
        }
      }
    }

    private void AI_007_TownEntities_Shimmer_TeleportToLandingSpot()
    {
      Vector2? landOn = this.AI_007_TownEntities_Shimmer_ScanForBestSpotToLandOn();
      if (!landOn.HasValue)
        return;
      Vector2 position = this.position;
      this.position = landOn.Value;
      Vector2 vector2 = this.position - position;
      int num = 560;
      if ((double) vector2.Length() >= (double) num)
      {
        this.ai[2] = 30f;
        ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.ShimmerTownNPCSend, new ParticleOrchestraSettings()
        {
          PositionInWorld = position + this.Size / 2f,
          MovementVector = vector2
        });
      }
      this.netUpdate = true;
    }

    private Vector2? AI_007_TownEntities_Shimmer_ScanForBestSpotToLandOn()
    {
      Point tileCoordinates = this.Top.ToTileCoordinates();
      int num1 = 30;
      Vector2? landOn = new Vector2?();
      bool allowSolidTop1 = this.homeless && (this.homeTileX == -1 || this.homeTileY == -1);
      for (int expand = 1; expand < num1; expand += 2)
      {
        Vector2? spotWithoutShimmer = ShimmerHelper.FindSpotWithoutShimmer((Entity) this, tileCoordinates.X, tileCoordinates.Y, expand, allowSolidTop1);
        if (spotWithoutShimmer.HasValue)
        {
          landOn = new Vector2?(spotWithoutShimmer.Value);
          break;
        }
      }
      if (!landOn.HasValue && this.homeTileX != -1 && this.homeTileY != -1)
      {
        for (int expand = 1; expand < num1; expand += 2)
        {
          Vector2? spotWithoutShimmer = ShimmerHelper.FindSpotWithoutShimmer((Entity) this, this.homeTileX, this.homeTileY, expand, allowSolidTop1);
          if (spotWithoutShimmer.HasValue)
          {
            landOn = new Vector2?(spotWithoutShimmer.Value);
            break;
          }
        }
      }
      if (!landOn.HasValue)
      {
        int num2 = allowSolidTop1 ? 30 : 0;
        int num3 = 60;
        bool allowSolidTop2 = true;
        for (int expand = num2; expand < num3; expand += 2)
        {
          Vector2? spotWithoutShimmer = ShimmerHelper.FindSpotWithoutShimmer((Entity) this, tileCoordinates.X, tileCoordinates.Y, expand, allowSolidTop2);
          if (spotWithoutShimmer.HasValue)
          {
            landOn = new Vector2?(spotWithoutShimmer.Value);
            break;
          }
        }
      }
      if (!landOn.HasValue && this.homeTileX != -1 && this.homeTileY != -1)
      {
        int num4 = 60;
        bool allowSolidTop3 = true;
        for (int expand = 30; expand < num4; expand += 2)
        {
          Vector2? spotWithoutShimmer = ShimmerHelper.FindSpotWithoutShimmer((Entity) this, this.homeTileX, this.homeTileY, expand, allowSolidTop3);
          if (spotWithoutShimmer.HasValue)
          {
            landOn = new Vector2?(spotWithoutShimmer.Value);
            break;
          }
        }
      }
      return landOn;
    }

    private void AI_007_TownEntities_TeleportToHome(int homeFloorX, int homeFloorY)
    {
      bool flag = false;
      for (int index = 0; index < 3; ++index)
      {
        int num = homeFloorX + (index == 0 ? 0 : (index == 1 ? -1 : 1));
        if (this.type == 37 || !Collision.SolidTiles(num - 1, num + 1, homeFloorY - 3, homeFloorY - 1))
        {
          this.velocity.X = 0.0f;
          this.velocity.Y = 0.0f;
          this.position.X = (float) (num * 16 + 8 - this.width / 2);
          this.position.Y = (float) (homeFloorY * 16 - this.height) - 0.1f;
          this.netUpdate = true;
          this.AI_007_TryForcingSitting(homeFloorX, homeFloorY);
          flag = true;
          break;
        }
      }
      if (flag)
        return;
      this.homeless = true;
      WorldGen.QuickFindHome(this.whoAmI);
    }

    private void AI_007_TownEntities_GetWalkPrediction(
      int myTileX,
      int homeFloorX,
      bool canBreathUnderWater,
      bool currentlyDrowning,
      int tileX,
      int tileY,
      out bool keepwalking,
      out bool avoidFalling)
    {
      keepwalking = false;
      avoidFalling = true;
      bool flag1 = myTileX >= homeFloorX - 35 && myTileX <= homeFloorX + 35;
      if (this.townNPC && (double) this.ai[1] < 30.0)
      {
        keepwalking = !Utils.PlotTileLine(this.Top, this.Bottom, (float) this.width, new Utils.TileActionAttempt(DelegateMethods.SearchAvoidedByNPCs));
        if (!keepwalking)
        {
          Microsoft.Xna.Framework.Rectangle hitbox = this.Hitbox;
          hitbox.X -= 20;
          hitbox.Width += 40;
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].active && Main.npc[index].friendly && index != this.whoAmI && (double) Main.npc[index].velocity.X == 0.0 && hitbox.Intersects(Main.npc[index].Hitbox))
            {
              keepwalking = true;
              break;
            }
          }
        }
      }
      if (!keepwalking & currentlyDrowning)
        keepwalking = true;
      if (avoidFalling && (NPCID.Sets.TownCritter[this.type] || !flag1 && this.direction == Math.Sign(homeFloorX - myTileX)))
        avoidFalling = false;
      if (!avoidFalling)
        return;
      bool flag2 = false;
      Point p = new Point();
      int num1 = 0;
      for (int index = -1; index <= 4; ++index)
      {
        Tile tileSafely = Framing.GetTileSafely(tileX, tileY + index);
        if (tileSafely.liquid > (byte) 0)
        {
          ++num1;
          if (tileSafely.lava())
          {
            flag2 = true;
            break;
          }
        }
        if (tileSafely.nactive() && Main.tileSolid[(int) tileSafely.type])
        {
          if (num1 > 0)
          {
            p.X = tileX;
            p.Y = tileY + index;
          }
          avoidFalling = false;
          break;
        }
      }
      avoidFalling |= flag2;
      double num2 = Math.Ceiling((double) this.height / 16.0);
      if ((double) num1 >= num2)
        avoidFalling = true;
      if (avoidFalling || p.X == 0 || p.Y == 0)
        return;
      Vector2 Position = p.ToWorldCoordinates(autoAddY: 0.0f) + new Vector2((float) (-this.width / 2), (float) -this.height);
      avoidFalling = Collision.DrownCollision(Position, this.width, this.height, 1f);
    }

    private bool AI_007_TownEntities_CheckIfWillDrown(bool currentlyDrowning) => currentlyDrowning;

    private void AI_007_AttemptToPlayIdleAnimationsForPets(int petIdleChance)
    {
      if ((double) this.velocity.X != 0.0 || Main.netMode == 1 || Main.rand.Next(petIdleChance) != 0)
        return;
      int num = 3;
      if (this.type == 638)
        num = 2;
      if (NPCID.Sets.IsTownSlime[this.type])
        num = 0;
      this.ai[0] = num == 0 ? 20f : (float) Main.rand.Next(20, 20 + num);
      this.ai[1] = (float) (200 + Main.rand.Next(300));
      if ((double) this.ai[0] == 20.0 && this.type == 637)
        this.ai[1] = (float) (500 + Main.rand.Next(200));
      if ((double) this.ai[0] == 21.0 && this.type == 638)
        this.ai[1] = (float) (100 + Main.rand.Next(100));
      if ((double) this.ai[0] == 22.0 && this.type == 656)
        this.ai[1] = (float) (200 + Main.rand.Next(200));
      if ((double) this.ai[0] == 20.0 && NPCID.Sets.IsTownSlime[this.type])
        this.ai[1] = (float) (180 + Main.rand.Next(240));
      this.ai[2] = 0.0f;
      this.localAI[3] = 0.0f;
      this.netUpdate = true;
    }

    public bool NPCCanStickToWalls()
    {
      int num1 = (int) this.Center.X / 16;
      int num2 = (int) this.Center.Y / 16;
      int num3 = 0;
      for (int i = num1 - 1; i <= num1 + 1; ++i)
      {
        for (int j = num2 - 1; j <= num2 + 1; ++j)
        {
          Tile tileSafely = Framing.GetTileSafely(i, j);
          if ((!tileSafely.active() || !Main.tileSolid[(int) tileSafely.type] || TileID.Sets.Platforms[(int) tileSafely.type]) && tileSafely.wall > (ushort) 0)
          {
            ++num3;
            if (num3 > 4)
              return true;
          }
        }
      }
      return false;
    }

    private bool AI_003_Gnomes_ShouldTurnToStone()
    {
      if (Main.remixWorld)
        return (double) this.position.Y / 16.0 > (double) (Main.maxTilesY - 350);
      return Main.dayTime && WorldGen.InAPlaceWithWind(this.position, this.width, this.height);
    }

    private void AI_003_Fighters()
    {
      if ((double) Main.player[this.target].position.Y + (double) Main.player[this.target].height == (double) this.position.Y + (double) this.height)
        this.directionY = -1;
      bool flag1 = false;
      if (this.type == 624 && this.AI_003_Gnomes_ShouldTurnToStone())
      {
        int num = (int) ((double) this.Center.X / 16.0);
        int j = (int) ((double) this.Bottom.Y / 16.0);
        this.position = this.position + this.netOffset;
        int index1 = Dust.NewDust(this.position, this.width, this.height, 43, Alpha: 254, newColor: Color.White, Scale: 0.5f);
        Main.dust[index1].velocity *= 0.2f;
        this.position = this.position - this.netOffset;
        if (WorldGen.SolidTileAllowBottomSlope(num, j))
        {
          for (int index2 = 0; index2 < 5; ++index2)
          {
            this.position = this.position + this.netOffset;
            int index3 = Dust.NewDust(this.position, this.width, this.height, 43, Alpha: 254, newColor: Color.White, Scale: 0.5f);
            Main.dust[index3].velocity *= 0.2f;
            this.position = this.position - this.netOffset;
          }
          if (Main.netMode != 1 && TileObject.CanPlace(num, j - 1, 567, 0, this.direction, out TileObject _, true) && WorldGen.PlaceTile(num, j - 1, 567, style: Main.rand.Next(5)))
          {
            if (Main.netMode == 2)
              NetMessage.SendTileSquare(-1, num, j - 2, 1, 2);
            if (Main.netMode != 1)
            {
              if (this.IsNPCValidForBestiaryKillCredit())
                Main.BestiaryTracker.Kills.RegisterKill(this);
              this.CountKillForBannersAndDropThem();
            }
            this.life = 0;
            this.active = false;
            AchievementsHelper.NotifyProgressionEvent(24);
            return;
          }
        }
      }
      if (this.type == 466)
      {
        int num = 200;
        if ((double) this.ai[2] == 0.0)
        {
          this.alpha = num;
          this.TargetClosest();
          if (!Main.player[this.target].dead && (double) (Main.player[this.target].Center - this.Center).Length() < 170.0)
            this.ai[2] = -16f;
          if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y >= 0.0 && (double) this.velocity.Y <= 2.0 && !this.justHit)
            return;
          this.ai[2] = -16f;
          return;
        }
        if ((double) this.ai[2] < 0.0)
        {
          if (this.alpha > 0)
          {
            this.alpha -= num / 16;
            if (this.alpha < 0)
              this.alpha = 0;
          }
          ++this.ai[2];
          if ((double) this.ai[2] != 0.0)
            return;
          this.ai[2] = 1f;
          this.velocity.X = (float) (this.direction * 2);
          return;
        }
        this.alpha = 0;
      }
      if (this.type == 166)
      {
        if (Main.netMode != 1 && Main.rand.Next(240) == 0)
        {
          this.ai[2] = (float) Main.rand.Next(-480, -60);
          this.netUpdate = true;
        }
        if ((double) this.ai[2] < 0.0)
        {
          this.TargetClosest();
          if (this.justHit)
            this.ai[2] = 0.0f;
          if (Collision.CanHit(this.Center, 1, 1, Main.player[this.target].Center, 1, 1))
            this.ai[2] = 0.0f;
        }
        if ((double) this.ai[2] < 0.0)
        {
          this.velocity.X *= 0.9f;
          if ((double) this.velocity.X > -0.1 && (double) this.velocity.X < 0.1)
            this.velocity.X = 0.0f;
          ++this.ai[2];
          if ((double) this.ai[2] != 0.0)
            return;
          this.velocity.X = (float) this.direction * 0.1f;
          return;
        }
      }
      if (this.type == 461)
      {
        if (this.wet)
        {
          this.knockBackResist = 0.0f;
          this.ai[3] = -0.10101f;
          this.noGravity = true;
          Vector2 center = this.Center;
          this.width = 34;
          this.height = 24;
          this.position.X = center.X - (float) (this.width / 2);
          this.position.Y = center.Y - (float) (this.height / 2);
          this.TargetClosest();
          if (this.collideX)
            this.velocity.X = -this.oldVelocity.X;
          if ((double) this.velocity.X < 0.0)
            this.direction = -1;
          if ((double) this.velocity.X > 0.0)
            this.direction = 1;
          if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].Center, 1, 1))
          {
            Vector2 vector2 = Main.player[this.target].Center - this.Center;
            vector2.Normalize();
            this.velocity = (this.velocity * 19f + vector2 * 5f) / 20f;
            return;
          }
          float num = 5f;
          if ((double) this.velocity.Y > 0.0)
            num = 3f;
          if ((double) this.velocity.Y < 0.0)
            num = 8f;
          Vector2 vector2_1 = new Vector2((float) this.direction, -1f);
          vector2_1.Normalize();
          vector2_1 *= num;
          if ((double) num < 5.0)
          {
            this.velocity = (this.velocity * 24f + vector2_1) / 25f;
            return;
          }
          this.velocity = (this.velocity * 9f + vector2_1) / 10f;
          return;
        }
        this.knockBackResist = 0.4f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
        this.noGravity = false;
        Vector2 center1 = this.Center;
        this.width = 18;
        this.height = 40;
        this.position.X = center1.X - (float) (this.width / 2);
        this.position.Y = center1.Y - (float) (this.height / 2);
        if ((double) this.ai[3] == -0.10101000219583511)
        {
          this.ai[3] = 0.0f;
          float num = this.velocity.Length() * 2f;
          if ((double) num > 10.0)
            num = 10f;
          this.velocity.Normalize();
          this.velocity = this.velocity * num;
          if ((double) this.velocity.X < 0.0)
            this.direction = -1;
          if ((double) this.velocity.X > 0.0)
            this.direction = 1;
          this.spriteDirection = this.direction;
        }
      }
      if (this.type == 586)
      {
        if (this.alpha == (int) byte.MaxValue)
        {
          this.TargetClosest();
          this.spriteDirection = this.direction;
          this.velocity.Y = -6f;
          this.netUpdate = true;
          for (int index = 0; index < 35; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 5);
            dust.velocity *= 1f;
            dust.scale = (float) (1.0 + (double) Main.rand.NextFloat() * 0.5);
            dust.fadeIn = (float) (1.5 + (double) Main.rand.NextFloat() * 0.5);
            dust.velocity += this.velocity * 0.5f;
          }
        }
        this.alpha -= 15;
        if (this.alpha < 0)
          this.alpha = 0;
        this.position = this.position + this.netOffset;
        if (this.alpha != 0)
        {
          for (int index = 0; index < 2; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 5);
            dust.velocity *= 1f;
            dust.scale = (float) (1.0 + (double) Main.rand.NextFloat() * 0.5);
            dust.fadeIn = (float) (1.5 + (double) Main.rand.NextFloat() * 0.5);
            dust.velocity += this.velocity * 0.3f;
          }
        }
        if (Main.rand.Next(3) == 0)
        {
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 5);
          dust.velocity *= 0.0f;
          dust.alpha = 120;
          dust.scale = (float) (0.699999988079071 + (double) Main.rand.NextFloat() * 0.5);
          dust.velocity += this.velocity * 0.3f;
        }
        this.position = this.position - this.netOffset;
        if (this.wet)
        {
          this.knockBackResist = 0.0f;
          this.ai[3] = -0.10101f;
          this.noGravity = true;
          Vector2 center = this.Center;
          this.position.X = center.X - (float) (this.width / 2);
          this.position.Y = center.Y - (float) (this.height / 2);
          this.TargetClosest();
          if (this.collideX)
            this.velocity.X = -this.oldVelocity.X;
          if ((double) this.velocity.X < 0.0)
            this.direction = -1;
          if ((double) this.velocity.X > 0.0)
            this.direction = 1;
          if (Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].Center, 1, 1))
          {
            Vector2 vector2_2 = Main.player[this.target].Center - this.Center;
            vector2_2.Normalize();
            float num = MathHelper.Clamp(1f + Math.Abs(this.Center.Y - Main.player[this.target].Center.Y) / 40f, 5f, 20f);
            Vector2 vector2_3 = vector2_2 * num;
            if ((double) this.velocity.Y > 0.0)
            {
              this.velocity = (this.velocity * 29f + vector2_3) / 30f;
              return;
            }
            this.velocity = (this.velocity * 4f + vector2_3) / 5f;
            return;
          }
          float num1 = 5f;
          if ((double) this.velocity.Y > 0.0)
            num1 = 3f;
          if ((double) this.velocity.Y < 0.0)
            num1 = 8f;
          Vector2 vector2 = new Vector2((float) this.direction, -1f);
          vector2.Normalize();
          vector2 *= num1;
          if ((double) num1 < 5.0)
          {
            this.velocity = (this.velocity * 24f + vector2) / 25f;
            return;
          }
          this.velocity = (this.velocity * 9f + vector2) / 10f;
          return;
        }
        this.noGravity = false;
        Vector2 center2 = this.Center;
        this.position.X = center2.X - (float) (this.width / 2);
        this.position.Y = center2.Y - (float) (this.height / 2);
        if ((double) this.ai[3] == -0.10101000219583511)
        {
          this.ai[3] = 0.0f;
          float num = this.velocity.Length() * 2f;
          if ((double) num > 15.0)
            num = 15f;
          this.velocity.Normalize();
          this.velocity = this.velocity * num;
          if ((double) this.velocity.X < 0.0)
            this.direction = -1;
          if ((double) this.velocity.X > 0.0)
            this.direction = 1;
          this.spriteDirection = this.direction;
        }
      }
      if (this.type == 379 || this.type == 380)
      {
        if ((double) this.ai[3] < 0.0)
        {
          this.directionY = -1;
          this.damage = 0;
          this.velocity.X *= 0.93f;
          if ((double) this.velocity.X > -0.1 && (double) this.velocity.X < 0.1)
            this.velocity.X = 0.0f;
          int index = (int) (-(double) this.ai[3] - 1.0);
          int num = Math.Sign(Main.npc[index].Center.X - this.Center.X);
          if (num != this.direction)
          {
            this.velocity.X = 0.0f;
            this.direction = num;
            this.netUpdate = true;
          }
          if (this.justHit && Main.netMode != 1 && (double) Main.npc[index].localAI[0] == 0.0)
            Main.npc[index].localAI[0] = 1f;
          if ((double) this.ai[0] < 1000.0)
            this.ai[0] = 1000f;
          if ((double) ++this.ai[0] < 1300.0)
            return;
          this.ai[0] = 1000f;
          this.netUpdate = true;
          return;
        }
        if ((double) this.ai[0] >= 1000.0)
          this.ai[0] = 0.0f;
        this.damage = this.defDamage;
      }
      if (this.type == 383 && (double) this.ai[2] == 0.0 && (double) this.localAI[0] == 0.0 && Main.netMode != 1)
      {
        int index = NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) this.Center.X, (int) this.Center.Y, 384, this.whoAmI);
        this.ai[2] = (float) (index + 1);
        this.localAI[0] = -1f;
        this.netUpdate = true;
        Main.npc[index].ai[0] = (float) this.whoAmI;
        Main.npc[index].netUpdate = true;
      }
      if (this.type == 383)
      {
        int index = (int) this.ai[2] - 1;
        if (index != -1 && Main.npc[index].active && Main.npc[index].type == 384)
        {
          this.dontTakeDamage = true;
        }
        else
        {
          this.dontTakeDamage = false;
          this.ai[2] = 0.0f;
          if ((double) this.localAI[0] == -1.0)
            this.localAI[0] = 180f;
          if ((double) this.localAI[0] > 0.0)
            --this.localAI[0];
        }
      }
      if (this.type == 482)
      {
        int num2 = 300;
        int num3 = 120;
        this.dontTakeDamage = false;
        if ((double) this.ai[2] < 0.0)
        {
          this.dontTakeDamage = true;
          ++this.ai[2];
          this.velocity.X *= 0.9f;
          if ((double) Math.Abs(this.velocity.X) < 0.001)
            this.velocity.X = 1f / 1000f * (float) this.direction;
          if ((double) Math.Abs(this.velocity.Y) > 1.0)
            this.ai[2] += 10f;
          if ((double) this.ai[2] < 0.0)
            return;
          this.netUpdate = true;
          this.velocity.X += (float) this.direction * 0.3f;
          return;
        }
        if ((double) this.ai[2] < (double) num2)
        {
          if (this.justHit)
            this.ai[2] += 15f;
          ++this.ai[2];
        }
        else if ((double) this.velocity.Y == 0.0)
        {
          this.ai[2] = (float) -num3;
          this.netUpdate = true;
        }
      }
      Microsoft.Xna.Framework.Rectangle hitbox;
      if (this.type == 631)
      {
        if (this.target < 0 || this.target == (int) byte.MaxValue || Main.player[this.target].dead || !Main.player[this.target].active)
          this.TargetClosest((double) this.ai[2] > 0.0);
        Player source = Main.player[this.target];
        bool flag2 = !source.dead && source.active && (double) this.Center.Distance(source.Center) < 320.0;
        int num4 = 100;
        int num5 = 32;
        if ((double) this.ai[2] == 0.0)
        {
          this.ai[3] = 65f;
          if (flag2 && Collision.CanHit((Entity) source, (Entity) this))
          {
            this.ai[2] = (float) num4;
            this.ai[3] = 0.0f;
            this.velocity.X = (float) this.direction * 0.01f;
            this.netUpdate = true;
          }
        }
        else
        {
          if ((double) this.ai[2] < (double) num4)
          {
            ++this.ai[2];
            this.velocity.X *= 0.9f;
            if ((double) Math.Abs(this.velocity.X) < 0.001)
              this.velocity.X = 0.0f;
            if ((double) Math.Abs(this.velocity.Y) > 1.0)
              this.ai[2] = 0.0f;
            if ((double) this.ai[2] == (double) (num4 - num5 / 2) && Main.netMode != 1 && !source.Hitbox.Intersects(this.Hitbox) && Collision.CanHit((Entity) source, (Entity) this))
            {
              float num6 = 8f;
              Vector2 center = this.Center;
              Vector2 vec = this.DirectionTo(Main.player[this.target].Center) * num6;
              if (vec.HasNaNs())
                vec = new Vector2((float) this.direction * num6, 0.0f);
              int Damage = 20;
              Vector2 vector2 = (vec + Utils.RandomVector2(Main.rand, -0.8f, 0.8f)).SafeNormalize(Vector2.Zero) * num6;
              Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), center.X, center.Y, vector2.X, vector2.Y, 909, Damage, 1f, Main.myPlayer);
            }
            if ((double) this.ai[2] < (double) num4)
              return;
            this.ai[2] = (float) num4;
            this.ai[3] = 0.0f;
            this.velocity.X = (float) this.direction * 0.01f;
            this.netUpdate = true;
            return;
          }
          if ((double) this.velocity.Y == 0.0 && flag2)
          {
            hitbox = source.Hitbox;
            if (hitbox.Intersects(this.Hitbox) || Collision.CanHit((Entity) source, (Entity) this))
            {
              this.ai[2] = (float) (num4 - num5);
              this.netUpdate = true;
            }
          }
        }
      }
      if (this.type == 480)
      {
        int num7 = 180;
        int num8 = 300;
        int num9 = 180;
        int num10 = 60;
        int num11 = 20;
        if (this.life < this.lifeMax / 3)
        {
          num7 = 120;
          num8 = 240;
          num9 = 240;
          num10 = 90;
        }
        if ((double) this.ai[2] > 0.0)
          --this.ai[2];
        else if ((double) this.ai[2] == 0.0)
        {
          if (((double) Main.player[this.target].Center.X < (double) this.Center.X && this.direction < 0 || (double) Main.player[this.target].Center.X > (double) this.Center.X && this.direction > 0) && (double) this.velocity.Y == 0.0 && (double) this.Distance(Main.player[this.target].Center) < 900.0 && Collision.CanHit(this.Center, 1, 1, Main.player[this.target].Center, 1, 1))
          {
            this.ai[2] = (float) (-num9 - num11);
            this.netUpdate = true;
          }
        }
        else
        {
          if ((double) this.ai[2] < 0.0 && (double) this.ai[2] < (double) -num9)
          {
            this.position = this.position + this.netOffset;
            this.velocity.X *= 0.9f;
            if ((double) this.velocity.Y < -2.0 || (double) this.velocity.Y > 4.0 || this.justHit)
            {
              this.ai[2] = (float) num7;
            }
            else
            {
              ++this.ai[2];
              if ((double) this.ai[2] == 0.0)
                this.ai[2] = (float) num8;
            }
            float num12 = this.ai[2] + (float) num9 + (float) num11;
            if ((double) num12 == 1.0)
              SoundEngine.PlaySound(4, (int) this.position.X, (int) this.position.Y, 17);
            if ((double) num12 < (double) num11)
            {
              Vector2 Position = this.Top + new Vector2((float) (this.spriteDirection * 6), 6f);
              float num13 = MathHelper.Lerp(20f, 30f, (float) (((double) num12 * 3.0 + 50.0) / 182.0));
              double num14 = (double) Main.rand.NextFloat();
              for (float num15 = 0.0f; (double) num15 < 2.0; ++num15)
              {
                Vector2 vector2 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (float) ((double) Main.rand.NextFloat() * 0.5 + 0.5);
                Dust dust = Main.dust[Dust.NewDust(Position, 0, 0, 228)];
                dust.position = Position + vector2 * num13;
                dust.noGravity = true;
                dust.velocity = vector2 * 2f;
                dust.scale = (float) (0.5 + (double) Main.rand.NextFloat() * 0.5);
              }
            }
            Lighting.AddLight(this.Center, 0.9f, 0.75f, 0.1f);
            this.position = this.position - this.netOffset;
            return;
          }
          if ((double) this.ai[2] < 0.0 && (double) this.ai[2] >= (double) -num9)
          {
            this.position = this.position + this.netOffset;
            Lighting.AddLight(this.Center, 0.9f, 0.75f, 0.1f);
            this.velocity.X *= 0.9f;
            if ((double) this.velocity.Y < -2.0 || (double) this.velocity.Y > 4.0 || this.justHit)
            {
              this.ai[2] = (float) num7;
            }
            else
            {
              ++this.ai[2];
              if ((double) this.ai[2] == 0.0)
                this.ai[2] = (float) num8;
            }
            float num16 = this.ai[2] + (float) num9;
            if ((double) num16 < 180.0 && (Main.rand.Next(3) == 0 || (double) this.ai[2] % 3.0 == 0.0))
            {
              Vector2 Position = this.Top + new Vector2((float) (this.spriteDirection * 10), 10f);
              float num17 = MathHelper.Lerp(20f, 30f, (float) (((double) num16 * 3.0 + 50.0) / 182.0));
              double num18 = (double) Main.rand.NextFloat();
              for (float num19 = 0.0f; (double) num19 < 1.0; ++num19)
              {
                Vector2 vector2 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (float) ((double) Main.rand.NextFloat() * 0.5 + 0.5);
                Dust dust = Main.dust[Dust.NewDust(Position, 0, 0, 228)];
                dust.position = Position + vector2 * num17;
                dust.noGravity = true;
                dust.velocity = vector2 * 4f;
                dust.scale = 0.5f + Main.rand.NextFloat();
              }
            }
            this.position = this.position - this.netOffset;
            if (Main.netMode == 2)
              return;
            Player player1 = Main.player[Main.myPlayer];
            int player2 = Main.myPlayer;
            if (player1.dead || !player1.active || player1.FindBuffIndex(156) != -1)
              return;
            Vector2 vector2_4 = player1.Center - this.Center;
            if ((double) vector2_4.Length() >= 700.0)
              return;
            bool flag3 = (double) vector2_4.Length() < 30.0;
            if (!flag3)
            {
              float x = 0.7853982f.ToRotationVector2().X;
              Vector2 vector2_5 = Vector2.Normalize(vector2_4);
              if ((double) vector2_5.X > (double) x || (double) vector2_5.X < -(double) x)
                flag3 = true;
            }
            if (((double) player1.Center.X >= (double) this.Center.X || this.direction >= 0 || player1.direction <= 0) && ((double) player1.Center.X <= (double) this.Center.X || this.direction <= 0 || player1.direction >= 0) || !flag3 || (Collision.CanHitLine(this.Center, 1, 1, player1.Center, 1, 1) || Collision.CanHitLine(this.Center - Vector2.UnitY * 16f, 1, 1, player1.Center, 1, 1) ? 1 : (Collision.CanHitLine(this.Center + Vector2.UnitY * 8f, 1, 1, player1.Center, 1, 1) ? 1 : 0)) == 0 || player1.creativeGodMode)
              return;
            player1.AddBuff(156, num10 + (int) this.ai[2] * -1);
            return;
          }
        }
      }
      if (this.type == 471)
      {
        if ((double) this.ai[3] < 0.0)
        {
          this.knockBackResist = 0.0f;
          this.defense = (int) ((double) this.defDefense * 1.1);
          this.noGravity = true;
          this.noTileCollide = true;
          if ((double) this.velocity.X < 0.0)
            this.direction = -1;
          else if ((double) this.velocity.X > 0.0)
            this.direction = 1;
          this.rotation = this.velocity.X * 0.1f;
          if (Main.netMode != 1)
          {
            ++this.localAI[3];
            if ((double) this.localAI[3] > (double) Main.rand.Next(20, 180))
            {
              this.localAI[3] = 0.0f;
              Vector2 vector2 = this.Center + this.velocity;
              NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) vector2.X, (int) vector2.Y, 30);
            }
          }
        }
        else
        {
          this.localAI[3] = 0.0f;
          this.knockBackResist = 0.35f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
          this.rotation *= 0.9f;
          this.defense = this.defDefense;
          this.noGravity = false;
          this.noTileCollide = false;
        }
        if ((double) this.ai[3] == 1.0)
        {
          this.knockBackResist = 0.0f;
          this.defense += 10;
        }
        if ((double) this.ai[3] == -1.0)
        {
          this.TargetClosest();
          float num20 = 8f;
          float num21 = 40f;
          Vector2 vector2 = Main.player[this.target].Center - this.Center;
          float num22 = vector2.Length();
          float num23 = num20 + num22 / 200f;
          vector2.Normalize();
          vector2 *= num23;
          this.velocity = (this.velocity * (num21 - 1f) + vector2) / num21;
          if ((double) num22 >= 500.0 || Collision.SolidCollision(this.position, this.width, this.height))
            return;
          this.ai[3] = 0.0f;
          this.ai[2] = 0.0f;
          return;
        }
        if ((double) this.ai[3] == -2.0)
        {
          this.velocity.Y -= 0.2f;
          if ((double) this.velocity.Y < -10.0)
            this.velocity.Y = -10f;
          if ((double) Main.player[this.target].Center.Y - (double) this.Center.Y > 200.0)
          {
            this.TargetClosest();
            this.ai[3] = -3f;
            this.ai[2] = (double) Main.player[this.target].Center.X <= (double) this.Center.X ? -1f : 1f;
          }
          this.velocity.X *= 0.99f;
          return;
        }
        if ((double) this.ai[3] == -3.0)
        {
          if (this.direction == 0)
            this.TargetClosest();
          if ((double) this.ai[2] == 0.0)
            this.ai[2] = (float) this.direction;
          this.velocity.Y *= 0.9f;
          this.velocity.X += this.ai[2] * 0.3f;
          if ((double) this.velocity.X > 10.0)
            this.velocity.X = 10f;
          if ((double) this.velocity.X < -10.0)
            this.velocity.X = -10f;
          float num = Main.player[this.target].Center.X - this.Center.X;
          if ((double) this.ai[2] < 0.0 && (double) num > 300.0 || (double) this.ai[2] > 0.0 && (double) num < -300.0)
          {
            this.ai[3] = -4f;
            this.ai[2] = 0.0f;
            return;
          }
          if ((double) Math.Abs(num) <= 800.0)
            return;
          this.ai[3] = -1f;
          this.ai[2] = 0.0f;
          return;
        }
        if ((double) this.ai[3] == -4.0)
        {
          ++this.ai[2];
          this.velocity.Y += 0.1f;
          if ((double) this.velocity.Length() > 4.0)
            this.velocity = this.velocity * 0.9f;
          int index4 = (int) this.Center.X / 16;
          int index5 = (int) ((double) this.position.Y + (double) this.height + 12.0) / 16;
          bool flag4 = false;
          for (int index6 = index4 - 1; index6 <= index4 + 1; ++index6)
          {
            if (Main.tile[index6, index5] == null)
              Main.tile[index4, index5] = new Tile();
            if (Main.tile[index6, index5].active() && Main.tileSolid[(int) Main.tile[index6, index5].type])
              flag4 = true;
          }
          if (flag4 && !Collision.SolidCollision(this.position, this.width, this.height))
          {
            this.ai[3] = 0.0f;
            this.ai[2] = 0.0f;
          }
          else if ((double) this.ai[2] > 300.0 || (double) this.Center.Y > (double) Main.player[this.target].Center.Y + 200.0)
          {
            this.ai[3] = -1f;
            this.ai[2] = 0.0f;
          }
        }
        else
        {
          if ((double) this.ai[3] == 1.0)
          {
            Vector2 center = this.Center;
            center.Y -= 70f;
            this.velocity.X *= 0.8f;
            ++this.ai[2];
            if ((double) this.ai[2] == 60.0)
            {
              if (Main.netMode != 1)
                NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) center.X, (int) center.Y + 18, 472);
            }
            else if ((double) this.ai[2] >= 90.0)
            {
              this.ai[3] = -2f;
              this.ai[2] = 0.0f;
            }
            for (int index7 = 0; index7 < 2; ++index7)
            {
              Vector2 vector2_6 = center;
              Vector2 vector2_7 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
              vector2_7.Normalize();
              Vector2 vector2_8 = vector2_7 * ((float) Main.rand.Next(0, 100) * 0.1f);
              Vector2 vector2_9 = vector2_8;
              Vector2 Position = vector2_6 + vector2_9;
              vector2_8.Normalize();
              vector2_7 = vector2_8 * ((float) Main.rand.Next(50, 90) * 0.1f);
              Color newColor = new Color();
              int index8 = Dust.NewDust(Position, 1, 1, 27, newColor: newColor);
              Main.dust[index8].velocity = -vector2_7 * 0.3f;
              Main.dust[index8].alpha = 100;
              if (Main.rand.Next(2) == 0)
              {
                Main.dust[index8].noGravity = true;
                Main.dust[index8].scale += 0.3f;
              }
            }
            return;
          }
          ++this.ai[2];
          int num = 10;
          if ((double) this.velocity.Y == 0.0 && NPC.CountNPCS(472) < num)
          {
            if ((double) this.ai[2] >= 180.0)
            {
              this.ai[2] = 0.0f;
              this.ai[3] = 1f;
            }
          }
          else
          {
            if (NPC.CountNPCS(472) >= num)
              ++this.ai[2];
            if ((double) this.ai[2] >= 360.0)
            {
              this.ai[2] = 0.0f;
              this.ai[3] = -2f;
              this.velocity.Y -= 3f;
            }
          }
          if (this.target >= 0 && !Main.player[this.target].dead && (double) (Main.player[this.target].Center - this.Center).Length() > 800.0)
          {
            this.ai[3] = -1f;
            this.ai[2] = 0.0f;
          }
        }
        if (Main.player[this.target].dead)
        {
          this.TargetClosest();
          if (Main.player[this.target].dead)
            this.EncourageDespawn(1);
        }
      }
      if (this.type == 419)
      {
        this.reflectsProjectiles = false;
        this.takenDamageMultiplier = 1f;
        int num24 = 6;
        int num25 = 10;
        float num26 = 16f;
        if ((double) this.ai[2] > 0.0)
          --this.ai[2];
        if ((double) this.ai[2] == 0.0)
        {
          if (((double) Main.player[this.target].Center.X < (double) this.Center.X && this.direction < 0 || (double) Main.player[this.target].Center.X > (double) this.Center.X && this.direction > 0) && Collision.CanHit(this.Center, 1, 1, Main.player[this.target].Center, 1, 1))
          {
            this.ai[2] = -1f;
            this.netUpdate = true;
            this.TargetClosest();
          }
        }
        else
        {
          if ((double) this.ai[2] < 0.0 && (double) this.ai[2] > (double) -num24)
          {
            --this.ai[2];
            this.velocity.X *= 0.9f;
            return;
          }
          if ((double) this.ai[2] == (double) -num24)
          {
            --this.ai[2];
            this.TargetClosest();
            Vector2 vec = this.DirectionTo(Main.player[this.target].Top + new Vector2(0.0f, -30f));
            if (vec.HasNaNs())
              vec = Vector2.Normalize(new Vector2((float) this.spriteDirection, -1f));
            this.velocity = vec * num26;
            this.netUpdate = true;
            return;
          }
          if ((double) this.ai[2] < (double) -num24)
          {
            --this.ai[2];
            if ((double) this.velocity.Y == 0.0)
              this.ai[2] = 60f;
            else if ((double) this.ai[2] < (double) (-num24 - num25))
            {
              this.velocity.Y += 0.15f;
              if ((double) this.velocity.Y > 24.0)
                this.velocity.Y = 24f;
            }
            this.reflectsProjectiles = true;
            this.takenDamageMultiplier = 3f;
            if (!this.justHit)
              return;
            this.ai[2] = 60f;
            this.netUpdate = true;
            return;
          }
        }
      }
      if (this.type == 415)
      {
        int num27 = 42;
        int num28 = 18;
        if (this.justHit)
        {
          this.ai[2] = 120f;
          this.netUpdate = true;
        }
        if ((double) this.ai[2] > 0.0)
          --this.ai[2];
        if ((double) this.ai[2] == 0.0)
        {
          int num29 = 0;
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].active && Main.npc[index].type == 516)
              ++num29;
          }
          if (num29 > 6)
            this.ai[2] = 90f;
          else if (((double) Main.player[this.target].Center.X < (double) this.Center.X && this.direction < 0 || (double) Main.player[this.target].Center.X > (double) this.Center.X && this.direction > 0) && Collision.CanHit(this.Center, 1, 1, Main.player[this.target].Center, 1, 1))
          {
            this.ai[2] = -1f;
            this.netUpdate = true;
            this.TargetClosest();
          }
        }
        else if ((double) this.ai[2] < 0.0 && (double) this.ai[2] > (double) -num27)
        {
          --this.ai[2];
          if ((double) this.ai[2] == (double) -num27)
            this.ai[2] = (float) (180 + 30 * Main.rand.Next(10));
          this.velocity.X *= 0.8f;
          if ((double) this.ai[2] != (double) -num28 && (double) this.ai[2] != (double) (-num28 - 8) && (double) this.ai[2] != (double) (-num28 - 16))
            return;
          this.position = this.position + this.netOffset;
          for (int index = 0; index < 20; ++index)
          {
            Vector2 Position = this.Center + Vector2.UnitX * (float) this.spriteDirection * 40f;
            Dust dust = Main.dust[Dust.NewDust(Position, 0, 0, 259)];
            Vector2 vector2 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
            dust.position = Position + vector2 * 4f;
            dust.velocity = vector2 * 2f + Vector2.UnitX * Main.rand.NextFloat() * (float) this.spriteDirection * 3f;
            dust.scale = (float) (0.30000001192092896 + (double) vector2.X * (double) -this.spriteDirection);
            dust.fadeIn = 0.7f;
            dust.noGravity = true;
          }
          this.position = this.position - this.netOffset;
          if ((double) this.velocity.X > -0.5 && (double) this.velocity.X < 0.5)
            this.velocity.X = 0.0f;
          if (Main.netMode == 1)
            return;
          NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) this.Center.X + this.spriteDirection * 45, (int) this.Center.Y + 8, 516, Target: this.target);
          return;
        }
      }
      if (this.type == 428)
      {
        ++this.localAI[0];
        if ((double) this.localAI[0] >= 300.0)
        {
          int startX = (int) this.Center.X / 16 - 1;
          int startY = (int) this.Center.Y / 16 - 1;
          if (!Collision.SolidTiles(startX, startX + 2, startY, startY + 1) && Main.netMode != 1)
          {
            this.Transform(427);
            this.life = this.lifeMax;
            this.localAI[0] = 0.0f;
            return;
          }
        }
        int maxValue = (double) this.localAI[0] >= 60.0 ? ((double) this.localAI[0] >= 120.0 ? ((double) this.localAI[0] >= 180.0 ? ((double) this.localAI[0] >= 240.0 ? ((double) this.localAI[0] >= 300.0 ? 1 : 1) : 2) : 4) : 8) : 16;
        if (Main.rand.Next(maxValue) == 0)
        {
          this.position = this.position + this.netOffset;
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229)];
          dust.noGravity = true;
          dust.scale = 1f;
          dust.noLight = true;
          dust.velocity = this.DirectionFrom(dust.position) * dust.velocity.Length();
          dust.position -= dust.velocity * 5f;
          dust.position.X += (float) (this.direction * 6);
          dust.position.Y += 4f;
          this.position = this.position - this.netOffset;
        }
      }
      if (this.type == 427)
      {
        ++this.localAI[0];
        this.localAI[0] += Math.Abs(this.velocity.X) / 2f;
        if ((double) this.localAI[0] >= 1200.0 && Main.netMode != 1)
        {
          int startX = (int) this.Center.X / 16 - 2;
          int startY = (int) this.Center.Y / 16 - 3;
          if (!Collision.SolidTiles(startX, startX + 4, startY, startY + 4))
          {
            this.Transform(426);
            this.life = this.lifeMax;
            this.localAI[0] = 0.0f;
            return;
          }
        }
        int maxValue = (double) this.localAI[0] >= 360.0 ? ((double) this.localAI[0] >= 720.0 ? ((double) this.localAI[0] >= 1080.0 ? ((double) this.localAI[0] >= 1440.0 ? ((double) this.localAI[0] >= 1800.0 ? 1 : 1) : 2) : 6) : 16) : 32;
        if (Main.rand.Next(maxValue) == 0)
        {
          this.position = this.position + this.netOffset;
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229)];
          dust.noGravity = true;
          dust.scale = 1f;
          dust.noLight = true;
          this.position = this.position - this.netOffset;
        }
      }
      if (this.type == 590)
      {
        this.position = this.position + this.netOffset;
        int num30 = (int) ((double) this.position.Y + 6.0) / 16;
        if (this.spriteDirection < 0)
        {
          int num31 = (int) ((double) this.Center.X - 22.0) / 16;
          Tile tileSafely1 = Framing.GetTileSafely(num31, num30);
          Tile tileSafely2 = Framing.GetTileSafely(num31 + 1, num30);
          if (WorldGen.InWorld(num31, num30) && tileSafely2.liquid == (byte) 0 && tileSafely1.liquid == (byte) 0)
          {
            Lighting.AddLight(num31, num30, 1f, 0.95f, 0.8f);
            if (Main.rand.Next(30) == 0)
              Dust.NewDust(new Vector2(this.Center.X - 22f, this.position.Y + 6f), 1, 1, 6);
          }
        }
        else
        {
          int num32 = (int) ((double) this.Center.X + 14.0) / 16;
          Tile tileSafely3 = Framing.GetTileSafely(num32, num30);
          Tile tileSafely4 = Framing.GetTileSafely(num32 - 1, num30);
          if (WorldGen.InWorld(num32, num30) && tileSafely4.liquid == (byte) 0 && tileSafely3.liquid == (byte) 0)
          {
            Lighting.AddLight(num32, num30, 1f, 0.95f, 0.8f);
            if (Main.rand.Next(30) == 0)
              Dust.NewDust(new Vector2(this.Center.X + 14f, this.position.Y + 6f), 1, 1, 6);
          }
        }
        this.position = this.position - this.netOffset;
      }
      else if (this.type == 591)
      {
        this.position = this.position + this.netOffset;
        if (!this.wet)
        {
          if (this.spriteDirection < 0)
          {
            Lighting.AddLight(new Vector2(this.Center.X - 36f, this.position.Y + 24f), 1f, 0.95f, 0.8f);
            if ((double) this.ai[2] == 0.0 && Main.rand.Next(30) == 0)
              Dust.NewDust(new Vector2(this.Center.X - 36f, this.position.Y + 24f), 1, 1, 6);
          }
          else
          {
            Lighting.AddLight(new Vector2(this.Center.X + 28f, this.position.Y + 24f), 1f, 0.95f, 0.8f);
            if ((double) this.ai[2] == 0.0 && Main.rand.Next(30) == 0)
              Dust.NewDust(new Vector2(this.Center.X + 28f, this.position.Y + 24f), 1, 1, 6);
          }
        }
        this.position = this.position - this.netOffset;
      }
      bool flag5 = false;
      bool flag6 = false;
      if ((double) this.velocity.X == 0.0)
        flag6 = true;
      if (this.justHit)
        flag6 = false;
      if (Main.netMode != 1 && this.type == 198 && (double) this.life <= (double) this.lifeMax * 0.55)
        this.Transform(199);
      if (Main.netMode != 1 && this.type == 348 && (double) this.life <= (double) this.lifeMax * 0.55)
        this.Transform(349);
      int num33 = 60;
      if (this.type == 120)
      {
        num33 = 180;
        if ((double) this.ai[3] == -120.0)
        {
          this.velocity = this.velocity * 0.0f;
          this.ai[3] = 0.0f;
          this.position = this.position + this.netOffset;
          SoundEngine.PlaySound(SoundID.Item8, this.position);
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num34 = this.oldPos[2].X + (float) this.width * 0.5f - vector2.X;
          float num35 = this.oldPos[2].Y + (float) this.height * 0.5f - vector2.Y;
          float num36 = 2f / (float) Math.Sqrt((double) num34 * (double) num34 + (double) num35 * (double) num35);
          float SpeedX = num34 * num36;
          float SpeedY = num35 * num36;
          for (int index9 = 0; index9 < 20; ++index9)
          {
            int index10 = Dust.NewDust(this.position, this.width, this.height, 71, SpeedX, SpeedY, 200, Scale: 2f);
            Main.dust[index10].noGravity = true;
            Main.dust[index10].velocity.X *= 2f;
          }
          for (int index11 = 0; index11 < 20; ++index11)
          {
            int index12 = Dust.NewDust(this.oldPos[2], this.width, this.height, 71, -SpeedX, -SpeedY, 200, Scale: 2f);
            Main.dust[index12].noGravity = true;
            Main.dust[index12].velocity.X *= 2f;
          }
          this.position = this.position - this.netOffset;
        }
      }
      bool flag7 = false;
      bool flag8 = true;
      if (this.type == 343 || this.type == 47 || this.type == 67 || this.type == 109 || this.type == 110 || this.type == 111 || this.type == 120 || this.type == 163 || this.type == 164 || this.type == 239 || this.type == 168 || this.type == 199 || this.type == 206 || this.type == 214 || this.type == 215 || this.type == 216 || this.type == 217 || this.type == 218 || this.type == 219 || this.type == 220 || this.type == 226 || this.type == 243 || this.type == 251 || this.type == 257 || this.type == 258 || this.type == 290 || this.type == 291 || this.type == 292 || this.type == 293 || this.type == 305 || this.type == 306 || this.type == 307 || this.type == 308 || this.type == 309 || this.type == 348 || this.type == 349 || this.type == 350 || this.type == 351 || this.type == 379 || this.type >= 430 && this.type <= 436 || this.type == 591 || this.type == 380 || this.type == 381 || this.type == 382 || this.type == 383 || this.type == 386 || this.type == 391 || this.type >= 449 && this.type <= 452 || this.type == 466 || this.type == 464 || this.type == 166 || this.type == 469 || this.type == 468 || this.type == 471 || this.type == 470 || this.type == 480 || this.type == 481 || this.type == 482 || this.type == 411 || this.type == 424 || this.type == 409 || this.type >= 494 && this.type <= 506 || this.type == 425 || this.type == 427 || this.type == 426 || this.type == 428 || this.type == 580 || this.type == 508 || this.type == 415 || this.type == 419 || this.type == 520 || this.type >= 524 && this.type <= 527 || this.type == 528 || this.type == 529 || this.type == 530 || this.type == 532 || this.type == 582 || this.type == 624 || this.type == 631)
        flag8 = false;
      bool flag9 = false;
      switch (this.type)
      {
        case 425:
        case 471:
          flag9 = true;
          break;
      }
      bool flag10 = true;
      switch (this.type)
      {
        case 110:
        case 111:
        case 206:
        case 214:
        case 215:
        case 216:
        case 291:
        case 292:
        case 293:
        case 350:
        case 379:
        case 380:
        case 381:
        case 382:
        case 409:
        case 411:
        case 424:
        case 426:
        case 466:
        case 498:
        case 499:
        case 500:
        case 501:
        case 502:
        case 503:
        case 504:
        case 505:
        case 506:
        case 520:
          if ((double) this.ai[2] > 0.0)
          {
            flag10 = false;
            break;
          }
          break;
      }
      if (!flag9 & flag10)
      {
        if ((double) this.velocity.Y == 0.0 && ((double) this.velocity.X > 0.0 && this.direction < 0 || (double) this.velocity.X < 0.0 && this.direction > 0))
          flag7 = true;
        if ((((double) this.position.X == (double) this.oldPosition.X ? 1 : ((double) this.ai[3] >= (double) num33 ? 1 : 0)) | (flag7 ? 1 : 0)) != 0)
          ++this.ai[3];
        else if ((double) Math.Abs(this.velocity.X) > 0.9 && (double) this.ai[3] > 0.0)
          --this.ai[3];
        if ((double) this.ai[3] > (double) (num33 * 10))
          this.ai[3] = 0.0f;
        if (this.justHit)
          this.ai[3] = 0.0f;
        if ((double) this.ai[3] == (double) num33)
          this.netUpdate = true;
        hitbox = Main.player[this.target].Hitbox;
        if (hitbox.Intersects(this.Hitbox))
          this.ai[3] = 0.0f;
      }
      if (this.type == 463 && Main.netMode != 1)
      {
        if ((double) this.localAI[3] > 0.0)
          --this.localAI[3];
        if (this.justHit && (double) this.localAI[3] <= 0.0 && Main.rand.Next(3) == 0)
        {
          this.localAI[3] = 30f;
          int length = Main.rand.Next(3, 6);
          int[] numArray = new int[length];
          int maxValue = 0;
          for (int index = 0; index < (int) byte.MaxValue; ++index)
          {
            if (Main.player[index].active && !Main.player[index].dead && Collision.CanHitLine(this.position, this.width, this.height, Main.player[index].position, Main.player[index].width, Main.player[index].height))
            {
              numArray[maxValue] = index;
              ++maxValue;
              if (maxValue == length)
                break;
            }
          }
          if (maxValue > 1)
          {
            for (int index13 = 0; index13 < 100; ++index13)
            {
              int index14 = Main.rand.Next(maxValue);
              int index15 = index14;
              while (index15 == index14)
                index15 = Main.rand.Next(maxValue);
              int num37 = numArray[index14];
              numArray[index14] = numArray[index15];
              numArray[index15] = num37;
            }
          }
          Vector2 vector2_10 = new Vector2(-1f, -1f);
          for (int index = 0; index < maxValue; ++index)
          {
            Vector2 vector2_11 = Main.npc[numArray[index]].Center - this.Center;
            vector2_11.Normalize();
            vector2_10 += vector2_11;
          }
          vector2_10.Normalize();
          for (int index = 0; index < length; ++index)
          {
            float num38 = (float) Main.rand.Next(8, 13);
            Vector2 vector2_12 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            vector2_12.Normalize();
            if (maxValue > 0)
            {
              vector2_12 += vector2_10;
              vector2_12.Normalize();
            }
            vector2_12 *= num38;
            if (maxValue > 0)
            {
              --maxValue;
              vector2_12 = Main.player[numArray[maxValue]].Center - this.Center;
              vector2_12.Normalize();
              vector2_12 *= num38;
            }
            Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X, this.position.Y + (float) (this.width / 4), vector2_12.X, vector2_12.Y, 498, (int) ((double) this.damage * 0.15), 1f, Main.myPlayer);
          }
        }
      }
      if (this.type == 460)
        this.knockBackResist = (double) this.velocity.Y < -(double) NPC.gravity || (double) this.velocity.Y > (double) NPC.gravity ? 0.0f : 0.25f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
      if (this.type == 469)
      {
        this.knockBackResist = 0.45f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
        if ((double) this.ai[2] == 1.0)
          this.knockBackResist = 0.0f;
        bool flag11 = false;
        int num39 = (int) this.Center.X / 16;
        int num40 = (int) this.Center.Y / 16;
        for (int index16 = num39 - 1; index16 <= num39 + 1; ++index16)
        {
          for (int index17 = num40 - 1; index17 <= num40 + 1; ++index17)
          {
            if (Main.tile[index16, index17] != null && Main.tile[index16, index17].wall > (ushort) 0)
            {
              flag11 = true;
              break;
            }
          }
          if (flag11)
            break;
        }
        if ((double) this.ai[2] == 0.0 & flag11)
        {
          if ((double) this.velocity.Y == 0.0)
          {
            flag1 = true;
            this.velocity.Y = -4.6f;
            this.velocity.X *= 1.3f;
          }
          else if ((double) this.velocity.Y > 0.0 && !Main.player[this.target].dead)
            this.ai[2] = 1f;
        }
        if (flag11 && (double) this.ai[2] == 1.0 && !Main.player[this.target].dead && Collision.CanHit(this.Center, 1, 1, Main.player[this.target].Center, 1, 1))
        {
          Vector2 vector2 = Main.player[this.target].Center - this.Center;
          float num41 = vector2.Length();
          vector2.Normalize();
          this.velocity = (this.velocity * 29f + vector2 * (float) (4.5 + (double) num41 / 300.0)) / 30f;
          this.noGravity = true;
          this.ai[2] = 1f;
          return;
        }
        this.noGravity = false;
        this.ai[2] = 0.0f;
      }
      if (this.type == 462 && (double) this.velocity.Y == 0.0 && (double) (Main.player[this.target].Center - this.Center).Length() < 150.0 && (double) Math.Abs(this.velocity.X) > 3.0 && ((double) this.velocity.X < 0.0 && (double) this.Center.X > (double) Main.player[this.target].Center.X || (double) this.velocity.X > 0.0 && (double) this.Center.X < (double) Main.player[this.target].Center.X))
      {
        flag1 = true;
        this.velocity.X *= 1.75f;
        this.velocity.Y -= 4.5f;
        if ((double) this.Center.Y - (double) Main.player[this.target].Center.Y > 20.0)
          this.velocity.Y -= 0.5f;
        if ((double) this.Center.Y - (double) Main.player[this.target].Center.Y > 40.0)
          --this.velocity.Y;
        if ((double) this.Center.Y - (double) Main.player[this.target].Center.Y > 80.0)
          this.velocity.Y -= 1.5f;
        if ((double) this.Center.Y - (double) Main.player[this.target].Center.Y > 100.0)
          this.velocity.Y -= 1.5f;
        if ((double) Math.Abs(this.velocity.X) > 7.0)
        {
          if ((double) this.velocity.X < 0.0)
            this.velocity.X = -7f;
          else
            this.velocity.X = 7f;
        }
      }
      if (this.type == 624 && this.target < (int) byte.MaxValue)
      {
        if (!Main.remixWorld && !Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
        {
          this.ai[3] = (float) num33;
          this.directionY = -1;
          if (this.type == 624 && !this.AI_003_Gnomes_ShouldTurnToStone() && (double) (this.Center - Main.player[this.target].Center).Length() > 500.0)
          {
            this.velocity.X *= 0.95f;
            if ((double) this.velocity.X <= -0.1 || (double) this.velocity.X >= 0.1)
              return;
            this.velocity.X = 0.0f;
            return;
          }
        }
        else if ((double) Main.player[this.target].Center.Y > (double) this.Center.Y - 128.0)
          this.ai[3] = 0.0f;
      }
      if ((double) this.ai[3] < (double) num33 && NPC.DespawnEncouragement_AIStyle3_Fighters_NotDiscouraged(this.type, this.position, this))
      {
        if ((double) this.shimmerTransparency < 1.0)
        {
          if ((this.type == 3 || this.type == 591 || this.type == 590 || this.type == 331 || this.type == 332 || this.type == 21 || this.type >= 449 && this.type <= 452 || this.type == 31 || this.type == 294 || this.type == 295 || this.type == 296 || this.type == 77 || this.type == 110 || this.type == 132 || this.type == 167 || this.type == 161 || this.type == 162 || this.type == 186 || this.type == 187 || this.type == 188 || this.type == 189 || this.type == 197 || this.type == 200 || this.type == 201 || this.type == 202 || this.type == 203 || this.type == 223 || this.type == 291 || this.type == 292 || this.type == 293 || this.type == 320 || this.type == 321 || this.type == 319 || this.type == 481 || this.type == 632 || this.type == 635) && Main.rand.Next(1000) == 0)
            SoundEngine.PlaySound(14, (int) this.position.X, (int) this.position.Y);
          if ((this.type == 489 || this.type == 586) && Main.rand.Next(800) == 0)
            SoundEngine.PlaySound(14, (int) this.position.X, (int) this.position.Y, this.type);
          if ((this.type == 78 || this.type == 79 || this.type == 80 || this.type == 630) && Main.rand.Next(500) == 0)
            SoundEngine.PlaySound(26, (int) this.position.X, (int) this.position.Y);
          if (this.type == 159 && Main.rand.Next(500) == 0)
            SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, 7);
          if (this.type == 162 && Main.rand.Next(500) == 0)
            SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, 6);
          if (this.type == 181 && Main.rand.Next(500) == 0)
            SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, 8);
          if (this.type >= 269 && this.type <= 280 && Main.rand.Next(1000) == 0)
            SoundEngine.PlaySound(14, (int) this.position.X, (int) this.position.Y);
        }
        this.TargetClosest();
        if (this.directionY > 0 && (double) Main.player[this.target].Center.Y <= (double) this.Bottom.Y)
          this.directionY = -1;
      }
      else if ((double) this.ai[2] <= 0.0 || !NPC.DespawnEncouragement_AIStyle3_Fighters_CanBeBusyWithAction(this.type))
      {
        if (Main.IsItDay() && (double) this.position.Y / 16.0 < Main.worldSurface && this.type != 624 && this.type != 631)
          this.EncourageDespawn(10);
        if ((double) this.velocity.X == 0.0)
        {
          if ((double) this.velocity.Y == 0.0)
          {
            ++this.ai[0];
            if ((double) this.ai[0] >= 2.0)
            {
              this.direction *= -1;
              this.spriteDirection = this.direction;
              this.ai[0] = 0.0f;
            }
          }
        }
        else
          this.ai[0] = 0.0f;
        if (this.direction == 0)
          this.direction = 1;
      }
      if (this.type == 159 || this.type == 349)
      {
        if (this.type == 159 && ((double) this.velocity.X > 0.0 && this.direction < 0 || (double) this.velocity.X < 0.0 && this.direction > 0))
          this.velocity.X *= 0.95f;
        if ((double) this.velocity.X < -6.0 || (double) this.velocity.X > 6.0)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity = this.velocity * 0.8f;
        }
        else if ((double) this.velocity.X < 6.0 && this.direction == 1)
        {
          if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X < 0.0)
            this.velocity.X *= 0.99f;
          this.velocity.X += 0.07f;
          if ((double) this.velocity.X > 6.0)
            this.velocity.X = 6f;
        }
        else if ((double) this.velocity.X > -6.0 && this.direction == -1)
        {
          if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X > 0.0)
            this.velocity.X *= 0.99f;
          this.velocity.X -= 0.07f;
          if ((double) this.velocity.X < -6.0)
            this.velocity.X = -6f;
        }
      }
      else if (this.type == 199)
      {
        if ((double) this.velocity.X < -4.0 || (double) this.velocity.X > 4.0)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity = this.velocity * 0.8f;
        }
        else if ((double) this.velocity.X < 4.0 && this.direction == 1)
        {
          if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X < 0.0)
            this.velocity.X *= 0.8f;
          this.velocity.X += 0.1f;
          if ((double) this.velocity.X > 4.0)
            this.velocity.X = 4f;
        }
        else if ((double) this.velocity.X > -4.0 && this.direction == -1)
        {
          if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X > 0.0)
            this.velocity.X *= 0.8f;
          this.velocity.X -= 0.1f;
          if ((double) this.velocity.X < -4.0)
            this.velocity.X = -4f;
        }
      }
      else if (this.type == 120 || this.type == 166 || this.type == 213 || this.type == 258 || this.type == 528 || this.type == 529)
      {
        if ((double) this.velocity.X < -3.0 || (double) this.velocity.X > 3.0)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity = this.velocity * 0.8f;
        }
        else if ((double) this.velocity.X < 3.0 && this.direction == 1)
        {
          if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X < 0.0)
            this.velocity.X *= 0.99f;
          this.velocity.X += 0.07f;
          if ((double) this.velocity.X > 3.0)
            this.velocity.X = 3f;
        }
        else if ((double) this.velocity.X > -3.0 && this.direction == -1)
        {
          if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X > 0.0)
            this.velocity.X *= 0.99f;
          this.velocity.X -= 0.07f;
          if ((double) this.velocity.X < -3.0)
            this.velocity.X = -3f;
        }
      }
      else if (this.type == 461 || this.type == 27 || this.type == 77 || this.type == 104 || this.type == 163 || this.type == 162 || this.type == 196 || this.type == 197 || this.type == 212 || this.type == 257 || this.type == 326 || this.type == 343 || this.type == 348 || this.type == 351 || this.type >= 524 && this.type <= 527 || this.type == 530 || this.type == 236)
      {
        if ((double) this.velocity.X < -2.0 || (double) this.velocity.X > 2.0)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity = this.velocity * 0.8f;
        }
        else if ((double) this.velocity.X < 2.0 && this.direction == 1)
        {
          this.velocity.X += 0.07f;
          if ((double) this.velocity.X > 2.0)
            this.velocity.X = 2f;
        }
        else if ((double) this.velocity.X > -2.0 && this.direction == -1)
        {
          this.velocity.X -= 0.07f;
          if ((double) this.velocity.X < -2.0)
            this.velocity.X = -2f;
        }
      }
      else if (this.type == 109)
      {
        if ((double) this.velocity.X < -2.0 || (double) this.velocity.X > 2.0)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity = this.velocity * 0.8f;
        }
        else if ((double) this.velocity.X < 2.0 && this.direction == 1)
        {
          this.velocity.X += 0.04f;
          if ((double) this.velocity.X > 2.0)
            this.velocity.X = 2f;
        }
        else if ((double) this.velocity.X > -2.0 && this.direction == -1)
        {
          this.velocity.X -= 0.04f;
          if ((double) this.velocity.X < -2.0)
            this.velocity.X = -2f;
        }
      }
      else if (this.type == 21 || this.type == 26 || this.type == 31 || this.type == 294 || this.type == 295 || this.type == 296 || this.type == 47 || this.type == 73 || this.type == 140 || this.type == 164 || this.type == 239 || this.type == 167 || this.type == 168 || this.type == 185 || this.type == 198 || this.type == 201 || this.type == 202 || this.type == 203 || this.type == 217 || this.type == 218 || this.type == 219 || this.type == 226 || this.type == 181 || this.type == 254 || this.type == 338 || this.type == 339 || this.type == 340 || this.type == 342 || this.type == 385 || this.type == 389 || this.type == 462 || this.type == 463 || this.type == 466 || this.type == 464 || this.type == 469 || this.type == 470 || this.type == 480 || this.type == 482 || this.type == 425 || this.type == 429 || this.type == 586 || this.type == 631 || this.type == 635)
      {
        float num42 = 1.5f;
        if (this.type == 181 && Main.remixWorld)
          num42 = 3.75f;
        else if (this.type == 294)
          num42 = 2f;
        else if (this.type == 295)
          num42 = 1.75f;
        else if (this.type == 296)
          num42 = 1.25f;
        else if (this.type == 201)
          num42 = 1.1f;
        else if (this.type == 202)
          num42 = 0.9f;
        else if (this.type == 203)
          num42 = 1.2f;
        else if (this.type == 338)
          num42 = 1.75f;
        else if (this.type == 339)
          num42 = 1.25f;
        else if (this.type == 340)
          num42 = 2f;
        else if (this.type == 385)
          num42 = 1.8f;
        else if (this.type == 389)
          num42 = 2.25f;
        else if (this.type == 462)
          num42 = 4f;
        else if (this.type == 463)
          num42 = 0.75f;
        else if (this.type == 466)
          num42 = 3.75f;
        else if (this.type == 469)
          num42 = 3.25f;
        else if (this.type == 480)
          num42 = (float) (1.5 + (1.0 - (double) this.life / (double) this.lifeMax) * 2.0);
        else if (this.type == 425)
          num42 = 6f;
        else if (this.type == 429)
          num42 = 4f;
        else if (this.type == 631)
          num42 = 0.9f;
        else if (this.type == 586)
          num42 = (float) (1.5 + (1.0 - (double) this.life / (double) this.lifeMax) * 3.5);
        if (this.type == 21 || this.type == 201 || this.type == 202 || this.type == 203 || this.type == 342 || this.type == 635)
          num42 *= (float) (1.0 + (1.0 - (double) this.scale));
        if ((double) this.velocity.X < -(double) num42 || (double) this.velocity.X > (double) num42)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity = this.velocity * 0.8f;
        }
        else if ((double) this.velocity.X < (double) num42 && this.direction == 1)
        {
          if (this.type == 466 && (double) this.velocity.X < -2.0)
            this.velocity.X *= 0.9f;
          if (this.type == 586 && (double) this.velocity.Y == 0.0 && (double) this.velocity.X < -1.0)
            this.velocity.X *= 0.9f;
          this.velocity.X += 0.07f;
          if ((double) this.velocity.X > (double) num42)
            this.velocity.X = num42;
        }
        else if ((double) this.velocity.X > -(double) num42 && this.direction == -1)
        {
          if (this.type == 466 && (double) this.velocity.X > 2.0)
            this.velocity.X *= 0.9f;
          if (this.type == 586 && (double) this.velocity.Y == 0.0 && (double) this.velocity.X > 1.0)
            this.velocity.X *= 0.9f;
          this.velocity.X -= 0.07f;
          if ((double) this.velocity.X < -(double) num42)
            this.velocity.X = -num42;
        }
        if ((double) this.velocity.Y == 0.0 && this.type == 462 && (this.direction > 0 && (double) this.velocity.X < 0.0 || this.direction < 0 && (double) this.velocity.X > 0.0))
          this.velocity.X *= 0.9f;
      }
      else if (this.type >= 269 && this.type <= 280)
      {
        float num43 = 1.5f;
        if (this.type == 269)
          num43 = 2f;
        if (this.type == 270)
          num43 = 1f;
        if (this.type == 271)
          num43 = 1.5f;
        if (this.type == 272)
          num43 = 3f;
        if (this.type == 273)
          num43 = 1.25f;
        if (this.type == 274)
          num43 = 3f;
        if (this.type == 275)
          num43 = 3.25f;
        if (this.type == 276)
          num43 = 2f;
        if (this.type == 277)
          num43 = 2.75f;
        if (this.type == 278)
          num43 = 1.8f;
        if (this.type == 279)
          num43 = 1.3f;
        if (this.type == 280)
          num43 = 2.5f;
        float num44 = num43 * (float) (1.0 + (1.0 - (double) this.scale));
        if ((double) this.velocity.X < -(double) num44 || (double) this.velocity.X > (double) num44)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity = this.velocity * 0.8f;
        }
        else if ((double) this.velocity.X < (double) num44 && this.direction == 1)
        {
          this.velocity.X += 0.07f;
          if ((double) this.velocity.X > (double) num44)
            this.velocity.X = num44;
        }
        else if ((double) this.velocity.X > -(double) num44 && this.direction == -1)
        {
          this.velocity.X -= 0.07f;
          if ((double) this.velocity.X < -(double) num44)
            this.velocity.X = -num44;
        }
      }
      else if (this.type >= 305 && this.type <= 314)
      {
        float num45 = 1.5f;
        if (this.type == 305 || this.type == 310)
          num45 = 2f;
        if (this.type == 306 || this.type == 311)
          num45 = 1.25f;
        if (this.type == 307 || this.type == 312)
          num45 = 2.25f;
        if (this.type == 308 || this.type == 313)
          num45 = 1.5f;
        if (this.type == 309 || this.type == 314)
          num45 = 1f;
        if (this.type < 310)
        {
          if ((double) this.velocity.Y == 0.0)
          {
            this.velocity.X *= 0.85f;
            if ((double) this.velocity.X > -0.3 && (double) this.velocity.X < 0.3)
            {
              flag1 = true;
              this.velocity.Y = -7f;
              this.velocity.X = num45 * (float) this.direction;
            }
          }
          else if (this.spriteDirection == this.direction)
            this.velocity.X = (float) (((double) this.velocity.X * 10.0 + (double) num45 * (double) this.direction) / 11.0);
        }
        else if ((double) this.velocity.X < -(double) num45 || (double) this.velocity.X > (double) num45)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity = this.velocity * 0.8f;
        }
        else if ((double) this.velocity.X < (double) num45 && this.direction == 1)
        {
          this.velocity.X += 0.07f;
          if ((double) this.velocity.X > (double) num45)
            this.velocity.X = num45;
        }
        else if ((double) this.velocity.X > -(double) num45 && this.direction == -1)
        {
          this.velocity.X -= 0.07f;
          if ((double) this.velocity.X < -(double) num45)
            this.velocity.X = -num45;
        }
      }
      else if (this.type == 67 || this.type == 220 || this.type == 428)
      {
        if ((double) this.velocity.X < -0.5 || (double) this.velocity.X > 0.5)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity = this.velocity * 0.7f;
        }
        else if ((double) this.velocity.X < 0.5 && this.direction == 1)
        {
          this.velocity.X += 0.03f;
          if ((double) this.velocity.X > 0.5)
            this.velocity.X = 0.5f;
        }
        else if ((double) this.velocity.X > -0.5 && this.direction == -1)
        {
          this.velocity.X -= 0.03f;
          if ((double) this.velocity.X < -0.5)
            this.velocity.X = -0.5f;
        }
      }
      else if (this.type == 78 || this.type == 79 || this.type == 80 || this.type == 630)
      {
        float num46 = 1f;
        float num47 = 0.05f;
        if (this.life < this.lifeMax / 2)
        {
          num46 = 2f;
          num47 = 0.1f;
        }
        if (this.type == 79 || this.type == 630)
          num46 *= 1.5f;
        if ((double) this.velocity.X < -(double) num46 || (double) this.velocity.X > (double) num46)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity = this.velocity * 0.7f;
        }
        else if ((double) this.velocity.X < (double) num46 && this.direction == 1)
        {
          this.velocity.X += num47;
          if ((double) this.velocity.X > (double) num46)
            this.velocity.X = num46;
        }
        else if ((double) this.velocity.X > -(double) num46 && this.direction == -1)
        {
          this.velocity.X -= num47;
          if ((double) this.velocity.X < -(double) num46)
            this.velocity.X = -num46;
        }
      }
      else if (this.type == 287)
      {
        float num48 = 5f;
        float num49 = 0.2f;
        if ((double) this.velocity.X < -(double) num48 || (double) this.velocity.X > (double) num48)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity = this.velocity * 0.7f;
        }
        else if ((double) this.velocity.X < (double) num48 && this.direction == 1)
        {
          this.velocity.X += num49;
          if ((double) this.velocity.X > (double) num48)
            this.velocity.X = num48;
        }
        else if ((double) this.velocity.X > -(double) num48 && this.direction == -1)
        {
          this.velocity.X -= num49;
          if ((double) this.velocity.X < -(double) num48)
            this.velocity.X = -num48;
        }
      }
      else if (this.type == 243)
      {
        float num50 = 1f;
        float num51 = 0.07f;
        float num52 = num50 + (float) ((1.0 - (double) this.life / (double) this.lifeMax) * 1.5);
        float num53 = num51 + (float) ((1.0 - (double) this.life / (double) this.lifeMax) * 0.15000000596046448);
        if ((double) this.velocity.X < -(double) num52 || (double) this.velocity.X > (double) num52)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity = this.velocity * 0.7f;
        }
        else if ((double) this.velocity.X < (double) num52 && this.direction == 1)
        {
          this.velocity.X += num53;
          if ((double) this.velocity.X > (double) num52)
            this.velocity.X = num52;
        }
        else if ((double) this.velocity.X > -(double) num52 && this.direction == -1)
        {
          this.velocity.X -= num53;
          if ((double) this.velocity.X < -(double) num52)
            this.velocity.X = -num52;
        }
      }
      else if (this.type == 251)
      {
        float num54 = 1f;
        float num55 = 0.08f;
        float num56 = num54 + (float) ((1.0 - (double) this.life / (double) this.lifeMax) * 2.0);
        float num57 = num55 + (float) ((1.0 - (double) this.life / (double) this.lifeMax) * 0.20000000298023224);
        if ((double) this.velocity.X < -(double) num56 || (double) this.velocity.X > (double) num56)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity = this.velocity * 0.7f;
        }
        else if ((double) this.velocity.X < (double) num56 && this.direction == 1)
        {
          this.velocity.X += num57;
          if ((double) this.velocity.X > (double) num56)
            this.velocity.X = num56;
        }
        else if ((double) this.velocity.X > -(double) num56 && this.direction == -1)
        {
          this.velocity.X -= num57;
          if ((double) this.velocity.X < -(double) num56)
            this.velocity.X = -num56;
        }
      }
      else if (this.type == 386)
      {
        if ((double) this.ai[2] > 0.0)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity.X *= 0.8f;
        }
        else
        {
          float num58 = 0.15f;
          float num59 = 1.5f;
          if ((double) this.velocity.X < -(double) num59 || (double) this.velocity.X > (double) num59)
          {
            if ((double) this.velocity.Y == 0.0)
              this.velocity = this.velocity * 0.7f;
          }
          else if ((double) this.velocity.X < (double) num59 && this.direction == 1)
          {
            this.velocity.X += num58;
            if ((double) this.velocity.X > (double) num59)
              this.velocity.X = num59;
          }
          else if ((double) this.velocity.X > -(double) num59 && this.direction == -1)
          {
            this.velocity.X -= num58;
            if ((double) this.velocity.X < -(double) num59)
              this.velocity.X = -num59;
          }
        }
      }
      else if (this.type == 460)
      {
        float num60 = 3f;
        float num61 = 0.1f;
        if ((double) Math.Abs(this.velocity.X) > 2.0)
          num61 *= 0.8f;
        if ((double) Math.Abs(this.velocity.X) > 2.5)
          num61 *= 0.8f;
        if ((double) Math.Abs(this.velocity.X) > 3.0)
          num61 *= 0.8f;
        if ((double) Math.Abs(this.velocity.X) > 3.5)
          num61 *= 0.8f;
        if ((double) Math.Abs(this.velocity.X) > 4.0)
          num61 *= 0.8f;
        if ((double) Math.Abs(this.velocity.X) > 4.5)
          num61 *= 0.8f;
        if ((double) Math.Abs(this.velocity.X) > 5.0)
          num61 *= 0.8f;
        if ((double) Math.Abs(this.velocity.X) > 5.5)
          num61 *= 0.8f;
        float num62 = num60 + (float) ((1.0 - (double) this.life / (double) this.lifeMax) * 3.0);
        if ((double) this.velocity.X < -(double) num62 || (double) this.velocity.X > (double) num62)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity = this.velocity * 0.7f;
        }
        else if ((double) this.velocity.X < (double) num62 && this.direction == 1)
        {
          if ((double) this.velocity.X < 0.0)
            this.velocity.X *= 0.93f;
          this.velocity.X += num61;
          if ((double) this.velocity.X > (double) num62)
            this.velocity.X = num62;
        }
        else if ((double) this.velocity.X > -(double) num62 && this.direction == -1)
        {
          if ((double) this.velocity.X > 0.0)
            this.velocity.X *= 0.93f;
          this.velocity.X -= num61;
          if ((double) this.velocity.X < -(double) num62)
            this.velocity.X = -num62;
        }
      }
      else if (this.type == 508 || this.type == 580 || this.type == 582)
      {
        float num63 = 2.5f;
        float num64 = 10f;
        float num65 = Math.Abs(this.velocity.X);
        if (this.type == 582)
        {
          num63 = 2.25f;
          num64 = 7f;
          if ((double) num65 > 2.5)
          {
            num63 = 3f;
            num64 += 75f;
          }
          else if ((double) num65 > 2.0)
          {
            num63 = 2.75f;
            num64 += 55f;
          }
        }
        else if ((double) num65 > 2.75)
        {
          num63 = 3.5f;
          num64 += 80f;
        }
        else if ((double) num65 > 2.25)
        {
          num63 = 3f;
          num64 += 60f;
        }
        if ((double) Math.Abs(this.velocity.Y) < 0.5)
        {
          if ((double) this.velocity.X > 0.0 && this.direction < 0)
            this.velocity = this.velocity * 0.95f;
          if ((double) this.velocity.X < 0.0 && this.direction > 0)
            this.velocity = this.velocity * 0.95f;
        }
        if ((double) Math.Abs(this.velocity.Y) > (double) NPC.gravity)
        {
          float num66 = 3f;
          if (this.type == 582)
            num66 = 2f;
          num64 *= num66;
        }
        if ((double) this.velocity.X <= 0.0 && this.direction < 0)
          this.velocity.X = (float) (((double) this.velocity.X * (double) num64 - (double) num63) / ((double) num64 + 1.0));
        else if ((double) this.velocity.X >= 0.0 && this.direction > 0)
          this.velocity.X = (float) (((double) this.velocity.X * (double) num64 + (double) num63) / ((double) num64 + 1.0));
        else if ((double) Math.Abs(this.Center.X - Main.player[this.target].Center.X) > 20.0 && (double) Math.Abs(this.velocity.Y) <= (double) NPC.gravity)
        {
          this.velocity.X *= 0.99f;
          this.velocity.X += (float) this.direction * 0.025f;
        }
      }
      else if (this.type == 391 || this.type == 427 || this.type == 415 || this.type == 419 || this.type == 518 || this.type == 532)
      {
        float num67 = 5f;
        float num68 = 0.25f;
        float num69 = 0.7f;
        if (this.type == 427)
        {
          num67 = 6f;
          num68 = 0.2f;
          num69 = 0.8f;
        }
        else if (this.type == 415)
        {
          num67 = 4f;
          num68 = 0.1f;
          num69 = 0.95f;
        }
        else if (this.type == 419)
        {
          num67 = 6f;
          num68 = 0.15f;
          num69 = 0.85f;
        }
        else if (this.type == 518)
        {
          num67 = 5f;
          num68 = 0.1f;
          num69 = 0.95f;
        }
        else if (this.type == 532)
        {
          num67 = 5f;
          num68 = 0.15f;
          num69 = 0.98f;
        }
        if ((double) this.velocity.X < -(double) num67 || (double) this.velocity.X > (double) num67)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity = this.velocity * num69;
        }
        else if ((double) this.velocity.X < (double) num67 && this.direction == 1)
        {
          this.velocity.X += num68;
          if ((double) this.velocity.X > (double) num67)
            this.velocity.X = num67;
        }
        else if ((double) this.velocity.X > -(double) num67 && this.direction == -1)
        {
          this.velocity.X -= num68;
          if ((double) this.velocity.X < -(double) num67)
            this.velocity.X = -num67;
        }
      }
      else if (this.type >= 430 && this.type <= 436 || this.type == 494 || this.type == 495 || this.type == 591)
      {
        if ((double) this.ai[2] == 0.0)
        {
          this.damage = this.defDamage;
          float num70 = 1f * (float) (1.0 + (1.0 - (double) this.scale));
          if ((double) this.velocity.X < -(double) num70 || (double) this.velocity.X > (double) num70)
          {
            if ((double) this.velocity.Y == 0.0)
              this.velocity = this.velocity * 0.8f;
          }
          else if ((double) this.velocity.X < (double) num70 && this.direction == 1)
          {
            this.velocity.X += 0.07f;
            if ((double) this.velocity.X > (double) num70)
              this.velocity.X = num70;
          }
          else if ((double) this.velocity.X > -(double) num70 && this.direction == -1)
          {
            this.velocity.X -= 0.07f;
            if ((double) this.velocity.X < -(double) num70)
              this.velocity.X = -num70;
          }
          if ((double) this.velocity.Y == 0.0 && (!Main.IsItDay() || (double) this.position.Y > Main.worldSurface * 16.0) && !Main.player[this.target].dead)
          {
            Vector2 vector2 = this.Center - Main.player[this.target].Center;
            int num71 = 50;
            if (this.type >= 494 && this.type <= 495)
              num71 = 42;
            if ((double) vector2.Length() < (double) num71 && Collision.CanHit(this.Center, 1, 1, Main.player[this.target].Center, 1, 1))
            {
              this.velocity.X *= 0.7f;
              this.ai[2] = 1f;
            }
          }
        }
        else
        {
          this.damage = (int) ((double) this.defDamage * 1.5);
          this.ai[3] = 1f;
          this.velocity.X *= 0.9f;
          if ((double) Math.Abs(this.velocity.X) < 0.1)
            this.velocity.X = 0.0f;
          ++this.ai[2];
          if ((double) this.ai[2] >= 20.0 || (double) this.velocity.Y != 0.0 || Main.IsItDay() && (double) this.position.Y < Main.worldSurface * 16.0)
            this.ai[2] = 0.0f;
        }
      }
      else if (this.type != 110 && this.type != 111 && this.type != 206 && this.type != 214 && this.type != 215 && this.type != 216 && this.type != 290 && this.type != 291 && this.type != 292 && this.type != 293 && this.type != 350 && this.type != 379 && this.type != 380 && this.type != 381 && this.type != 382 && (this.type < 449 || this.type > 452) && this.type != 468 && this.type != 481 && this.type != 411 && this.type != 409 && (this.type < 498 || this.type > 506) && this.type != 424 && this.type != 426 && this.type != 520)
      {
        float num72 = 1f;
        if (this.type == 624)
          num72 = 2.5f;
        if (this.type == 186)
          num72 = 1.1f;
        if (this.type == 187)
          num72 = 0.9f;
        if (this.type == 188)
          num72 = 1.2f;
        if (this.type == 189)
          num72 = 0.8f;
        if (this.type == 132)
          num72 = 0.95f;
        if (this.type == 200)
          num72 = 0.87f;
        if (this.type == 223)
          num72 = 1.05f;
        if (this.type == 632)
          num72 = 0.8f;
        if (this.type == 489)
        {
          float num73 = (Main.player[this.target].Center - this.Center).Length() * (1f / 400f);
          if ((double) num73 > 1.5)
            num73 = 1.5f;
          num72 = (!Main.expertMode ? 2.5f - num73 : 3f - num73) * 0.8f;
        }
        if (this.type == 489 || this.type == 3 || this.type == 132 || this.type == 186 || this.type == 187 || this.type == 188 || this.type == 189 || this.type == 200 || this.type == 223 || this.type == 331 || this.type == 332)
          num72 *= (float) (1.0 + (1.0 - (double) this.scale));
        if ((double) this.velocity.X < -(double) num72 || (double) this.velocity.X > (double) num72)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity = this.velocity * 0.8f;
        }
        else if ((double) this.velocity.X < (double) num72 && this.direction == 1)
        {
          this.velocity.X += 0.07f;
          if ((double) this.velocity.X > (double) num72)
            this.velocity.X = num72;
        }
        else if ((double) this.velocity.X > -(double) num72 && this.direction == -1)
        {
          this.velocity.X -= 0.07f;
          if ((double) this.velocity.X < -(double) num72)
            this.velocity.X = -num72;
        }
      }
      if (this.type >= 277 && this.type <= 280)
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.2f, 0.1f, 0.0f);
      else if (this.type == 520)
        Lighting.AddLight(this.Top + new Vector2(0.0f, 20f), 0.3f, 0.3f, 0.7f);
      else if (this.type == 525)
        Lighting.AddLight(this.Top + new Vector2(0.0f, 15f), new Vector3(0.7f, 1f, 0.2f) * 0.5f);
      else if (this.type == 526)
        Lighting.AddLight(this.Top + new Vector2(0.0f, 15f), new Vector3(1f, 1f, 0.5f) * 0.4f);
      else if (this.type == 527)
        Lighting.AddLight(this.Top + new Vector2(0.0f, 15f), new Vector3(0.6f, 0.3f, 1f) * 0.4f);
      else if (this.type == 415)
      {
        this.hide = false;
        for (int index = 0; index < 200; ++index)
        {
          if (Main.npc[index].active && Main.npc[index].type == 416 && (double) Main.npc[index].ai[0] == (double) this.whoAmI)
          {
            this.hide = true;
            break;
          }
        }
      }
      else if (this.type == 258)
      {
        if ((double) this.velocity.Y != 0.0)
        {
          this.TargetClosest();
          this.spriteDirection = this.direction;
          if ((double) Main.player[this.target].Center.X < (double) this.position.X && (double) this.velocity.X > 0.0)
            this.velocity.X *= 0.95f;
          else if ((double) Main.player[this.target].Center.X > (double) this.position.X + (double) this.width && (double) this.velocity.X < 0.0)
            this.velocity.X *= 0.95f;
          if ((double) Main.player[this.target].Center.X < (double) this.position.X && (double) this.velocity.X > -5.0)
            this.velocity.X -= 0.1f;
          else if ((double) Main.player[this.target].Center.X > (double) this.position.X + (double) this.width && (double) this.velocity.X < 5.0)
            this.velocity.X += 0.1f;
        }
        else if ((double) Main.player[this.target].Center.Y + 50.0 < (double) this.position.Y && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
        {
          flag1 = true;
          this.velocity.Y = -7f;
        }
      }
      else if (this.type == 425)
      {
        if ((double) this.localAI[3] == 0.0)
        {
          this.localAI[3] = 1f;
          this.ai[3] = -120f;
        }
        if ((double) this.velocity.Y == 0.0)
          this.ai[2] = 0.0f;
        if ((double) this.velocity.Y != 0.0 && (double) this.ai[2] == 1.0)
        {
          this.TargetClosest();
          this.spriteDirection = -this.direction;
          if (Collision.CanHit(this.Center, 0, 0, Main.player[this.target].Center, 0, 0))
          {
            float num74 = 0.3f;
            float num75 = 8f;
            float num76 = 0.3f;
            float num77 = 7f;
            float num78 = Main.player[this.target].Center.X - (float) (this.direction * 300) - this.Center.X;
            float num79 = Main.player[this.target].Bottom.Y - this.Bottom.Y;
            if ((double) num78 < 0.0 && (double) this.velocity.X > 0.0)
              this.velocity.X *= 0.9f;
            else if ((double) num78 > 0.0 && (double) this.velocity.X < 0.0)
              this.velocity.X *= 0.9f;
            if ((double) num78 < 0.0 && (double) this.velocity.X > -(double) num77)
              this.velocity.X -= num76;
            else if ((double) num78 > 0.0 && (double) this.velocity.X < (double) num77)
              this.velocity.X += num76;
            if ((double) this.velocity.X > (double) num77)
              this.velocity.X = num77;
            if ((double) this.velocity.X < -(double) num77)
              this.velocity.X = -num77;
            if ((double) num79 < -20.0 && (double) this.velocity.Y > 0.0)
              this.velocity.Y *= 0.8f;
            else if ((double) num79 > 20.0 && (double) this.velocity.Y < 0.0)
              this.velocity.Y *= 0.8f;
            if ((double) num79 < -20.0 && (double) this.velocity.Y > -(double) num75)
              this.velocity.Y -= num74;
            else if ((double) num79 > 20.0 && (double) this.velocity.Y < (double) num75)
              this.velocity.Y += num74;
          }
          if (Main.rand.Next(3) == 0)
          {
            this.position = this.position + this.netOffset;
            Vector2 Position = this.Center + new Vector2((float) (this.direction * -14), -8f) - Vector2.One * 4f;
            Vector2 vector2 = new Vector2((float) (this.direction * -6), 12f) * 0.2f + Utils.RandomVector2(Main.rand, -1f, 1f) * 0.1f;
            Dust dust = Main.dust[Dust.NewDust(Position, 8, 8, 229, vector2.X, vector2.Y, 100, Color.Transparent, (float) (1.0 + (double) Main.rand.NextFloat() * 0.5))];
            dust.noGravity = true;
            dust.velocity = vector2;
            dust.customData = (object) this;
            this.position = this.position - this.netOffset;
          }
          for (int index = 0; index < 200; ++index)
          {
            if (index != this.whoAmI && Main.npc[index].active && Main.npc[index].type == this.type && (double) Math.Abs(this.position.X - Main.npc[index].position.X) + (double) Math.Abs(this.position.Y - Main.npc[index].position.Y) < (double) this.width)
            {
              if ((double) this.position.X < (double) Main.npc[index].position.X)
                this.velocity.X -= 0.15f;
              else
                this.velocity.X += 0.15f;
              if ((double) this.position.Y < (double) Main.npc[index].position.Y)
                this.velocity.Y -= 0.15f;
              else
                this.velocity.Y += 0.15f;
            }
          }
        }
        else if ((double) Main.player[this.target].Center.Y + 100.0 < (double) this.position.Y && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
        {
          flag1 = true;
          this.velocity.Y = -5f;
          this.ai[2] = 1f;
        }
        if ((double) this.ai[3] < 0.0)
          ++this.ai[3];
        int max = 30;
        int num80 = 10;
        int num81 = 180;
        if ((double) this.ai[3] >= 0.0 && (double) this.ai[3] <= (double) max)
        {
          Vector2 vector2 = this.DirectionTo(Main.player[this.target].Center);
          bool flag12 = (double) Math.Abs(vector2.Y) <= (double) Math.Abs(vector2.X);
          this.ai[3] = MathHelper.Clamp(this.ai[3] + (float) ((double) this.Distance(Main.player[this.target].Center) < 800.0 & flag12 && Collision.CanHitLine(this.Center, 0, 0, Main.player[this.target].Center, 0, 0)).ToDirectionInt(), 0.0f, (float) max);
        }
        if ((double) this.ai[3] >= (double) (max + 1) && (double) ++this.ai[3] >= (double) (max + num80))
        {
          this.ai[3] = (float) (max - num81);
          this.netUpdate = true;
        }
        if (Main.netMode != 1 && (double) this.ai[3] == (double) max)
        {
          ++this.ai[3];
          this.netUpdate = true;
          int chaserSpeed = 20;
          Vector2 chaserPosition = this.Center + new Vector2((float) (this.direction * 30), 2f);
          Vector2 vec = this.DirectionTo(Main.player[this.target].Center) * (float) chaserSpeed;
          if (vec.HasNaNs())
            vec = new Vector2((float) (this.direction * chaserSpeed), 0.0f);
          int num82 = 2;
          Utils.ChaseResults chaseResults = Utils.GetChaseResults(chaserPosition, (float) chaserSpeed, Main.player[this.target].Center, Main.player[this.target].velocity * 0.5f / (float) num82);
          if (chaseResults.InterceptionHappens)
          {
            Vector2 vector2 = chaseResults.ChaserVelocity / (float) num82;
            vec.X = vector2.X;
            vec.Y = vector2.Y;
          }
          int damageForProjectiles = this.GetAttackDamage_ForProjectiles(75f, 50f);
          for (int index = 0; index < 4; ++index)
          {
            Vector2 vector2 = vec + Utils.RandomVector2(Main.rand, -0.8f, 0.8f) * (index == 0 ? 0.0f : 1f);
            Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), chaserPosition.X, chaserPosition.Y, vector2.X, vector2.Y, 577, damageForProjectiles, 1f, Main.myPlayer);
          }
        }
      }
      else if (this.type == 427)
      {
        if ((double) this.velocity.Y == 0.0)
        {
          this.ai[2] = 0.0f;
          this.rotation = 0.0f;
        }
        else
          this.rotation = this.velocity.X * 0.1f;
        if ((double) this.velocity.Y != 0.0 && (double) this.ai[2] == 1.0)
        {
          this.TargetClosest();
          this.spriteDirection = -this.direction;
          if (Collision.CanHit(this.Center, 0, 0, Main.player[this.target].Center, 0, 0))
          {
            float num83 = Main.player[this.target].Center.X - this.Center.X;
            float num84 = Main.player[this.target].Center.Y - this.Center.Y;
            if ((double) num83 < 0.0 && (double) this.velocity.X > 0.0)
              this.velocity.X *= 0.98f;
            else if ((double) num83 > 0.0 && (double) this.velocity.X < 0.0)
              this.velocity.X *= 0.98f;
            if ((double) num83 < -20.0 && (double) this.velocity.X > -6.0)
              this.velocity.X -= 0.015f;
            else if ((double) num83 > 20.0 && (double) this.velocity.X < 6.0)
              this.velocity.X += 0.015f;
            if ((double) this.velocity.X > 6.0)
              this.velocity.X = 6f;
            if ((double) this.velocity.X < -6.0)
              this.velocity.X = -6f;
            if ((double) num84 < -20.0 && (double) this.velocity.Y > 0.0)
              this.velocity.Y *= 0.98f;
            else if ((double) num84 > 20.0 && (double) this.velocity.Y < 0.0)
              this.velocity.Y *= 0.98f;
            if ((double) num84 < -20.0 && (double) this.velocity.Y > -6.0)
              this.velocity.Y -= 0.15f;
            else if ((double) num84 > 20.0 && (double) this.velocity.Y < 6.0)
              this.velocity.Y += 0.15f;
          }
          for (int index = 0; index < 200; ++index)
          {
            if (index != this.whoAmI && Main.npc[index].active && Main.npc[index].type == this.type && (double) Math.Abs(this.position.X - Main.npc[index].position.X) + (double) Math.Abs(this.position.Y - Main.npc[index].position.Y) < (double) this.width)
            {
              if ((double) this.position.X < (double) Main.npc[index].position.X)
                this.velocity.X -= 0.05f;
              else
                this.velocity.X += 0.05f;
              if ((double) this.position.Y < (double) Main.npc[index].position.Y)
                this.velocity.Y -= 0.05f;
              else
                this.velocity.Y += 0.05f;
            }
          }
        }
        else if ((double) Main.player[this.target].Center.Y + 100.0 < (double) this.position.Y && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
        {
          flag1 = true;
          this.velocity.Y = -5f;
          this.ai[2] = 1f;
        }
      }
      else if (this.type == 426)
      {
        float num85 = 6f;
        float num86 = 0.2f;
        float num87 = 6f;
        if ((double) this.ai[1] > 0.0 && (double) this.velocity.Y > 0.0)
        {
          this.velocity.Y *= 0.85f;
          if ((double) this.velocity.Y == 0.0)
            this.velocity.Y = -0.4f;
        }
        if ((double) this.velocity.Y != 0.0)
        {
          this.TargetClosest();
          this.spriteDirection = this.direction;
          if (Collision.CanHit(this.Center, 0, 0, Main.player[this.target].Center, 0, 0))
          {
            float num88 = Main.player[this.target].Center.X - (float) (this.direction * 300) - this.Center.X;
            if ((double) num88 < 40.0 && (double) this.velocity.X > 0.0)
              this.velocity.X *= 0.98f;
            else if ((double) num88 > 40.0 && (double) this.velocity.X < 0.0)
              this.velocity.X *= 0.98f;
            if ((double) num88 < 40.0 && (double) this.velocity.X > -(double) num85)
              this.velocity.X -= num86;
            else if ((double) num88 > 40.0 && (double) this.velocity.X < (double) num85)
              this.velocity.X += num86;
            if ((double) this.velocity.X > (double) num85)
              this.velocity.X = num85;
            if ((double) this.velocity.X < -(double) num85)
              this.velocity.X = -num85;
          }
        }
        else if ((double) Main.player[this.target].Center.Y + 100.0 < (double) this.position.Y && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
        {
          flag1 = true;
          this.velocity.Y = -num87;
        }
        for (int index = 0; index < 200; ++index)
        {
          if (index != this.whoAmI && Main.npc[index].active && Main.npc[index].type == this.type && (double) Math.Abs(this.position.X - Main.npc[index].position.X) + (double) Math.Abs(this.position.Y - Main.npc[index].position.Y) < (double) this.width)
          {
            if ((double) this.position.X < (double) Main.npc[index].position.X)
              this.velocity.X -= 0.1f;
            else
              this.velocity.X += 0.1f;
            if ((double) this.position.Y < (double) Main.npc[index].position.Y)
              this.velocity.Y -= 0.1f;
            else
              this.velocity.Y += 0.1f;
          }
        }
        if (Main.rand.Next(6) == 0 && (double) this.ai[1] <= 20.0)
        {
          this.position = this.position + this.netOffset;
          Dust dust = Main.dust[Dust.NewDust(this.Center + new Vector2(this.spriteDirection == 1 ? 8f : -20f, -20f), 8, 8, 229, this.velocity.X, this.velocity.Y, 100)];
          dust.velocity = dust.velocity / 4f + this.velocity / 2f;
          dust.scale = 0.6f;
          dust.noLight = true;
          this.position = this.position - this.netOffset;
        }
        if ((double) this.ai[1] >= 57.0)
        {
          this.position = this.position + this.netOffset;
          int Type = Utils.SelectRandom<int>(Main.rand, 161, 229);
          Dust dust = Main.dust[Dust.NewDust(this.Center + new Vector2(this.spriteDirection == 1 ? 8f : -20f, -20f), 8, 8, Type, this.velocity.X, this.velocity.Y, 100)];
          dust.velocity = dust.velocity / 4f + this.DirectionTo(Main.player[this.target].Top);
          dust.scale = 1.2f;
          dust.noLight = true;
          this.position = this.position - this.netOffset;
        }
        if (Main.rand.Next(6) == 0)
        {
          this.position = this.position + this.netOffset;
          Dust dust = Main.dust[Dust.NewDust(this.Center, 2, 2, 229)];
          dust.position = this.Center + new Vector2(this.spriteDirection == 1 ? 26f : -26f, 24f);
          dust.velocity.X = 0.0f;
          if ((double) dust.velocity.Y < 0.0)
            dust.velocity.Y = 0.0f;
          dust.noGravity = true;
          dust.scale = 1f;
          dust.noLight = true;
          this.position = this.position - this.netOffset;
        }
      }
      else if (this.type == 185)
      {
        if ((double) this.velocity.Y == 0.0)
        {
          this.rotation = 0.0f;
          this.localAI[0] = 0.0f;
        }
        else if ((double) this.localAI[0] == 1.0)
          this.rotation += this.velocity.X * 0.05f;
      }
      else if (this.type == 428)
      {
        if ((double) this.velocity.Y == 0.0)
          this.rotation = 0.0f;
        else
          this.rotation += this.velocity.X * 0.08f;
      }
      if (this.type == 159 && Main.netMode != 1)
      {
        Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
        double num89 = (double) Main.player[this.target].position.X + (double) Main.player[this.target].width * 0.5 - (double) vector2.X;
        float num90 = Main.player[this.target].position.Y + (float) Main.player[this.target].height * 0.5f - vector2.Y;
        if (Math.Sqrt(num89 * num89 + (double) num90 * (double) num90) > 300.0)
          this.Transform(158);
      }
      if (Main.netMode != 1)
      {
        if (Main.expertMode && this.target >= 0 && (this.type == 163 || this.type == 238 || this.type == 236 || this.type == 237) && Collision.CanHit(this.Center, 1, 1, Main.player[this.target].Center, 1, 1))
        {
          ++this.localAI[0];
          if (this.justHit)
          {
            this.localAI[0] -= (float) Main.rand.Next(20, 60);
            if ((double) this.localAI[0] < 0.0)
              this.localAI[0] = 0.0f;
          }
          if ((double) this.localAI[0] > (double) Main.rand.Next(180, 900))
          {
            this.localAI[0] = 0.0f;
            Vector2 vector2 = Main.player[this.target].Center - this.Center;
            vector2.Normalize();
            vector2 *= 8f;
            int damageForProjectiles = this.GetAttackDamage_ForProjectiles(18f, 18f);
            Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X, this.Center.Y, vector2.X, vector2.Y, 472, damageForProjectiles, 0.0f, Main.myPlayer);
          }
        }
        if ((double) this.velocity.Y == 0.0)
        {
          int newType = -1;
          switch (this.type)
          {
            case 163:
              newType = 238;
              break;
            case 164:
              newType = 165;
              break;
            case 236:
              newType = 237;
              break;
            case 239:
              newType = 240;
              break;
            case 530:
              newType = 531;
              break;
          }
          if (newType != -1 && this.NPCCanStickToWalls())
            this.Transform(newType);
        }
      }
      if (this.type == 243)
      {
        if (this.justHit && Main.rand.Next(3) == 0)
          this.ai[2] -= (float) Main.rand.Next(30);
        if ((double) this.ai[2] < 0.0)
          this.ai[2] = 0.0f;
        if (this.confused)
          this.ai[2] = 0.0f;
        ++this.ai[2];
        float num91 = (float) Main.rand.Next(30, 900) * ((float) this.life / (float) this.lifeMax) + 30f;
        if (Main.netMode != 1 && (double) this.ai[2] >= (double) num91 && (double) this.velocity.Y == 0.0 && !Main.player[this.target].dead && !Main.player[this.target].frozen && (this.direction > 0 && (double) this.Center.X < (double) Main.player[this.target].Center.X || this.direction < 0 && (double) this.Center.X > (double) Main.player[this.target].Center.X) && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
        {
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + 20f);
          vector2.X += (float) (10 * this.direction);
          float num92 = Main.player[this.target].position.X + (float) Main.player[this.target].width * 0.5f - vector2.X;
          float num93 = Main.player[this.target].position.Y + (float) Main.player[this.target].height * 0.5f - vector2.Y;
          float num94 = num92 + (float) Main.rand.Next(-40, 41);
          float num95 = num93 + (float) Main.rand.Next(-40, 41);
          float num96 = (float) Math.Sqrt((double) num94 * (double) num94 + (double) num95 * (double) num95);
          this.netUpdate = true;
          float num97 = (float) (15.0 / (double) num96);
          float SpeedX = num94 * num97;
          float SpeedY = num95 * num97;
          int Damage = 32;
          int Type = 257;
          vector2.X += SpeedX * 3f;
          vector2.Y += SpeedY * 3f;
          Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2.X, vector2.Y, SpeedX, SpeedY, Type, Damage, 0.0f, Main.myPlayer);
          this.ai[2] = 0.0f;
        }
      }
      if (this.type == 251)
      {
        if (this.justHit)
          this.ai[2] -= (float) Main.rand.Next(30);
        if ((double) this.ai[2] < 0.0)
          this.ai[2] = 0.0f;
        if (this.confused)
          this.ai[2] = 0.0f;
        ++this.ai[2];
        float num98 = (float) Main.rand.Next(60, 1800) * ((float) this.life / (float) this.lifeMax) + 15f;
        if (Main.netMode != 1 && (double) this.ai[2] >= (double) num98 && (double) this.velocity.Y == 0.0 && !Main.player[this.target].dead && !Main.player[this.target].frozen && (this.direction > 0 && (double) this.Center.X < (double) Main.player[this.target].Center.X || this.direction < 0 && (double) this.Center.X > (double) Main.player[this.target].Center.X) && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height))
        {
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + 12f);
          vector2.X += (float) (6 * this.direction);
          float num99 = Main.player[this.target].position.X + (float) Main.player[this.target].width * 0.5f - vector2.X;
          float num100 = Main.player[this.target].position.Y + (float) Main.player[this.target].height * 0.5f - vector2.Y;
          float num101 = num99 + (float) Main.rand.Next(-40, 41);
          float num102 = num100 + (float) Main.rand.Next(-30, 0);
          float num103 = (float) Math.Sqrt((double) num101 * (double) num101 + (double) num102 * (double) num102);
          this.netUpdate = true;
          float num104 = (float) (15.0 / (double) num103);
          float SpeedX = num101 * num104;
          float SpeedY = num102 * num104;
          int Damage = 30;
          int Type = 83;
          vector2.X += SpeedX * 3f;
          vector2.Y += SpeedY * 3f;
          Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2.X, vector2.Y, SpeedX, SpeedY, Type, Damage, 0.0f, Main.myPlayer);
          this.ai[2] = 0.0f;
        }
      }
      if (this.type == 386)
      {
        if (this.confused)
        {
          this.ai[2] = -60f;
        }
        else
        {
          if ((double) this.ai[2] < 60.0)
            ++this.ai[2];
          if ((double) this.ai[2] > 0.0 && NPC.CountNPCS(387) >= 4 * NPC.CountNPCS(386))
            this.ai[2] = 0.0f;
          if (this.justHit)
            this.ai[2] = -30f;
          if ((double) this.ai[2] == 30.0)
          {
            int num105 = (int) this.position.X / 16;
            int num106 = (int) this.position.Y / 16;
            int num107 = (int) this.position.X / 16;
            int num108 = (int) this.position.Y / 16;
            int num109 = 5;
            int num110 = 0;
            bool flag13 = false;
            int num111 = 2;
            int num112 = 0;
            while (!flag13 && num110 < 100)
            {
              ++num110;
              int index18 = Main.rand.Next(num105 - num109, num105 + num109);
              for (int index19 = Main.rand.Next(num106 - num109, num106 + num109); index19 < num106 + num109; ++index19)
              {
                if ((index19 < num106 - num111 || index19 > num106 + num111 || index18 < num105 - num111 || index18 > num105 + num111) && (index19 < num108 - num112 || index19 > num108 + num112 || index18 < num107 - num112 || index18 > num107 + num112) && Main.tile[index18, index19].nactive())
                {
                  bool flag14 = true;
                  if (Main.tile[index18, index19 - 1].lava())
                    flag14 = false;
                  if (flag14 && Main.tileSolid[(int) Main.tile[index18, index19].type] && !Collision.SolidTiles(index18 - 1, index18 + 1, index19 - 4, index19 - 1))
                  {
                    int index20 = NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), index18 * 16 - this.width / 2, index19 * 16, 387);
                    Main.npc[index20].position.Y = (float) (index19 * 16 - Main.npc[index20].height);
                    flag13 = true;
                    this.netUpdate = true;
                    break;
                  }
                }
              }
            }
          }
          if ((double) this.ai[2] == 60.0)
            this.ai[2] = -120f;
        }
      }
      if (this.type == 389)
      {
        if (this.confused)
        {
          this.ai[2] = -60f;
        }
        else
        {
          if ((double) this.ai[2] < 20.0)
            ++this.ai[2];
          if (this.justHit)
            this.ai[2] = -30f;
          if ((double) this.ai[2] == 20.0 && Main.netMode != 1)
          {
            this.ai[2] = (float) (Main.rand.Next(3) * -10 - 10);
            Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X, this.Center.Y + 8f, (float) (this.direction * 6), 0.0f, 437, 25, 1f, Main.myPlayer);
          }
        }
      }
      if (this.type == 110 || this.type == 111 || this.type == 206 || this.type == 214 || this.type == 215 || this.type == 216 || this.type == 290 || this.type == 291 || this.type == 292 || this.type == 293 || this.type == 350 || this.type == 379 || this.type == 380 || this.type == 381 || this.type == 382 || this.type >= 449 && this.type <= 452 || this.type == 468 || this.type == 481 || this.type == 411 || this.type == 409 || this.type >= 498 && this.type <= 506 || this.type == 424 || this.type == 426 || this.type == 520)
      {
        bool flag15 = this.type == 381 || this.type == 382 || this.type == 520;
        bool flag16 = this.type == 426;
        bool flag17 = true;
        int num113 = -1;
        int num114 = -1;
        if (this.type == 411)
        {
          flag15 = true;
          num113 = 120;
          num114 = 120;
          if ((double) this.ai[1] <= 220.0)
            flag17 = false;
        }
        if ((double) this.ai[1] > 0.0)
          --this.ai[1];
        if (this.justHit)
        {
          this.ai[1] = 30f;
          this.ai[2] = 0.0f;
        }
        int num115 = 70;
        if (this.type == 379 || this.type == 380)
          num115 = 80;
        if (this.type == 381 || this.type == 382)
          num115 = 80;
        if (this.type == 520)
          num115 = 15;
        if (this.type == 350)
          num115 = 110;
        if (this.type == 291)
          num115 = 200;
        if (this.type == 292)
          num115 = 120;
        if (this.type == 293)
          num115 = 90;
        if (this.type == 111)
          num115 = 180;
        if (this.type == 206)
          num115 = 50;
        if (this.type == 481)
          num115 = 100;
        if (this.type == 214)
          num115 = 40;
        if (this.type == 215)
          num115 = 80;
        if (this.type == 290)
          num115 = 30;
        if (this.type == 411)
          num115 = 330;
        if (this.type == 409)
          num115 = 60;
        if (this.type == 424)
          num115 = 180;
        if (this.type == 426)
          num115 = 60;
        bool flag18 = false;
        if (this.type == 216)
        {
          if ((double) this.localAI[2] >= 20.0)
            flag18 = true;
          num115 = !flag18 ? 8 : 60;
        }
        int num116 = num115 / 2;
        if (this.type == 424)
          num116 = num115 - 1;
        if (this.type == 426)
          num116 = num115 - 1;
        if (this.type == 411)
          num116 = 220;
        if (this.confused)
          this.ai[2] = 0.0f;
        if ((double) this.ai[2] > 0.0)
        {
          if (flag17)
            this.TargetClosest();
          if ((double) this.ai[1] == (double) num116)
          {
            if (this.type == 216)
              ++this.localAI[2];
            float chaserSpeed = 11f;
            if (this.type == 111)
              chaserSpeed = 9f;
            if (this.type == 206)
              chaserSpeed = 7f;
            if (this.type == 290)
              chaserSpeed = 9f;
            if (this.type == 293)
              chaserSpeed = 4f;
            if (this.type == 214)
              chaserSpeed = 14f;
            if (this.type == 215)
              chaserSpeed = 16f;
            if (this.type == 382)
              chaserSpeed = 7f;
            if (this.type == 520)
              chaserSpeed = 8f;
            if (this.type == 409)
              chaserSpeed = 4f;
            if (this.type >= 449 && this.type <= 452)
              chaserSpeed = 7f;
            if (this.type == 481)
              chaserSpeed = 8f;
            if (this.type == 468)
              chaserSpeed = 7.5f;
            if (this.type == 411)
              chaserSpeed = 1f;
            if (this.type >= 498 && this.type <= 506)
              chaserSpeed = 7f;
            Vector2 chaserPosition = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            if (this.type == 481)
              chaserPosition.Y -= 14f;
            if (this.type == 206)
              chaserPosition.Y -= 10f;
            if (this.type == 290)
              chaserPosition.Y -= 10f;
            if (this.type == 381 || this.type == 382)
              chaserPosition.Y += 6f;
            if (this.type == 520)
              chaserPosition.Y = this.position.Y + 20f;
            if (this.type >= 498 && this.type <= 506)
              chaserPosition.Y -= 8f;
            if (this.type == 426)
            {
              chaserPosition += new Vector2((float) (this.spriteDirection * 2), -12f);
              chaserSpeed = 7f;
            }
            float num117 = Main.player[this.target].position.X + (float) Main.player[this.target].width * 0.5f - chaserPosition.X;
            float num118 = Math.Abs(num117) * 0.1f;
            if (this.type == 291 || this.type == 292)
              num118 = 0.0f;
            if (this.type == 215)
              num118 = Math.Abs(num117) * 0.08f;
            if (this.type == 214 || this.type == 216 && !flag18)
              num118 = 0.0f;
            if (this.type == 381 || this.type == 382 || this.type == 520)
              num118 = 0.0f;
            if (this.type >= 449 && this.type <= 452)
              num118 = (float) ((double) Math.Abs(num117) * (double) Main.rand.Next(10, 50) * 0.0099999997764825821);
            if (this.type == 468)
              num118 = (float) ((double) Math.Abs(num117) * (double) Main.rand.Next(10, 50) * 0.0099999997764825821);
            if (this.type == 481)
              num118 = (float) ((double) Math.Abs(num117) * (double) Main.rand.Next(-10, 11) * 0.0035000001080334187);
            if (this.type >= 498 && this.type <= 506)
              num118 = (float) ((double) Math.Abs(num117) * (double) Main.rand.Next(1, 11) * (1.0 / 400.0));
            float num119 = Main.player[this.target].position.Y + (float) Main.player[this.target].height * 0.5f - chaserPosition.Y - num118;
            if (this.type == 291)
            {
              num117 += (float) Main.rand.Next(-40, 41) * 0.2f;
              num119 += (float) Main.rand.Next(-40, 41) * 0.2f;
            }
            else if (this.type == 381 || this.type == 382 || this.type == 520)
            {
              float num120 = num117 + (float) Main.rand.Next(-100, 101) * 0.4f;
              float num121 = num119 + (float) Main.rand.Next(-100, 101) * 0.4f;
              num117 = num120 * ((float) Main.rand.Next(85, 116) * 0.01f);
              num119 = num121 * ((float) Main.rand.Next(85, 116) * 0.01f);
              if (this.type == 520)
              {
                float num122 = num117 + (float) Main.rand.Next(-100, 101) * 0.6f;
                float num123 = num119 + (float) Main.rand.Next(-100, 101) * 0.6f;
                num117 = num122 * ((float) Main.rand.Next(85, 116) * 0.015f);
                num119 = num123 * ((float) Main.rand.Next(85, 116) * 0.015f);
              }
            }
            else if (this.type == 481)
            {
              num117 += (float) Main.rand.Next(-40, 41) * 0.4f;
              num119 += (float) Main.rand.Next(-40, 41) * 0.4f;
            }
            else if (this.type >= 498 && this.type <= 506)
            {
              num117 += (float) Main.rand.Next(-40, 41) * 0.3f;
              num119 += (float) Main.rand.Next(-40, 41) * 0.3f;
            }
            else if (this.type == 426)
            {
              num117 += (float) Main.rand.Next(-30, 31) * 0.3f;
              num119 += (float) Main.rand.Next(-30, 31) * 0.3f;
            }
            else if (this.type != 292)
            {
              num117 += (float) Main.rand.Next(-40, 41);
              num119 += (float) Main.rand.Next(-40, 41);
            }
            float num124 = (float) Math.Sqrt((double) num117 * (double) num117 + (double) num119 * (double) num119);
            this.netUpdate = true;
            float num125 = chaserSpeed / num124;
            float num126 = num117 * num125;
            float SpeedY = num119 * num125;
            int num127 = 35;
            int Type = 82;
            if (this.type == 111)
              num127 = 11;
            if (this.type == 206)
              num127 = 37;
            if (this.type == 379 || this.type == 380)
              num127 = 40;
            if (this.type == 350)
              num127 = 45;
            if (this.type == 468)
              num127 = 50;
            if (this.type == 111)
              Type = 81;
            if (this.type == 379 || this.type == 380)
              Type = 81;
            if (this.type == 381)
            {
              Type = 436;
              num127 = 24;
            }
            if (this.type == 382)
            {
              Type = 438;
              num127 = 30;
            }
            if (this.type == 520)
            {
              Type = 592;
              num127 = 35;
            }
            if (this.type >= 449 && this.type <= 452)
            {
              Type = 471;
              num127 = 15;
            }
            if (this.type >= 498 && this.type <= 506)
            {
              Type = 572;
              num127 = 14;
            }
            if (this.type == 481)
            {
              Type = 508;
              num127 = 18;
            }
            if (this.type == 206)
              Type = 177;
            if (this.type == 468)
              Type = 501;
            if (this.type == 411)
            {
              Type = 537;
              num127 = this.GetAttackDamage_ForProjectiles(60f, 45f);
            }
            if (this.type == 424)
            {
              Type = 573;
              num127 = this.GetAttackDamage_ForProjectiles(60f, 45f);
            }
            if (this.type == 426)
            {
              Type = 581;
              num127 = this.GetAttackDamage_ForProjectiles(60f, 45f);
            }
            if (this.type == 291)
            {
              Type = 302;
              num127 = 100;
            }
            if (this.type == 290)
            {
              Type = 300;
              num127 = 60;
            }
            if (this.type == 293)
            {
              Type = 303;
              num127 = 60;
            }
            if (this.type == 214)
            {
              Type = 180;
              num127 = 25;
            }
            if (this.type == 215)
            {
              Type = 82;
              num127 = 40;
            }
            if (this.type == 292)
            {
              num127 = 50;
              Type = 180;
            }
            if (this.type == 216)
            {
              Type = 180;
              num127 = 30;
              if (flag18)
              {
                num127 = 100;
                Type = 240;
                this.localAI[2] = 0.0f;
              }
            }
            Player player = Main.player[this.target];
            Vector2? nullable = new Vector2?();
            if (this.type == 426)
              nullable = new Vector2?(Main.rand.NextVector2FromRectangle(player.Hitbox));
            if (nullable.HasValue)
            {
              Utils.ChaseResults chaseResults = Utils.GetChaseResults(chaserPosition, chaserSpeed, nullable.Value, player.velocity);
              if (chaseResults.InterceptionHappens)
              {
                Vector2 vector2 = Utils.FactorAcceleration(chaseResults.ChaserVelocity, chaseResults.InterceptionTime, new Vector2(0.0f, 0.1f), 15);
                num126 = vector2.X;
                SpeedY = vector2.Y;
              }
            }
            chaserPosition.X += num126;
            chaserPosition.Y += SpeedY;
            if (this.type == 290)
              num127 = this.GetAttackDamage_ForProjectiles((float) num127, (float) num127 * 0.75f);
            if (this.type >= 381 && this.type <= 392)
              num127 = this.GetAttackDamage_ForProjectiles((float) num127, (float) num127 * 0.8f);
            if (Main.netMode != 1)
            {
              if (this.type == 292)
              {
                for (int index = 0; index < 4; ++index)
                {
                  float num128 = player.position.X + (float) player.width * 0.5f - chaserPosition.X;
                  float num129 = player.position.Y + (float) player.height * 0.5f - chaserPosition.Y;
                  float num130 = 12f / (float) Math.Sqrt((double) num128 * (double) num128 + (double) num129 * (double) num129);
                  float num131;
                  float num132 = num131 = num128 + (float) Main.rand.Next(-40, 41);
                  float num133;
                  float num134 = num133 = num129 + (float) Main.rand.Next(-40, 41);
                  num126 = num132 * num130;
                  SpeedY = num134 * num130;
                  Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), chaserPosition.X, chaserPosition.Y, num126, SpeedY, Type, num127, 0.0f, Main.myPlayer);
                }
              }
              else if (this.type == 411)
                Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), chaserPosition.X, chaserPosition.Y, num126, SpeedY, Type, num127, 0.0f, Main.myPlayer, ai1: ((float) this.whoAmI));
              else if (this.type == 424)
              {
                for (int index = 0; index < 4; ++index)
                  Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X - (float) (this.spriteDirection * 4), this.Center.Y + 6f, (float) (2 * index - 3) * 0.15f, (float) ((double) -Main.rand.Next(0, 3) * 0.20000000298023224 - 0.10000000149011612), Type, num127, 0.0f, Main.myPlayer, ai1: ((float) this.whoAmI));
              }
              else if (this.type == 409)
              {
                int index = NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) this.Center.X, (int) this.Center.Y, 410, this.whoAmI);
                Main.npc[index].velocity = new Vector2(num126, SpeedY - 6f);
              }
              else
                Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), chaserPosition.X, chaserPosition.Y, num126, SpeedY, Type, num127, 0.0f, Main.myPlayer);
            }
            this.ai[2] = (double) Math.Abs(SpeedY) <= (double) Math.Abs(num126) * 2.0 ? ((double) Math.Abs(num126) <= (double) Math.Abs(SpeedY) * 2.0 ? ((double) SpeedY <= 0.0 ? 4f : 2f) : 3f) : ((double) SpeedY <= 0.0 ? 5f : 1f);
          }
          if ((double) this.velocity.Y != 0.0 && !flag16 || (double) this.ai[1] <= 0.0)
          {
            this.ai[2] = 0.0f;
            this.ai[1] = 0.0f;
          }
          else if (!flag15 || num113 != -1 && (double) this.ai[1] >= (double) num113 && (double) this.ai[1] < (double) (num113 + num114) && (!flag16 || (double) this.velocity.Y == 0.0))
          {
            this.velocity.X *= 0.9f;
            this.spriteDirection = this.direction;
          }
        }
        if (this.type == 468 && !Main.eclipse)
          flag15 = true;
        else if ((double) this.ai[2] <= 0.0 | flag15 && (double) this.velocity.Y == 0.0 | flag16 && (double) this.ai[1] <= 0.0 && !Main.player[this.target].dead)
        {
          bool flag19 = Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height);
          if (this.type == 520)
            flag19 = Collision.CanHitLine(this.Top + new Vector2(0.0f, 20f), 0, 0, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height);
          if ((double) Main.player[this.target].stealth == 0.0 && Main.player[this.target].itemAnimation == 0)
            flag19 = false;
          if (flag19)
          {
            float num135 = 10f;
            Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num136 = Main.player[this.target].position.X + (float) Main.player[this.target].width * 0.5f - vector2.X;
            float num137 = Math.Abs(num136) * 0.1f;
            float num138 = Main.player[this.target].position.Y + (float) Main.player[this.target].height * 0.5f - vector2.Y - num137;
            float num139 = num136 + (float) Main.rand.Next(-40, 41);
            float num140 = num138 + (float) Main.rand.Next(-40, 41);
            float num141 = (float) Math.Sqrt((double) num139 * (double) num139 + (double) num140 * (double) num140);
            float num142 = 700f;
            if (this.type == 214)
              num142 = 550f;
            if (this.type == 215)
              num142 = 800f;
            if (this.type >= 498 && this.type <= 506)
              num142 = 190f;
            if (this.type >= 449 && this.type <= 452)
              num142 = 200f;
            if (this.type == 481)
              num142 = 400f;
            if (this.type == 468)
              num142 = 400f;
            if ((double) num141 < (double) num142)
            {
              this.netUpdate = true;
              this.velocity.X *= 0.5f;
              float num143 = num135 / num141;
              float num144 = num139 * num143;
              float num145 = num140 * num143;
              this.ai[2] = 3f;
              this.ai[1] = (float) num115;
              this.ai[2] = (double) Math.Abs(num145) <= (double) Math.Abs(num144) * 2.0 ? ((double) Math.Abs(num144) <= (double) Math.Abs(num145) * 2.0 ? ((double) num145 <= 0.0 ? 4f : 2f) : 3f) : ((double) num145 <= 0.0 ? 5f : 1f);
            }
          }
        }
        if ((double) this.ai[2] <= 0.0 || flag15 && (num113 == -1 || (double) this.ai[1] < (double) num113 || (double) this.ai[1] >= (double) (num113 + num114)))
        {
          float num146 = 1f;
          float num147 = 0.07f;
          float num148 = 0.8f;
          if (this.type == 214)
          {
            num146 = 2f;
            num147 = 0.09f;
          }
          else if (this.type == 215)
          {
            num146 = 1.5f;
            num147 = 0.08f;
          }
          else if (this.type == 381 || this.type == 382)
          {
            num146 = 2f;
            num147 = 0.5f;
          }
          else if (this.type == 520)
          {
            num146 = 4f;
            num147 = 1f;
            num148 = 0.7f;
          }
          else if (this.type == 411)
          {
            num146 = 2f;
            num147 = 0.5f;
          }
          else if (this.type == 409)
          {
            num146 = 2f;
            num147 = 0.5f;
          }
          else if (this.type == 426)
          {
            num146 = 4f;
            num147 = 0.6f;
            num148 = 0.95f;
          }
          bool flag20 = false;
          if ((this.type == 381 || this.type == 382) && (double) Vector2.Distance(this.Center, Main.player[this.target].Center) < 300.0 && Collision.CanHitLine(this.Center, 0, 0, Main.player[this.target].Center, 0, 0))
          {
            flag20 = true;
            this.ai[3] = 0.0f;
          }
          if (this.type == 520 && (double) Vector2.Distance(this.Center, Main.player[this.target].Center) < 400.0 && Collision.CanHitLine(this.Center, 0, 0, Main.player[this.target].Center, 0, 0))
          {
            flag20 = true;
            this.ai[3] = 0.0f;
          }
          if ((((double) this.velocity.X < -(double) num146 ? 1 : ((double) this.velocity.X > (double) num146 ? 1 : 0)) | (flag20 ? 1 : 0)) != 0)
          {
            if ((double) this.velocity.Y == 0.0)
              this.velocity = this.velocity * num148;
          }
          else if ((double) this.velocity.X < (double) num146 && this.direction == 1)
          {
            this.velocity.X += num147;
            if ((double) this.velocity.X > (double) num146)
              this.velocity.X = num146;
          }
          else if ((double) this.velocity.X > -(double) num146 && this.direction == -1)
          {
            this.velocity.X -= num147;
            if ((double) this.velocity.X < -(double) num146)
              this.velocity.X = -num146;
          }
        }
        if (this.type == 520)
        {
          ++this.localAI[2];
          if ((double) this.localAI[2] >= 6.0)
          {
            this.localAI[2] = 0.0f;
            this.localAI[3] = Main.player[this.target].DirectionFrom(this.Top + new Vector2(0.0f, 20f)).ToRotation();
          }
        }
      }
      if (this.type == 109 && Main.netMode != 1 && !Main.player[this.target].dead)
      {
        if (this.justHit)
          this.ai[2] = 0.0f;
        ++this.ai[2];
        if ((double) this.ai[2] > 60.0)
        {
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f - (float) (this.direction * 24), this.position.Y + 4f);
          if (Main.rand.Next(5) != 0 || NPC.AnyNPCs(378))
          {
            int SpeedX = Main.rand.Next(3, 8) * this.direction;
            int SpeedY = Main.rand.Next(-8, -5);
            int index = Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2.X, vector2.Y, (float) SpeedX, (float) SpeedY, 75, 80, 0.0f, Main.myPlayer);
            Main.projectile[index].timeLeft = 300;
            this.ai[2] = 0.0f;
          }
          else
          {
            this.ai[2] = -120f;
            NetMessage.SendData(23, number: NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) vector2.X, (int) vector2.Y, 378));
          }
        }
      }
      if ((double) this.velocity.Y == 0.0 | flag1)
      {
        int index21 = (int) ((double) this.position.Y + (double) this.height + 7.0) / 16;
        int index22 = (int) ((double) this.position.Y - 9.0) / 16;
        int num149 = (int) this.position.X / 16;
        int num150 = (int) ((double) this.position.X + (double) this.width) / 16;
        int num151 = (int) ((double) this.position.X + 8.0) / 16;
        int num152 = (int) ((double) this.position.X + (double) this.width - 8.0) / 16;
        bool flag21 = false;
        for (int index23 = num151; index23 <= num152; ++index23)
        {
          if (index23 >= num149 && index23 <= num150 && Main.tile[index23, index21] == null)
          {
            flag21 = true;
          }
          else
          {
            if (Main.tile[index23, index22] != null && Main.tile[index23, index22].nactive() && Main.tileSolid[(int) Main.tile[index23, index22].type])
            {
              flag5 = false;
              break;
            }
            if (!flag21 && index23 >= num149 && index23 <= num150 && Main.tile[index23, index21].nactive() && Main.tileSolid[(int) Main.tile[index23, index21].type])
              flag5 = true;
          }
        }
        if (!flag5 && (double) this.velocity.Y < 0.0)
          this.velocity.Y = 0.0f;
        if (flag21)
          return;
      }
      if (this.type == 428)
        flag5 = false;
      if ((double) this.velocity.Y >= 0.0 && (this.type != 580 || this.directionY != 1))
      {
        int num153 = 0;
        if ((double) this.velocity.X < 0.0)
          num153 = -1;
        if ((double) this.velocity.X > 0.0)
          num153 = 1;
        Vector2 position = this.position;
        position.X += this.velocity.X;
        int x = (int) (((double) position.X + (double) (this.width / 2) + (double) ((this.width / 2 + 1) * num153)) / 16.0);
        int y = (int) (((double) position.Y + (double) this.height - 1.0) / 16.0);
        if (WorldGen.InWorld(x, y, 4))
        {
          if (Main.tile[x, y] == null)
            Main.tile[x, y] = new Tile();
          if (Main.tile[x, y - 1] == null)
            Main.tile[x, y - 1] = new Tile();
          if (Main.tile[x, y - 2] == null)
            Main.tile[x, y - 2] = new Tile();
          if (Main.tile[x, y - 3] == null)
            Main.tile[x, y - 3] = new Tile();
          if (Main.tile[x, y + 1] == null)
            Main.tile[x, y + 1] = new Tile();
          if (Main.tile[x - num153, y - 3] == null)
            Main.tile[x - num153, y - 3] = new Tile();
          if ((double) (x * 16) < (double) position.X + (double) this.width && (double) (x * 16 + 16) > (double) position.X && (Main.tile[x, y].nactive() && !Main.tile[x, y].topSlope() && !Main.tile[x, y - 1].topSlope() && Main.tileSolid[(int) Main.tile[x, y].type] && !Main.tileSolidTop[(int) Main.tile[x, y].type] || Main.tile[x, y - 1].halfBrick() && Main.tile[x, y - 1].nactive()) && (!Main.tile[x, y - 1].nactive() || !Main.tileSolid[(int) Main.tile[x, y - 1].type] || Main.tileSolidTop[(int) Main.tile[x, y - 1].type] || Main.tile[x, y - 1].halfBrick() && (!Main.tile[x, y - 4].nactive() || !Main.tileSolid[(int) Main.tile[x, y - 4].type] || Main.tileSolidTop[(int) Main.tile[x, y - 4].type])) && (!Main.tile[x, y - 2].nactive() || !Main.tileSolid[(int) Main.tile[x, y - 2].type] || Main.tileSolidTop[(int) Main.tile[x, y - 2].type]) && (!Main.tile[x, y - 3].nactive() || !Main.tileSolid[(int) Main.tile[x, y - 3].type] || Main.tileSolidTop[(int) Main.tile[x, y - 3].type]) && (!Main.tile[x - num153, y - 3].nactive() || !Main.tileSolid[(int) Main.tile[x - num153, y - 3].type]))
          {
            float num154 = (float) (y * 16);
            if (Main.tile[x, y].halfBrick())
              num154 += 8f;
            if (Main.tile[x, y - 1].halfBrick())
              num154 -= 8f;
            if ((double) num154 < (double) position.Y + (double) this.height)
            {
              float num155 = position.Y + (float) this.height - num154;
              float num156 = 16.1f;
              if (this.type == 163 || this.type == 164 || this.type == 236 || this.type == 239 || this.type == 530)
                num156 += 8f;
              if ((double) num155 <= (double) num156)
              {
                this.gfxOffY += this.position.Y + (float) this.height - num154;
                this.position.Y = num154 - (float) this.height;
                this.stepSpeed = (double) num155 >= 9.0 ? 2f : 1f;
              }
            }
          }
        }
      }
      if (flag5)
      {
        int index24 = (int) (((double) this.position.X + (double) (this.width / 2) + (double) (15 * this.direction)) / 16.0);
        int index25 = (int) (((double) this.position.Y + (double) this.height - 15.0) / 16.0);
        if (this.type == 109 || this.type == 163 || this.type == 164 || this.type == 199 || this.type == 236 || this.type == 239 || this.type == 257 || this.type == 258 || this.type == 290 || this.type == 391 || this.type == 425 || this.type == 427 || this.type == 426 || this.type == 580 || this.type == 508 || this.type == 415 || this.type == 530 || this.type == 532 || this.type == 582)
          index24 = (int) (((double) this.position.X + (double) (this.width / 2) + (double) ((this.width / 2 + 16) * this.direction)) / 16.0);
        if (Main.tile[index24, index25] == null)
          Main.tile[index24, index25] = new Tile();
        if (Main.tile[index24, index25 - 1] == null)
          Main.tile[index24, index25 - 1] = new Tile();
        if (Main.tile[index24, index25 - 2] == null)
          Main.tile[index24, index25 - 2] = new Tile();
        if (Main.tile[index24, index25 - 3] == null)
          Main.tile[index24, index25 - 3] = new Tile();
        if (Main.tile[index24, index25 + 1] == null)
          Main.tile[index24, index25 + 1] = new Tile();
        if (Main.tile[index24 + this.direction, index25 - 1] == null)
          Main.tile[index24 + this.direction, index25 - 1] = new Tile();
        if (Main.tile[index24 + this.direction, index25 + 1] == null)
          Main.tile[index24 + this.direction, index25 + 1] = new Tile();
        if (Main.tile[index24 - this.direction, index25 + 1] == null)
          Main.tile[index24 - this.direction, index25 + 1] = new Tile();
        Main.tile[index24, index25 + 1].halfBrick();
        if (((!Main.tile[index24, index25 - 1].nactive() ? 0 : (Main.tile[index24, index25 - 1].type == (ushort) 10 ? 1 : (Main.tile[index24, index25 - 1].type == (ushort) 388 ? 1 : 0))) & (flag8 ? 1 : 0)) != 0)
        {
          ++this.ai[2];
          this.ai[3] = 0.0f;
          if ((double) this.ai[2] >= 60.0)
          {
            bool flag22 = this.type == 3 || this.type == 430 || this.type == 590 || this.type == 331 || this.type == 332 || this.type == 132 || this.type == 161 || this.type == 186 || this.type == 187 || this.type == 188 || this.type == 189 || this.type == 200 || this.type == 223 || this.type == 320 || this.type == 321 || this.type == 319 || this.type == 21 || this.type == 324 || this.type == 323 || this.type == 322 || this.type == 44 || this.type == 196 || this.type == 167 || this.type == 77 || this.type == 197 || this.type == 202 || this.type == 203 || this.type == 449 || this.type == 450 || this.type == 451 || this.type == 452 || this.type == 481 || this.type == 201 || this.type == 635;
            bool flag23 = Main.player[this.target].ZoneGraveyard && Main.rand.Next(60) == 0;
            if (((!Main.bloodMoon || Main.getGoodWorld ? (!flag23 ? 1 : 0) : 0) & (flag22 ? 1 : 0)) != 0)
              this.ai[1] = 0.0f;
            this.velocity.X = 0.5f * (float) -this.direction;
            int num157 = 5;
            if (Main.tile[index24, index25 - 1].type == (ushort) 388)
              num157 = 2;
            this.ai[1] += (float) num157;
            if (this.type == 27)
              ++this.ai[1];
            if (this.type == 31 || this.type == 294 || this.type == 295 || this.type == 296)
              this.ai[1] += 6f;
            this.ai[2] = 0.0f;
            bool flag24 = false;
            if ((double) this.ai[1] >= 10.0)
            {
              flag24 = true;
              this.ai[1] = 10f;
            }
            if (this.type == 460)
              flag24 = true;
            WorldGen.KillTile(index24, index25 - 1, true);
            if ((Main.netMode != 1 || !flag24) && flag24 && Main.netMode != 1)
            {
              if (this.type == 26)
              {
                WorldGen.KillTile(index24, index25 - 1);
                if (Main.netMode == 2)
                  NetMessage.SendData(17, number2: ((float) index24), number3: ((float) (index25 - 1)));
              }
              else
              {
                if (Main.tile[index24, index25 - 1].type == (ushort) 10)
                {
                  bool flag25 = WorldGen.OpenDoor(index24, index25 - 1, this.direction);
                  if (!flag25)
                  {
                    this.ai[3] = (float) num33;
                    this.netUpdate = true;
                  }
                  if (Main.netMode == 2 & flag25)
                    NetMessage.SendData(19, number2: ((float) index24), number3: ((float) (index25 - 1)), number4: ((float) this.direction));
                }
                if (Main.tile[index24, index25 - 1].type == (ushort) 388)
                {
                  bool flag26 = WorldGen.ShiftTallGate(index24, index25 - 1, false);
                  if (!flag26)
                  {
                    this.ai[3] = (float) num33;
                    this.netUpdate = true;
                  }
                  if (Main.netMode == 2 & flag26)
                    NetMessage.SendData(19, number: 4, number2: ((float) index24), number3: ((float) (index25 - 1)));
                }
              }
            }
          }
        }
        else
        {
          int spriteDirection = this.spriteDirection;
          if (this.type == 425)
            spriteDirection *= -1;
          if ((double) this.velocity.X < 0.0 && spriteDirection == -1 || (double) this.velocity.X > 0.0 && spriteDirection == 1)
          {
            if (this.height >= 32 && Main.tile[index24, index25 - 2].nactive() && Main.tileSolid[(int) Main.tile[index24, index25 - 2].type])
            {
              if (Main.tile[index24, index25 - 3].nactive() && Main.tileSolid[(int) Main.tile[index24, index25 - 3].type])
              {
                this.velocity.Y = -8f;
                this.netUpdate = true;
              }
              else
              {
                this.velocity.Y = -7f;
                this.netUpdate = true;
              }
            }
            else if (Main.tile[index24, index25 - 1].nactive() && Main.tileSolid[(int) Main.tile[index24, index25 - 1].type])
            {
              if (this.type == 624)
              {
                this.velocity.Y = -8f;
                if (WorldGen.SolidTile((int) this.Center.X / 16, (int) ((double) this.position.Y + (double) this.height) / 16 - 8))
                {
                  this.direction *= -1;
                  this.spriteDirection = this.direction;
                  this.velocity.X = (float) (3 * this.direction);
                }
              }
              else
                this.velocity.Y = -6f;
              this.netUpdate = true;
            }
            else if ((double) this.position.Y + (double) this.height - (double) (index25 * 16) > 20.0 && Main.tile[index24, index25].nactive() && !Main.tile[index24, index25].topSlope() && Main.tileSolid[(int) Main.tile[index24, index25].type])
            {
              this.velocity.Y = -5f;
              this.netUpdate = true;
            }
            else if (this.directionY < 0 && this.type != 67 && (!Main.tile[index24, index25 + 1].nactive() || !Main.tileSolid[(int) Main.tile[index24, index25 + 1].type]) && (!Main.tile[index24 + this.direction, index25 + 1].nactive() || !Main.tileSolid[(int) Main.tile[index24 + this.direction, index25 + 1].type]))
            {
              this.velocity.Y = -8f;
              this.velocity.X *= 1.5f;
              this.netUpdate = true;
            }
            else if (flag8)
            {
              this.ai[1] = 0.0f;
              this.ai[2] = 0.0f;
            }
            if ((double) this.velocity.Y == 0.0 & flag6 && (double) this.ai[3] == 1.0)
              this.velocity.Y = -5f;
            if ((double) this.velocity.Y == 0.0 && (Main.expertMode ? 1 : (this.type == 586 ? 1 : 0)) != 0 && (double) Main.player[this.target].Bottom.Y < (double) this.Top.Y && (double) Math.Abs(this.Center.X - Main.player[this.target].Center.X) < (double) (Main.player[this.target].width * 3) && Collision.CanHit((Entity) this, (Entity) Main.player[this.target]))
            {
              if (this.type == 586)
              {
                int num158 = (int) (((double) this.Bottom.Y - 16.0 - (double) Main.player[this.target].Bottom.Y) / 16.0);
                if (num158 < 14 && Collision.CanHit((Entity) this, (Entity) Main.player[this.target]))
                {
                  if (num158 < 7)
                    this.velocity.Y = -8.8f;
                  else if (num158 < 8)
                    this.velocity.Y = -9.2f;
                  else if (num158 < 9)
                    this.velocity.Y = -9.7f;
                  else if (num158 < 10)
                    this.velocity.Y = -10.3f;
                  else if (num158 < 11)
                    this.velocity.Y = -10.6f;
                  else
                    this.velocity.Y = -11f;
                }
              }
              if ((double) this.velocity.Y == 0.0)
              {
                int num159 = 6;
                if ((double) Main.player[this.target].Bottom.Y > (double) this.Top.Y - (double) (num159 * 16))
                {
                  this.velocity.Y = -7.9f;
                }
                else
                {
                  int index26 = (int) ((double) this.Center.X / 16.0);
                  int num160 = (int) ((double) this.Bottom.Y / 16.0) - 1;
                  for (int index27 = num160; index27 > num160 - num159; --index27)
                  {
                    if (Main.tile[index26, index27].nactive() && TileID.Sets.Platforms[(int) Main.tile[index26, index27].type])
                    {
                      this.velocity.Y = -7.9f;
                      break;
                    }
                  }
                }
              }
            }
          }
          if ((this.type == 31 || this.type == 294 || this.type == 295 || this.type == 296 || this.type == 47 || this.type == 77 || this.type == 104 || this.type == 168 || this.type == 196 || this.type == 385 || this.type == 389 || this.type == 464 || this.type == 470 || this.type >= 524 && this.type <= 527) && (double) this.velocity.Y == 0.0)
          {
            int num161 = 100;
            int num162 = 50;
            if (this.type == 586)
            {
              num161 = 150;
              num162 = 150;
            }
            if ((double) Math.Abs((float) ((double) this.position.X + (double) (this.width / 2) - ((double) Main.player[this.target].position.X + (double) (Main.player[this.target].width / 2)))) < (double) num161 && (double) Math.Abs((float) ((double) this.position.Y + (double) (this.height / 2) - ((double) Main.player[this.target].position.Y + (double) (Main.player[this.target].height / 2)))) < (double) num162 && (this.direction > 0 && (double) this.velocity.X >= 1.0 || this.direction < 0 && (double) this.velocity.X <= -1.0))
            {
              if (this.type == 586)
              {
                this.velocity.X += (float) this.direction;
                this.velocity.X *= 2f;
                if ((double) this.velocity.X > 8.0)
                  this.velocity.X = 8f;
                if ((double) this.velocity.X < -8.0)
                  this.velocity.X = -8f;
                this.velocity.Y = -4.5f;
                if ((double) this.position.Y > (double) Main.player[this.target].position.Y + 40.0)
                  this.velocity.Y -= 2f;
                if ((double) this.position.Y > (double) Main.player[this.target].position.Y + 80.0)
                  this.velocity.Y -= 2f;
                if ((double) this.position.Y > (double) Main.player[this.target].position.Y + 120.0)
                  this.velocity.Y -= 2f;
              }
              else
              {
                this.velocity.X *= 2f;
                if ((double) this.velocity.X > 3.0)
                  this.velocity.X = 3f;
                if ((double) this.velocity.X < -3.0)
                  this.velocity.X = -3f;
                this.velocity.Y = -4f;
              }
              this.netUpdate = true;
            }
          }
          if (this.type == 120 && (double) this.velocity.Y < 0.0)
            this.velocity.Y *= 1.1f;
          if (this.type == 287 && (double) this.velocity.Y == 0.0 && (double) Math.Abs((float) ((double) this.position.X + (double) (this.width / 2) - ((double) Main.player[this.target].position.X + (double) (Main.player[this.target].width / 2)))) < 150.0 && (double) Math.Abs((float) ((double) this.position.Y + (double) (this.height / 2) - ((double) Main.player[this.target].position.Y + (double) (Main.player[this.target].height / 2)))) < 50.0 && (this.direction > 0 && (double) this.velocity.X >= 1.0 || this.direction < 0 && (double) this.velocity.X <= -1.0))
          {
            this.velocity.X = (float) (8 * this.direction);
            this.velocity.Y = -4f;
            this.netUpdate = true;
          }
          if (this.type == 287 && (double) this.velocity.Y < 0.0)
          {
            this.velocity.X *= 1.2f;
            this.velocity.Y *= 1.1f;
          }
          if (this.type == 460 && (double) this.velocity.Y < 0.0)
          {
            this.velocity.X *= 1.3f;
            this.velocity.Y *= 1.1f;
          }
        }
      }
      else if (flag8)
      {
        this.ai[1] = 0.0f;
        this.ai[2] = 0.0f;
      }
      if (Main.netMode == 1 || this.type != 120 || (double) this.ai[3] < (double) num33)
        return;
      int targetTileX = (int) Main.player[this.target].Center.X / 16;
      int targetTileY = (int) Main.player[this.target].Center.Y / 16;
      Vector2 zero = Vector2.Zero;
      if (!this.AI_AttemptToFindTeleportSpot(ref zero, targetTileX, targetTileY, telefragPreventionDistanceInTiles: 9))
        return;
      this.position.X = zero.X * 16f - (float) (this.width / 2);
      this.position.Y = zero.Y * 16f - (float) this.height;
      this.ai[3] = -120f;
      this.netUpdate = true;
    }

    public static bool DespawnEncouragement_AIStyle3_Fighters_NotDiscouraged(
      int npcID,
      Vector2 position,
      NPC npcInstance)
    {
      return Main.eclipse || !Main.IsItDay() || npcInstance != null && npcInstance.SpawnedFromStatue || (double) position.Y > Main.worldSurface * 16.0 || npcInstance != null && Main.player[npcInstance.target].ZoneGraveyard || Main.snowMoon && (npcID == 343 || npcID == 350) || Main.invasionType == 1 && (npcID == 26 || npcID == 27 || npcID == 28 || npcID == 111 || npcID == 471) || Main.dontStarveWorld && (npcID == 164 || npcID == 163) || npcID == 73 || npcID == 624 || npcID == 631 && (double) npcInstance.ai[2] > 0.0 || Main.invasionType == 3 && npcID >= 212 && npcID <= 216 || Main.invasionType == 4 && (npcID == 381 || npcID == 382 || npcID == 383 || npcID == 385 || npcID == 386 || npcID == 389 || npcID == 391 || npcID == 520) || npcID == 31 || npcID == 294 || npcID == 295 || npcID == 296 || npcID == 47 || npcID == 67 || npcID == 77 || npcID == 78 || npcID == 79 || npcID == 80 || npcID == 630 || npcID == 110 || npcID == 120 || npcID == 168 || npcID == 181 || npcID == 185 || npcID == 198 || npcID == 199 || npcID == 206 || npcID == 217 || npcID == 218 || npcID == 219 || npcID == 220 || npcID == 239 || npcID == 243 || npcID == 254 || npcID == (int) byte.MaxValue || npcID == 257 || npcID == 258 || npcID == 291 || npcID == 292 || npcID == 293 || npcID == 379 || npcID == 380 || npcID == 464 || npcID == 470 || npcID == 424 || npcID == 411 && (npcInstance == null || (double) npcInstance.ai[1] >= 180.0 || (double) npcInstance.ai[1] < 90.0) || npcID == 409 || npcID == 425 || npcID == 429 || npcID == 427 || npcID == 428 || npcID == 580 || npcID == 582 || npcID == 508 || npcID == 415 || npcID == 419 || npcID >= 524 && npcID <= 527 || npcID == 528 || npcID == 529 || npcID == 530 || npcID == 532;
    }

    public static bool DespawnEncouragement_AIStyle3_Fighters_CanBeBusyWithAction(int npcID) => npcID == 110 || npcID == 111 || npcID == 206 || npcID == 216 || npcID == 214 || npcID == 215 || npcID == 291 || npcID == 292 || npcID == 293 || npcID == 350 || npcID == 381 || npcID == 382 || npcID == 383 || npcID == 385 || npcID == 386 || npcID == 389 || npcID == 391 || npcID == 469 || npcID == 166 || npcID == 466 || npcID == 471 || npcID == 411 || npcID == 409 || npcID == 424 || npcID == 425 || npcID == 426 || npcID == 415 || npcID == 419 || npcID == 520;

    private void AI_001_Slimes()
    {
      if (this.type == 1 && ((double) this.ai[1] == 1.0 || (double) this.ai[1] == 2.0 || (double) this.ai[1] == 3.0))
        this.ai[1] = -1f;
      if (this.type == 1 && (double) this.ai[1] == 75.0)
      {
        float num = 0.3f;
        Lighting.AddLight((int) ((double) this.Center.X / 16.0), (int) ((double) this.Center.Y / 16.0), 0.8f * num, 0.7f * num, 0.1f * num);
        if (Main.rand.Next(12) == 0)
        {
          Dust dust = Dust.NewDustPerfect(this.Center + new Vector2(0.0f, (float) this.height * 0.2f) + Main.rand.NextVector2CircularEdge((float) this.width, (float) this.height * 0.6f) * (float) (0.30000001192092896 + (double) Main.rand.NextFloat() * 0.5), 228, new Vector2?(new Vector2(0.0f, (float) (-(double) Main.rand.NextFloat() * 0.30000001192092896 - 1.5))), (int) sbyte.MaxValue);
          dust.scale = 0.5f;
          dust.fadeIn = 1.1f;
          dust.noGravity = true;
          dust.noLight = true;
        }
      }
      if (this.type == 1 && (double) this.ai[1] == 0.0 && Main.netMode != 1 && (double) this.value > 0.0)
      {
        this.ai[1] = -1f;
        if (Main.remixWorld && (double) this.ai[0] != -999.0 && Main.rand.Next(3) == 0)
        {
          this.ai[1] = 75f;
          this.netUpdate = true;
        }
        else if (Main.rand.Next(20) == 0)
        {
          this.ai[1] = (float) NPC.AI_001_Slimes_GenerateItemInsideBody((double) this.ai[0] == -999.0);
          this.netUpdate = true;
        }
      }
      if (this.type == 1 && (double) this.ai[0] == -999.0)
      {
        this.frame.Y = 0;
        this.frameCounter = 0.0;
        this.rotation = 0.0f;
      }
      else
      {
        if (this.type == 244)
        {
          Lighting.AddLight((int) (((double) this.position.X + (double) (this.width / 2)) / 16.0), (int) (((double) this.position.Y + (double) (this.height / 2)) / 16.0), (float) Main.DiscoR / (float) byte.MaxValue * 1f, (float) Main.DiscoG / (float) byte.MaxValue * 1f, (float) Main.DiscoB / (float) byte.MaxValue * 1f);
          this.AI_001_SetRainbowSlimeColor();
        }
        bool flag = false;
        if (!Main.dayTime || this.life != this.lifeMax || (double) this.position.Y > Main.worldSurface * 16.0 || Main.slimeRain)
          flag = true;
        if (Main.remixWorld && this.type == 59 && this.life == this.lifeMax)
          flag = false;
        if (this.type == 81)
        {
          flag = true;
          if (Main.rand.Next(30) == 0)
          {
            this.position = this.position + this.netOffset;
            int index = Dust.NewDust(this.position, this.width, this.height, 14, Alpha: this.alpha, newColor: this.color);
            Main.dust[index].velocity *= 0.3f;
            this.position = this.position - this.netOffset;
          }
        }
        if ((this.type == 377 || this.type == 446) && this.target != (int) byte.MaxValue && !Main.player[this.target].dead && (double) Vector2.Distance(this.Center, Main.player[this.target].Center) <= 200.0 && !this.wet)
          flag = true;
        if (this.type == 183)
          flag = true;
        if (this.type == 304)
          flag = true;
        if (this.type == 667)
          flag = true;
        if (this.type == 244)
        {
          flag = true;
          this.ai[0] += 2f;
        }
        if (this.type == 147 && Main.rand.Next(10) == 0)
        {
          this.position = this.position + this.netOffset;
          int index = Dust.NewDust(this.position, this.width, this.height, 76);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.1f;
          this.position = this.position - this.netOffset;
        }
        if (this.type == 667)
        {
          Color color = new Color(204, 181, 72, (int) byte.MaxValue);
          Lighting.AddLight((int) ((double) this.Center.X / 16.0), (int) ((double) this.Center.Y / 16.0), (float) ((double) color.R / (double) byte.MaxValue * 1.1000000238418579), (float) ((double) color.G / (double) byte.MaxValue * 1.1000000238418579), (float) ((double) color.B / (double) byte.MaxValue * 1.1000000238418579));
          if ((double) this.velocity.Length() > 1.0 || Main.rand.Next(4) != 0)
          {
            int num1 = 8;
            Vector2 Position = this.position + new Vector2((float) -num1, (float) -num1);
            int num2 = this.width + num1 * 2;
            int num3 = this.height + num1 * 2;
            this.position = this.position + this.netOffset;
            int Width = num2;
            int Height = num3;
            Color newColor = new Color();
            int index = Dust.NewDust(Position, Width, Height, 246, newColor: newColor);
            Main.dust[index].noGravity = true;
            Main.dust[index].noLightEmittence = true;
            Main.dust[index].velocity *= 0.2f;
            Main.dust[index].scale = 1.5f;
            this.position = this.position - this.netOffset;
          }
        }
        if (this.type == 676)
        {
          Lighting.AddLight(this.Center, 23);
          if ((double) this.velocity.Length() > 1.0 && Main.rand.Next(3) == 0 || Main.rand.Next(5) == 0)
          {
            Dust dust = Dust.NewDustPerfect(Main.rand.NextVector2FromRectangle(this.Hitbox), 306);
            dust.noGravity = true;
            dust.noLightEmittence = true;
            dust.alpha = (int) sbyte.MaxValue;
            dust.color = Main.hslToRgb((float) ((Main.timeForVisualEffects / 300.0 + (double) Main.rand.NextFloat() * 0.10000000149011612) % 1.0), 1f, 0.65f);
            dust.color.A = (byte) 0;
            dust.velocity = dust.position - this.Center;
            dust.velocity *= 0.1f;
            dust.velocity.X *= 0.25f;
            if ((double) dust.velocity.Y > 0.0)
              dust.velocity.Y *= -1f;
            dust.scale = (float) ((double) Main.rand.NextFloat() * 0.30000001192092896 + 0.5);
            dust.fadeIn = 0.9f;
            dust.position += this.netOffset;
          }
        }
        if (this.type == 184)
        {
          if (Main.rand.Next(8) == 0)
          {
            this.position = this.position + this.netOffset;
            int index = Dust.NewDust(this.position - this.velocity, this.width, this.height, 76);
            Main.dust[index].noGravity = true;
            Main.dust[index].velocity *= 0.15f;
            this.position = this.position - this.netOffset;
          }
          flag = true;
          if ((double) this.localAI[0] > 0.0)
            --this.localAI[0];
          if (!this.wet && !Main.player[this.target].npcTypeNoAggro[this.type])
          {
            Vector2 vector2_1 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num4 = Main.player[this.target].position.X + (float) Main.player[this.target].width * 0.5f - vector2_1.X;
            float num5 = Main.player[this.target].position.Y - vector2_1.Y;
            float num6 = (float) Math.Sqrt((double) num4 * (double) num4 + (double) num5 * (double) num5);
            if (Main.expertMode && (double) num6 < 120.0 && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height) && (double) this.velocity.Y == 0.0)
            {
              this.ai[0] = -40f;
              if ((double) this.velocity.Y == 0.0)
                this.velocity.X *= 0.9f;
              if (Main.netMode != 1 && (double) this.localAI[0] == 0.0)
              {
                for (int index = 0; index < 5; ++index)
                {
                  Vector2 vector2_2 = new Vector2((float) (index - 2), -4f);
                  vector2_2.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.004999999888241291);
                  vector2_2.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.004999999888241291);
                  vector2_2.Normalize();
                  vector2_2 *= (float) (4.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
                  int damageForProjectiles = this.GetAttackDamage_ForProjectiles(9f, 9f);
                  Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_1.X, vector2_1.Y, vector2_2.X, vector2_2.Y, 174, damageForProjectiles, 0.0f, Main.myPlayer);
                  this.localAI[0] = 30f;
                }
              }
            }
            else if ((double) num6 < 200.0 && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height) && (double) this.velocity.Y == 0.0)
            {
              this.ai[0] = -40f;
              if ((double) this.velocity.Y == 0.0)
                this.velocity.X *= 0.9f;
              if (Main.netMode != 1 && (double) this.localAI[0] == 0.0)
              {
                float num7 = Main.player[this.target].position.Y - vector2_1.Y - (float) Main.rand.Next(0, 200);
                float num8 = 4.5f / (float) Math.Sqrt((double) num4 * (double) num4 + (double) num7 * (double) num7);
                float SpeedX = num4 * num8;
                float SpeedY = num7 * num8;
                this.localAI[0] = 50f;
                Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_1.X, vector2_1.Y, SpeedX, SpeedY, 174, 9, 0.0f, Main.myPlayer);
              }
            }
          }
        }
        if (this.type == 535)
        {
          flag = true;
          if ((double) this.localAI[0] > 0.0)
            --this.localAI[0];
          if (!this.wet && !Main.player[this.target].npcTypeNoAggro[this.type])
          {
            Vector2 vector2_3 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num9 = Main.player[this.target].position.X + (float) Main.player[this.target].width * 0.5f - vector2_3.X;
            float num10 = Main.player[this.target].position.Y - vector2_3.Y;
            float num11 = (float) Math.Sqrt((double) num9 * (double) num9 + (double) num10 * (double) num10);
            if (Main.expertMode && (double) num11 < 120.0 && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height) && (double) this.velocity.Y == 0.0)
            {
              this.ai[0] = -40f;
              if ((double) this.velocity.Y == 0.0)
                this.velocity.X *= 0.9f;
              if (Main.netMode != 1 && (double) this.localAI[0] == 0.0)
              {
                for (int index = 0; index < 5; ++index)
                {
                  Vector2 vector2_4 = new Vector2((float) (index - 2), -4f);
                  vector2_4.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.004999999888241291);
                  vector2_4.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.004999999888241291);
                  vector2_4.Normalize();
                  vector2_4 *= (float) (4.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
                  int damageForProjectiles = this.GetAttackDamage_ForProjectiles(9f, 9f);
                  Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_3.X, vector2_3.Y, vector2_4.X, vector2_4.Y, 605, damageForProjectiles, 0.0f, Main.myPlayer);
                  this.localAI[0] = 30f;
                }
              }
            }
            else if ((double) num11 < 200.0 && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height) && (double) this.velocity.Y == 0.0)
            {
              this.ai[0] = -40f;
              if ((double) this.velocity.Y == 0.0)
                this.velocity.X *= 0.9f;
              if (Main.netMode != 1 && (double) this.localAI[0] == 0.0)
              {
                float num12 = Main.player[this.target].position.Y - vector2_3.Y - (float) Main.rand.Next(0, 200);
                float num13 = 4.5f / (float) Math.Sqrt((double) num9 * (double) num9 + (double) num12 * (double) num12);
                float SpeedX = num9 * num13;
                float SpeedY = num12 * num13;
                this.localAI[0] = 50f;
                Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_3.X, vector2_3.Y, SpeedX, SpeedY, 605, 9, 0.0f, Main.myPlayer);
              }
            }
          }
        }
        if (this.type == 658)
        {
          flag = true;
          if ((double) this.localAI[0] > 0.0)
            --this.localAI[0];
          if (!this.wet && Main.player[this.target].active && !Main.player[this.target].dead && !Main.player[this.target].npcTypeNoAggro[this.type])
          {
            Player player = Main.player[this.target];
            Vector2 center = this.Center;
            float num14 = player.Center.X - center.X;
            float num15 = player.Center.Y - center.Y;
            float num16 = (float) Math.Sqrt((double) num14 * (double) num14 + (double) num15 * (double) num15);
            int num17 = NPC.CountNPCS(658);
            if (Main.expertMode && num17 < 5 && (double) Math.Abs(num14) < 500.0 && (double) Math.Abs(num15) < 550.0 && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height) && (double) this.velocity.Y == 0.0)
            {
              this.ai[0] = -40f;
              if ((double) this.velocity.Y == 0.0)
                this.velocity.X *= 0.9f;
              if (Main.netMode != 1 && (double) this.localAI[0] == 0.0)
              {
                for (int index = 0; index < 3; ++index)
                {
                  Vector2 vector2 = new Vector2((float) (index - 1), -4f);
                  vector2.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.004999999888241291);
                  vector2.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.004999999888241291);
                  vector2.Normalize();
                  vector2 *= (float) (6.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
                  if ((double) num16 > 350.0)
                    vector2 *= 2f;
                  else if ((double) num16 > 250.0)
                    vector2 *= 1.5f;
                  int projectilesMultiLerp = this.GetAttackDamage_ForProjectiles_MultiLerp(15f, 17f, 20f);
                  Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), center.X, center.Y, vector2.X, vector2.Y, 920, projectilesMultiLerp, 0.0f, Main.myPlayer);
                  this.localAI[0] = 25f;
                  if (num17 > 4)
                    break;
                }
              }
            }
            else if ((double) Math.Abs(num14) < 500.0 && (double) Math.Abs(num15) < 550.0 && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height) && (double) this.velocity.Y == 0.0)
            {
              float num18 = num16;
              this.ai[0] = -40f;
              if ((double) this.velocity.Y == 0.0)
                this.velocity.X *= 0.9f;
              if (Main.netMode != 1 && (double) this.localAI[0] == 0.0)
              {
                float num19 = Main.player[this.target].position.Y - center.Y - (float) Main.rand.Next(0, 200);
                float num20 = 4.5f / (float) Math.Sqrt((double) num14 * (double) num14 + (double) num19 * (double) num19) * 2f;
                if ((double) num18 > 350.0)
                  num20 *= 2f;
                else if ((double) num18 > 250.0)
                  num20 *= 1.5f;
                float SpeedX = num14 * num20;
                float SpeedY = num19 * num20;
                this.localAI[0] = 50f;
                int projectilesMultiLerp = this.GetAttackDamage_ForProjectiles_MultiLerp(15f, 17f, 20f);
                Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), center.X, center.Y, SpeedX, SpeedY, 920, projectilesMultiLerp, 0.0f, Main.myPlayer);
              }
            }
          }
        }
        if (this.type == 659)
        {
          flag = true;
          if ((double) this.localAI[0] > 0.0)
            --this.localAI[0];
          if (!this.wet && Main.player[this.target].active && !Main.player[this.target].dead && !Main.player[this.target].npcTypeNoAggro[this.type])
          {
            Player player = Main.player[this.target];
            Vector2 center = this.Center;
            float num21 = player.Center.X - center.X;
            float num22 = player.Center.Y - center.Y;
            float num23 = (float) Math.Sqrt((double) num21 * (double) num21 + (double) num22 * (double) num22);
            if ((double) Math.Abs(num21) < 500.0 && (double) Math.Abs(num22) < 550.0 && Collision.CanHit(this.position, this.width, this.height, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height) && (double) this.velocity.Y == 0.0)
            {
              this.ai[0] = -40f;
              if ((double) this.velocity.Y == 0.0)
                this.velocity.X *= 0.9f;
              if (Main.netMode != 1 && (double) this.localAI[0] == 0.0)
              {
                float num24 = Main.player[this.target].position.Y - center.Y - (float) Main.rand.Next(0, 200);
                float num25 = 4.5f / (float) Math.Sqrt((double) num21 * (double) num21 + (double) num24 * (double) num24) * 2f;
                if ((double) num23 > 350.0)
                  num25 *= 1.75f;
                else if ((double) num23 > 250.0)
                  num25 *= 1.25f;
                float SpeedX = num21 * num25;
                float SpeedY = num24 * num25;
                this.localAI[0] = 40f;
                if (Main.expertMode)
                  this.localAI[0] = 30f;
                int projectilesMultiLerp = this.GetAttackDamage_ForProjectiles_MultiLerp(15f, 17f, 20f);
                Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), center.X, center.Y, SpeedX, SpeedY, 921, projectilesMultiLerp, 0.0f, Main.myPlayer);
              }
            }
          }
        }
        if (this.type == 204)
        {
          flag = true;
          if ((double) this.localAI[0] > 0.0)
            --this.localAI[0];
          if (!this.wet && !Main.player[this.target].npcTypeNoAggro[this.type])
          {
            Vector2 vector2_5 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num26 = Main.player[this.target].position.X + (float) Main.player[this.target].width * 0.5f - vector2_5.X;
            float num27 = Main.player[this.target].position.Y - vector2_5.Y;
            float num28 = (float) Math.Sqrt((double) num26 * (double) num26 + (double) num27 * (double) num27);
            if (Main.expertMode && (double) num28 < 200.0 && Collision.CanHit(new Vector2(this.position.X, this.position.Y - 20f), this.width, this.height + 20, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height) && (double) this.velocity.Y == 0.0)
            {
              this.ai[0] = -40f;
              if ((double) this.velocity.Y == 0.0)
                this.velocity.X *= 0.9f;
              if (Main.netMode != 1 && (double) this.localAI[0] == 0.0)
              {
                for (int index = 0; index < 5; ++index)
                {
                  Vector2 vector2_6 = new Vector2((float) (index - 2), -2f);
                  vector2_6.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.019999999552965164);
                  vector2_6.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.019999999552965164);
                  vector2_6.Normalize();
                  vector2_6 *= (float) (3.0 + (double) Main.rand.Next(-50, 51) * 0.0099999997764825821);
                  int damageForProjectiles = this.GetAttackDamage_ForProjectiles(13f, 13f);
                  Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_5.X, vector2_5.Y, vector2_6.X, vector2_6.Y, 176, damageForProjectiles, 0.0f, Main.myPlayer);
                  this.localAI[0] = 80f;
                }
              }
            }
            if ((double) num28 < 400.0 && Collision.CanHit(new Vector2(this.position.X, this.position.Y - 20f), this.width, this.height + 20, Main.player[this.target].position, Main.player[this.target].width, Main.player[this.target].height) && (double) this.velocity.Y == 0.0)
            {
              this.ai[0] = -80f;
              if ((double) this.velocity.Y == 0.0)
                this.velocity.X *= 0.9f;
              if (Main.netMode != 1 && (double) this.localAI[0] == 0.0)
              {
                float num29 = Main.player[this.target].position.Y - vector2_5.Y - (float) Main.rand.Next(-30, 20) - num28 * 0.05f;
                float num30 = Main.player[this.target].position.X - vector2_5.X - (float) Main.rand.Next(-20, 20);
                float num31 = 7f / (float) Math.Sqrt((double) num30 * (double) num30 + (double) num29 * (double) num29);
                float SpeedX = num30 * num31;
                float SpeedY = num29 * num31;
                this.localAI[0] = 65f;
                Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_5.X, vector2_5.Y, SpeedX, SpeedY, 176, 13, 0.0f, Main.myPlayer);
              }
            }
          }
        }
        if (this.type == 377 || this.type == 446)
        {
          if ((double) this.localAI[2] < 90.0)
            ++this.localAI[2];
          else
            this.friendly = false;
        }
        if (this.type == 59)
        {
          this.position = this.position + this.netOffset;
          Lighting.AddLight((int) (((double) this.position.X + (double) (this.width / 2)) / 16.0), (int) (((double) this.position.Y + (double) (this.height / 2)) / 16.0), 1f, 0.3f, 0.1f);
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, Scale: 1.7f);
          Main.dust[index].noGravity = true;
          this.position = this.position - this.netOffset;
        }
        if ((double) this.ai[2] > 1.0)
          --this.ai[2];
        if (this.wet)
        {
          if (this.collideY)
            this.velocity.Y = -2f;
          if ((double) this.velocity.Y < 0.0 && (double) this.ai[3] == (double) this.position.X)
          {
            this.direction *= -1;
            this.ai[2] = 200f;
          }
          if ((double) this.velocity.Y > 0.0)
            this.ai[3] = this.position.X;
          if (this.type == 59 && !Main.remixWorld)
          {
            if ((double) this.velocity.Y > 2.0)
              this.velocity.Y *= 0.9f;
            else if (this.directionY < 0)
              this.velocity.Y -= 0.8f;
            this.velocity.Y -= 0.5f;
            if ((double) this.velocity.Y < -10.0)
              this.velocity.Y = -10f;
          }
          else
          {
            if ((double) this.velocity.Y > 2.0)
              this.velocity.Y *= 0.9f;
            this.velocity.Y -= 0.5f;
            if ((double) this.velocity.Y < -4.0)
              this.velocity.Y = -4f;
          }
          if ((double) this.ai[2] == 1.0 & flag)
            this.TargetClosest();
        }
        this.aiAction = 0;
        if ((double) this.ai[2] == 0.0)
        {
          this.ai[0] = -100f;
          this.ai[2] = 1f;
          this.TargetClosest();
        }
        if ((double) this.velocity.Y == 0.0)
        {
          if (this.collideY && (double) this.oldVelocity.Y != 0.0 && Collision.SolidCollision(this.position, this.width, this.height))
            this.position.X -= this.velocity.X + (float) this.direction;
          if ((double) this.ai[3] == (double) this.position.X)
          {
            this.direction *= -1;
            this.ai[2] = 200f;
          }
          this.ai[3] = 0.0f;
          this.velocity.X *= 0.8f;
          if ((double) this.velocity.X > -0.1 && (double) this.velocity.X < 0.1)
            this.velocity.X = 0.0f;
          if (flag)
            ++this.ai[0];
          ++this.ai[0];
          if (this.type == 59 && !Main.remixWorld)
            this.ai[0] += 2f;
          if (this.type == 71)
            this.ai[0] += 3f;
          if (this.type == 667)
            this.ai[0] += 3f;
          if (this.type == 138)
            this.ai[0] += 2f;
          if (this.type == 183)
            ++this.ai[0];
          if (this.type == 658)
            this.ai[0] += 5f;
          if (this.type == 659)
            this.ai[0] += 3f;
          if (this.type == 304)
            this.ai[0] += (float) ((1 - this.life / this.lifeMax) * 10);
          if (this.type == 377 || this.type == 446)
            this.ai[0] += 3f;
          if (this.type == 81)
          {
            if ((double) this.scale >= 0.0)
              this.ai[0] += 4f;
            else
              ++this.ai[0];
          }
          float num32 = -1000f;
          if (this.type == 659)
            num32 = -500f;
          if (this.type == 667)
            num32 = -400f;
          int num33 = 0;
          if ((double) this.ai[0] >= 0.0)
            num33 = 1;
          if ((double) this.ai[0] >= (double) num32 && (double) this.ai[0] <= (double) num32 * 0.5)
            num33 = 2;
          if ((double) this.ai[0] >= (double) num32 * 2.0 && (double) this.ai[0] <= (double) num32 * 1.5)
            num33 = 3;
          if (num33 > 0)
          {
            this.netUpdate = true;
            if (flag && (double) this.ai[2] == 1.0)
              this.TargetClosest();
            if (num33 == 3)
            {
              this.velocity.Y = -8f;
              if (this.type == 59 && !Main.remixWorld)
                this.velocity.Y -= 2f;
              this.velocity.X += (float) (3 * this.direction);
              if (this.type == 59 && !Main.remixWorld)
                this.velocity.X += 0.5f * (float) this.direction;
              this.ai[0] = -200f;
              this.ai[3] = this.position.X;
            }
            else
            {
              this.velocity.Y = -6f;
              this.velocity.X += (float) (2 * this.direction);
              if (this.type == 59 && !Main.remixWorld)
                this.velocity.X += (float) (2 * this.direction);
              this.ai[0] = -120f;
              if (num33 == 1)
                this.ai[0] += num32;
              else
                this.ai[0] += num32 * 2f;
            }
            if (this.type == 659)
            {
              this.velocity.Y *= 1.6f;
              this.velocity.X *= 1.2f;
            }
            if (this.type == 685)
            {
              this.velocity.Y *= 0.5f;
              this.velocity.X *= 0.2f;
              if (Main.rand.Next(2) == 0)
                this.direction *= -1;
            }
            if (this.type == 141)
            {
              this.velocity.Y *= 1.3f;
              this.velocity.X *= 1.2f;
            }
            if (this.type != 377 && this.type != 446)
              return;
            this.velocity.Y *= 0.9f;
            this.velocity.X *= 0.6f;
            if (flag)
            {
              this.direction = -this.direction;
              this.velocity.X *= -1f;
            }
            if (!WorldGen.SolidTile((int) ((double) this.Center.X / 16.0), (int) ((double) this.Center.Y / 16.0) - 1) || -(double) this.velocity.Y + (double) this.height <= 16.0)
              return;
            this.velocity.Y = (float) -(16 - this.height);
          }
          else
          {
            if ((double) this.ai[0] < -30.0)
              return;
            this.aiAction = 1;
          }
        }
        else
        {
          if (this.target >= (int) byte.MaxValue || (this.direction != 1 || (double) this.velocity.X >= 3.0) && (this.direction != -1 || (double) this.velocity.X <= -3.0))
            return;
          if (this.collideX && (double) Math.Abs(this.velocity.X) == 0.20000000298023224)
            this.position.X -= 1.4f * (float) this.direction;
          if (this.collideY && (double) this.oldVelocity.Y != 0.0 && Collision.SolidCollision(this.position, this.width, this.height))
            this.position.X -= this.velocity.X + (float) this.direction;
          if (this.direction == -1 && (double) this.velocity.X < 0.01 || this.direction == 1 && (double) this.velocity.X > -0.01)
            this.velocity.X += 0.2f * (float) this.direction;
          else
            this.velocity.X *= 0.93f;
        }
      }
    }

    public void AI_001_SetRainbowSlimeColor()
    {
      this.color.R = (byte) Main.DiscoR;
      this.color.G = (byte) Main.DiscoG;
      this.color.B = (byte) Main.DiscoB;
      this.color.A = (byte) 100;
      this.alpha = 175;
    }

    private static int AI_001_Slimes_GenerateItemInsideBody(bool isBallooned)
    {
      int num = Main.rand.Next(4);
      int itemInsideBody;
      if (isBallooned)
      {
        switch (Main.rand.Next(13))
        {
          case 1:
            itemInsideBody = 4368;
            break;
          case 2:
            itemInsideBody = 4369;
            break;
          case 3:
            itemInsideBody = 4370;
            break;
          case 4:
            itemInsideBody = 4371;
            break;
          case 5:
            itemInsideBody = 4612;
            break;
          case 6:
            itemInsideBody = 4674;
            break;
          case 7:
          case 8:
          case 9:
            itemInsideBody = 4343;
            break;
          case 10:
          case 11:
          case 12:
            itemInsideBody = 4344;
            break;
          default:
            itemInsideBody = 4367;
            break;
        }
      }
      else
      {
        switch (num)
        {
          case 0:
            switch (Main.rand.Next(7))
            {
              case 0:
                itemInsideBody = 290;
                break;
              case 1:
                itemInsideBody = 292;
                break;
              case 2:
                itemInsideBody = 296;
                break;
              case 3:
                itemInsideBody = 2322;
                break;
              default:
                itemInsideBody = Main.netMode == 0 || Main.rand.Next(2) != 0 ? 2350 : 2997;
                break;
            }
            break;
          case 1:
            switch (Main.rand.Next(4))
            {
              case 0:
                itemInsideBody = 8;
                break;
              case 1:
                itemInsideBody = 166;
                break;
              case 2:
                itemInsideBody = 965;
                break;
              default:
                itemInsideBody = 58;
                break;
            }
            break;
          case 2:
            itemInsideBody = Main.rand.Next(2) != 0 ? Main.rand.Next(699, 703) : Main.rand.Next(11, 15);
            break;
          default:
            switch (Main.rand.Next(3))
            {
              case 0:
                itemInsideBody = 71;
                break;
              case 1:
                itemInsideBody = 72;
                break;
              default:
                itemInsideBody = 73;
                break;
            }
            break;
        }
      }
      return itemInsideBody;
    }

    private void AI_110_Betsy()
    {
      NPCUtils.TargetClosestBetsy(this, false);
      NPCAimedTarget targetData = this.GetTargetData();
      int num1 = -1;
      float num2 = 1f;
      int Damage1 = 35;
      int Damage2 = 35;
      float num3 = 10f;
      float moveSpeed = 0.45f;
      float num4 = 7.5f;
      float num5 = 30f;
      float num6 = 30f;
      float num7 = 23f;
      float num8 = 600f;
      float num9 = 12f;
      float num10 = 40f;
      float num11 = 80f;
      float num12 = num10 + num11;
      float num13 = 1500f;
      float num14 = 60f;
      float num15 = 13f;
      float amount = 0.0333333351f;
      float num16 = 12f;
      int num17 = 10;
      int num18 = 6 * num17;
      float num19 = 60f;
      float num20 = num14 + (float) num18 + num19;
      float num21 = 60f;
      float num22 = (float) (6.2831854820251465 * (1.0 / (double) num21));
      float num23 = 0.1f;
      float num24 = 32f;
      float num25 = 90f;
      float num26 = 20f;
      double num27 = (double) this.ai[0];
      if ((double) this.ai[0] == 0.0)
      {
        if ((double) ++this.ai[1] >= (double) num3)
        {
          this.ai[1] = 0.0f;
          this.ai[0] = 1f;
          this.ai[2] = 0.0f;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 1.0)
      {
        if ((double) this.ai[2] == 0.0)
          this.ai[2] = (double) this.Center.X < (double) targetData.Center.X ? 1f : -1f;
        this.SimpleFlyMovement(this.DirectionTo(targetData.Center + new Vector2((float) (-(double) this.ai[2] * 300.0), -200f)) * num4, moveSpeed);
        this.direction = this.spriteDirection = (double) this.Center.X < (double) targetData.Center.X ? 1 : -1;
        if ((double) ++this.ai[1] >= (double) num5)
        {
          int num28 = 1;
          if ((double) this.ai[3] == 5.0 && Main.rand.Next(3) == 0)
            ++this.ai[3];
          switch ((int) this.ai[3])
          {
            case 0:
            case 1:
            case 3:
              num28 = 2;
              break;
            case 2:
              num28 = 3;
              break;
            case 4:
              num28 = 4;
              break;
            case 5:
              num28 = 5;
              break;
            case 6:
              num28 = 3;
              break;
            case 7:
              num28 = 6;
              break;
          }
          this.ai[0] = (float) num28;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
          ++this.ai[3];
          this.netUpdate = true;
          if ((double) this.ai[3] >= 8.0)
            this.ai[3] = 0.0f;
          switch (num28)
          {
            case 2:
              Vector2 v1 = this.DirectionTo(targetData.Center);
              this.spriteDirection = (double) v1.X > 0.0 ? 1 : -1;
              this.rotation = v1.ToRotation();
              if (this.spriteDirection == -1)
                this.rotation += 3.14159274f;
              this.velocity = v1 * num7;
              break;
            case 3:
              Vector2 vector2 = new Vector2((double) targetData.Center.X > (double) this.Center.X ? 1f : -1f, 0.0f);
              this.spriteDirection = (double) vector2.X > 0.0 ? 1 : -1;
              this.velocity = vector2 * -2f;
              break;
            case 5:
              Vector2 v2 = this.DirectionTo(targetData.Center);
              this.spriteDirection = (double) v2.X > 0.0 ? 1 : -1;
              this.rotation = v2.ToRotation();
              if (this.spriteDirection == -1)
                this.rotation += 3.14159274f;
              this.velocity = v2 * num24;
              break;
          }
        }
      }
      else if ((double) this.ai[0] == 2.0)
      {
        if ((double) this.ai[1] == 0.0)
          SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsyWindAttack, this.Center);
        if ((double) ++this.ai[1] >= (double) num6)
        {
          this.ai[0] = 1f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
        }
      }
      else if ((double) this.ai[0] == 3.0)
      {
        ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[2]));
        if (activeSound != null)
          activeSound.Position = this.Center;
        ++this.ai[1];
        int num29 = (double) this.Center.X < (double) targetData.Center.X ? 1 : -1;
        this.ai[2] = (float) num29;
        if ((double) this.ai[1] < (double) num10)
        {
          Vector2 vector2_1 = targetData.Center + new Vector2((float) num29 * -num8, -250f);
          Vector2 vector2_2 = this.DirectionTo(vector2_1) * num9;
          if ((double) this.Distance(vector2_1) < (double) num9)
            this.Center = vector2_1;
          else
            this.position = this.position + vector2_2;
          if ((double) Vector2.Distance(vector2_1, this.Center) < 16.0)
            this.ai[1] = num10 - 1f;
          num2 = 1.5f;
        }
        if ((double) this.ai[1] == (double) num10)
        {
          int x = (double) targetData.Center.X > (double) this.Center.X ? 1 : -1;
          this.velocity = new Vector2((float) x, 0.0f) * 10f;
          this.direction = this.spriteDirection = x;
          if (Main.netMode != 1)
            Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center, this.velocity, 687, Damage1, 0.0f, Main.myPlayer, ai1: ((float) this.whoAmI));
          float[] localAi = this.localAI;
          SlotId slotId = SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsyFlameBreath, this.Center);
          double num30 = (double) ((SlotId) ref slotId).ToFloat();
          localAi[2] = (float) num30;
        }
        if ((double) this.ai[1] >= (double) num10)
        {
          num2 = 1.5f;
          if ((double) Math.Abs(targetData.Center.X - this.Center.X) > 550.0 && (double) Math.Abs(this.velocity.X) < 20.0)
            this.velocity.X += (float) Math.Sign(this.velocity.X) * 0.5f;
        }
        if ((double) this.ai[1] >= (double) num12)
        {
          this.ai[0] = 1f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
        }
      }
      else if ((double) this.ai[0] == 4.0)
      {
        int num31 = (double) this.Center.X < (double) targetData.Center.X ? 1 : -1;
        this.ai[2] = (float) num31;
        if ((double) this.ai[1] < (double) num14)
        {
          Vector2 Destination = targetData.Center + new Vector2((float) num31 * -num13, -350f);
          this.velocity = Vector2.Lerp(this.velocity, this.DirectionTo(Destination) * num15, amount);
          this.direction = this.spriteDirection = (double) this.Center.X < (double) targetData.Center.X ? 1 : -1;
          if ((double) Vector2.Distance(Destination, this.Center) < 16.0)
            this.ai[1] = num14 - 1f;
          num2 = 1.5f;
        }
        else if ((double) this.ai[1] == (double) num14)
        {
          Vector2 v = this.DirectionTo(targetData.Center);
          v.Y *= 0.25f;
          v = v.SafeNormalize(Vector2.UnitX * (float) this.direction);
          this.spriteDirection = (double) v.X > 0.0 ? 1 : -1;
          this.rotation = v.ToRotation();
          if (this.spriteDirection == -1)
            this.rotation += 3.14159274f;
          this.velocity = v * num16;
        }
        else
        {
          this.position.X += this.DirectionTo(targetData.Center).X * 7f;
          this.position.Y += this.DirectionTo(targetData.Center + new Vector2(0.0f, -400f)).Y * 6f;
          if ((double) this.ai[1] <= (double) num20 - (double) num19)
            num2 = 1.5f;
          Vector2 position = this.Center + new Vector2((110f + 30f) * (float) this.direction, 20f).RotatedBy((double) this.rotation);
          int num32 = (int) ((double) this.ai[1] - (double) num14 + 1.0);
          if (num32 <= num18 && num32 % num17 == 0 && Main.netMode != 1)
            Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), position, this.velocity, 686, Damage2, 0.0f, Main.myPlayer);
        }
        if ((double) this.ai[1] > (double) num20 - (double) num19)
          this.velocity.Y -= 0.1f;
        ++this.ai[1];
        if ((double) this.ai[1] >= (double) num20)
        {
          this.ai[0] = 1f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
        }
      }
      else if ((double) this.ai[0] == 5.0)
      {
        this.velocity = this.velocity.RotatedBy(-(double) num22 * (double) this.direction);
        this.position.Y -= num23;
        this.position = this.position + this.DirectionTo(targetData.Center) * 10f;
        this.rotation -= num22 * (float) this.direction;
        num2 *= 0.7f;
        if ((double) this.ai[1] == 1.0)
          SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsyFlyingCircleAttack, this.Center);
        if ((double) ++this.ai[1] >= (double) num21)
        {
          this.ai[0] = 1f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
          this.velocity = this.velocity / 2f;
        }
      }
      else if ((double) this.ai[0] == 6.0)
      {
        if ((double) this.ai[1] == 0.0)
        {
          this.SimpleFlyMovement(this.DirectionTo(targetData.Center + new Vector2(0.0f, -200f)) * num4 * 2f, moveSpeed * 2f);
          this.direction = this.spriteDirection = (double) this.Center.X < (double) targetData.Center.X ? 1 : -1;
          ++this.ai[2];
          if ((double) this.Distance(targetData.Center) < 350.0 || (double) this.ai[2] >= 180.0)
          {
            this.ai[1] = 1f;
            this.netUpdate = true;
          }
        }
        else
        {
          if ((double) this.ai[1] == 1.0)
            SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsyScream);
          if ((double) this.ai[1] < (double) num26)
            this.velocity = this.velocity * 0.95f;
          else
            this.velocity = this.velocity * 0.98f;
          if ((double) this.ai[1] == (double) num26)
          {
            if ((double) this.velocity.Y > 0.0)
              this.velocity.Y /= 3f;
            this.velocity.Y -= 3f;
          }
          num2 *= 0.85f;
          if (((double) this.ai[1] == 20.0 || (double) this.ai[1] == 25.0 ? 1 : ((double) this.ai[1] == 30.0 ? 1 : 0)) != 0)
          {
            Point tileCoordinates = this.Center.ToTileCoordinates();
            int num33 = 30;
            int num34 = 35;
            int num35 = 4;
            for (int i = tileCoordinates.X - num33; i <= tileCoordinates.X + num33; ++i)
            {
              bool flag1 = false;
              for (int j = tileCoordinates.Y - num34 / 3; j < tileCoordinates.Y + num34; ++j)
              {
                Tile tileSafely = Framing.GetTileSafely(i, j);
                bool flag2 = tileSafely.active() && Main.tileSolid[(int) tileSafely.type] && !Main.tileFrameImportant[(int) tileSafely.type];
                if (flag1 & flag2)
                {
                  int tileDustAmount = WorldGen.KillTile_GetTileDustAmount(true, tileSafely);
                  for (int index = 0; index < tileDustAmount; ++index)
                  {
                    Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
                    dust.velocity.Y -= (float) (3.0 + (double) num35 * 1.5);
                    dust.velocity.Y *= Main.rand.NextFloat();
                    dust.scale += (float) num35 * 0.03f;
                  }
                  for (int index = 0; index < tileDustAmount - 1; ++index)
                  {
                    Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
                    dust.velocity.Y -= 1f + (float) num35;
                    dust.velocity.Y *= Main.rand.NextFloat();
                  }
                  if (tileDustAmount > 0 && Main.rand.Next(3) != 0)
                  {
                    float num36 = (float) (Math.Abs(tileCoordinates.X - i) / (num33 / 2));
                    Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero, 61 + Main.rand.Next(3), (float) (1.0 - (double) num35 * 0.15000000596046448 + (double) num36 * 0.5));
                    gore.velocity.Y -= (float) (0.10000000149011612 + (double) num35 * 0.5 + (double) num36 * (double) num35 * 1.0);
                    gore.velocity.Y *= Main.rand.NextFloat();
                    gore.position = new Vector2((float) (i * 16 + 20), (float) (j * 16 + 20));
                  }
                }
                flag1 = !flag2;
              }
            }
          }
          bool flag = (double) this.ai[1] == 20.0 || (double) this.ai[1] == 45.0 || (double) this.ai[1] == 70.0;
          if (NPC.CountNPCS(560) > 4)
            flag = false;
          if (flag && Main.netMode != 1)
          {
            for (int index = 0; index < 1; ++index)
            {
              Vector2 vector2 = this.Center + (6.28318548f * Main.rand.NextFloat()).ToRotationVector2() * new Vector2(2f, 1f) * 300f * (float) (0.60000002384185791 + (double) Main.rand.NextFloat() * 0.40000000596046448);
              if ((double) Vector2.Distance(vector2, targetData.Center) > 100.0)
              {
                Point point = vector2.ToPoint();
                NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), point.X, point.Y, 560, this.whoAmI);
                SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsySummon, vector2);
              }
            }
            List<NPC> npcList = new List<NPC>();
            for (int index = 0; index < 200; ++index)
            {
              NPC npc = Main.npc[index];
              if (npc.active && npc.type == 549)
                npcList.Add(npc);
            }
            if (npcList.Count > 0)
            {
              for (int index = 0; index < 3; ++index)
              {
                NPC npc = npcList[Main.rand.Next(npcList.Count)];
                Point point = npc.Center.ToPoint();
                NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), point.X, point.Y, 560);
                SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsySummon, npc.Center);
              }
            }
          }
          ++this.ai[1];
        }
        if ((double) this.ai[1] >= (double) num25)
        {
          this.ai[0] = 1f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
        }
      }
      this.localAI[0] += num2;
      if ((double) this.localAI[0] >= 36.0)
        this.localAI[0] = 0.0f;
      if (num1 != -1)
        this.localAI[0] = (float) (num1 * 4);
      if ((double) ++this.localAI[1] >= 60.0)
        this.localAI[1] = 0.0f;
      float targetAngle = this.DirectionTo(targetData.Center).ToRotation();
      float maxChange = 0.04f;
      switch (this.ai[0])
      {
        case 2f:
        case 5f:
          maxChange = 0.0f;
          break;
        case 3f:
          maxChange = 0.01f;
          targetAngle = 0.0f;
          if (this.spriteDirection == -1)
            targetAngle -= 3.14159274f;
          if ((double) this.ai[1] >= (double) num10)
          {
            targetAngle += (float) ((double) this.spriteDirection * 3.1415927410125732 / 12.0);
            maxChange = 0.05f;
            break;
          }
          break;
        case 4f:
          maxChange = 0.01f;
          targetAngle = 3.14159274f;
          if (this.spriteDirection == 1)
          {
            targetAngle += 3.14159274f;
            break;
          }
          break;
        case 6f:
          maxChange = 0.02f;
          targetAngle = 0.0f;
          if (this.spriteDirection == -1)
          {
            targetAngle -= 3.14159274f;
            break;
          }
          break;
      }
      if (this.spriteDirection == -1)
        targetAngle += 3.14159274f;
      if ((double) maxChange != 0.0)
        this.rotation = this.rotation.AngleTowards(targetAngle, maxChange);
      if (SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[2])) != null)
        return;
      float[] localAi1 = this.localAI;
      SlotId invalid = SlotId.Invalid;
      double num37 = (double) ((SlotId) ref invalid).ToFloat();
      localAi1[2] = (float) num37;
    }

    private void AI_026_Unicorns()
    {
      int num1 = 30;
      int num2 = 10;
      bool flag1 = false;
      bool flag2 = false;
      bool flag3 = false;
      if ((double) this.velocity.Y == 0.0 && ((double) this.velocity.X > 0.0 && this.direction < 0 || (double) this.velocity.X < 0.0 && this.direction > 0))
      {
        flag2 = true;
        ++this.ai[3];
      }
      if (this.type == 546)
      {
        num2 = 4;
        bool flag4 = (double) this.velocity.Y == 0.0;
        for (int index = 0; index < 200; ++index)
        {
          if (index != this.whoAmI && Main.npc[index].active && Main.npc[index].type == this.type && (double) Math.Abs(this.position.X - Main.npc[index].position.X) + (double) Math.Abs(this.position.Y - Main.npc[index].position.Y) < (double) this.width)
          {
            if ((double) this.position.X < (double) Main.npc[index].position.X)
              this.velocity.X -= 0.05f;
            else
              this.velocity.X += 0.05f;
            if ((double) this.position.Y < (double) Main.npc[index].position.Y)
              this.velocity.Y -= 0.05f;
            else
              this.velocity.Y += 0.05f;
          }
        }
        if (flag4)
          this.velocity.Y = 0.0f;
      }
      if (this.type == 315)
      {
        if ((double) this.localAI[0]++ >= 480.0)
        {
          this.localAI[0] = 0.0f;
          int target = this.target;
          if (Main.netMode != 1 && target != (int) byte.MaxValue)
          {
            int damageForProjectiles = this.GetAttackDamage_ForProjectiles(40f, 30f);
            Projectile.NewProjectile(this.GetSpawnSourceForNPCFromNPCAI(), this.Center + Main.rand.NextVector2Circular(40f, 40f), new Vector2(this.velocity.X, Main.rand.NextFloatDirection() * 3f), 1001, damageForProjectiles, 0.0f, Main.myPlayer, (float) target);
          }
        }
        Lighting.AddLight(this.Center, 0.4f, 0.36f, 0.2f);
        int num3 = this.frame.Height;
        if (num3 < 1)
          num3 = 1;
        switch (this.frame.Y / num3)
        {
          case 4:
          case 5:
          case 6:
          case 7:
            Vector2 vector2_1 = this.Bottom + new Vector2(-30f, -8f);
            Vector2 vector2_2 = new Vector2(60f, 8f);
            if (Main.rand.Next(3) != 0)
            {
              Dust dust = Dust.NewDustPerfect(vector2_1 + new Vector2(Main.rand.NextFloat() * vector2_2.X, Main.rand.NextFloat() * vector2_2.Y), 6, new Vector2?(this.velocity));
              dust.scale = 0.6f;
              dust.fadeIn = 1.1f;
              dust.noGravity = true;
              dust.noLight = true;
              break;
            }
            break;
        }
      }
      if ((((double) this.position.X == (double) this.oldPosition.X ? 1 : ((double) this.ai[3] >= (double) num1 ? 1 : 0)) | (flag2 ? 1 : 0)) != 0)
      {
        ++this.ai[3];
        flag3 = true;
      }
      else if ((double) this.ai[3] > 0.0)
        --this.ai[3];
      if ((double) this.ai[3] > (double) (num1 * num2))
        this.ai[3] = 0.0f;
      if (this.justHit)
        this.ai[3] = 0.0f;
      if ((double) this.ai[3] == (double) num1)
        this.netUpdate = true;
      Vector2 vector2_3 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
      double num4 = (double) Main.player[this.target].position.X + (double) Main.player[this.target].width * 0.5 - (double) vector2_3.X;
      float num5 = Main.player[this.target].position.Y - vector2_3.Y;
      float num6 = (float) Math.Sqrt(num4 * num4 + (double) num5 * (double) num5);
      if ((double) num6 < 200.0 && !flag3)
        this.ai[3] = 0.0f;
      if (this.type == 410)
      {
        ++this.ai[1];
        bool flag5 = (double) this.ai[1] >= 240.0;
        if (!flag5 && (double) this.velocity.Y == 0.0)
        {
          for (int index = 0; index < (int) byte.MaxValue; ++index)
          {
            if (Main.player[index].active && !Main.player[index].dead && (double) Main.player[index].Distance(this.Center) < 800.0 && (double) Main.player[index].Center.Y < (double) this.Center.Y && (double) Math.Abs(Main.player[index].Center.X - this.Center.X) < 20.0)
            {
              flag5 = true;
              break;
            }
          }
        }
        if (flag5 && Main.netMode != 1)
        {
          for (int index = 0; index < 3; ++index)
            Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X, this.Center.Y, (float) (((double) Main.rand.NextFloat() - 0.5) * 2.0), (float) (-4.0 - 10.0 * (double) Main.rand.NextFloat()), 538, 50, 0.0f, Main.myPlayer);
          this.HitEffect(9999);
          this.active = false;
          return;
        }
      }
      else if (this.type == 423)
      {
        if ((double) this.ai[2] == 1.0)
        {
          ++this.ai[1];
          this.velocity.X *= 0.7f;
          if ((double) this.ai[1] < 30.0)
          {
            Vector2 Position = this.Center + Vector2.UnitX * (float) this.spriteDirection * -20f;
            Dust dust = Main.dust[Dust.NewDust(Position, 0, 0, 242)];
            Vector2 vector2_4 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
            dust.position = Position + vector2_4 * 20f;
            dust.velocity = -vector2_4 * 2f;
            dust.scale = (float) (0.5 + (double) vector2_4.X * (double) -this.spriteDirection);
            dust.fadeIn = 1f;
            dust.noGravity = true;
          }
          else if ((double) this.ai[1] == 30.0)
          {
            for (int index = 0; index < 20; ++index)
            {
              Vector2 Position = this.Center + Vector2.UnitX * (float) this.spriteDirection * -20f;
              Dust dust = Main.dust[Dust.NewDust(Position, 0, 0, 242)];
              Vector2 vector2_5 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
              dust.position = Position + vector2_5 * 4f;
              dust.velocity = vector2_5 * 4f + Vector2.UnitX * Main.rand.NextFloat() * (float) this.spriteDirection * -5f;
              dust.scale = (float) (0.5 + (double) vector2_5.X * (double) -this.spriteDirection);
              dust.fadeIn = 1f;
              dust.noGravity = true;
            }
          }
          if ((double) this.velocity.X > -0.5 && (double) this.velocity.X < 0.5)
            this.velocity.X = 0.0f;
          if ((double) this.ai[1] == 30.0 && Main.netMode != 1)
          {
            int damageForProjectiles = this.GetAttackDamage_ForProjectiles(50f, 35f);
            Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X + (float) (this.spriteDirection * -20), this.Center.Y, (float) (this.spriteDirection * -7), 0.0f, 575, damageForProjectiles, 0.0f, Main.myPlayer, (float) this.target);
          }
          if ((double) this.ai[1] >= 60.0)
          {
            this.ai[1] = (float) -Main.rand.Next(320, 601);
            this.ai[2] = 0.0f;
          }
        }
        else
        {
          ++this.ai[1];
          if ((double) this.ai[1] >= 180.0 && (double) num6 < 500.0 && (double) this.velocity.Y == 0.0)
          {
            flag1 = true;
            this.ai[1] = 0.0f;
            this.ai[2] = 1f;
            this.netUpdate = true;
          }
          else if ((double) this.velocity.Y == 0.0 && (double) num6 < 100.0 && (double) Math.Abs(this.velocity.X) > 3.0 && ((double) this.Center.X < (double) Main.player[this.target].Center.X && (double) this.velocity.X > 0.0 || (double) this.Center.X > (double) Main.player[this.target].Center.X && (double) this.velocity.X < 0.0))
            this.velocity.Y -= 4f;
        }
      }
      else if (this.type == 155 || this.type == 329)
      {
        if ((double) this.velocity.Y == 0.0 && (double) num6 < 100.0 && (double) Math.Abs(this.velocity.X) > 3.0 && ((double) this.position.X + (double) (this.width / 2) < (double) Main.player[this.target].position.X + (double) (Main.player[this.target].width / 2) && (double) this.velocity.X > 0.0 || (double) this.position.X + (double) (this.width / 2) > (double) Main.player[this.target].position.X + (double) (Main.player[this.target].width / 2) && (double) this.velocity.X < 0.0))
          this.velocity.Y -= 4f;
      }
      else if (this.type == 546 && (double) this.velocity.Y == 0.0 && (double) Math.Abs(this.velocity.X) > 3.0 && ((double) this.Center.X < (double) Main.player[this.target].Center.X && (double) this.velocity.X > 0.0 || (double) this.Center.X > (double) Main.player[this.target].Center.X && (double) this.velocity.X < 0.0))
      {
        this.velocity.Y -= 4f;
        SoundEngine.PlaySound(3, this.Center, 11);
      }
      if (this.type == 546 && !Main.player[this.target].ZoneDesert)
      {
        int direction = this.direction;
        this.TargetClosest();
        if (!Main.player[this.target].ZoneDesert)
        {
          this.EncourageDespawn(10);
          this.ai[3] = (float) num1;
          this.direction = direction;
        }
      }
      if ((double) this.ai[3] < (double) num1)
      {
        if ((this.type == 329 || this.type == 315) && !Main.pumpkinMoon)
          this.EncourageDespawn(10);
        else
          this.TargetClosest();
      }
      else
      {
        if ((double) this.velocity.X == 0.0)
        {
          if ((double) this.velocity.Y == 0.0)
          {
            ++this.ai[0];
            if ((double) this.ai[0] >= 2.0)
            {
              this.direction *= -1;
              this.spriteDirection = this.direction;
              this.ai[0] = 0.0f;
            }
          }
        }
        else
          this.ai[0] = 0.0f;
        this.directionY = -1;
        if (this.direction == 0)
          this.direction = 1;
      }
      float num7 = 6f;
      float num8 = 0.07f;
      if (!flag1 && ((double) this.velocity.Y == 0.0 || this.wet || (double) this.velocity.X <= 0.0 && this.direction < 0 || (double) this.velocity.X >= 0.0 && this.direction > 0))
      {
        if (this.type == 155)
        {
          if ((double) this.velocity.X > 0.0 && this.direction < 0)
            this.velocity.X *= 0.95f;
          if ((double) this.velocity.X < 0.0 && this.direction > 0)
            this.velocity.X *= 0.95f;
        }
        else if (this.type == 329)
        {
          if ((double) this.velocity.X > 0.0 && this.direction < 0)
            this.velocity.X *= 0.9f;
          if ((double) this.velocity.X < 0.0 && this.direction > 0)
            this.velocity.X *= 0.9f;
          if (this.direction > 0 && (double) this.velocity.X < 3.0)
            this.velocity.X += 0.1f;
          if (this.direction < 0 && (double) this.velocity.X > -3.0)
            this.velocity.X -= 0.1f;
        }
        else if (this.type == 315)
        {
          if ((double) this.velocity.X > 0.0 && this.direction < 0)
            this.velocity.X *= 0.95f;
          if ((double) this.velocity.X < 0.0 && this.direction > 0)
            this.velocity.X *= 0.95f;
          if ((double) this.velocity.X < -(double) num7 || (double) this.velocity.X > (double) num7)
          {
            if ((double) this.velocity.Y == 0.0)
              this.velocity = this.velocity * 0.8f;
          }
          else if ((double) this.velocity.X < (double) num7 && this.direction == 1)
          {
            this.velocity.X += 0.07f;
            if ((double) this.velocity.X > (double) num7)
              this.velocity.X = num7;
          }
          else if ((double) this.velocity.X > -(double) num7 && this.direction == -1)
          {
            this.velocity.X -= 0.07f;
            if ((double) this.velocity.X < -(double) num7)
              this.velocity.X = -num7;
          }
        }
        else if (this.type == 410)
        {
          if (Math.Sign(this.velocity.X) != this.direction)
            this.velocity.X *= 0.9f;
          num7 = 6f;
          num8 = 0.2f;
        }
        else if (this.type == 423)
        {
          if (Math.Sign(this.velocity.X) != this.direction)
            this.velocity.X *= 0.85f;
          num7 = 10f;
          num8 = 0.2f;
        }
        else if (this.type == 546)
        {
          if (Math.Sign(this.velocity.X) != this.direction)
            this.velocity.X *= 0.92f;
          float num9 = MathHelper.Lerp(0.6f, 1f, Math.Abs(Main.windSpeedTarget)) * (float) Math.Sign(Main.windSpeedTarget);
          if (!Main.player[this.target].ZoneSandstorm)
            num9 = 0.0f;
          num7 = (float) (4.0 + (double) num9 * (double) this.direction * 3.0);
          num8 = 0.05f;
        }
        if ((double) this.velocity.X < -(double) num7 || (double) this.velocity.X > (double) num7)
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity = this.velocity * 0.8f;
        }
        else if ((double) this.velocity.X < (double) num7 && this.direction == 1)
        {
          this.velocity.X += num8;
          if ((double) this.velocity.X > (double) num7)
            this.velocity.X = num7;
        }
        else if ((double) this.velocity.X > -(double) num7 && this.direction == -1)
        {
          this.velocity.X -= num8;
          if ((double) this.velocity.X < -(double) num7)
            this.velocity.X = -num7;
        }
      }
      if ((double) this.velocity.Y >= 0.0)
      {
        int num10 = 0;
        if ((double) this.velocity.X < 0.0)
          num10 = -1;
        if ((double) this.velocity.X > 0.0)
          num10 = 1;
        Vector2 position = this.position;
        position.X += this.velocity.X;
        int index1 = (int) (((double) position.X + (double) (this.width / 2) + (double) ((this.width / 2 + 1) * num10)) / 16.0);
        int index2 = (int) (((double) position.Y + (double) this.height - 1.0) / 16.0);
        if (Main.tile[index1, index2] == null)
          Main.tile[index1, index2] = new Tile();
        if (Main.tile[index1, index2 - 1] == null)
          Main.tile[index1, index2 - 1] = new Tile();
        if (Main.tile[index1, index2 - 2] == null)
          Main.tile[index1, index2 - 2] = new Tile();
        if (Main.tile[index1, index2 - 3] == null)
          Main.tile[index1, index2 - 3] = new Tile();
        if (Main.tile[index1, index2 + 1] == null)
          Main.tile[index1, index2 + 1] = new Tile();
        if ((double) (index1 * 16) < (double) position.X + (double) this.width && (double) (index1 * 16 + 16) > (double) position.X && (Main.tile[index1, index2].nactive() && !Main.tile[index1, index2].topSlope() && !Main.tile[index1, index2 - 1].topSlope() && Main.tileSolid[(int) Main.tile[index1, index2].type] && !Main.tileSolidTop[(int) Main.tile[index1, index2].type] || Main.tile[index1, index2 - 1].halfBrick() && Main.tile[index1, index2 - 1].nactive()) && (!Main.tile[index1, index2 - 1].nactive() || !Main.tileSolid[(int) Main.tile[index1, index2 - 1].type] || Main.tileSolidTop[(int) Main.tile[index1, index2 - 1].type] || Main.tile[index1, index2 - 1].halfBrick() && (!Main.tile[index1, index2 - 4].nactive() || !Main.tileSolid[(int) Main.tile[index1, index2 - 4].type] || Main.tileSolidTop[(int) Main.tile[index1, index2 - 4].type])) && (!Main.tile[index1, index2 - 2].nactive() || !Main.tileSolid[(int) Main.tile[index1, index2 - 2].type] || Main.tileSolidTop[(int) Main.tile[index1, index2 - 2].type]) && (!Main.tile[index1, index2 - 3].nactive() || !Main.tileSolid[(int) Main.tile[index1, index2 - 3].type] || Main.tileSolidTop[(int) Main.tile[index1, index2 - 3].type]) && (!Main.tile[index1 - num10, index2 - 3].nactive() || !Main.tileSolid[(int) Main.tile[index1 - num10, index2 - 3].type]))
        {
          float num11 = (float) (index2 * 16);
          if (Main.tile[index1, index2].halfBrick())
            num11 += 8f;
          if (Main.tile[index1, index2 - 1].halfBrick())
            num11 -= 8f;
          if ((double) num11 < (double) position.Y + (double) this.height)
          {
            float num12 = position.Y + (float) this.height - num11;
            if ((double) num12 <= 16.1)
            {
              this.gfxOffY += this.position.Y + (float) this.height - num11;
              this.position.Y = num11 - (float) this.height;
              this.stepSpeed = (double) num12 >= 9.0 ? 2f : 1f;
            }
          }
        }
      }
      if ((double) this.velocity.Y == 0.0)
      {
        bool flag6 = true;
        int index3 = (int) ((double) this.position.Y - 7.0) / 16;
        int num13 = (int) ((double) this.position.X - 7.0) / 16;
        int num14 = (int) ((double) this.position.X + (double) this.width + 7.0) / 16;
        for (int index4 = num13; index4 <= num14; ++index4)
        {
          if (Main.tile[index4, index3] != null && Main.tile[index4, index3].nactive() && Main.tileSolid[(int) Main.tile[index4, index3].type])
          {
            flag6 = false;
            break;
          }
        }
        if (flag6)
        {
          int index5 = (int) (((double) this.position.X + (double) (this.width / 2) + (double) ((this.width / 2 + 2) * this.direction) + (double) this.velocity.X * 5.0) / 16.0);
          int index6 = (int) (((double) this.position.Y + (double) this.height - 15.0) / 16.0);
          if (Main.tile[index5, index6] == null)
            Main.tile[index5, index6] = new Tile();
          if (Main.tile[index5, index6 - 1] == null)
            Main.tile[index5, index6 - 1] = new Tile();
          if (Main.tile[index5, index6 - 2] == null)
            Main.tile[index5, index6 - 2] = new Tile();
          if (Main.tile[index5, index6 - 3] == null)
            Main.tile[index5, index6 - 3] = new Tile();
          if (Main.tile[index5, index6 + 1] == null)
            Main.tile[index5, index6 + 1] = new Tile();
          if (Main.tile[index5 + this.direction, index6 - 1] == null)
            Main.tile[index5 + this.direction, index6 - 1] = new Tile();
          if (Main.tile[index5 + this.direction, index6 + 1] == null)
            Main.tile[index5 + this.direction, index6 + 1] = new Tile();
          if (Main.tile[index5 - this.direction, index6 + 1] == null)
            Main.tile[index5 - this.direction, index6 + 1] = new Tile();
          if (Main.tile[index5 + this.direction, index6 + 3] == null)
            Main.tile[index5 + this.direction, index6 + 3] = new Tile();
          int spriteDirection = this.spriteDirection;
          if (this.type == 423 || this.type == 410 || this.type == 546)
            spriteDirection *= -1;
          if ((double) this.velocity.X < 0.0 && spriteDirection == -1 || (double) this.velocity.X > 0.0 && spriteDirection == 1)
          {
            bool flag7 = this.type == 410 || this.type == 423;
            float num15 = 3f;
            if (Main.tile[index5, index6 - 2].nactive() && Main.tileSolid[(int) Main.tile[index5, index6 - 2].type])
            {
              if (Main.tile[index5, index6 - 3].nactive() && Main.tileSolid[(int) Main.tile[index5, index6 - 3].type])
              {
                this.velocity.Y = -8.5f;
                this.netUpdate = true;
              }
              else
              {
                this.velocity.Y = -7.5f;
                this.netUpdate = true;
              }
            }
            else if (Main.tile[index5, index6 - 1].nactive() && !Main.tile[index5, index6 - 1].topSlope() && Main.tileSolid[(int) Main.tile[index5, index6 - 1].type])
            {
              this.velocity.Y = -7f;
              this.netUpdate = true;
            }
            else if ((double) this.position.Y + (double) this.height - (double) (index6 * 16) > 20.0 && Main.tile[index5, index6].nactive() && !Main.tile[index5, index6].topSlope() && Main.tileSolid[(int) Main.tile[index5, index6].type])
            {
              this.velocity.Y = -6f;
              this.netUpdate = true;
            }
            else if ((this.directionY < 0 || (double) Math.Abs(this.velocity.X) > (double) num15) && (!flag7 || !Main.tile[index5, index6 + 1].nactive() || !Main.tileSolid[(int) Main.tile[index5, index6 + 1].type]) && (!Main.tile[index5, index6 + 2].nactive() || !Main.tileSolid[(int) Main.tile[index5, index6 + 2].type]) && (!Main.tile[index5 + this.direction, index6 + 3].nactive() || !Main.tileSolid[(int) Main.tile[index5 + this.direction, index6 + 3].type]))
            {
              this.velocity.Y = -8f;
              this.netUpdate = true;
            }
          }
        }
      }
      if (this.type == 423 && (double) Math.Abs(this.velocity.X) >= (double) num7 * 0.949999988079071)
      {
        Microsoft.Xna.Framework.Rectangle hitbox = this.Hitbox;
        for (int index = 0; index < 2; ++index)
        {
          if (Main.rand.Next(3) == 0)
          {
            Dust dust = Main.dust[Dust.NewDust(hitbox.TopLeft(), hitbox.Width, hitbox.Height, 242)];
            dust.velocity = Vector2.Zero;
            dust.noGravity = true;
            dust.fadeIn = 1f;
            dust.scale = 0.5f + Main.rand.NextFloat();
          }
        }
      }
      if (this.type != 546)
        return;
      this.rotation += this.velocity.X * 0.05f;
      this.spriteDirection = -this.direction;
    }

    private void AI_107_ImprovedWalkers()
    {
      bool flag1 = (double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0 && !this.justHit;
      bool flag2 = false;
      bool flag3 = false;
      bool flag4 = false;
      int num1 = 32;
      int num2 = 15;
      float num3 = 9f;
      bool flag5 = false;
      float num4 = 40f;
      int num5 = 30;
      int num6 = 0;
      bool flag6 = false;
      bool flag7 = true;
      float num7 = 0.9f;
      bool flag8 = false;
      bool flag9 = false;
      bool flag10 = false;
      bool flag11 = false;
      bool flag12 = false;
      bool flag13 = false;
      bool flag14 = false;
      bool flag15 = true;
      int num8 = 70;
      int num9 = num8 / 2;
      float num10 = 11f;
      Vector2 vector2_1 = Vector2.Zero;
      int Damage = 1;
      int Type = 81;
      float num11 = 700f;
      float num12 = 0.0f;
      float num13 = 0.1f;
      Vector2? nullable = new Vector2?();
      float max1 = 0.5f;
      int num14 = 1;
      float num15 = 1f;
      bool flag16 = false;
      float num16 = 30f;
      float num17 = 0.0f;
      bool flag17 = false;
      bool flag18 = true;
      bool flag19 = false;
      int num18 = 30;
      bool flag20 = false;
      bool flag21 = false;
      bool flag22 = false;
      bool flag23 = false;
      LegacySoundStyle style = (LegacySoundStyle) null;
      int maxValue1 = 0;
      bool flag24 = false;
      float max2 = 1f;
      float num19 = 0.07f;
      float num20 = 0.8f;
      float num21 = (float) (this.width / 2 + 6);
      bool flag25 = this.directionY < 0;
      bool flag26 = false;
      int num22 = 1;
      bool flag27 = false;
      float num23 = 5f;
      float num24 = 3f;
      float num25 = 8f;
      float amount1 = 0.05f;
      float amount2 = 0.04f;
      float amount3 = 0.1f;
      bool flag28 = false;
      float num26 = 0.025f;
      NPCAimedTarget targetData = this.GetTargetData();
      NPCUtils.NPCTargetingMethod npcTargetingMethod = new NPCUtils.NPCTargetingMethod(NPCUtils.TargetClosestCommon);
      if (NPCID.Sets.BelongsToInvasionOldOnesArmy[this.type])
        npcTargetingMethod = new NPCUtils.NPCTargetingMethod(NPCUtils.TargetClosestOldOnesInvasion);
      if (targetData.Type == NPCTargetType.NPC && Main.npc[this.TranslatedTargetIndex].type == 548 && Main.npc[this.TranslatedTargetIndex].dontTakeDamageFromHostiles)
      {
        npcTargetingMethod(this, true, new Vector2?());
        targetData = this.GetTargetData();
      }
      if (NPCID.Sets.FighterUsesDD2PortalAppearEffect[this.type])
      {
        if (!targetData.Invalid)
          flag2 = !Collision.CanHit(this.Center, 0, 0, targetData.Center, 0, 0) && (this.direction == Math.Sign(targetData.Center.X - this.Center.X) || this.noGravity && (double) this.Distance(targetData.Center) > 50.0 && (double) this.Center.Y > (double) targetData.Center.Y);
        flag2 &= (double) this.ai[0] <= 0.0;
      }
      if (flag2)
      {
        if ((double) this.velocity.Y == 0.0 || (double) Math.Abs(targetData.Center.Y - this.Center.Y) > 800.0)
        {
          this.noGravity = true;
          this.noTileCollide = true;
        }
      }
      else
      {
        this.noGravity = false;
        this.noTileCollide = false;
      }
      bool flag29 = NPCID.Sets.FighterUsesDD2PortalAppearEffect[this.type];
      bool flag30 = true;
      Vector2 size;
      switch (this.type)
      {
        case 552:
        case 553:
        case 554:
          style = SoundID.DD2_GoblinScream;
          maxValue1 = 1000;
          flag5 = true;
          flag21 = DD2Event.EnemiesShouldChasePlayers;
          if (this.type == 553)
          {
            num19 += 0.01f;
            max2 += 0.2f;
          }
          if (this.type == 554)
          {
            num19 += 0.02f;
            max2 += 0.4f;
          }
          if ((double) this.localAI[3] < 60.0)
          {
            num19 = (float) (0.0099999997764825821 + (double) this.localAI[3] / 60.0 * 0.05000000074505806);
            break;
          }
          break;
        case 555:
        case 556:
        case 557:
          maxValue1 = 800;
          style = SoundID.DD2_GoblinBomberScream;
          int num27 = (double) this.localAI[3] >= 60.0 ? 1 : 0;
          flag21 = DD2Event.EnemiesShouldChasePlayers;
          flag24 = true;
          flag12 = true;
          flag15 = (double) this.ai[1] > 18.0;
          num8 = 42;
          num9 = 18;
          Type = 681;
          Damage = 10;
          vector2_1.Y -= 14f;
          num13 = 0.4f;
          max1 = 0.5f;
          num11 = 280f;
          num10 = 6f;
          if (num27 == 0)
          {
            num11 = 1f;
            num19 = (float) (0.0099999997764825821 + (double) this.localAI[3] / 60.0 * 0.05000000074505806);
          }
          if (this.type == 555)
          {
            max2 = 0.88f;
            max1 = 0.6f;
            Damage = this.GetAttackDamage_ForProjectiles(20f, 15f);
          }
          if (this.type == 556)
          {
            max2 = 0.88f;
            max1 = 0.6f;
            Damage = this.GetAttackDamage_ForProjectiles(30f, 25f);
          }
          if (this.type == 557)
          {
            max2 = 1.12f;
            max1 = 0.4f;
            Damage = this.GetAttackDamage_ForProjectiles(40f, 35f);
          }
          if ((double) this.ai[1] == (double) num9)
          {
            SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_GoblinBomberThrow, this.Center);
            break;
          }
          break;
        case 561:
        case 562:
        case 563:
          int num28 = (double) this.localAI[3] >= 60.0 ? 1 : 0;
          if ((double) this.ai[1] == 82.0)
          {
            SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_JavelinThrowersAttack, this.Center);
            maxValue1 = 7;
            style = SoundID.DD2_JavelinThrowersTaunt;
          }
          flag21 = DD2Event.EnemiesShouldChasePlayers;
          flag24 = true;
          flag12 = true;
          flag15 = (double) this.ai[1] > 82.0;
          num8 = 90;
          num9 = 82;
          Type = 662;
          if (this.type == 563)
            Type = 685;
          vector2_1.Y -= 14f;
          num13 = 0.0f;
          max1 = 0.5f;
          num11 = 600f;
          num10 = 13f;
          if (num28 == 0)
          {
            num11 = 1f;
            num19 = (float) (0.0099999997764825821 + (double) this.localAI[3] / 60.0 * 0.05000000074505806);
          }
          if (this.type == 561)
          {
            max2 = 0.88f;
            max1 = 0.6f;
            Damage = this.GetAttackDamage_ForProjectiles(15f, 10f);
            num10 = 11.5f;
            num11 -= 100f;
          }
          if (this.type == 562)
          {
            max2 = 0.94f;
            max1 = 0.5f;
            Damage = this.GetAttackDamage_ForProjectiles(30f, 20f);
            num10 = 12.2f;
            num11 -= 50f;
          }
          if (this.type == 563)
          {
            max2 = 1f;
            max1 = 0.4f;
            Damage = this.GetAttackDamage_ForProjectiles(45f, 30f);
            break;
          }
          break;
        case 566:
        case 567:
          DelegateMethods.v3_1 = new Vector3(0.3f, 0.05f, 0.45f) * 1.5f;
          Utils.PlotTileLine(this.Top, this.Bottom, (float) this.width, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
          flag21 = DD2Event.EnemiesShouldChasePlayers;
          int num29 = (double) this.localAI[3] >= 120.0 ? 1 : 0;
          if (num29 == 0)
            num19 = 0.0f;
          if (num29 != 0)
          {
            this.dontTakeDamage = false;
            break;
          }
          this.dontTakeDamage = true;
          this.velocity.X = 0.0f;
          flag24 = true;
          flag20 = true;
          this.ai[3] = 0.0f;
          if ((double) this.localAI[3] == 0.0)
            this.alpha = (int) byte.MaxValue;
          ++this.localAI[3];
          float num30 = this.localAI[3];
          if ((double) num30 >= 110.0)
          {
            this.alpha -= 26;
            if (this.alpha < 0)
              this.alpha = 0;
          }
          if ((double) num30 >= 100.0)
          {
            int num31 = (int) this.localAI[3] / 20;
            size = this.Size;
            float num32 = size.Length() / 2f / 20f;
            int maxValue2 = 5;
            for (int index = 0; index < num31 * 2; ++index)
            {
              if (Main.rand.Next(maxValue2) == 0)
              {
                Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 236, this.velocity.X * 1f);
                dust.scale = 1f;
                dust.fadeIn = 0.3f;
                dust.velocity = new Vector2(Main.rand.NextFloatDirection() * 1f, -dust.velocity.Length()) * 1.25f * num32;
              }
            }
          }
          else
          {
            int num33 = (int) this.localAI[3] / 10;
            size = this.Size;
            float num34 = size.Length() / 2f / 20f;
            int maxValue3 = 5;
            for (int index = 0; (double) index < (double) num33 * 1.2999999523162842; ++index)
            {
              if (Main.rand.Next(maxValue3) == 0)
              {
                Dust dust = Dust.NewDustDirect(this.position + new Vector2((float) (-this.width / 2), 8f), this.width + this.width, this.height, 27, this.velocity.X * 1f, Alpha: 100);
                dust.scale = 1.1f;
                dust.fadeIn = 0.1f;
                dust.velocity = new Vector2(Main.rand.NextFloatDirection() * 0.1f, -dust.velocity.Length()) * 1.05f * num34 * Main.rand.NextFloat();
                dust.velocity.Y *= Utils.GetLerpValue((float) this.width * 0.75f, 0.0f, Math.Abs(dust.position.X - this.Center.X), true);
              }
            }
          }
          if ((double) num30 > 100.0 && (int) num30 % 4 == 0)
          {
            Gore.NewGoreDirect(this.Left, new Vector2(0.0f, -3f), Utils.SelectRandom<int>(Main.rand, 971, 972), 0.85f).velocity.X *= 0.8f;
            break;
          }
          break;
        case 568:
        case 569:
          num5 = 110;
          num19 = 0.16f;
          num20 = 0.7f;
          max2 = 1.4f;
          flag5 = true;
          num4 = 600f;
          flag21 = DD2Event.EnemiesShouldChasePlayers;
          if ((double) this.localAI[3] < 60.0)
            num19 = (float) (0.0099999997764825821 + (double) this.localAI[3] / 60.0 * 0.05000000074505806);
          SlotId slotId1;
          if ((double) this.ai[0] == 0.0)
          {
            float[] localAi = this.localAI;
            slotId1 = SlotId.Invalid;
            double num35 = (double) ((SlotId) ref slotId1).ToFloat();
            localAi[1] = (float) num35;
          }
          if ((double) this.ai[0] == 1.0)
          {
            this.HitSound = SoundID.DD2_WitherBeastCrystalImpact;
            ++this.ai[0];
            if (Main.rand.Next(10) == 0)
            {
              Dust dust = Dust.NewDustDirect(this.TopLeft, this.width, this.height, 271, SpeedY: -3f, newColor: Color.Transparent, Scale: 0.6f);
              dust.velocity.X /= 2f;
              dust.noGravity = true;
              dust.fadeIn = 1.5f;
              dust.position.Y += 4f;
            }
            ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
            if (activeSound == null)
            {
              float[] localAi = this.localAI;
              slotId1 = SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_WitherBeastAuraPulse, this.Center);
              double num36 = (double) ((SlotId) ref slotId1).ToFloat();
              localAi[1] = (float) num36;
            }
            else
              activeSound.Position = this.Center;
            ++this.localAI[0];
            if ((double) this.localAI[0] > 60.0 && Main.rand.Next(10) == 0)
            {
              Vector2 vector2_2 = this.Center + (Main.rand.NextFloat() * 6.28318548f).ToRotationVector2() * 400f * (float) (0.30000001192092896 + 0.699999988079071 * (double) Main.rand.NextFloat());
              Point tileCoordinates = vector2_2.ToTileCoordinates();
              if (!WorldGen.SolidTile(tileCoordinates.X, tileCoordinates.Y))
              {
                Dust dust = Dust.NewDustPerfect(vector2_2, 27, new Vector2?(new Vector2(0.0f, -3f)), newColor: new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) sbyte.MaxValue), Scale: 1.5f);
                dust.velocity = this.DirectionTo(dust.position) * dust.velocity.Length();
                dust.fadeIn = 1.5f;
              }
            }
            if (Main.netMode != 2)
            {
              Player player = Main.player[Main.myPlayer];
              if (!player.dead && player.active && (double) (player.Center - this.Center).Length() < 400.0 && !player.creativeGodMode)
                player.AddBuff(195, 3, false);
            }
            if ((double) this.ai[1] > 0.0)
              --this.ai[1];
            if ((double) this.ai[1] <= 0.0)
            {
              this.ai[1] = 60f;
              if (Main.netMode != 1)
              {
                int healAmount = this.lifeMax / 20;
                if (healAmount > this.lifeMax - this.life)
                  healAmount = this.lifeMax - this.life;
                if (healAmount > 0)
                {
                  this.life += healAmount;
                  this.HealEffect(healAmount);
                  this.netUpdate = true;
                  break;
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        case 570:
        case 571:
          flag21 = DD2Event.EnemiesShouldChasePlayers;
          flag24 = true;
          flag12 = true;
          flag15 = (double) this.ai[1] > 40.0;
          num8 = 60;
          num9 = 40;
          if (this.type == 571 && (double) this.ai[1] > 10.0 && (double) this.ai[1] <= 40.0 && (int) this.ai[1] % 6 == 0)
            num9 = (int) this.ai[1] - 1;
          if (this.type == 570 && (double) this.ai[1] > 10.0 && (double) this.ai[1] <= 40.0 && (int) this.ai[1] % 9 == 0)
            num9 = (int) this.ai[1] - 1;
          Type = 671;
          vector2_1.X += (float) (22 * this.direction);
          num13 = 0.15f;
          max1 = 1.5f;
          num11 = 600f;
          num10 = 13f;
          num14 = 1;
          num15 = 0.0f;
          if (this.type == 570)
            max1 = 2.5f;
          Damage = this.GetAttackDamage_ForProjectiles(35f, 25f);
          if (this.type == 571)
            Damage = this.GetAttackDamage_ForProjectiles(60f, 45f);
          max2 = 0.77f;
          if ((double) this.ai[0] > 0.0)
          {
            if ((double) this.ai[1] == 40.0)
              SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_DrakinShot, this.Center);
            else if ((double) this.ai[1] == 60.0)
              SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_DrakinBreathIn, this.Center);
          }
          if ((double) this.localAI[3] < 60.0)
          {
            num11 = 1f;
            num19 = (float) (0.0099999997764825821 + (double) this.localAI[3] / 60.0 * 0.05000000074505806);
            break;
          }
          break;
        case 572:
        case 573:
          SlotId slotId2;
          if ((double) this.localAI[3] == 0.0)
          {
            float[] localAi1 = this.localAI;
            SlotId invalid = SlotId.Invalid;
            double num37 = (double) ((SlotId) ref invalid).ToFloat();
            localAi1[0] = (float) num37;
            float[] localAi2 = this.localAI;
            slotId2 = SlotId.Invalid;
            double num38 = (double) ((SlotId) ref slotId2).ToFloat();
            localAi2[1] = (float) num38;
          }
          flag21 = DD2Event.EnemiesShouldChasePlayers;
          if ((double) this.ai[1] == 2.0)
          {
            SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[0]))?.Stop();
            SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[1]))?.Stop();
            this.position = this.Center;
            this.width = this.height = 192;
            this.Center = this.position;
            this.velocity = Vector2.Zero;
            this.damage = this.GetAttackDamage_ScaledByStrength(80f);
            this.alpha = (int) byte.MaxValue;
            for (int index1 = 0; index1 < 4; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
              Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
            }
            for (int index3 = 0; index3 < 20; ++index3)
            {
              int index4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 200, Scale: 3.7f);
              Main.dust[index4].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
              Main.dust[index4].noGravity = true;
              Main.dust[index4].velocity *= 3f;
              int index5 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
              Main.dust[index5].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 4f;
              Main.dust[index5].velocity *= 2f;
              Main.dust[index5].noGravity = true;
              Main.dust[index5].fadeIn = 2.5f;
            }
            for (int index6 = 0; index6 < 6; ++index6)
            {
              int index7 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Scale: 2.7f);
              Main.dust[index7].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
              Main.dust[index7].noGravity = true;
              Main.dust[index7].velocity *= 3f;
            }
            for (int index8 = 0; index8 < 12; ++index8)
            {
              int index9 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Scale: 1.5f);
              Main.dust[index9].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
              Main.dust[index9].noGravity = true;
              Main.dust[index9].velocity *= 3f;
            }
            for (int index10 = 0; index10 < 5; ++index10)
            {
              int index11 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
              Main.gore[index11].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
              Main.gore[index11].velocity *= 0.3f;
              Main.gore[index11].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
              Main.gore[index11].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
            }
            ++this.ai[0];
            if ((double) this.ai[0] < 3.0)
              return;
            SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_KoboldExplosion, this.Center);
            this.life = 0;
            this.HitEffect();
            this.active = false;
            return;
          }
          if ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 0.0 && this.life > 0)
          {
            SlotId slotId3 = SlotId.FromFloat(this.localAI[0]);
            if (!((SlotId) ref slotId3).IsValid)
            {
              float[] localAi = this.localAI;
              slotId2 = SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_KoboldIgnite, this.Center);
              double num39 = (double) ((SlotId) ref slotId2).ToFloat();
              localAi[0] = (float) num39;
            }
            ++this.localAI[2];
            if ((double) this.localAI[2] == 30.0)
            {
              float[] localAi3 = this.localAI;
              slotId2 = SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_KoboldIgniteLoop, this.Center);
              double num40 = (double) ((SlotId) ref slotId2).ToFloat();
              localAi3[0] = (float) num40;
              float[] localAi4 = this.localAI;
              slotId2 = SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_KoboldScreamChargeLoop, this.Center);
              double num41 = (double) ((SlotId) ref slotId2).ToFloat();
              localAi4[1] = (float) num41;
            }
          }
          if ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 1.0)
          {
            this.ai[0] = 0.0f;
            this.ai[1] = 2f;
            this.netUpdate = true;
            return;
          }
          max2 = 0.88f;
          if ((double) this.ai[0] == 1.0)
            this.ai[1] = 1f;
          if ((double) this.ai[0] == 0.0 && (double) this.ai[1] == 1.0)
          {
            ActiveSound activeSound1 = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[0]));
            if (activeSound1 == null)
            {
              float[] localAi = this.localAI;
              slotId2 = SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_KoboldIgniteLoop, this.Center);
              double num42 = (double) ((SlotId) ref slotId2).ToFloat();
              localAi[0] = (float) num42;
            }
            else
              activeSound1.Position = this.Center;
            ActiveSound activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
            if (activeSound2 == null)
            {
              float[] localAi = this.localAI;
              slotId2 = SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_KoboldScreamChargeLoop, this.Center);
              double num43 = (double) ((SlotId) ref slotId2).ToFloat();
              localAi[1] = (float) num43;
            }
            else
              activeSound2.Position = this.Center;
          }
          if ((double) this.ai[1] > 0.0 && (double) this.ai[0] == 0.0)
          {
            flag5 = true;
            num5 = 40;
            num4 = 64f;
            num19 = 0.3f;
            max2 = 4f;
            Vector2 Position = this.Center + new Vector2((float) (this.spriteDirection * 12), 0.0f);
            if (Main.rand.Next(6) == 0)
            {
              Dust dust = Dust.NewDustDirect(Position, 1, 1, 213, (float) Main.rand.Next(-2, 3), (float) Main.rand.Next(-2, 3), 100, new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0));
              dust.noGravity = true;
              dust.fadeIn = (float) ((double) dust.scale + 1.0 + 0.0099999997764825821 * (double) Main.rand.Next(0, 51));
              dust.velocity *= 0.3f;
              dust.velocity.X += (float) -this.spriteDirection * 1.2f;
              dust.velocity.Y += -3.5f;
              dust.velocity.X += this.velocity.X;
            }
            if (Main.rand.Next(12) == 0)
            {
              Dust dust = Dust.NewDustPerfect(Position, 6, new Vector2?(this.velocity), 100);
              dust.noGravity = true;
              dust.velocity.Y -= 1f + Main.rand.NextFloat();
              dust.scale = 1.1f;
              dust.fadeIn = 0.5f;
              dust.customData = (object) this;
            }
          }
          else
          {
            flag5 = true;
            num5 = 40;
            num4 = 700f;
          }
          if ((double) this.localAI[3] < 60.0)
          {
            num19 = (float) (0.0099999997764825821 + (double) this.localAI[3] / 60.0 * 0.05000000074505806);
            break;
          }
          break;
        case 576:
        case 577:
          maxValue1 = 700;
          style = SoundID.DD2_OgreRoar;
          num21 -= 32f;
          flag5 = true;
          num6 = 60;
          num4 = 130f;
          num5 = 44;
          flag21 = DD2Event.EnemiesShouldChasePlayers;
          num7 = 0.7f;
          if ((double) this.localAI[0] > 0.0)
            --this.localAI[0];
          if ((double) this.ai[0] <= 0.0)
          {
            float num44 = this.ai[1];
            float num45 = this.Distance(targetData.Center);
            if ((double) this.localAI[3] >= 60.0)
            {
              if ((double) num45 <= (double) num4 + 300.0 && (double) this.localAI[0] <= 0.0)
                this.ai[1] = 2f;
              else if ((double) num45 > (double) num4 + 30.0)
                this.ai[1] = 1f;
              else if ((double) num45 <= (double) num4)
              {
                this.ai[1] = 0.0f;
                if ((double) num44 == 1.0)
                  this.ai[0] = 0.0f;
              }
            }
            if ((double) num44 != (double) this.ai[1])
              this.netUpdate = true;
          }
          else if ((double) this.ai[1] == 2.0)
            this.localAI[0] = 300f;
          switch ((int) this.ai[1])
          {
            case 0:
              num5 = 44;
              if ((double) this.ai[0] == 40.0)
              {
                SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_OgreAttack, this.Center);
                break;
              }
              break;
            case 1:
              flag3 = true;
              num5 = 90;
              num4 = 1000f;
              num6 = 240;
              Damage = this.GetAttackDamage_ForProjectiles(40f, 30f);
              flag15 = false;
              vector2_1 = new Vector2((float) (this.direction * 30), -70f);
              Type = 676;
              if ((double) this.ai[0] == 80.0)
              {
                SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_OgreSpit, this.Center);
                break;
              }
              break;
            case 2:
              num5 = 90;
              num4 = 250f;
              flag4 = true;
              Damage = this.GetAttackDamage_ForProjectiles(60f, 40f);
              num9 = 36;
              num1 = 56;
              num2 = 41;
              num3 = 13f;
              flag3 = true;
              Type = 683;
              flag15 = false;
              vector2_1 = new Vector2((float) (-this.direction * 20), (float) (this.height / 2 - 1));
              if ((double) this.ai[0] == 40.0)
              {
                SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_OgreGroundPound, this.Center);
                break;
              }
              break;
          }
          if ((double) this.ai[0] < (double) -num6)
          {
            this.ai[0] = (float) -num6;
            break;
          }
          break;
        case 620:
          flag27 = this.wet;
          flag30 = false;
          flag16 = true;
          num17 = 150f;
          num16 = 20f;
          bool dayTime = Main.dayTime;
          flag21 = !dayTime;
          flag24 = true;
          flag12 = true;
          flag15 = (double) this.ai[1] > 40.0;
          num8 = 60;
          num9 = 40;
          if ((double) this.ai[1] > 10.0 && (double) this.ai[1] <= 40.0 && (int) this.ai[1] % 5 == 0)
            num9 = (int) this.ai[1] - 1;
          Type = 811;
          vector2_1.X -= (float) (4 * this.direction);
          vector2_1.Y -= 20f;
          num13 = 0.15f;
          max1 = 2.5f;
          num11 = 600f;
          num10 = 13f;
          num14 = 1;
          num15 = 0.0f;
          Damage = this.GetAttackDamage_ForProjectiles(40f, 30f);
          max2 = 8f;
          num19 *= 3f;
          num20 = 0.9f;
          if ((double) this.ai[0] > 0.0)
          {
            if ((double) this.ai[1] == 40.0)
              SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_DrakinShot, this.Center);
            else if ((double) this.ai[1] == 60.0)
              SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_DrakinBreathIn, this.Center);
          }
          this.position = this.position + this.netOffset;
          if (this.alpha == (int) byte.MaxValue)
          {
            this.spriteDirection = this.direction;
            this.velocity.Y = -6f;
            this.netUpdate = true;
            for (int index = 0; index < 35; ++index)
            {
              Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 5);
              dust.velocity *= 1f;
              dust.scale = (float) (1.0 + (double) Main.rand.NextFloat() * 0.5);
              dust.fadeIn = (float) (1.5 + (double) Main.rand.NextFloat() * 0.5);
              dust.velocity += this.velocity * 0.5f;
            }
          }
          this.alpha -= 15;
          if (this.alpha < 0)
            this.alpha = 0;
          if (this.alpha != 0)
          {
            for (int index = 0; index < 2; ++index)
            {
              Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 5);
              dust.velocity *= 1f;
              dust.scale = (float) (1.0 + (double) Main.rand.NextFloat() * 0.5);
              dust.fadeIn = (float) (1.5 + (double) Main.rand.NextFloat() * 0.5);
              dust.velocity += this.velocity * 0.3f;
            }
          }
          if (Main.rand.Next(3) == 0)
            Dust.NewDustDirect(this.position, this.width, this.height, 5, Alpha: 50, Scale: 1.3f).velocity = Vector2.Zero;
          this.position = this.position - this.netOffset;
          if (dayTime)
          {
            flag12 = false;
            flag24 = false;
            flag23 = true;
            break;
          }
          if ((double) this.velocity.Y == 0.0 && (double) targetData.Hitbox.Bottom < (double) this.Top.Y && (double) Math.Abs(this.Center.X - (float) targetData.Hitbox.Center.X) < (double) (this.width * 3) && Collision.CanHit(this.Hitbox.TopLeft(), this.Hitbox.Width, this.Hitbox.Height, targetData.Hitbox.TopLeft(), targetData.Hitbox.Width, targetData.Hitbox.Height))
          {
            int num46 = (int) (((double) this.Bottom.Y - 16.0 - (double) targetData.Hitbox.Bottom) / 16.0);
            if (num46 < 27)
            {
              if (num46 < 11)
              {
                this.velocity.Y = -11f;
                break;
              }
              if (num46 < 15)
              {
                this.velocity.Y = -13f;
                break;
              }
              if (num46 < 19)
              {
                this.velocity.Y = -14f;
                break;
              }
              this.velocity.Y = -15.9f;
              break;
            }
            break;
          }
          break;
      }
      if (flag28)
      {
        bool flag31 = (double) this.velocity.Y == 0.0;
        for (int index = 0; index < 200; ++index)
        {
          if (index != this.whoAmI && Main.npc[index].active && Main.npc[index].type == this.type && (double) Math.Abs(this.position.X - Main.npc[index].position.X) + (double) Math.Abs(this.position.Y - Main.npc[index].position.Y) < (double) this.width)
          {
            if ((double) this.position.X < (double) Main.npc[index].position.X)
              this.velocity.X -= num26;
            else
              this.velocity.X += num26;
            if ((double) this.position.Y < (double) Main.npc[index].position.Y)
              this.velocity.Y -= num26;
            else
              this.velocity.Y += num26;
          }
        }
        if (flag31)
          this.velocity.Y = 0.0f;
      }
      if (flag29)
      {
        if ((double) this.localAI[3] == 0.0)
          this.alpha = (int) byte.MaxValue;
        if ((double) this.localAI[3] == 30.0)
          SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_EtherianPortalSpawnEnemy, this.Center);
        if ((double) this.localAI[3] < 60.0)
        {
          ++this.localAI[3];
          this.alpha -= 5;
          if (this.alpha < 0)
            this.alpha = 0;
          int num47 = (int) this.localAI[3] / 10;
          size = this.Size;
          float num48 = size.Length() / 2f / 20f;
          int maxValue4 = 5;
          if (this.type == 576 || this.type == 577)
            maxValue4 = 1;
          for (int index = 0; index < num47; ++index)
          {
            if (Main.rand.Next(maxValue4) == 0)
            {
              Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 27, this.velocity.X * 1f, Alpha: 100);
              dust.scale = 0.55f;
              dust.fadeIn = 0.7f;
              dust.velocity *= 0.1f * num48;
              dust.velocity += this.velocity;
            }
          }
        }
      }
      if (flag27)
      {
        this.noGravity = true;
        this.TargetClosest(false);
        if (this.collideX)
          this.velocity.X = -this.oldVelocity.X;
        if ((double) this.velocity.X != 0.0)
          this.direction = Math.Sign(this.direction);
        if (Collision.CanHit(this.position, this.width, this.height, targetData.Position, targetData.Width, targetData.Height))
        {
          Vector2 vector2_3 = targetData.Center - this.Center;
          vector2_3.Normalize();
          this.velocity = Vector2.Lerp(this.velocity, vector2_3 * num23, amount1);
        }
        else
        {
          float num49 = num23;
          if ((double) this.velocity.Y > 0.0)
            num49 = num24;
          if ((double) this.velocity.Y < 0.0)
            num49 = num25;
          Vector2 vector2_4 = new Vector2((float) this.direction, -1f);
          vector2_4.Normalize();
          Vector2 vector2_5 = vector2_4 * num49;
          if ((double) num49 < (double) num23)
            this.velocity = Vector2.Lerp(this.velocity, vector2_5, amount2);
          else
            this.velocity = Vector2.Lerp(this.velocity, vector2_5, amount3);
        }
      }
      else
      {
        bool flag32 = false;
        if (flag12 | flag5 && (double) this.ai[0] > 0.0)
          flag18 = false;
        if (flag12 && (double) this.ai[1] > 0.0)
          flag22 = true;
        if (flag5 && (double) this.ai[0] > 0.0)
          flag22 = true;
        if (flag5)
        {
          if ((double) this.ai[0] < 0.0)
          {
            ++this.ai[0];
            flag1 = false;
          }
          if ((double) this.ai[0] == 0.0 && (double) this.velocity.Y == 0.0 | flag6 && targetData.Type != NPCTargetType.None && (Collision.CanHit(this.position, this.width, this.height, targetData.Position, targetData.Width, targetData.Height) ? 1 : (Collision.CanHitLine(this.position, this.width, this.height, targetData.Position, targetData.Width, targetData.Height) ? 1 : 0)) != 0 && (double) (targetData.Center - this.Center).Length() < (double) num4)
          {
            this.ai[0] = (float) num5;
            this.netUpdate = true;
          }
          if ((double) this.ai[0] > 0.0)
          {
            this.spriteDirection = this.direction * num22;
            if (flag7)
            {
              this.velocity.X *= num7;
              flag24 = true;
              flag20 = true;
              this.ai[3] = 0.0f;
              this.netUpdate = true;
            }
            --this.ai[0];
            if ((double) this.ai[0] == 0.0)
            {
              this.ai[0] = (float) -num6;
              this.netUpdate = true;
            }
          }
        }
        if (flag3 && (double) this.ai[0] > 0.0)
        {
          if (flag15)
          {
            npcTargetingMethod(this, true, new Vector2?());
            targetData = this.GetTargetData();
          }
          if ((double) this.ai[0] == (double) num9)
          {
            Vector2 vector2_6 = this.Center + vector2_1;
            Vector2 v = targetData.Center - vector2_6;
            v.Y -= Math.Abs(v.X) * num13;
            Vector2 vector2_7 = v.SafeNormalize(-Vector2.UnitY) * num10;
            for (int index = 0; index < num14; ++index)
            {
              Vector2 vector2_8 = vector2_7;
              Vector2 vector2_9 = vector2_6;
              Vector2 velocity = !nullable.HasValue ? vector2_8 + Utils.RandomVector2(Main.rand, -max1, max1) : vector2_8 + nullable.Value;
              Vector2 position = vector2_9 + vector2_7 * num15;
              if (Main.netMode != 1)
                Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), position, velocity, Type, Damage, 0.0f, Main.myPlayer);
            }
          }
        }
        if (flag4 && (double) this.ai[0] > 0.0)
        {
          if ((double) this.velocity.Y != 0.0 && (double) this.ai[0] < (double) num2)
            this.ai[0] = (float) num2;
          if ((double) this.ai[0] == (double) num1)
            this.velocity.Y = -num3;
        }
        if (!flag17 & flag18)
        {
          if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X * (double) this.direction < 0.0)
            flag19 = true;
          if ((((double) this.position.X == (double) this.oldPosition.X ? 1 : ((double) this.ai[3] >= (double) num18 ? 1 : 0)) | (flag19 ? 1 : 0)) != 0)
            ++this.ai[3];
          else if ((double) Math.Abs(this.velocity.X) > 0.89999997615814209 && (double) this.ai[3] > 0.0)
            --this.ai[3];
          if ((double) this.ai[3] > (double) (num18 * 10))
            this.ai[3] = 0.0f;
          if (this.justHit && !flag30)
            this.ai[3] = 0.0f;
          if (targetData.Hitbox.Intersects(this.Hitbox))
            this.ai[3] = 0.0f;
          if ((double) this.ai[3] == (double) num18)
          {
            this.netUpdate = true;
            if (flag30)
            {
              this.noGravity = true;
              this.noTileCollide = true;
              this.position.X += (float) (this.direction * this.width * 2);
              int num50 = 20;
              size = this.Size;
              float num51 = size.Length() / 2f / 20f;
              int maxValue5 = 5;
              if (this.type == 576 || this.type == 577)
                maxValue5 = 1;
              for (int index = 0; index < num50; ++index)
              {
                if (Main.rand.Next(maxValue5) == 0)
                {
                  Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 27, this.velocity.X * 1f, Alpha: 100);
                  dust.scale = 0.55f;
                  dust.fadeIn = 0.7f;
                  dust.velocity *= 3f * num51;
                  dust.noGravity = true;
                  dust.fadeIn = 1.5f;
                  dust.velocity *= 3f;
                }
              }
              return;
            }
          }
        }
        if (!flag20)
        {
          if ((double) this.ai[3] < (double) num18 & flag21)
          {
            if (maxValue1 > 0 && Main.rand.Next(maxValue1) == 0)
              SoundEngine.PlayTrackedSound((SoundStyle) style, this.Center);
            int num52 = this.HasValidTarget ? 1 : 0;
            npcTargetingMethod(this, true, new Vector2?());
            targetData = this.GetTargetData();
            int num53 = this.HasValidTarget ? 1 : 0;
            if (num52 != num53)
              this.netUpdate = true;
          }
          else if (!flag22)
          {
            if (flag23)
              this.EncourageDespawn(10);
            if ((double) this.velocity.X == 0.0)
            {
              if ((double) this.velocity.Y == 0.0)
              {
                ++this.ai[2];
                if ((double) this.ai[2] >= 2.0)
                {
                  this.direction *= -1;
                  this.spriteDirection = this.direction * num22;
                  this.ai[2] = 0.0f;
                  this.netUpdate = true;
                }
              }
            }
            else if ((double) this.ai[2] != 0.0)
            {
              this.ai[2] = 0.0f;
              this.netUpdate = true;
            }
            if (this.direction == 0)
              this.direction = 1;
          }
        }
        if (!flag24)
        {
          if ((double) this.velocity.X < -(double) max2 || (double) this.velocity.X > (double) max2)
          {
            if ((double) this.velocity.Y == 0.0)
              this.velocity = this.velocity * num20;
          }
          else if ((double) this.velocity.X < (double) max2 && this.direction == 1 || (double) this.velocity.X > -(double) max2 && this.direction == -1)
            this.velocity.X = MathHelper.Clamp(this.velocity.X + num19 * (float) this.direction, -max2, max2);
        }
        if (flag12)
        {
          if (this.confused)
          {
            this.ai[0] = 0.0f;
          }
          else
          {
            if ((double) this.ai[1] > 0.0)
              --this.ai[1];
            if (this.justHit)
            {
              this.ai[1] = num16;
              this.ai[0] = 0.0f;
            }
            if ((double) this.ai[0] > 0.0)
            {
              if (flag15)
              {
                npcTargetingMethod(this, true, new Vector2?());
                targetData = this.GetTargetData();
              }
              if ((double) this.ai[1] == (double) num9)
              {
                Vector2 vector2_10 = this.Center + vector2_1;
                Vector2 v = targetData.Center - vector2_10;
                v.Y -= Math.Abs(v.X) * num13;
                Vector2 vector2_11 = v.SafeNormalize(-Vector2.UnitY) * num10;
                for (int index = 0; index < num14; ++index)
                {
                  Vector2 vector2_12 = vector2_10;
                  Vector2 vector2_13 = vector2_11;
                  Vector2 velocity = !nullable.HasValue ? vector2_13 + Utils.RandomVector2(Main.rand, -max1, max1) : vector2_13 + nullable.Value;
                  Vector2 position = vector2_12 + velocity * num15;
                  if (Main.netMode != 1)
                    Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), position, velocity, Type, Damage, 0.0f, Main.myPlayer);
                }
                this.ai[0] = (double) Math.Abs(vector2_11.Y) <= (double) Math.Abs(vector2_11.X) * 2.0 ? ((double) Math.Abs(vector2_11.X) <= (double) Math.Abs(vector2_11.Y) * 2.0 ? ((double) vector2_11.Y > 0.0 ? 2f : 4f) : 3f) : ((double) vector2_11.Y > 0.0 ? 1f : 5f);
                if (flag16)
                  this.direction = (double) vector2_11.X > 0.0 ? 1 : -1;
              }
              bool flag33 = true;
              if ((double) this.velocity.Y != 0.0 && !flag14 || (double) this.ai[1] <= 0.0)
              {
                bool flag34 = false;
                if ((double) num17 != 0.0 && (double) this.ai[1] <= 0.0)
                  flag34 = true;
                this.ai[0] = 0.0f;
                this.ai[1] = flag34 ? num17 : 0.0f;
              }
              else if (!flag13 || !flag33 && (!flag14 || (double) this.velocity.Y == 0.0))
              {
                this.velocity.X *= 0.9f;
                this.spriteDirection = this.direction * num22;
              }
            }
            if ((double) this.ai[0] <= 0.0 | flag13 && (double) this.velocity.Y == 0.0 | flag14 && (double) this.ai[1] <= 0.0 && targetData.Type != NPCTargetType.None && Collision.CanHit(this.position, this.width, this.height, targetData.Position, targetData.Width, targetData.Height))
            {
              Vector2 vector2_14 = targetData.Center - this.Center;
              if ((double) vector2_14.Length() < (double) num11)
              {
                this.netUpdate = true;
                this.velocity.X *= 0.5f;
                this.ai[0] = 3f;
                this.ai[1] = (float) num8;
                this.ai[0] = (double) Math.Abs(vector2_14.Y) <= (double) Math.Abs(vector2_14.X) * 2.0 ? ((double) Math.Abs(vector2_14.X) <= (double) Math.Abs(vector2_14.Y) * 2.0 ? ((double) vector2_14.Y > 0.0 ? 2f : 4f) : 3f) : ((double) vector2_14.Y > 0.0 ? 1f : 5f);
                if (flag16)
                  this.direction = (double) vector2_14.X > 0.0 ? 1 : -1;
              }
            }
            if ((double) this.ai[0] <= 0.0 || flag13)
            {
              bool flag35 = (double) this.Distance(targetData.Center) < (double) num12;
              if (flag35 && Collision.CanHitLine(this.position, this.width, this.height, targetData.Position, targetData.Width, targetData.Height))
                this.ai[3] = 0.0f;
              if ((((double) this.velocity.X < -(double) max2 ? 1 : ((double) this.velocity.X > (double) max2 ? 1 : 0)) | (flag35 ? 1 : 0)) != 0)
              {
                if ((double) this.velocity.Y == 0.0)
                  this.velocity.X *= num20;
              }
              else if ((double) this.velocity.X < (double) max2 && this.direction == 1 || (double) this.velocity.X > -(double) max2 && this.direction == -1)
                this.velocity.X = MathHelper.Clamp(this.velocity.X + num19 * (float) this.direction, -max2, max2);
            }
          }
        }
        if ((double) this.velocity.Y == 0.0)
        {
          int index12 = (int) ((double) this.Bottom.Y + 7.0) / 16;
          int num54 = (int) this.Left.X / 16;
          int num55 = (int) this.Right.X / 16;
          int index13;
          for (int index14 = num54; index14 <= num55; index14 = index13 + 1)
          {
            index13 = Utils.Clamp<int>(index14, 0, Main.maxTilesX);
            index12 = Utils.Clamp<int>(index12, 0, Main.maxTilesY);
            Tile tile = Main.tile[index13, index12];
            if (tile == null)
              return;
            if (tile.nactive() && Main.tileSolid[(int) tile.type])
            {
              flag32 = true;
              break;
            }
          }
        }
        Point tileCoordinates = this.Center.ToTileCoordinates();
        if (WorldGen.InWorld(tileCoordinates.X, tileCoordinates.Y, 5) && !this.noGravity)
        {
          Vector2 cPosition;
          int cWidth;
          int cHeight;
          this.GetTileCollisionParameters(out cPosition, out cWidth, out cHeight);
          Vector2 vector2_15 = this.position - cPosition;
          Collision.StepUp(ref cPosition, ref this.velocity, cWidth, cHeight, ref this.stepSpeed, ref this.gfxOffY);
          this.position = cPosition + vector2_15;
        }
        if (flag32)
        {
          int index = (int) ((double) this.Center.X + (double) num21 * (double) this.direction) / 16;
          int j = ((int) this.Bottom.Y - 15) / 16;
          bool flag36 = (double) this.position.Y + (double) this.height - (double) (j * 16) > 20.0;
          Tile tileSafely1 = Framing.GetTileSafely(index + this.direction, j + 1);
          Tile tileSafely2 = Framing.GetTileSafely(index, j + 1);
          Tile tileSafely3 = Framing.GetTileSafely(index, j);
          Tile tileSafely4 = Framing.GetTileSafely(index, j - 1);
          Tile tileSafely5 = Framing.GetTileSafely(index, j - 2);
          Tile tileSafely6 = Framing.GetTileSafely(index, j - 3);
          if (flag8 && tileSafely4.nactive() && (tileSafely4.type == (ushort) 10 || tileSafely4.type == (ushort) 388))
          {
            ++this.ai[0];
            this.ai[3] = 0.0f;
            if ((double) this.ai[0] >= 60.0)
            {
              if (flag9)
                this.ai[1] = 0.0f;
              int num56 = 5;
              if (Main.tile[index, j - 1].type == (ushort) 388)
                num56 = 2;
              this.velocity.X = 0.5f * (float) -this.direction;
              this.ai[1] += (float) num56;
              bool flag37 = false;
              if ((double) this.ai[1] >= 10.0)
              {
                flag37 = true;
                this.ai[1] = 10f;
              }
              if (flag10)
                flag37 = true;
              WorldGen.KillTile(index, j - 1, true);
              if (Main.netMode != 1 & flag37)
              {
                if (flag11)
                {
                  WorldGen.KillTile(index, j - 1);
                  if (Main.netMode == 2)
                    NetMessage.SendData(17, number2: ((float) index), number3: ((float) (j - 1)));
                }
                else
                {
                  if (tileSafely4.type == (ushort) 10)
                  {
                    bool flag38 = WorldGen.OpenDoor(index, j - 1, this.direction);
                    if (!flag38)
                    {
                      this.ai[3] = (float) num18;
                      this.netUpdate = true;
                    }
                    if (Main.netMode == 2 & flag38)
                      NetMessage.SendData(19, number2: ((float) index), number3: ((float) (j - 1)), number4: ((float) this.direction));
                  }
                  if (tileSafely4.type == (ushort) 388)
                  {
                    bool flag39 = WorldGen.ShiftTallGate(index, j - 1, false);
                    if (!flag39)
                    {
                      this.ai[3] = (float) num18;
                      this.netUpdate = true;
                    }
                    if (Main.netMode == 2 & flag39)
                      NetMessage.SendData(19, number: 4, number2: ((float) index), number3: ((float) (j - 1)), number4: ((float) this.direction));
                  }
                }
              }
            }
          }
          else
          {
            if ((double) this.velocity.X * (double) (this.spriteDirection * num22) > 0.0)
            {
              if (this.height >= 32 && tileSafely5.nactive() && Main.tileSolid[(int) tileSafely5.type])
              {
                this.netUpdate = true;
                this.velocity.Y = -7f;
                if (tileSafely6.nactive() && Main.tileSolid[(int) tileSafely6.type])
                  this.velocity.Y = -8f;
              }
              else if (tileSafely4.nactive() && Main.tileSolid[(int) tileSafely4.type])
              {
                this.velocity.Y = -6f;
                this.netUpdate = true;
              }
              else if (flag36 && tileSafely3.nactive() && !tileSafely3.topSlope() && Main.tileSolid[(int) tileSafely3.type])
              {
                this.velocity.Y = -5f;
                this.netUpdate = true;
              }
              else if (flag25 && (!tileSafely2.nactive() || !Main.tileSolid[(int) tileSafely2.type]) && (!tileSafely1.nactive() || !Main.tileSolid[(int) tileSafely1.type]))
              {
                this.velocity.X *= 1.5f;
                this.velocity.Y = -8f;
                this.netUpdate = true;
              }
              else if (flag8)
              {
                this.ai[0] = 0.0f;
                this.ai[1] = 0.0f;
              }
              if ((double) this.velocity.Y == 0.0 & flag1 && (double) this.ai[3] == 1.0)
              {
                this.velocity.Y = -5f;
                this.netUpdate = true;
              }
            }
            if (flag26 && (double) this.velocity.Y == 0.0 && (double) Math.Abs(targetData.Center.X - this.Center.X) < 100.0 && (double) Math.Abs(targetData.Center.Y - this.Center.Y) < 50.0 && (double) Math.Abs(this.velocity.X) >= 1.0 && (double) this.velocity.X * (double) this.direction > 0.0)
            {
              this.velocity.X = MathHelper.Clamp(this.velocity.X * 2f, -3f, 3f);
              this.velocity.Y = -4f;
              this.netAlways = true;
            }
          }
        }
        else if (flag8)
        {
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
        }
        if (!flag2 || !this.noTileCollide)
          return;
        this.wet = false;
        if (flag29)
        {
          if (this.alpha < 60)
            this.alpha += 20;
          this.localAI[3] = 40f;
        }
        int num57 = (double) this.velocity.Y == 0.0 ? 1 : 0;
        if ((double) Math.Abs(this.Center.X - targetData.Center.X) > 200.0)
        {
          this.spriteDirection = this.direction = (double) targetData.Center.X > (double) this.Center.X ? 1 : -1;
          this.velocity.X = MathHelper.Lerp(this.velocity.X, (float) this.direction, 0.05f);
        }
        int Width = 80;
        int height = this.height;
        Vector2 Position = new Vector2(this.Center.X - (float) (Width / 2), this.position.Y + (float) this.height - (float) height);
        bool flag40 = false;
        if ((double) this.position.Y + (double) this.height < (double) targetData.Position.Y + (double) targetData.Height - 16.0)
          flag40 = true;
        if (flag40)
          this.velocity.Y += 0.5f;
        else if (Collision.SolidCollision(Position, Width, height) || (double) targetData.Center.Y - (double) this.Center.Y < -100.0 || (double) targetData.Center.Y - (double) this.Center.Y < 10.0 && (double) Math.Abs(targetData.Center.X - this.Center.X) < 60.0)
        {
          if ((double) this.velocity.Y > 0.0)
            this.velocity.Y = 0.0f;
          if ((double) this.velocity.Y > -0.2)
            this.velocity.Y -= 0.025f;
          else
            this.velocity.Y -= 0.2f;
          if ((double) this.velocity.Y < -4.0)
            this.velocity.Y = -4f;
        }
        else
        {
          if ((double) this.velocity.Y < 0.0)
            this.velocity.Y = 0.0f;
          if ((double) this.velocity.Y < 0.1)
            this.velocity.Y += 0.025f;
          else
            this.velocity.Y += 0.5f;
        }
        if ((double) this.velocity.Y > 10.0)
          this.velocity.Y = 10f;
        if (num57 == 0)
          return;
        this.velocity.Y = 0.0f;
      }
    }

    private void AI_084_LunaticCultist()
    {
      if ((double) this.ai[0] != -1.0 && Main.rand.Next(1000) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(88, 92));
      bool expertMode = Main.expertMode;
      bool flag1 = this.life <= this.lifeMax / 2;
      int num1 = 120;
      int damageForProjectiles1 = this.GetAttackDamage_ForProjectiles(35f, 25f);
      if (expertMode)
        num1 = 90;
      if (Main.getGoodWorld)
        num1 -= 30;
      int num2 = 18;
      int num3 = 3;
      int damageForProjectiles2 = this.GetAttackDamage_ForProjectiles(30f, 20f);
      if (expertMode)
      {
        num2 = 12;
        num3 = 4;
      }
      if (Main.getGoodWorld)
      {
        num2 = 10;
        num3 = 5;
      }
      int num4 = 80;
      int damageForProjectiles3 = this.GetAttackDamage_ForProjectiles(45f, 30f);
      if (expertMode)
        num4 = 40;
      if (Main.getGoodWorld)
        num4 -= 20;
      int num5 = 20;
      int num6 = 2;
      if (expertMode)
      {
        num5 = 30;
        num6 = 2;
      }
      int num7 = 20;
      int num8 = 3;
      bool flag2 = this.type == 439;
      bool flag3 = false;
      bool flag4 = false;
      if (flag1)
        this.defense = (int) ((double) this.defDefense * 0.64999997615814209);
      if (!flag2)
      {
        if (((double) this.ai[3] < 0.0 || !Main.npc[(int) this.ai[3]].active ? 1 : (Main.npc[(int) this.ai[3]].type != 439 ? 1 : 0)) != 0)
        {
          this.life = 0;
          this.HitEffect();
          this.active = false;
          return;
        }
        this.ai[0] = Main.npc[(int) this.ai[3]].ai[0];
        this.ai[1] = Main.npc[(int) this.ai[3]].ai[1];
        if ((double) this.ai[0] == 5.0)
        {
          if (this.justHit)
          {
            this.life = 0;
            this.HitEffect();
            this.active = false;
            if (Main.netMode != 1)
              NetMessage.SendData(23, number: this.whoAmI);
            NPC npc = Main.npc[(int) this.ai[3]];
            npc.ai[0] = 6f;
            npc.ai[1] = 0.0f;
            npc.netUpdate = true;
          }
        }
        else
        {
          flag3 = true;
          flag4 = true;
        }
      }
      else if ((double) this.ai[0] == 5.0 && (double) this.ai[1] >= 120.0 && (double) this.ai[1] < 420.0 && this.justHit)
      {
        this.ai[0] = 0.0f;
        this.ai[1] = 0.0f;
        ++this.ai[3];
        this.velocity = Vector2.Zero;
        this.netUpdate = true;
        List<int> intList = new List<int>();
        for (int index = 0; index < 200; ++index)
        {
          if (Main.npc[index].active && Main.npc[index].type == 440 && (double) Main.npc[index].ai[3] == (double) this.whoAmI)
            intList.Add(index);
        }
        int num9 = 10;
        if (Main.expertMode)
          num9 = 3;
        foreach (int number in intList)
        {
          NPC npc = Main.npc[number];
          if ((double) npc.localAI[1] == (double) this.localAI[1] && num9 > 0)
          {
            --num9;
            npc.life = 0;
            npc.HitEffect();
            npc.active = false;
            if (Main.netMode != 1)
              NetMessage.SendData(23, number: number);
          }
          else if (num9 > 0)
          {
            --num9;
            npc.life = 0;
            npc.HitEffect();
            npc.active = false;
          }
        }
        Main.projectile[(int) this.ai[2]].ai[1] = -1f;
        Main.projectile[(int) this.ai[2]].netUpdate = true;
      }
      Vector2 center1 = this.Center;
      Player player = Main.player[this.target];
      float num10 = 5600f;
      if (this.target < 0 || this.target == (int) byte.MaxValue || player.dead || !player.active || (double) Vector2.Distance(player.Center, center1) > (double) num10)
      {
        this.TargetClosest(false);
        player = Main.player[this.target];
        this.netUpdate = true;
      }
      if (player.dead || !player.active || (double) Vector2.Distance(player.Center, center1) > (double) num10)
      {
        this.life = 0;
        this.HitEffect();
        this.active = false;
        if (Main.netMode != 1)
          NetMessage.SendData(28, number: this.whoAmI, number2: -1f);
        new List<int>() { this.whoAmI };
        for (int index = 0; index < 200; ++index)
        {
          if (Main.npc[index].active && Main.npc[index].type == 440 && (double) Main.npc[index].ai[3] == (double) this.whoAmI)
          {
            Main.npc[index].life = 0;
            Main.npc[index].HitEffect();
            Main.npc[index].active = false;
            if (Main.netMode != 1)
              NetMessage.SendData(28, number: this.whoAmI, number2: -1f);
          }
        }
      }
      float num11 = this.ai[3];
      if ((double) this.localAI[0] == 0.0)
      {
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, 89);
        this.localAI[0] = 1f;
        this.alpha = (int) byte.MaxValue;
        this.rotation = 0.0f;
        if (Main.netMode != 1)
        {
          this.ai[0] = -1f;
          this.netUpdate = true;
        }
      }
      if ((double) this.ai[0] == -1.0)
      {
        this.alpha -= 5;
        if (this.alpha < 0)
          this.alpha = 0;
        ++this.ai[1];
        if ((double) this.ai[1] >= 420.0)
        {
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
        else if ((double) this.ai[1] > 360.0)
        {
          this.velocity = this.velocity * 0.95f;
          if ((double) this.localAI[2] != 13.0)
            SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, 105);
          this.localAI[2] = 13f;
        }
        else if ((double) this.ai[1] > 300.0)
        {
          this.velocity = -Vector2.UnitY;
          this.localAI[2] = 10f;
        }
        else
          this.localAI[2] = (double) this.ai[1] <= 120.0 ? 0.0f : 1f;
        flag3 = true;
        flag4 = true;
      }
      if ((double) this.ai[0] == 0.0)
      {
        if ((double) this.ai[1] == 0.0)
          this.TargetClosest(false);
        this.localAI[2] = 10f;
        int num12 = Math.Sign(player.Center.X - center1.X);
        if (num12 != 0)
          this.direction = this.spriteDirection = num12;
        ++this.ai[1];
        if ((double) this.ai[1] >= 40.0 & flag2)
        {
          int num13 = 0;
          if (flag1)
          {
            switch ((int) this.ai[3])
            {
              case 0:
                num13 = 0;
                break;
              case 1:
                num13 = 1;
                break;
              case 2:
                num13 = 0;
                break;
              case 3:
                num13 = 5;
                break;
              case 4:
                num13 = 0;
                break;
              case 5:
                num13 = 3;
                break;
              case 6:
                num13 = 0;
                break;
              case 7:
                num13 = 5;
                break;
              case 8:
                num13 = 0;
                break;
              case 9:
                num13 = 2;
                break;
              case 10:
                num13 = 0;
                break;
              case 11:
                num13 = 3;
                break;
              case 12:
                num13 = 0;
                break;
              case 13:
                num13 = 4;
                this.ai[3] = -1f;
                break;
              default:
                this.ai[3] = -1f;
                break;
            }
          }
          else
          {
            switch ((int) this.ai[3])
            {
              case 0:
                num13 = 0;
                break;
              case 1:
                num13 = 1;
                break;
              case 2:
                num13 = 0;
                break;
              case 3:
                num13 = 2;
                break;
              case 4:
                num13 = 0;
                break;
              case 5:
                num13 = 3;
                break;
              case 6:
                num13 = 0;
                break;
              case 7:
                num13 = 1;
                break;
              case 8:
                num13 = 0;
                break;
              case 9:
                num13 = 2;
                break;
              case 10:
                num13 = 0;
                break;
              case 11:
                num13 = 4;
                this.ai[3] = -1f;
                break;
              default:
                this.ai[3] = -1f;
                break;
            }
          }
          int maxValue = 6;
          if (this.life < this.lifeMax / 3)
            maxValue = 4;
          if (this.life < this.lifeMax / 4)
            maxValue = 3;
          if (expertMode & flag1 && Main.rand.Next(maxValue) == 0 && num13 != 0 && num13 != 4 && num13 != 5 && NPC.CountNPCS(523) < 10)
            num13 = 6;
          if (num13 == 0)
          {
            float num14 = (float) Math.Ceiling((double) (player.Center + new Vector2(0.0f, -100f) - center1).Length() / 50.0);
            if ((double) num14 == 0.0)
              num14 = 1f;
            List<int> intList = new List<int>();
            int num15 = 0;
            intList.Add(this.whoAmI);
            for (int index = 0; index < 200; ++index)
            {
              if (Main.npc[index].active && Main.npc[index].type == 440 && (double) Main.npc[index].ai[3] == (double) this.whoAmI)
                intList.Add(index);
            }
            bool flag5 = intList.Count % 2 == 0;
            foreach (int index in intList)
            {
              NPC npc1 = Main.npc[index];
              Vector2 center2 = npc1.Center;
              float radians = (float) ((double) ((num15 + flag5.ToInt() + 1) / 2) * 6.2831854820251465 * 0.40000000596046448) / (float) intList.Count;
              if (num15 % 2 == 1)
                radians *= -1f;
              if (intList.Count == 1)
                radians = 0.0f;
              Vector2 vector2_1 = new Vector2(0.0f, -1f).RotatedBy((double) radians) * new Vector2(300f, 200f);
              Vector2 vector2_2 = player.Center + vector2_1 - center2;
              npc1.ai[0] = 1f;
              npc1.ai[1] = num14 * 2f;
              npc1.velocity = vector2_2 / num14;
              if (this.whoAmI >= npc1.whoAmI)
              {
                NPC npc2 = npc1;
                npc2.position = npc2.position - npc1.velocity;
              }
              npc1.netUpdate = true;
              ++num15;
            }
          }
          if (num13 == 1)
          {
            this.ai[0] = 3f;
            this.ai[1] = 0.0f;
          }
          else if (num13 == 2)
          {
            this.ai[0] = 2f;
            this.ai[1] = 0.0f;
          }
          else if (num13 == 3)
          {
            this.ai[0] = 4f;
            this.ai[1] = 0.0f;
          }
          else if (num13 == 4)
          {
            this.ai[0] = 5f;
            this.ai[1] = 0.0f;
          }
          if (num13 == 5)
          {
            this.ai[0] = 7f;
            this.ai[1] = 0.0f;
          }
          if (num13 == 6)
          {
            this.ai[0] = 8f;
            this.ai[1] = 0.0f;
          }
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 1.0)
      {
        flag3 = true;
        this.localAI[2] = 10f;
        if ((double) (int) this.ai[1] % 2.0 != 0.0 && (double) this.ai[1] != 1.0)
          this.position = this.position - this.velocity;
        --this.ai[1];
        if ((double) this.ai[1] <= 0.0)
        {
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          ++this.ai[3];
          this.velocity = Vector2.Zero;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 2.0)
      {
        this.localAI[2] = 11f;
        Vector2 vec1 = Vector2.Normalize(player.Center - center1);
        if (vec1.HasNaNs())
          vec1 = new Vector2((float) this.direction, 0.0f);
        if ((double) this.ai[1] >= 4.0 & flag2 && (int) ((double) this.ai[1] - 4.0) % num1 == 0)
        {
          if (Main.netMode != 1)
          {
            List<int> intList = new List<int>();
            for (int index = 0; index < 200; ++index)
            {
              if (Main.npc[index].active && Main.npc[index].type == 440 && (double) Main.npc[index].ai[3] == (double) this.whoAmI)
                intList.Add(index);
            }
            foreach (int index1 in intList)
            {
              NPC npc = Main.npc[index1];
              Vector2 center3 = npc.Center;
              int num16 = Math.Sign(player.Center.X - center3.X);
              if (num16 != 0)
                npc.direction = npc.spriteDirection = num16;
              if (Main.netMode != 1)
              {
                Vector2 vec2 = Vector2.Normalize(player.Center - center3 + player.velocity * 20f);
                if (vec2.HasNaNs())
                  vec2 = new Vector2((float) this.direction, 0.0f);
                Vector2 vector2_3 = center3 + new Vector2((float) (this.direction * 30), 12f);
                for (int index2 = 0; index2 < 1; ++index2)
                {
                  Vector2 vector2_4 = (vec2 * (float) (6.0 + Main.rand.NextDouble() * 4.0)).RotatedByRandom(0.52359879016876221);
                  Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_3.X, vector2_3.Y, vector2_4.X, vector2_4.Y, 468, 18, 0.0f, Main.myPlayer);
                }
              }
            }
          }
          if (Main.netMode != 1)
          {
            Vector2 vec3 = Vector2.Normalize(player.Center - center1 + player.velocity * 20f);
            if (vec3.HasNaNs())
              vec3 = new Vector2((float) this.direction, 0.0f);
            Vector2 vector2_5 = this.Center + new Vector2((float) (this.direction * 30), 12f);
            for (int index = 0; index < 1; ++index)
            {
              Vector2 vector2_6 = vec3 * 4f;
              Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_5.X, vector2_5.Y, vector2_6.X, vector2_6.Y, 464, damageForProjectiles1, 0.0f, Main.myPlayer, ai1: 1f);
            }
          }
        }
        ++this.ai[1];
        if ((double) this.ai[1] >= (double) (4 + num1))
        {
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          ++this.ai[3];
          this.velocity = Vector2.Zero;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 3.0)
      {
        this.localAI[2] = 11f;
        Vector2 vec4 = Vector2.Normalize(player.Center - center1);
        if (vec4.HasNaNs())
          vec4 = new Vector2((float) this.direction, 0.0f);
        if ((double) this.ai[1] >= 4.0 & flag2 && (int) ((double) this.ai[1] - 4.0) % num2 == 0)
        {
          if ((int) ((double) this.ai[1] - 4.0) / num2 == 2)
          {
            List<int> intList = new List<int>();
            for (int index = 0; index < 200; ++index)
            {
              if (Main.npc[index].active && Main.npc[index].type == 440 && (double) Main.npc[index].ai[3] == (double) this.whoAmI)
                intList.Add(index);
            }
            if (Main.netMode != 1)
            {
              foreach (int index3 in intList)
              {
                NPC npc = Main.npc[index3];
                Vector2 center4 = npc.Center;
                int num17 = Math.Sign(player.Center.X - center4.X);
                if (num17 != 0)
                  npc.direction = npc.spriteDirection = num17;
                if (Main.netMode != 1)
                {
                  Vector2 vec5 = Vector2.Normalize(player.Center - center4 + player.velocity * 20f);
                  if (vec5.HasNaNs())
                    vec5 = new Vector2((float) this.direction, 0.0f);
                  Vector2 vector2_7 = center4 + new Vector2((float) (this.direction * 30), 12f);
                  for (int index4 = 0; index4 < 1; ++index4)
                  {
                    Vector2 vector2_8 = (vec5 * (float) (6.0 + Main.rand.NextDouble() * 4.0)).RotatedByRandom(0.52359879016876221);
                    Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_7.X, vector2_7.Y, vector2_8.X, vector2_8.Y, 468, 18, 0.0f, Main.myPlayer);
                  }
                }
              }
            }
          }
          int num18 = Math.Sign(player.Center.X - center1.X);
          if (num18 != 0)
            this.direction = this.spriteDirection = num18;
          if (Main.netMode != 1)
          {
            Vector2 vec6 = Vector2.Normalize(player.Center - center1 + player.velocity * 20f);
            if (vec6.HasNaNs())
              vec6 = new Vector2((float) this.direction, 0.0f);
            Vector2 vector2_9 = this.Center + new Vector2((float) (this.direction * 30), 12f);
            for (int index = 0; index < 1; ++index)
            {
              Vector2 vector2_10 = (vec6 * (float) (6.0 + Main.rand.NextDouble() * 4.0)).RotatedByRandom(0.52359879016876221);
              Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_9.X, vector2_9.Y, vector2_10.X, vector2_10.Y, 467, damageForProjectiles2, 0.0f, Main.myPlayer);
            }
          }
        }
        ++this.ai[1];
        if ((double) this.ai[1] >= (double) (4 + num2 * num3))
        {
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          ++this.ai[3];
          this.velocity = Vector2.Zero;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 4.0)
      {
        this.localAI[2] = !flag2 ? 11f : 12f;
        if ((double) this.ai[1] == 20.0 & flag2 && Main.netMode != 1)
        {
          List<int> intList = new List<int>();
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].active && Main.npc[index].type == 440 && (double) Main.npc[index].ai[3] == (double) this.whoAmI)
              intList.Add(index);
          }
          foreach (int index5 in intList)
          {
            NPC npc = Main.npc[index5];
            Vector2 center5 = npc.Center;
            int num19 = Math.Sign(player.Center.X - center5.X);
            if (num19 != 0)
              npc.direction = npc.spriteDirection = num19;
            if (Main.netMode != 1)
            {
              Vector2 vec = Vector2.Normalize(player.Center - center5 + player.velocity * 20f);
              if (vec.HasNaNs())
                vec = new Vector2((float) this.direction, 0.0f);
              Vector2 vector2_11 = center5 + new Vector2((float) (this.direction * 30), 12f);
              for (int index6 = 0; index6 < 1; ++index6)
              {
                Vector2 vector2_12 = (vec * (float) (6.0 + Main.rand.NextDouble() * 4.0)).RotatedByRandom(0.52359879016876221);
                Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_11.X, vector2_11.Y, vector2_12.X, vector2_12.Y, 468, 18, 0.0f, Main.myPlayer);
              }
            }
          }
          if ((int) ((double) this.ai[1] - 20.0) % num4 == 0)
            Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X, this.Center.Y - 100f, 0.0f, 0.0f, 465, damageForProjectiles3, 0.0f, Main.myPlayer);
        }
        ++this.ai[1];
        if ((double) this.ai[1] >= (double) (20 + num4))
        {
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          ++this.ai[3];
          this.velocity = Vector2.Zero;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 5.0)
      {
        this.localAI[2] = 10f;
        if (Vector2.Normalize(player.Center - center1).HasNaNs())
        {
          Vector2 vector2_13 = new Vector2((float) this.direction, 0.0f);
        }
        if ((double) this.ai[1] >= 0.0 && (double) this.ai[1] < 30.0)
        {
          flag3 = true;
          flag4 = true;
          this.alpha = (int) (((double) this.ai[1] - 0.0) / 30.0 * (double) byte.MaxValue);
        }
        else if ((double) this.ai[1] >= 30.0 && (double) this.ai[1] < 90.0)
        {
          if ((((double) this.ai[1] != 30.0 ? 0 : (Main.netMode != 1 ? 1 : 0)) & (flag2 ? 1 : 0)) != 0)
          {
            ++this.localAI[1];
            Vector2 spinningpoint = new Vector2(180f, 0.0f);
            List<int> intList = new List<int>();
            for (int index = 0; index < 200; ++index)
            {
              if (Main.npc[index].active && Main.npc[index].type == 440 && (double) Main.npc[index].ai[3] == (double) this.whoAmI)
                intList.Add(index);
            }
            int num20 = 6 - intList.Count;
            if (num20 > 2)
              num20 = 2;
            int length = intList.Count + num20 + 1;
            float[] numArray = new float[length];
            for (int index = 0; index < numArray.Length; ++index)
              numArray[index] = Vector2.Distance(this.Center + spinningpoint.RotatedBy((double) index * 6.2831854820251465 / (double) length - 1.5707963705062866), player.Center);
            int index7 = 0;
            for (int index8 = 1; index8 < numArray.Length; ++index8)
            {
              if ((double) numArray[index7] > (double) numArray[index8])
                index7 = index8;
            }
            int num21 = index7 >= length / 2 ? index7 - length / 2 : index7 + length / 2;
            int num22 = num20;
            for (int index9 = 0; index9 < numArray.Length; ++index9)
            {
              if (num21 != index9)
              {
                Vector2 vector2_14 = this.Center + spinningpoint.RotatedBy((double) index9 * 6.2831854820251465 / (double) length - 1.5707963705062866);
                if (num22-- > 0)
                {
                  int index10 = NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) vector2_14.X, (int) vector2_14.Y + this.height / 2, 440, this.whoAmI);
                  Main.npc[index10].ai[3] = (float) this.whoAmI;
                  Main.npc[index10].netUpdate = true;
                  Main.npc[index10].localAI[1] = this.localAI[1];
                }
                else
                {
                  int number = intList[-num22 - 1];
                  Main.npc[number].Center = vector2_14;
                  NetMessage.SendData(23, number: number);
                }
              }
            }
            this.ai[2] = (float) Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X, this.Center.Y, 0.0f, 0.0f, 490, 0, 0.0f, Main.myPlayer, ai1: ((float) this.whoAmI));
            this.Center = this.Center + spinningpoint.RotatedBy((double) num21 * 6.2831854820251465 / (double) length - 1.5707963705062866);
            this.netUpdate = true;
            intList.Clear();
          }
          flag3 = true;
          flag4 = true;
          this.alpha = (int) byte.MaxValue;
          if (flag2)
          {
            Vector2 vector2_15 = Main.projectile[(int) this.ai[2]].Center - this.Center;
            if (vector2_15 == Vector2.Zero)
              vector2_15 = -Vector2.UnitY;
            vector2_15.Normalize();
            this.localAI[2] = (double) Math.Abs(vector2_15.Y) >= 0.76999998092651367 ? ((double) vector2_15.Y >= 0.0 ? 10f : 12f) : 11f;
            int num23 = Math.Sign(vector2_15.X);
            if (num23 != 0)
              this.direction = this.spriteDirection = num23;
          }
          else
          {
            Vector2 vector2_16 = Main.projectile[(int) Main.npc[(int) this.ai[3]].ai[2]].Center - this.Center;
            if (vector2_16 == Vector2.Zero)
              vector2_16 = -Vector2.UnitY;
            vector2_16.Normalize();
            this.localAI[2] = (double) Math.Abs(vector2_16.Y) >= 0.76999998092651367 ? ((double) vector2_16.Y >= 0.0 ? 10f : 12f) : 11f;
            int num24 = Math.Sign(vector2_16.X);
            if (num24 != 0)
              this.direction = this.spriteDirection = num24;
          }
        }
        else if ((double) this.ai[1] >= 90.0 && (double) this.ai[1] < 120.0)
        {
          flag3 = true;
          flag4 = true;
          this.alpha = (int) byte.MaxValue - (int) (((double) this.ai[1] - 90.0) / 30.0 * (double) byte.MaxValue);
        }
        else if ((double) this.ai[1] >= 120.0 && (double) this.ai[1] < 420.0)
        {
          flag4 = true;
          this.alpha = 0;
          if (flag2)
          {
            Vector2 vector2_17 = Main.projectile[(int) this.ai[2]].Center - this.Center;
            if (vector2_17 == Vector2.Zero)
              vector2_17 = -Vector2.UnitY;
            vector2_17.Normalize();
            this.localAI[2] = (double) Math.Abs(vector2_17.Y) >= 0.76999998092651367 ? ((double) vector2_17.Y >= 0.0 ? 10f : 12f) : 11f;
            int num25 = Math.Sign(vector2_17.X);
            if (num25 != 0)
              this.direction = this.spriteDirection = num25;
          }
          else
          {
            Vector2 vector2_18 = Main.projectile[(int) Main.npc[(int) this.ai[3]].ai[2]].Center - this.Center;
            if (vector2_18 == Vector2.Zero)
              vector2_18 = -Vector2.UnitY;
            vector2_18.Normalize();
            this.localAI[2] = (double) Math.Abs(vector2_18.Y) >= 0.76999998092651367 ? ((double) vector2_18.Y >= 0.0 ? 10f : 12f) : 11f;
            int num26 = Math.Sign(vector2_18.X);
            if (num26 != 0)
              this.direction = this.spriteDirection = num26;
          }
        }
        ++this.ai[1];
        if ((double) this.ai[1] >= 420.0)
        {
          flag4 = true;
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          ++this.ai[3];
          this.velocity = Vector2.Zero;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 6.0)
      {
        this.localAI[2] = 13f;
        ++this.ai[1];
        if ((double) this.ai[1] >= 120.0)
        {
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          ++this.ai[3];
          this.velocity = Vector2.Zero;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 7.0)
      {
        this.localAI[2] = 11f;
        Vector2 vec7 = Vector2.Normalize(player.Center - center1);
        if (vec7.HasNaNs())
          vec7 = new Vector2((float) this.direction, 0.0f);
        if ((double) this.ai[1] >= 4.0 & flag2 && (int) ((double) this.ai[1] - 4.0) % num5 == 0)
        {
          if ((int) ((double) this.ai[1] - 4.0) / num5 == 2)
          {
            List<int> intList = new List<int>();
            for (int index = 0; index < 200; ++index)
            {
              if (Main.npc[index].active && Main.npc[index].type == 440 && (double) Main.npc[index].ai[3] == (double) this.whoAmI)
                intList.Add(index);
            }
            foreach (int index11 in intList)
            {
              NPC npc = Main.npc[index11];
              Vector2 center6 = npc.Center;
              int num27 = Math.Sign(player.Center.X - center6.X);
              if (num27 != 0)
                npc.direction = npc.spriteDirection = num27;
              if (Main.netMode != 1)
              {
                Vector2 vec8 = Vector2.Normalize(player.Center - center6 + player.velocity * 20f);
                if (vec8.HasNaNs())
                  vec8 = new Vector2((float) this.direction, 0.0f);
                Vector2 vector2_19 = center6 + new Vector2((float) (this.direction * 30), 12f);
                for (int index12 = 0; (double) index12 < 5.0; ++index12)
                {
                  Vector2 vector2_20 = (vec8 * (float) (6.0 + Main.rand.NextDouble() * 4.0)).RotatedByRandom(1.2566370964050293);
                  Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), vector2_19.X, vector2_19.Y, vector2_20.X, vector2_20.Y, 468, 18, 0.0f, Main.myPlayer);
                }
              }
            }
          }
          int num28 = Math.Sign(player.Center.X - center1.X);
          if (num28 != 0)
            this.direction = this.spriteDirection = num28;
          if (Main.netMode != 1)
          {
            Vector2 vec9 = Vector2.Normalize(player.Center - center1 + player.velocity * 20f);
            if (vec9.HasNaNs())
              vec9 = new Vector2((float) this.direction, 0.0f);
            Vector2 vector2_21 = this.Center + new Vector2((float) (this.direction * 30), 12f);
            float num29 = 8f;
            float num30 = 0.251327425f;
            for (int index13 = 0; (double) index13 < 5.0; ++index13)
            {
              Vector2 vector2_22 = (vec9 * num29).RotatedBy((double) num30 * (double) index13 - (1.2566370964050293 - (double) num30) / 2.0);
              float ai1 = (float) (((double) Main.rand.NextFloat() - 0.5) * 0.30000001192092896 * 6.2831854820251465 / 60.0);
              int index14 = NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) vector2_21.X, (int) vector2_21.Y + 7, 522, ai1: ai1, ai2: vector2_22.X, ai3: vector2_22.Y);
              Main.npc[index14].velocity = vector2_22;
              Main.npc[index14].netUpdate = true;
            }
          }
        }
        ++this.ai[1];
        if ((double) this.ai[1] >= (double) (4 + num5 * num6))
        {
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          ++this.ai[3];
          this.velocity = Vector2.Zero;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 8.0)
      {
        this.localAI[2] = 13f;
        if ((double) this.ai[1] >= 4.0 & flag2 && (int) ((double) this.ai[1] - 4.0) % num7 == 0)
        {
          List<int> intList = new List<int>();
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].active && Main.npc[index].type == 440 && (double) Main.npc[index].ai[3] == (double) this.whoAmI)
              intList.Add(index);
          }
          int num31 = intList.Count + 1;
          if (num31 > 3)
            num31 = 3;
          int num32 = Math.Sign(player.Center.X - center1.X);
          if (num32 != 0)
            this.direction = this.spriteDirection = num32;
          if (Main.netMode != 1)
          {
            for (int index15 = 0; index15 < num31; ++index15)
            {
              Point tileCoordinates1 = this.Center.ToTileCoordinates();
              Point tileCoordinates2 = Main.player[this.target].Center.ToTileCoordinates();
              Vector2 vector2 = Main.player[this.target].Center - this.Center;
              int num33 = 20;
              int num34 = 3;
              int num35 = 7;
              int num36 = 2;
              int num37 = 0;
              bool flag6 = false;
              if ((double) vector2.Length() > 2000.0)
                flag6 = true;
              while (!flag6 && num37 < 100)
              {
                ++num37;
                int index16 = Main.rand.Next(tileCoordinates2.X - num33, tileCoordinates2.X + num33 + 1);
                int index17 = Main.rand.Next(tileCoordinates2.Y - num33, tileCoordinates2.Y + num33 + 1);
                if ((index17 < tileCoordinates2.Y - num35 || index17 > tileCoordinates2.Y + num35 || index16 < tileCoordinates2.X - num35 || index16 > tileCoordinates2.X + num35) && (index17 < tileCoordinates1.Y - num34 || index17 > tileCoordinates1.Y + num34 || index16 < tileCoordinates1.X - num34 || index16 > tileCoordinates1.X + num34) && !Main.tile[index16, index17].nactive())
                {
                  bool flag7 = true;
                  if (flag7 && Collision.SolidTiles(index16 - num36, index16 + num36, index17 - num36, index17 + num36))
                    flag7 = false;
                  if (flag7)
                  {
                    NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), index16 * 16 + 8, index17 * 16 + 8, 523, ai0: ((float) this.whoAmI));
                    break;
                  }
                }
              }
            }
          }
        }
        ++this.ai[1];
        if ((double) this.ai[1] >= (double) (4 + num7 * num8))
        {
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          ++this.ai[3];
          this.velocity = Vector2.Zero;
          this.netUpdate = true;
        }
      }
      if (!flag2)
        this.ai[3] = num11;
      this.dontTakeDamage = flag3;
      this.chaseable = !flag4;
    }

    private void AI_108_DivingFlyer()
    {
      this.rotation = this.velocity.ToRotation();
      float num1 = 0.4f;
      float num2 = 10f;
      float num3 = 200f;
      float num4 = 750f;
      float num5 = 30f;
      float num6 = 30f;
      float num7 = 0.95f;
      int num8 = 50;
      float num9 = 14f;
      float num10 = 30f;
      float num11 = 100f;
      float num12 = 20f;
      float num13 = 0.0f;
      float num14 = 7f;
      bool flag1 = true;
      bool flag2 = true;
      int num15 = 120;
      bool flag3 = false;
      bool flag4 = false;
      float num16 = 0.05f;
      float num17 = 0.0f;
      bool flag5 = false;
      switch (this.type)
      {
        case 558:
        case 559:
        case 560:
          flag4 = true;
          num1 = 0.7f;
          if (this.type == 559)
            num1 = 0.5f;
          if (this.type == 560)
            num1 = 0.2f;
          num2 = 3f;
          num3 = 400f;
          num4 = 500f;
          num5 = 90f;
          num6 = 20f;
          num7 = 0.95f;
          num8 = 0;
          num9 = 8f;
          num10 = 30f;
          num11 = 150f;
          num12 = 60f;
          num13 = 0.05f;
          num14 = 6f;
          flag2 = false;
          flag5 = true;
          break;
        case 574:
        case 575:
          flag4 = true;
          num1 = 0.6f;
          if (this.type == 575)
            num1 = 0.4f;
          num2 = 4f;
          num3 = 400f;
          num4 = 500f;
          num5 = 90f;
          num6 = 30f;
          num7 = 0.95f;
          num8 = 3;
          num9 = 8f;
          num10 = 30f;
          num11 = 150f;
          num12 = 10f;
          num13 = 0.05f;
          num14 = 0.0f;
          num17 = -0.1f;
          flag3 = true;
          flag5 = true;
          break;
      }
      NPCUtils.TargetClosestOldOnesInvasion(this);
      NPCAimedTarget targetData = this.GetTargetData();
      if (flag5)
      {
        if ((double) this.localAI[0] == 0.0)
          this.alpha = (int) byte.MaxValue;
        if ((double) this.localAI[0] == 30.0)
          SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_EtherianPortalSpawnEnemy, this.Center);
        if ((double) this.localAI[0] < 60.0)
        {
          ++this.localAI[0];
          this.alpha -= 5;
          if (this.alpha < 0)
            this.alpha = 0;
          int num18 = (int) this.localAI[0] / 10;
          float num19 = this.Size.Length() / 2f / 20f;
          int maxValue = 5;
          if (this.type == 576 || this.type == 577)
            maxValue = 1;
          for (int index = 0; index < num18; ++index)
          {
            if (Main.rand.Next(maxValue) == 0)
            {
              Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 27, this.velocity.X * 1f, Alpha: 100);
              dust.scale = 0.55f;
              dust.fadeIn = 0.7f;
              dust.velocity *= 0.1f * num19;
              dust.velocity += this.velocity;
            }
          }
        }
      }
      if (flag4)
      {
        for (int index = 0; index < 200; ++index)
        {
          if (index != this.whoAmI && Main.npc[index].active && Main.npc[index].type == this.type && (double) Math.Abs(this.position.X - Main.npc[index].position.X) + (double) Math.Abs(this.position.Y - Main.npc[index].position.Y) < (double) this.width)
          {
            if ((double) this.position.X < (double) Main.npc[index].position.X)
              this.velocity.X -= num16;
            else
              this.velocity.X += num16;
            if ((double) this.position.Y < (double) Main.npc[index].position.Y)
              this.velocity.Y -= num16;
            else
              this.velocity.Y += num16;
          }
        }
      }
      if (Math.Sign(this.velocity.X) != 0)
        this.spriteDirection = -Math.Sign(this.velocity.X);
      if ((double) this.rotation < -1.5707963705062866)
        this.rotation += 3.14159274f;
      if ((double) this.rotation > 1.5707963705062866)
        this.rotation -= 3.14159274f;
      float num20 = num13 * num12;
      if (Main.expertMode)
        num1 *= Main.GameModeInfo.KnockbackToEnemiesMultiplier;
      SlotId slotId;
      if ((double) this.ai[0] == 0.0)
      {
        this.knockBackResist = num1;
        float num21 = num2;
        Vector2 center = this.Center;
        Vector2 vector2_1 = targetData.Center - center;
        Vector2 vector2_2 = vector2_1 - Vector2.UnitY * num3;
        double num22 = (double) vector2_1.Length();
        Vector2 v = Vector2.Normalize(vector2_1) * num21;
        Vector2 vector2_3 = Vector2.Normalize(vector2_2) * num21;
        bool flag6 = Collision.CanHit(this.Center, 1, 1, targetData.Center, 1, 1);
        if ((double) this.ai[3] >= (double) num15)
          flag6 = true;
        float num23 = 8f;
        bool flag7 = flag6 && (double) v.ToRotation() > 3.1415927410125732 / (double) num23 && (double) v.ToRotation() < 3.1415927410125732 - 3.1415927410125732 / (double) num23;
        double num24 = (double) num4;
        if (num22 > num24 || !flag7)
        {
          this.velocity.X = (this.velocity.X * (num5 - 1f) + vector2_3.X) / num5;
          this.velocity.Y = (this.velocity.Y * (num5 - 1f) + vector2_3.Y) / num5;
          if ((double) targetData.Center.Y < (double) this.Center.Y)
          {
            this.velocity.Y -= 0.2f;
            if ((double) this.velocity.Y < -10.0)
              this.velocity.Y = -10f;
          }
          if (!flag7)
          {
            ++this.ai[3];
            if ((double) this.ai[3] == (double) num15)
              this.netUpdate = true;
          }
          else
            this.ai[3] = 0.0f;
        }
        else
        {
          this.ai[0] = 1f;
          this.ai[2] = v.X;
          this.ai[3] = v.Y;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 1.0)
      {
        this.knockBackResist = 0.0f;
        this.velocity = this.velocity * num7;
        this.velocity.Y += num17;
        ++this.ai[1];
        if ((double) this.ai[1] == (double) num6)
        {
          if (this.type == 558 || this.type == 559 || this.type == 560)
          {
            float[] localAi1 = this.localAI;
            slotId = SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_WyvernDiveDown, this.Center);
            double num25 = (double) ((SlotId) ref slotId).ToFloat();
            localAi1[1] = (float) num25;
            if (Main.rand.Next(5) == 0)
            {
              float[] localAi2 = this.localAI;
              slotId = SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_WyvernScream, this.Center);
              double num26 = (double) ((SlotId) ref slotId).ToFloat();
              localAi2[2] = (float) num26;
            }
          }
          else if (this.type == 574 || this.type == 575)
          {
            float[] localAi = this.localAI;
            slotId = SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_KoboldFlyerChargeScream, this.Center);
            double num27 = (double) ((SlotId) ref slotId).ToFloat();
            localAi[1] = (float) num27;
            SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_KoboldIgnite, this.Center);
          }
        }
        if ((double) this.ai[1] >= (double) num6)
        {
          this.ai[0] = 2f;
          this.ai[1] = 0.0f;
          this.netUpdate = true;
          Vector2 vector2 = new Vector2(this.ai[2], this.ai[3]) + new Vector2((float) Main.rand.Next(-num8, num8 + 1), (float) Main.rand.Next(-num8, num8 + 1)) * 0.04f;
          vector2.Normalize();
          this.velocity = vector2 * num9;
        }
      }
      else if ((double) this.ai[0] == 2.0)
      {
        if ((double) this.ai[1] >= 20.0 && (this.type == 574 || this.type == 575))
        {
          ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[2]));
          if (activeSound == null)
          {
            float[] localAi = this.localAI;
            slotId = SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_KoboldIgniteLoop, this.Center);
            double num28 = (double) ((SlotId) ref slotId).ToFloat();
            localAi[2] = (float) num28;
          }
          else
            activeSound.Position = this.Center;
        }
        this.knockBackResist = 0.0f;
        float num29 = num10;
        ++this.ai[1];
        bool flag8 = (double) Vector2.Distance(this.Center, targetData.Center) > (double) num11 && (double) this.Center.Y > (double) targetData.Center.Y;
        if (flag3)
          flag8 = false;
        if ((double) this.ai[1] >= (double) num29 & flag8 || (double) this.velocity.Length() < (double) num14)
        {
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
          this.ai[3] = 0.0f;
          this.velocity = this.velocity / 2f;
          this.netUpdate = true;
          if (flag1)
          {
            this.ai[1] = 45f;
            this.ai[0] = 4f;
          }
        }
        else
        {
          Vector2 center = this.Center;
          Vector2 vec = targetData.Center - center;
          vec.Normalize();
          if (vec.HasNaNs())
            vec = new Vector2((float) this.direction, 0.0f);
          this.velocity = (this.velocity * (num12 - 1f) + vec * (this.velocity.Length() + num20)) / num12;
        }
        if (flag2 && Collision.SolidCollision(this.position, this.width, this.height))
        {
          this.ai[0] = 3f;
          this.ai[1] = 0.0f;
          this.ai[2] = 0.0f;
          this.ai[3] = 0.0f;
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[0] == 4.0)
      {
        this.ai[1] -= 3f;
        if ((double) this.ai[1] <= 0.0)
        {
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
        this.velocity = this.velocity * 0.95f;
      }
      ActiveSound activeSound1 = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
      if (activeSound1 != null)
      {
        activeSound1.Position = this.Center;
      }
      else
      {
        float[] localAi = this.localAI;
        slotId = SlotId.Invalid;
        double num30 = (double) ((SlotId) ref slotId).ToFloat();
        localAi[1] = (float) num30;
      }
      if (this.type == 558 || this.type == 559 || this.type == 560)
      {
        ActiveSound activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(this.localAI[2]));
        if (activeSound2 != null)
        {
          activeSound2.Position = this.Center;
        }
        else
        {
          float[] localAi = this.localAI;
          slotId = SlotId.Invalid;
          double num31 = (double) ((SlotId) ref slotId).ToFloat();
          localAi[2] = (float) num31;
        }
      }
      if (flag2 && (double) this.ai[0] != 3.0 && (double) Vector2.Distance(this.Center, targetData.Center) < 64.0)
      {
        this.ai[0] = 3f;
        this.ai[1] = 0.0f;
        this.ai[2] = 0.0f;
        this.ai[3] = 0.0f;
        this.netUpdate = true;
      }
      if ((double) this.ai[0] != 3.0)
        return;
      this.position = this.Center;
      this.width = this.height = 192;
      this.position.X -= (float) (this.width / 2);
      this.position.Y -= (float) (this.height / 2);
      this.velocity = Vector2.Zero;
      this.damage = this.GetAttackDamage_ScaledByStrength(80f);
      this.alpha = (int) byte.MaxValue;
      if ((double) this.ai[1] == 0.0 && (this.type == 574 || this.type == 575))
      {
        for (int index1 = 0; index1 < 4; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Alpha: 100, Scale: 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
        }
        for (int index3 = 0; index3 < 20; ++index3)
        {
          int index4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 200, Scale: 3.7f);
          Main.dust[index4].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index4].noGravity = true;
          Main.dust[index4].velocity *= 3f;
          int index5 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Alpha: 100, Scale: 1.5f);
          Main.dust[index5].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 4f;
          Main.dust[index5].velocity *= 2f;
          Main.dust[index5].noGravity = true;
          Main.dust[index5].fadeIn = 2.5f;
        }
        for (int index6 = 0; index6 < 6; ++index6)
        {
          int index7 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, Scale: 2.7f);
          Main.dust[index7].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
          Main.dust[index7].noGravity = true;
          Main.dust[index7].velocity *= 3f;
        }
        for (int index8 = 0; index8 < 12; ++index8)
        {
          int index9 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, Scale: 1.5f);
          Main.dust[index9].position = this.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy((double) this.velocity.ToRotation()) * (float) this.width / 2f;
          Main.dust[index9].noGravity = true;
          Main.dust[index9].velocity *= 3f;
        }
        for (int index10 = 0; index10 < 5; ++index10)
        {
          int index11 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64));
          Main.gore[index11].position = this.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.gore[index11].velocity *= 0.3f;
          Main.gore[index11].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index11].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
      }
      ++this.ai[1];
      if ((double) this.ai[1] < 3.0)
        return;
      SoundEngine.PlaySound(SoundID.Item14, this.position);
      this.life = 0;
      this.HitEffect();
      this.active = false;
    }

    private void AI_109_DarkMage()
    {
      bool flag1 = false;
      bool flag2 = false;
      bool flag3 = true;
      bool flag4 = false;
      int num1 = 4;
      int num2 = 3;
      int num3 = 0;
      float num4 = 0.2f;
      float num5 = 2f;
      float num6 = -0.2f;
      float num7 = -4f;
      bool flag5 = true;
      float num8 = 2f;
      float num9 = 0.1f;
      float num10 = 1f;
      float num11 = 0.04f;
      bool flag6 = false;
      float num12 = 0.96f;
      bool flag7 = true;
      NPCAimedTarget targetData = this.GetTargetData();
      if (this.type == 564 || this.type == 565)
      {
        flag5 = false;
        this.rotation = this.velocity.X * 0.04f;
        this.spriteDirection = this.direction > 0 ? 1 : -1;
        num3 = 2;
        num6 = -0.05f;
        num7 = -0.4f;
        num4 = 0.05f;
        num5 = 0.2f;
        num10 = 0.5f;
        num11 = 0.02f;
        num8 = 0.5f;
        num9 = 0.1f;
        this.localAI[2] = 0.0f;
        DelegateMethods.v3_1 = new Vector3(0.3f, 0.05f, 0.45f) * 1.5f;
        Utils.PlotTileLine(this.Top, this.Bottom, (float) this.width, new Utils.TileActionAttempt(DelegateMethods.CastLightOpen));
        if ((double) this.ai[0] < 0.0)
          this.ai[0] = MathHelper.Min(this.ai[0] + 1f, 0.0f);
        if ((double) this.ai[0] > 0.0)
        {
          flag7 = false;
          flag6 = true;
          num12 = 0.9f;
          --this.ai[0];
          if ((double) this.ai[0] == 80.0 && (double) this.ai[1] == 2.0)
            SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_DarkMageSummonSkeleton, this.Center);
          if ((double) this.ai[1] == 2.0 && (double) this.ai[0] == 64.0 && Main.netMode != 1)
          {
            Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center + new Vector2((float) (this.direction * 24), -40f), Vector2.Zero, 673, 0, 0.0f, Main.myPlayer);
            DD2Event.RaiseGoblins(this, this.Center);
          }
          if ((double) this.ai[1] == 0.0 && (double) this.ai[0] == 32.0)
          {
            Vector2 velocity = (targetData.Center - (this.Center + new Vector2((float) (this.direction * 10), -16f))).SafeNormalize(Vector2.UnitY) * 14f;
            this.direction = (double) velocity.X > 0.0 ? 1 : -1;
            if (Main.netMode != 1)
              Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center + new Vector2((float) (this.direction * 10), -16f), velocity, 675, 40, 0.0f, Main.myPlayer);
          }
          if ((double) this.ai[0] == 126.0 && (double) this.ai[1] == 1.0)
            SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_DarkMageCastHeal, this.Center);
          if ((double) this.ai[1] == 1.0 && Main.netMode != 1 && ((double) this.ai[0] == 40.0 || (double) this.ai[0] == 48.0 || (double) this.ai[0] == 56.0))
          {
            Point result;
            if (WorldUtils.Find(new Vector2(this.Center.X + (float) (this.direction * 240), this.Center.Y).ToTileCoordinates(), Searches.Chain((GenSearch) new Searches.Down(50), (GenCondition) new Terraria.WorldBuilding.Conditions.IsSolid()), out result))
              Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), result.ToWorldCoordinates(autoAddY: 0.0f), Vector2.Zero, 674, 0, 0.0f, Main.myPlayer);
          }
          if ((double) this.ai[0] <= 0.0)
          {
            double num13 = (double) this.ai[1];
            ++this.ai[1];
            if ((double) this.ai[1] >= 3.0)
              this.ai[1] = 0.0f;
            this.ai[0] = -120f;
            if (num13 == 0.0)
              this.ai[0] = -20f;
            this.netUpdate = true;
          }
        }
        if ((double) this.ai[0] == 0.0 && (double) this.localAI[3] >= 60.0)
        {
          bool flag8 = false;
          Vector2 minimum = this.Center + new Vector2(-600f, -200f);
          Vector2 maximum = this.Center + new Vector2(600f, 200f);
          int num14 = 0;
          for (int index = 0; index < 200; ++index)
          {
            NPC npc = Main.npc[index];
            if (npc.active && npc.lifeMax != npc.life && npc.Center.Between(minimum, maximum) && ++num14 >= 2)
            {
              flag8 = true;
              break;
            }
          }
          if (!flag8)
            this.ai[1] = 2f;
          if ((double) this.ai[1] == 2.0 && !DD2Event.CanRaiseGoblinsHere(this.Center))
            this.ai[1] = 0.0f;
          bool flag9 = true;
          if ((double) this.ai[1] == 0.0 && ((double) this.Distance(targetData.Center) >= 1000.0 || !Collision.CanHitLine(this.Center, 0, 0, targetData.Center, 0, 0)))
            flag9 = false;
          if (flag9)
          {
            switch ((int) this.ai[1])
            {
              case 0:
                this.ai[0] = 97f;
                break;
              case 1:
                this.ai[0] = (float) sbyte.MaxValue;
                break;
              case 2:
                this.ai[0] = 183f;
                break;
            }
            this.netUpdate = true;
            flag6 = true;
          }
        }
        if ((double) this.localAI[3] == 0.0)
          this.alpha = (int) byte.MaxValue;
        if ((double) this.localAI[3] == 30.0)
          SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_EtherianPortalSpawnEnemy, this.Center);
        if ((double) this.localAI[3] < 60.0)
        {
          ++this.localAI[3];
          this.alpha -= 5;
          if (this.alpha < 0)
            this.alpha = 0;
          int num15 = (int) this.localAI[3] / 10;
          float num16 = this.Size.Length() / 2f / 20f;
          int maxValue = 5;
          if (this.type == 576 || this.type == 577)
            maxValue = 1;
          for (int index = 0; index < num15; ++index)
          {
            if (Main.rand.Next(maxValue) == 0)
            {
              Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 27, this.velocity.X * 1f, Alpha: 100);
              dust.scale = 0.55f;
              dust.fadeIn = 0.7f;
              dust.velocity *= 0.1f * num16;
              dust.velocity += this.velocity;
            }
          }
        }
      }
      if (this.justHit)
        this.localAI[2] = 0.0f;
      if (!flag2)
      {
        if ((double) this.localAI[2] >= 0.0)
        {
          float num17 = 16f;
          bool flag10 = false;
          bool flag11 = false;
          if ((double) this.position.X > (double) this.localAI[0] - (double) num17 && (double) this.position.X < (double) this.localAI[0] + (double) num17)
            flag10 = true;
          else if ((double) this.velocity.X < 0.0 && this.direction > 0 || (double) this.velocity.X > 0.0 && this.direction < 0)
          {
            flag10 = true;
            num17 += 24f;
          }
          if ((double) this.position.Y > (double) this.localAI[1] - (double) num17 && (double) this.position.Y < (double) this.localAI[1] + (double) num17)
            flag11 = true;
          if (flag10 & flag11)
          {
            ++this.localAI[2];
            if ((double) this.localAI[2] >= 30.0 && (double) num17 == 16.0)
              flag1 = true;
            if ((double) this.localAI[2] >= 60.0)
            {
              this.localAI[2] = -180f;
              this.direction *= -1;
              this.velocity.X *= -1f;
              this.collideX = false;
            }
          }
          else
          {
            this.localAI[0] = this.position.X;
            this.localAI[1] = this.position.Y;
            this.localAI[2] = 0.0f;
          }
          if (flag7)
            NPCUtils.TargetClosestOldOnesInvasion(this);
        }
        else
        {
          ++this.localAI[2];
          this.direction = (double) targetData.Center.X > (double) this.Center.X ? 1 : -1;
        }
      }
      int index1 = (int) (((double) this.position.X + (double) (this.width / 2)) / 16.0) + this.direction * 2;
      int num18 = (int) (((double) this.position.Y + (double) this.height) / 16.0);
      int num19 = (int) this.Bottom.Y / 16;
      int index2 = (int) this.Bottom.X / 16;
      if (flag6)
      {
        this.velocity = this.velocity * num12;
      }
      else
      {
        for (int index3 = num18; index3 < num18 + num1; ++index3)
        {
          if (Main.tile[index1, index3] == null)
            Main.tile[index1, index3] = new Tile();
          if (Main.tile[index1, index3].nactive() && Main.tileSolid[(int) Main.tile[index1, index3].type] || Main.tile[index1, index3].liquid > (byte) 0)
          {
            if (index3 <= num18 + 1)
              flag4 = true;
            flag3 = false;
            break;
          }
        }
        for (int index4 = num19; index4 < num19 + num3; ++index4)
        {
          if (Main.tile[index2, index4] == null)
            Main.tile[index2, index4] = new Tile();
          if (Main.tile[index2, index4].nactive() && Main.tileSolid[(int) Main.tile[index2, index4].type] || Main.tile[index2, index4].liquid > (byte) 0)
          {
            flag4 = true;
            flag3 = false;
            break;
          }
        }
        if (flag5)
        {
          for (int index5 = num18 - num2; index5 < num18; ++index5)
          {
            if (Main.tile[index1, index5] == null)
              Main.tile[index1, index5] = new Tile();
            if (Main.tile[index1, index5].nactive() && Main.tileSolid[(int) Main.tile[index1, index5].type] || Main.tile[index1, index5].liquid > (byte) 0)
            {
              flag4 = false;
              flag1 = true;
              break;
            }
          }
        }
        if (flag1)
        {
          flag4 = false;
          flag3 = true;
        }
        if (flag3)
        {
          this.velocity.Y += num4;
          if ((double) this.velocity.Y > (double) num5)
            this.velocity.Y = num5;
        }
        else
        {
          if (((this.directionY >= 0 ? 0 : ((double) this.velocity.Y > 0.0 ? 1 : 0)) | (flag4 ? 1 : 0)) != 0)
            this.velocity.Y += num6;
          if ((double) this.velocity.Y < (double) num7)
            this.velocity.Y = num7;
        }
        if (this.collideX)
        {
          this.velocity.X = this.oldVelocity.X * -0.4f;
          if (this.direction == -1 && (double) this.velocity.X > 0.0 && (double) this.velocity.X < 1.0)
            this.velocity.X = 1f;
          if (this.direction == 1 && (double) this.velocity.X < 0.0 && (double) this.velocity.X > -1.0)
            this.velocity.X = -1f;
        }
        if (this.collideY)
        {
          this.velocity.Y = this.oldVelocity.Y * -0.25f;
          if ((double) this.velocity.Y > 0.0 && (double) this.velocity.Y < 1.0)
            this.velocity.Y = 1f;
          if ((double) this.velocity.Y < 0.0 && (double) this.velocity.Y > -1.0)
            this.velocity.Y = -1f;
        }
        if (this.direction == -1 && (double) this.velocity.X > -(double) num8)
        {
          this.velocity.X -= num9;
          if ((double) this.velocity.X > (double) num8)
            this.velocity.X -= num9;
          else if ((double) this.velocity.X > 0.0)
            this.velocity.X += num9 / 2f;
          if ((double) this.velocity.X < -(double) num8)
            this.velocity.X = -num8;
        }
        else if (this.direction == 1 && (double) this.velocity.X < (double) num8)
        {
          this.velocity.X += num9;
          if ((double) this.velocity.X < -(double) num8)
            this.velocity.X += num9;
          else if ((double) this.velocity.X < 0.0)
            this.velocity.X -= num9 / 2f;
          if ((double) this.velocity.X > (double) num8)
            this.velocity.X = num8;
        }
        if (this.directionY == -1 && (double) this.velocity.Y > -(double) num10)
        {
          this.velocity.Y -= num11;
          if ((double) this.velocity.Y > (double) num10)
            this.velocity.Y -= num11 * 1.25f;
          else if ((double) this.velocity.Y > 0.0)
            this.velocity.Y += num11 * 0.75f;
          if ((double) this.velocity.Y >= -(double) num10)
            return;
          this.velocity.Y = -num8;
        }
        else
        {
          if (this.directionY != 1 || (double) this.velocity.Y >= (double) num10)
            return;
          this.velocity.Y += num11;
          if ((double) this.velocity.Y < -(double) num10)
            this.velocity.Y += num11 * 1.25f;
          else if ((double) this.velocity.Y < 0.0)
            this.velocity.Y -= num11 * 0.75f;
          if ((double) this.velocity.Y <= (double) num10)
            return;
          this.velocity.Y = num10;
        }
      }
    }

    private void AI_111_DD2LightningBug()
    {
      bool flag1 = true;
      float num1 = 7f;
      float num2 = 60f;
      float num3 = 60f;
      float num4 = 1f;
      float num5 = 0.96f;
      int num6 = 30;
      int num7 = 20;
      float num8 = 200f;
      int Damage = 40;
      int Type = 438;
      float num9 = 10f;
      float num10 = 100f;
      bool flag2 = false;
      float num11 = 0.05f;
      Vector2 center = this.Center;
      NPCUtils.TargetClosestOldOnesInvasion(this);
      NPCAimedTarget targetData = this.GetTargetData();
      bool flag3 = false;
      if (this.type == 578)
      {
        num1 = 4f;
        num2 = 20f;
        num3 = 20f;
        flag3 = true;
        flag2 = true;
        num11 = 0.1f;
        Type = 682;
        Damage = 50;
        num9 = 10f;
        num10 = 50f;
        num6 = 5;
        num7 = 30;
        center += new Vector2((float) (-this.spriteDirection * 20), 10f);
        this.position = this.position + this.netOffset;
        if (Main.rand.Next(15) == 0)
        {
          Vector2 position = this.position;
          if (this.direction == -1)
            position.X += (float) (this.width / 2);
          Dust dust = Dust.NewDustDirect(position, this.width / 2, this.height, 272);
          dust.scale = 0.65f;
          dust.velocity.Y -= 0.8f;
          if ((double) dust.velocity.X * (double) this.direction > 0.0)
            dust.velocity.X *= -1f;
          if ((double) dust.velocity.Y > 0.0)
            dust.velocity *= -0.5f;
        }
        if (Main.rand.Next(80) == 0)
        {
          Vector2 rotationVector2 = (Main.rand.NextFloat() * 6.28318548f).ToRotationVector2();
          Dust dust1 = Dust.NewDustPerfect(this.Center, 272, new Vector2?(rotationVector2));
          dust1.velocity *= 1.1f;
          dust1.noGravity = true;
          dust1.customData = (object) this;
          Dust dust2 = Dust.NewDustPerfect(this.Center, 272, new Vector2?(rotationVector2));
          dust2.velocity *= 1.5f;
          dust2.noGravity = true;
          dust2.customData = (object) this;
        }
        this.position = this.position - this.netOffset;
      }
      if (flag3)
      {
        if ((double) this.localAI[1] == 0.0)
          this.alpha = (int) byte.MaxValue;
        if ((double) this.localAI[1] == 30.0)
          SoundEngine.PlayTrackedSound((SoundStyle) SoundID.DD2_EtherianPortalSpawnEnemy, this.Center);
        if ((double) this.localAI[1] < 60.0)
        {
          ++this.localAI[1];
          this.alpha -= 5;
          if (this.alpha < 0)
            this.alpha = 0;
          int num12 = (int) this.localAI[1] / 10;
          float num13 = this.Size.Length() / 2f / 20f;
          int maxValue = 5;
          if (this.type == 576 || this.type == 577)
            maxValue = 1;
          for (int index = 0; index < num12; ++index)
          {
            if (Main.rand.Next(maxValue) == 0)
            {
              Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 27, this.velocity.X * 1f, Alpha: 100);
              dust.scale = 0.55f;
              dust.fadeIn = 0.7f;
              dust.velocity *= 0.1f * num13;
              dust.velocity += this.velocity;
            }
          }
        }
      }
      if (flag2)
      {
        for (int index = 0; index < 200; ++index)
        {
          if (index != this.whoAmI && Main.npc[index].active && Main.npc[index].type == this.type && (double) Math.Abs(this.position.X - Main.npc[index].position.X) + (double) Math.Abs(this.position.Y - Main.npc[index].position.Y) < (double) this.width)
          {
            if ((double) this.position.X < (double) Main.npc[index].position.X)
              this.velocity.X -= num11;
            else
              this.velocity.X += num11;
            if ((double) this.position.Y < (double) Main.npc[index].position.Y)
              this.velocity.Y -= num11;
            else
              this.velocity.Y += num11;
          }
        }
      }
      this.rotation = (float) ((double) Math.Abs(this.velocity.X) * (double) this.direction * 0.10000000149011612);
      this.spriteDirection = this.direction;
      Vector2 position1 = center;
      Vector2 v = targetData.Center - position1;
      Vector2 vector2_1 = v.SafeNormalize(Vector2.UnitY) * num1;
      bool flag4 = Collision.CanHit(this.Center, 1, 1, targetData.Center, 1, 1);
      if ((double) this.localAI[0] < 0.0)
        ++this.localAI[0];
      if (!flag1)
      {
        this.velocity = (this.velocity * (num2 - 1f) + vector2_1) / num2;
        this.EncourageDespawn(10);
      }
      else if ((double) v.Length() > (double) num8 || !flag4)
        this.velocity = (this.velocity * (num3 - 1f) + vector2_1) / num3;
      else if ((double) v.Y < (double) num10)
        this.velocity.Y -= 0.03f;
      else if ((double) this.localAI[0] >= 0.0)
      {
        this.velocity = this.velocity * num5;
        if ((double) this.velocity.Length() < (double) num4 && Main.netMode != 1)
        {
          ++this.localAI[0];
          if ((double) this.localAI[0] >= (double) num6)
          {
            this.localAI[0] = (float) -num7;
            this.direction = this.spriteDirection = (double) vector2_1.X > 0.0 ? 1 : -1;
            Vector2 vector2_2 = v + Utils.RandomVector2(Main.rand, -25f, 25f);
            vector2_2.X *= (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.004999999888241291);
            vector2_2.Y *= (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.004999999888241291);
            vector2_2 = vector2_2.SafeNormalize(Vector2.UnitY) * num9;
            vector2_2.X *= (float) (1.0 + (double) Main.rand.Next(-20, 21) * (1.0 / 160.0));
            vector2_2.Y *= (float) (1.0 + (double) Main.rand.Next(-20, 21) * (1.0 / 160.0));
            Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), position1, vector2_2, Type, Damage, 0.0f, Main.myPlayer);
          }
        }
      }
      if (!flag1)
        return;
      bool flag5 = false;
      if ((double) targetData.Center.Y < (double) this.Center.Y)
        flag5 = true;
      if (!flag5)
      {
        Point tileCoordinates = this.Center.ToTileCoordinates();
        if (WorldGen.InWorld(tileCoordinates.X, tileCoordinates.Y, 2))
        {
          Tile testTile = Main.tile[tileCoordinates.X, tileCoordinates.Y];
          if (testTile != null && testTile.active() && WorldGen.SolidTile(testTile))
            flag5 = true;
        }
      }
      if (!flag5)
        return;
      this.velocity.Y -= 0.2f;
      if ((double) this.velocity.Y >= -10.0)
        return;
      this.velocity.Y = -10f;
    }

    public void ReflectProjectiles(Microsoft.Xna.Framework.Rectangle myRect)
    {
      for (int index = 0; index < 1000; ++index)
      {
        if (Main.projectile[index].active && Main.projectile[index].CanBeReflected() && this.CanReflectProjectile(Main.projectile[index]))
          this.ReflectProjectile(Main.projectile[index]);
      }
    }

    public bool CanReflectProjectile(Projectile proj)
    {
      bool flag = proj.Hitbox.Intersects(this.Hitbox);
      if (this.type == 618)
        this.BloodNautilus_GetMouthPositionAndRotation(out Vector2 _, out Vector2 _);
      return flag;
    }

    public void BloodNautilus_GetMouthPositionAndRotation(
      out Vector2 mouthPosition,
      out Vector2 mouthDirection)
    {
      float f = this.rotation + 0.471238941f * (float) this.spriteDirection;
      if (this.spriteDirection == -1)
        f += 3.14159274f;
      mouthDirection = f.ToRotationVector2();
      mouthPosition = this.Center + mouthDirection * 50f;
    }

    public void ReflectProjectile(Projectile proj)
    {
      SoundEngine.PlaySound(SoundID.Item150, proj.position);
      for (int index1 = 0; index1 < 3; ++index1)
      {
        int index2 = Dust.NewDust(proj.position, proj.width, proj.height, 31);
        Main.dust[index2].velocity *= 0.3f;
      }
      proj.reflected = true;
      proj.hostile = true;
      proj.friendly = false;
      Vector2 vector2_1 = Main.player[proj.owner].Center - proj.Center;
      vector2_1.Normalize();
      Vector2 vector2_2 = vector2_1 * proj.oldVelocity.Length();
      proj.velocity = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
      proj.velocity.Normalize();
      Projectile projectile1 = proj;
      projectile1.velocity = projectile1.velocity * vector2_2.Length();
      Projectile projectile2 = proj;
      projectile2.velocity = projectile2.velocity + vector2_2 * 20f;
      proj.velocity.Normalize();
      Projectile projectile3 = proj;
      projectile3.velocity = projectile3.velocity * vector2_2.Length();
      proj.damage /= 2;
      proj.damage /= 2;
      proj.penetrate = 1;
    }

    public int GetShootingFrame(float circleY)
    {
      int shootingFrame = -4;
      if ((double) circleY < -0.30000001192092896)
        shootingFrame = 1;
      if ((double) circleY < -0.10000000149011612)
        shootingFrame = 0;
      if ((double) circleY > 0.10000000149011612)
        shootingFrame = 2;
      if ((double) circleY > 0.30000001192092896)
        shootingFrame = 3;
      if (this.type == 228 || this.type == 229 || this.type == 209 || this.type == 22 || this.type == 368)
      {
        if (shootingFrame == -4)
          shootingFrame = 1;
        if ((double) circleY >= -0.10000000149011612)
          ++shootingFrame;
      }
      return shootingFrame;
    }

    public Tuple<Vector2, float> GetSwingStats(
      int swingMax,
      int swingCurrent,
      int aimDir,
      int itemWidth,
      int itemHeight)
    {
      Vector2 zero = Vector2.Zero;
      if ((double) swingCurrent < (double) swingMax * 0.333)
      {
        float num = 10f;
        if (itemWidth > 32)
          num = 14f;
        if (itemWidth >= 52)
          num = 24f;
        if (itemWidth >= 64)
          num = 28f;
        if (itemWidth >= 92)
          num = 38f;
        zero.X = this.Center.X + ((float) itemWidth * 0.5f - num) * (float) aimDir;
        zero.Y = this.position.Y + 24f;
      }
      else if ((double) swingCurrent < (double) swingMax * 0.666)
      {
        float num1 = 10f;
        if (itemWidth > 32)
          num1 = 18f;
        if (itemWidth >= 52)
          num1 = 24f;
        if (itemWidth >= 64)
          num1 = 28f;
        if (itemWidth >= 92)
          num1 = 38f;
        zero.X = this.Center.X + ((float) itemWidth * 0.5f - num1) * (float) aimDir;
        float num2 = 10f;
        if (itemHeight > 32)
          num2 = 8f;
        if (itemHeight > 52)
          num2 = 12f;
        if (itemHeight > 64)
          num2 = 14f;
        zero.Y = this.position.Y + num2;
      }
      else
      {
        float num3 = 6f;
        if (itemWidth > 32)
          num3 = 14f;
        if (itemWidth >= 48)
          num3 = 18f;
        if (itemWidth >= 52)
          num3 = 24f;
        if (itemWidth >= 64)
          num3 = 28f;
        if (itemWidth >= 92)
          num3 = 38f;
        zero.X = this.Center.X - ((float) itemWidth * 0.5f - num3) * (float) aimDir;
        float num4 = 10f;
        if (itemHeight > 32)
          num4 = 10f;
        if (itemHeight > 52)
          num4 = 12f;
        if (itemHeight > 64)
          num4 = 14f;
        zero.Y = this.position.Y + num4;
      }
      float num5 = (float) (((double) swingCurrent / (double) swingMax - 0.5) * (double) -aimDir * 3.5 - (double) aimDir * 0.30000001192092896);
      return Tuple.Create<Vector2, float>(zero, num5);
    }

    public void TweakSwingStats(
      int swingMax,
      int swingCurrent,
      int aimDir,
      ref Microsoft.Xna.Framework.Rectangle itemRectangle)
    {
      if ((double) swingCurrent < (double) swingMax * 0.333)
      {
        if (aimDir == -1)
          itemRectangle.X -= (int) ((double) itemRectangle.Width * 1.4 - (double) itemRectangle.Width);
        itemRectangle.Width = (int) ((double) itemRectangle.Width * 1.4);
        itemRectangle.Y += (int) ((double) itemRectangle.Height * 0.5);
        itemRectangle.Height = (int) ((double) itemRectangle.Height * 1.1);
      }
      else
      {
        if ((double) swingCurrent < (double) swingMax * 0.666)
          return;
        if (aimDir == 1)
          itemRectangle.X -= (int) ((double) itemRectangle.Width * 1.2);
        itemRectangle.Width *= 2;
        itemRectangle.Y -= (int) ((double) itemRectangle.Height * 1.4 - (double) itemRectangle.Height);
        itemRectangle.Height = (int) ((double) itemRectangle.Height * 1.4);
      }
    }

    public bool UsesPartyHat()
    {
      if (this.type == 441 || this.type == 37 || this.type == 633 || this.type == 20 && this.townNpcVariationIndex == 1)
        return false;
      if (this.ForcePartyHatOn)
        return true;
      return !this.IsABestiaryIconDummy && this.frame.Height > 0 && this.townNPC && BirthdayParty.PartyIsUp;
    }

    public PartyHatColor GetPartyHatColor()
    {
      if (!this.UsesPartyHat() || string.IsNullOrEmpty(this.GivenOrTypeName))
        return PartyHatColor.None;
      int num1 = this.GivenOrTypeName.Length + (int) this.GivenOrTypeName[0];
      int moonPhase = Main.moonPhase;
      if (Main.dayTime)
        --moonPhase;
      int num2 = num1 + this.whoAmI + moonPhase * (this.whoAmI % 2 == 0).ToDirectionInt();
      if (num2 < 0)
        num2 += 5;
      int partyHatColor = num2 % 5;
      if (partyHatColor == 0)
        ++partyHatColor;
      return (PartyHatColor) partyHatColor;
    }

    public void SetFrameSize()
    {
      Main.instance.LoadNPC(this.type);
      if (!this.setFrameSize)
        return;
      this.frame = new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Npc[this.type].Width(), TextureAssets.Npc[this.type].Height() / Main.npcFrameCount[this.type]);
      this.setFrameSize = false;
    }

    public void FindFrame()
    {
      this.position = this.position + this.netOffset;
      int num1 = 1;
      if (!Main.dedServ)
      {
        if (!TextureAssets.Npc[this.type].IsLoaded)
          return;
        num1 = TextureAssets.Npc[this.type].Height() / Main.npcFrameCount[this.type];
      }
      int num2 = 0;
      if (this.aiAction == 0)
        num2 = (double) this.velocity.Y >= 0.0 ? ((double) this.velocity.Y <= 0.0 ? ((double) this.velocity.X == 0.0 ? 0 : 1) : 3) : 2;
      else if (this.aiAction == 1)
        num2 = 4;
      switch (this.type)
      {
        case 1:
        case 16:
        case 59:
        case 71:
        case 81:
        case 138:
        case 147:
        case 183:
        case 184:
        case 204:
        case 225:
        case 302:
        case 304:
        case 333:
        case 334:
        case 335:
        case 336:
        case 535:
        case 537:
        case 658:
        case 659:
        case 667:
        case 676:
          if (this.type == 302 || this.type == 304)
            this.spriteDirection = this.direction;
          ++this.frameCounter;
          if (num2 > 0)
            ++this.frameCounter;
          if (num2 == 4)
            ++this.frameCounter;
          if (this.frameCounter >= 8.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 2:
        case 23:
        case 121:
        case 169:
        case 190:
        case 191:
        case 192:
        case 193:
        case 194:
        case 317:
        case 318:
        case 660:
          if (this.type == 23)
          {
            int index = Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, Scale: 2f);
            Main.dust[index].noGravity = true;
            Main.dust[index].velocity.X *= 0.3f;
            Main.dust[index].velocity.Y *= 0.3f;
          }
          if ((this.type == 121 || this.type == 660) && (double) this.localAI[0] == 0.0)
          {
            this.localAI[0] = 1f;
            this.frame.Y = num1 * 2;
          }
          if (this.type == 2 || this.type == 190 || this.type == 191 || this.type == 192 || this.type == 193 || this.type == 194 || this.type == 317 || this.type == 318)
          {
            if ((double) this.velocity.X > 0.0)
            {
              this.spriteDirection = 1;
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
            }
            if ((double) this.velocity.X < 0.0)
            {
              this.spriteDirection = -1;
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 3.14f;
            }
          }
          else if (this.type == 2 || this.type == 121 || this.type == 660)
          {
            if ((double) this.velocity.X > 0.0)
              this.spriteDirection = 1;
            if ((double) this.velocity.X < 0.0)
              this.spriteDirection = -1;
            this.rotation = this.velocity.X * 0.1f;
          }
          ++this.frameCounter;
          float num3 = 8f;
          if (this.type == 660)
            num3 = 6f;
          if (this.frameCounter >= (double) num3)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 3:
        case 52:
        case 53:
        case 132:
        case 161:
        case 186:
        case 187:
        case 188:
        case 189:
        case 200:
        case 223:
        case 251:
        case 254:
        case (int) byte.MaxValue:
        case 319:
        case 320:
        case 321:
        case 331:
        case 332:
        case 342:
        case 536:
        case 590:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
          }
          if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 || this.direction == 1 && (double) this.velocity.X < 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 2;
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter < 8.0)
          {
            this.frame.Y = 0;
            break;
          }
          if (this.frameCounter < 16.0)
          {
            this.frame.Y = num1;
            break;
          }
          if (this.frameCounter < 24.0)
          {
            this.frame.Y = num1 * 2;
            break;
          }
          if (this.frameCounter < 32.0)
          {
            this.frame.Y = num1;
            break;
          }
          this.frameCounter = 0.0;
          break;
        case 4:
        case 125:
        case 126:
          ++this.frameCounter;
          if (this.frameCounter < 7.0)
            this.frame.Y = 0;
          else if (this.frameCounter < 14.0)
            this.frame.Y = num1;
          else if (this.frameCounter < 21.0)
          {
            this.frame.Y = num1 * 2;
          }
          else
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
          }
          if ((double) this.ai[0] > 1.0)
          {
            this.frame.Y += num1 * 3;
            break;
          }
          break;
        case 5:
          ++this.frameCounter;
          if (this.frameCounter >= 8.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 6:
        case 173:
          ++this.frameCounter;
          if (this.frameCounter >= 8.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 26:
        case 27:
        case 28:
        case 31:
        case 37:
        case 38:
        case 44:
        case 54:
        case 73:
        case 77:
        case 78:
        case 79:
        case 80:
        case 104:
        case 107:
        case 108:
        case 120:
        case 124:
        case 140:
        case 142:
        case 159:
        case 160:
        case 162:
        case 167:
        case 178:
        case 181:
        case 185:
        case 196:
        case 197:
        case 198:
        case 201:
        case 202:
        case 203:
        case 207:
        case 208:
        case 209:
        case 212:
        case 213:
        case 227:
        case 228:
        case 229:
        case 287:
        case 294:
        case 295:
        case 296:
        case 310:
        case 311:
        case 312:
        case 313:
        case 314:
        case 322:
        case 323:
        case 324:
        case 326:
        case 338:
        case 339:
        case 340:
        case 353:
        case 368:
        case 369:
        case 441:
        case 453:
        case 460:
        case 462:
        case 463:
        case 489:
        case 534:
        case 550:
        case 588:
        case 630:
        case 632:
        case 633:
        case 635:
        case 637:
        case 638:
        case 656:
        case 663:
        case 670:
        case 678:
        case 679:
        case 680:
        case 681:
        case 682:
        case 683:
        case 684:
          int num4 = this.isLikeATownNPC ? NPCID.Sets.ExtraFramesCount[this.type] : 0;
          bool flag1 = NPCID.Sets.IsTownSlime[this.type];
          ITownNPCProfile profile;
          if (false && !Main.dedServ && TownNPCProfiles.Instance.GetProfile(this.type, out profile))
          {
            Asset<Texture2D> textureNpcShouldUse = profile.GetTextureNPCShouldUse(this);
            if (textureNpcShouldUse.IsLoaded)
            {
              num1 = textureNpcShouldUse.Height() / Main.npcFrameCount[this.type];
              this.frame.Width = textureNpcShouldUse.Width();
              this.frame.Height = num1;
            }
          }
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if (NPCID.Sets.IsTownSlime[this.type])
              this.spriteDirection *= -1;
            int num5 = Main.npcFrameCount[this.type] - NPCID.Sets.AttackFrameCount[this.type];
            if ((double) this.ai[0] == 23.0)
            {
              ++this.frameCounter;
              int num6 = this.frame.Y / num1;
              switch (num5 - num6)
              {
                case 1:
                case 2:
                case 4:
                case 5:
                  int num7 = this.frameCounter >= 6.0 ? num5 - 4 : num5 - 5;
                  if ((double) this.ai[1] < 6.0)
                    num7 = num5 - 5;
                  this.frame.Y = num1 * num7;
                  break;
                default:
                  if (num6 != 0)
                  {
                    this.frame.Y = 0;
                    this.frameCounter = 0.0;
                    goto case 1;
                  }
                  else
                    goto case 1;
              }
            }
            else
            {
              if ((double) this.ai[0] >= 20.0 && (double) this.ai[0] <= 22.0)
              {
                int num8 = this.frame.Y / num1;
                switch (this.ai[0])
                {
                  case 20f:
                    if (flag1)
                    {
                      if ((double) this.ai[1] > 30.0 && (num8 < 8 || num8 > 13))
                        num8 = 8;
                      if (num8 > 0)
                        ++this.frameCounter;
                      if (this.frameCounter >= 12.0)
                      {
                        this.frameCounter = 0.0;
                        ++num8;
                        if (num8 > 13 && (double) this.ai[1] > 30.0)
                          num8 = 8;
                        if (num8 > 13)
                          num8 = 0;
                      }
                    }
                    if (this.type == 656)
                    {
                      if ((double) this.ai[1] > 30.0 && (num8 < 7 || num8 > 9))
                        num8 = 7;
                      if (num8 > 0)
                        ++this.frameCounter;
                      if (this.frameCounter > 4.0)
                      {
                        this.frameCounter = 0.0;
                        ++num8;
                        if (num8 > 8 && (double) this.ai[1] > 30.0)
                          num8 = 8;
                        if (num8 > 9)
                          num8 = 0;
                      }
                    }
                    if (this.type == 637)
                    {
                      if ((double) this.ai[1] > 30.0 && (num8 < 10 || num8 > 16))
                        num8 = 10;
                      if (num8 > 0)
                        ++this.frameCounter;
                      if (this.frameCounter > 4.0)
                      {
                        this.frameCounter = 0.0;
                        ++num8;
                        if (num8 > 13 && (double) this.ai[1] > 30.0)
                          num8 = 13;
                        if (num8 > 16)
                          num8 = 0;
                      }
                    }
                    if (this.type == 638)
                    {
                      if ((double) this.ai[1] > 30.0 && (num8 < 23 || num8 > 27))
                        num8 = 23;
                      if (num8 > 0)
                        ++this.frameCounter;
                      if (this.frameCounter > 4.0)
                      {
                        this.frameCounter = 0.0;
                        ++num8;
                        if (num8 > 26 && (double) this.ai[1] > 30.0)
                          num8 = 24;
                        if (num8 > 27)
                        {
                          num8 = 0;
                          break;
                        }
                        break;
                      }
                      break;
                    }
                    break;
                  case 21f:
                    if (this.type == 656)
                    {
                      if ((double) this.ai[1] > 30.0 && (num8 < 10 || num8 > 16))
                        num8 = 10;
                      if (num8 > 0)
                        ++this.frameCounter;
                      if (this.frameCounter > 4.0)
                      {
                        this.frameCounter = 0.0;
                        ++num8;
                        if (num8 > 13 && (double) this.ai[1] > 30.0)
                          num8 = 13;
                        if (num8 > 16)
                          num8 = 0;
                      }
                    }
                    if (this.type == 637)
                    {
                      if ((double) this.ai[1] > 30.0 && (num8 < 17 || num8 > 21))
                        num8 = 17;
                      if (num8 > 0)
                        ++this.frameCounter;
                      if (this.frameCounter > 4.0)
                      {
                        this.frameCounter = 0.0;
                        ++num8;
                        if (num8 > 19 && (double) this.ai[1] > 30.0)
                          num8 = 19;
                        if (num8 > 21)
                          num8 = 0;
                      }
                    }
                    if (this.type == 638)
                    {
                      if ((double) this.ai[1] > 30.0 && (num8 < 17 || num8 > 22))
                        num8 = 17;
                      if (num8 > 0)
                        ++this.frameCounter;
                      if (this.frameCounter > 4.0)
                      {
                        this.frameCounter = 0.0;
                        ++num8;
                        if (num8 > 21 && (double) this.ai[1] > 30.0)
                          num8 = 18;
                        if (num8 > 22)
                        {
                          num8 = 0;
                          break;
                        }
                        break;
                      }
                      break;
                    }
                    break;
                  case 22f:
                    if (this.type == 656)
                    {
                      int num9 = Main.npcFrameCount[this.type];
                      if ((double) this.ai[1] > 40.0 && (num8 < 17 || num8 >= num9))
                        num8 = 17;
                      if (num8 > 0)
                        ++this.frameCounter;
                      if (this.frameCounter > 4.0)
                      {
                        this.frameCounter = 0.0;
                        ++num8;
                        if (num8 > 20 && (double) this.ai[1] > 40.0)
                          num8 = 19;
                        if (num8 >= num9)
                          num8 = 0;
                      }
                    }
                    if (this.type == 637)
                    {
                      if ((double) this.ai[1] > 30.0 && (num8 < 17 || num8 > 27))
                        num8 = 17;
                      if (num8 > 0)
                        ++this.frameCounter;
                      if (this.frameCounter > 4.0)
                      {
                        this.frameCounter = 0.0;
                        ++num8;
                        if (num8 > 27)
                        {
                          num8 = (double) this.ai[1] > 30.0 ? 22 : 20;
                          break;
                        }
                        if ((double) this.ai[1] <= 30.0 && num8 == 22)
                        {
                          num8 = 0;
                          break;
                        }
                        if ((double) this.ai[1] > 30.0 && num8 > 19 && num8 < 22)
                        {
                          num8 = 22;
                          break;
                        }
                        break;
                      }
                      break;
                    }
                    break;
                }
                this.frame.Y = num8 * num1;
                break;
              }
              if ((double) this.ai[0] == 2.0)
              {
                ++this.frameCounter;
                if (this.frame.Y / num1 == num5 - 1 && this.frameCounter >= 5.0)
                {
                  this.frame.Y = 0;
                  this.frameCounter = 0.0;
                  break;
                }
                if (this.frame.Y / num1 == 0 && this.frameCounter >= 40.0)
                {
                  this.frame.Y = num1 * (num5 - 1);
                  this.frameCounter = 0.0;
                  break;
                }
                if (this.frame.Y != 0 && this.frame.Y != num1 * (num5 - 1))
                {
                  this.frame.Y = 0;
                  this.frameCounter = 0.0;
                  break;
                }
                break;
              }
              if ((double) this.ai[0] == 11.0)
              {
                ++this.frameCounter;
                if (this.frame.Y / num1 == num5 - 1 && this.frameCounter >= 50.0)
                {
                  if (this.frameCounter == 50.0)
                  {
                    int num10 = Main.rand.Next(4);
                    for (int index1 = 0; index1 < 3 + num10; ++index1)
                    {
                      int index2 = Dust.NewDust(this.Center + Vector2.UnitX * (float) -this.direction * 8f - Vector2.One * 5f + Vector2.UnitY * 8f, 3, 6, 216, (float) -this.direction, 1f);
                      Main.dust[index2].velocity /= 2f;
                      Main.dust[index2].scale = 0.8f;
                    }
                    if (Main.rand.Next(30) == 0)
                    {
                      int index = Gore.NewGore(this.Center + Vector2.UnitX * (float) -this.direction * 8f, Vector2.Zero, Main.rand.Next(580, 583));
                      Main.gore[index].velocity /= 2f;
                      Main.gore[index].velocity.Y = Math.Abs(Main.gore[index].velocity.Y);
                      Main.gore[index].velocity.X = -Math.Abs(Main.gore[index].velocity.X) * (float) this.direction;
                    }
                  }
                  if (this.frameCounter >= 100.0 && Main.rand.Next(20) == 0)
                  {
                    this.frame.Y = 0;
                    this.frameCounter = 0.0;
                    break;
                  }
                  break;
                }
                if (this.frame.Y / num1 == 0 && this.frameCounter >= 20.0)
                {
                  this.frame.Y = num1 * (num5 - 1);
                  this.frameCounter = 0.0;
                  EmoteBubble.NewBubble(89, new WorldUIAnchor((Entity) this), 90);
                  break;
                }
                if (this.frame.Y != 0 && this.frame.Y != num1 * (num5 - 1))
                {
                  this.frame.Y = 0;
                  this.frameCounter = 0.0;
                  break;
                }
                break;
              }
              if ((double) this.ai[0] == 5.0)
              {
                this.frame.Y = num1 * (num5 - 3);
                if (this.type == 637)
                  this.frame.Y = num1 * 19;
                this.frameCounter = 0.0;
                break;
              }
              if ((double) this.ai[0] == 6.0)
              {
                ++this.frameCounter;
                int num11 = this.frame.Y / num1;
                switch (num5 - num11)
                {
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                    int num12 = this.frameCounter >= 10.0 ? (this.frameCounter >= 16.0 ? (this.frameCounter >= 46.0 ? (this.frameCounter >= 60.0 ? (this.frameCounter >= 66.0 ? (this.frameCounter >= 72.0 ? (this.frameCounter >= 102.0 ? (this.frameCounter >= 108.0 ? (this.frameCounter >= 114.0 ? (this.frameCounter >= 120.0 ? (this.frameCounter >= 150.0 ? (this.frameCounter >= 156.0 ? (this.frameCounter >= 162.0 ? (this.frameCounter >= 168.0 ? (this.frameCounter >= 198.0 ? (this.frameCounter >= 204.0 ? (this.frameCounter >= 210.0 ? (this.frameCounter >= 216.0 ? (this.frameCounter >= 246.0 ? (this.frameCounter >= 252.0 ? (this.frameCounter >= 258.0 ? (this.frameCounter >= 264.0 ? (this.frameCounter >= 294.0 ? (this.frameCounter >= 300.0 ? 0 : num5 - 5) : num5 - 4) : num5 - 5) : 0) : num5 - 5) : num5 - 4) : num5 - 5) : 0) : num5 - 5) : num5 - 4) : num5 - 5) : 0) : num5 - 5) : num5 - 4) : num5 - 5) : 0) : num5 - 5) : num5 - 4) : num5 - 5) : 0) : num5 - 5) : num5 - 4) : num5 - 5) : 0;
                    if (num12 == num5 - 4 && num11 == num5 - 5)
                    {
                      Vector2 Position = this.Center + new Vector2((float) (10 * this.direction), -4f);
                      for (int index3 = 0; index3 < 8; ++index3)
                      {
                        int Type = Main.rand.Next(139, 143);
                        int index4 = Dust.NewDust(Position, 0, 0, Type, this.velocity.X + (float) this.direction, this.velocity.Y - 2.5f, Scale: 1.2f);
                        Main.dust[index4].velocity.X += (float) this.direction * 1.5f;
                        Main.dust[index4].position -= new Vector2(4f);
                        Main.dust[index4].velocity *= 2f;
                        Main.dust[index4].scale = (float) (0.699999988079071 + (double) Main.rand.NextFloat() * 0.30000001192092896);
                      }
                    }
                    this.frame.Y = num1 * num12;
                    if (this.frameCounter >= 300.0)
                    {
                      this.frameCounter = 0.0;
                      break;
                    }
                    break;
                  default:
                    if (num11 != 0)
                    {
                      this.frame.Y = 0;
                      this.frameCounter = 0.0;
                      goto case 1;
                    }
                    else
                      goto case 1;
                }
              }
              else if (((double) this.ai[0] == 7.0 || (double) this.ai[0] == 19.0) && !NPCID.Sets.IsTownPet[this.type])
              {
                ++this.frameCounter;
                int num13 = this.frame.Y / num1;
                switch (num5 - num13)
                {
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                    int num14 = 0;
                    if (this.frameCounter < 16.0)
                      num14 = 0;
                    else if (this.frameCounter == 16.0)
                      EmoteBubble.NewBubbleNPC(new WorldUIAnchor((Entity) this), 112);
                    else if (this.frameCounter < 128.0)
                      num14 = this.frameCounter % 16.0 < 8.0 ? num5 - 2 : 0;
                    else if (this.frameCounter < 160.0)
                      num14 = 0;
                    else if (this.frameCounter == 160.0)
                      EmoteBubble.NewBubbleNPC(new WorldUIAnchor((Entity) this), 60);
                    else
                      num14 = this.frameCounter >= 220.0 ? 0 : (this.frameCounter % 12.0 < 6.0 ? num5 - 2 : 0);
                    this.frame.Y = num1 * num14;
                    if (this.frameCounter >= 220.0)
                    {
                      this.frameCounter = 0.0;
                      break;
                    }
                    break;
                  default:
                    if (num13 != 0)
                    {
                      this.frame.Y = 0;
                      this.frameCounter = 0.0;
                      goto case 1;
                    }
                    else
                      goto case 1;
                }
              }
              else if ((double) this.ai[0] == 9.0)
              {
                ++this.frameCounter;
                int num15 = this.frame.Y / num1;
                switch (num5 - num15)
                {
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                    int num16 = this.frameCounter >= 10.0 ? (this.frameCounter >= 16.0 ? num5 - 4 : num5 - 5) : 0;
                    if ((double) this.ai[1] < 16.0)
                      num16 = num5 - 5;
                    if ((double) this.ai[1] < 10.0)
                      num16 = 0;
                    this.frame.Y = num1 * num16;
                    break;
                  default:
                    if (num15 != 0)
                    {
                      this.frame.Y = 0;
                      this.frameCounter = 0.0;
                      goto case 1;
                    }
                    else
                      goto case 1;
                }
              }
              else if ((double) this.ai[0] == 18.0)
              {
                ++this.frameCounter;
                int num17 = this.frame.Y / num1;
                switch (num5 - num17)
                {
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                    int num18 = 0;
                    num18 = this.frameCounter >= 10.0 ? (this.frameCounter >= 16.0 ? num5 - 2 : num5 - 1) : 0;
                    if ((double) this.ai[1] < 16.0)
                      num18 = num5 - 1;
                    if ((double) this.ai[1] < 10.0)
                      num18 = 0;
                    int num19 = Main.npcFrameCount[this.type] - 2;
                    this.frame.Y = num1 * num19;
                    break;
                  default:
                    if (num17 != 0)
                    {
                      this.frame.Y = 0;
                      this.frameCounter = 0.0;
                      goto case 1;
                    }
                    else
                      goto case 1;
                }
              }
              else
              {
                if ((double) this.ai[0] == 10.0 || (double) this.ai[0] == 13.0)
                {
                  ++this.frameCounter;
                  int num20 = this.frame.Y / num1;
                  if ((uint) (num20 - num5) > 3U && num20 != 0)
                  {
                    this.frame.Y = 0;
                    this.frameCounter = 0.0;
                  }
                  int num21 = 10;
                  int num22 = 6;
                  if (this.type == 633)
                  {
                    num21 = 0;
                    num22 = 2;
                  }
                  int num23 = this.frameCounter >= (double) num21 ? (this.frameCounter >= (double) (num21 + num22) ? (this.frameCounter >= (double) (num21 + num22 * 2) ? (this.frameCounter >= (double) (num21 + num22 * 3) ? (this.frameCounter >= (double) (num21 + num22 * 4) ? 0 : num5 + 3) : num5 + 2) : num5 + 1) : num5) : 0;
                  this.frame.Y = num1 * num23;
                  break;
                }
                if ((double) this.ai[0] == 15.0)
                {
                  ++this.frameCounter;
                  int num24 = this.frame.Y / num1;
                  if ((uint) (num24 - num5) > 3U && num24 != 0)
                  {
                    this.frame.Y = 0;
                    this.frameCounter = 0.0;
                  }
                  float num25 = this.ai[1] / (float) NPCID.Sets.AttackTime[this.type];
                  int num26 = (double) num25 <= 0.64999997615814209 ? ((double) num25 <= 0.5 ? ((double) num25 <= 0.34999999403953552 ? ((double) num25 <= 0.0 ? 0 : num5 + 3) : num5 + 2) : num5 + 1) : num5;
                  this.frame.Y = num1 * num26;
                  break;
                }
                if ((double) this.ai[0] == 25.0)
                {
                  this.frame.Y = num1;
                  break;
                }
                if ((double) this.ai[0] == 12.0)
                {
                  ++this.frameCounter;
                  int num27 = this.frame.Y / num1;
                  if ((uint) (num27 - num5) > 4U && num27 != 0)
                  {
                    this.frame.Y = 0;
                    this.frameCounter = 0.0;
                  }
                  int num28 = num5 + this.GetShootingFrame(this.ai[2]);
                  this.frame.Y = num1 * num28;
                  break;
                }
                if ((double) this.ai[0] == 14.0 || (double) this.ai[0] == 24.0)
                {
                  ++this.frameCounter;
                  int num29 = this.frame.Y / num1;
                  if ((uint) (num29 - num5) > 1U && num29 != 0)
                  {
                    this.frame.Y = 0;
                    this.frameCounter = 0.0;
                  }
                  int num30 = 12;
                  int num31 = this.frameCounter % (double) num30 * 2.0 < (double) num30 ? num5 : num5 + 1;
                  this.frame.Y = num1 * num31;
                  if ((double) this.ai[0] == 24.0)
                  {
                    if (this.frameCounter == 60.0)
                      EmoteBubble.NewBubble(87, new WorldUIAnchor((Entity) this), 60);
                    if (this.frameCounter == 150.0)
                      EmoteBubble.NewBubble(3, new WorldUIAnchor((Entity) this), 90);
                    if (this.frameCounter >= 240.0)
                    {
                      this.frame.Y = 0;
                      break;
                    }
                    break;
                  }
                  break;
                }
                if ((double) this.ai[0] == 1001.0)
                {
                  this.frame.Y = num1 * (num5 - 1);
                  this.frameCounter = 0.0;
                  break;
                }
                if (this.CanTalk && ((double) this.ai[0] == 3.0 || (double) this.ai[0] == 4.0))
                {
                  ++this.frameCounter;
                  int num32 = this.frame.Y / num1;
                  switch (num5 - num32)
                  {
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                      bool flag2 = (double) this.ai[0] == 3.0;
                      int num33 = 0;
                      int num34 = 0;
                      int time1 = -1;
                      int time2 = -1;
                      if (this.frameCounter < 10.0)
                        num33 = 0;
                      else if (this.frameCounter < 16.0)
                        num33 = num5 - 5;
                      else if (this.frameCounter < 46.0)
                        num33 = num5 - 4;
                      else if (this.frameCounter < 60.0)
                        num33 = num5 - 5;
                      else if (this.frameCounter < 216.0)
                        num33 = 0;
                      else if (this.frameCounter == 216.0 && Main.netMode != 1)
                        time1 = 70;
                      else if (this.frameCounter < 286.0)
                        num33 = this.frameCounter % 12.0 < 6.0 ? num5 - 2 : 0;
                      else if (this.frameCounter < 320.0)
                        num33 = 0;
                      else if (this.frameCounter == 320.0 && Main.netMode != 1)
                        time1 = 100;
                      else
                        num33 = this.frameCounter >= 420.0 ? 0 : (this.frameCounter % 16.0 < 8.0 ? num5 - 2 : 0);
                      if (this.frameCounter < 70.0)
                        num34 = 0;
                      else if (this.frameCounter == 70.0 && Main.netMode != 1)
                        time2 = 90;
                      else
                        num34 = this.frameCounter >= 160.0 ? (this.frameCounter >= 166.0 ? (this.frameCounter >= 186.0 ? (this.frameCounter >= 200.0 ? (this.frameCounter >= 320.0 ? (this.frameCounter >= 326.0 ? 0 : num5 - 1) : 0) : num5 - 5) : num5 - 4) : num5 - 5) : (this.frameCounter % 16.0 < 8.0 ? num5 - 2 : 0);
                      if (flag2)
                      {
                        NPC anchor = Main.npc[(int) this.ai[2]];
                        if (time1 != -1)
                          EmoteBubble.NewBubbleNPC(new WorldUIAnchor((Entity) this), time1, new WorldUIAnchor((Entity) anchor));
                        if (time2 != -1 && anchor.CanTalk)
                          EmoteBubble.NewBubbleNPC(new WorldUIAnchor((Entity) anchor), time2, new WorldUIAnchor((Entity) this));
                      }
                      this.frame.Y = num1 * (flag2 ? num33 : num34);
                      if (this.frameCounter >= 420.0)
                      {
                        this.frameCounter = 0.0;
                        break;
                      }
                      break;
                    default:
                      if (num32 != 0)
                      {
                        this.frame.Y = 0;
                        this.frameCounter = 0.0;
                        goto case 1;
                      }
                      else
                        goto case 1;
                  }
                }
                else if (this.CanTalk && ((double) this.ai[0] == 16.0 || (double) this.ai[0] == 17.0))
                {
                  ++this.frameCounter;
                  int num35 = this.frame.Y / num1;
                  switch (num5 - num35)
                  {
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                      bool flag3 = (double) this.ai[0] == 16.0;
                      int num36 = 0;
                      int time = -1;
                      if (this.frameCounter < 10.0)
                        num36 = 0;
                      else if (this.frameCounter < 16.0)
                        num36 = num5 - 5;
                      else if (this.frameCounter < 22.0)
                        num36 = num5 - 4;
                      else if (this.frameCounter < 28.0)
                        num36 = num5 - 5;
                      else if (this.frameCounter < 34.0)
                        num36 = num5 - 4;
                      else if (this.frameCounter < 40.0)
                        num36 = num5 - 5;
                      else if (this.frameCounter == 40.0 && Main.netMode != 1)
                        time = 45;
                      else if (this.frameCounter < 70.0)
                        num36 = num5 - 4;
                      else if (this.frameCounter < 76.0)
                        num36 = num5 - 5;
                      else if (this.frameCounter < 82.0)
                        num36 = num5 - 4;
                      else if (this.frameCounter < 88.0)
                        num36 = num5 - 5;
                      else if (this.frameCounter < 94.0)
                        num36 = num5 - 4;
                      else if (this.frameCounter < 100.0)
                        num36 = num5 - 5;
                      else if (this.frameCounter == 100.0 && Main.netMode != 1)
                        time = 45;
                      else if (this.frameCounter < 130.0)
                        num36 = num5 - 4;
                      else if (this.frameCounter < 136.0)
                        num36 = num5 - 5;
                      else if (this.frameCounter < 142.0)
                        num36 = num5 - 4;
                      else if (this.frameCounter < 148.0)
                        num36 = num5 - 5;
                      else if (this.frameCounter < 154.0)
                        num36 = num5 - 4;
                      else if (this.frameCounter < 160.0)
                        num36 = num5 - 5;
                      else if (this.frameCounter == 160.0 && Main.netMode != 1)
                        time = 75;
                      else
                        num36 = this.frameCounter >= 220.0 ? (this.frameCounter >= 226.0 ? 0 : num5 - 5) : num5 - 4;
                      if (flag3 && time != -1)
                      {
                        int num37 = (int) this.localAI[2];
                        int num38 = (int) this.localAI[3];
                        int num39 = (int) Main.npc[(int) this.ai[2]].localAI[3];
                        int num40 = (int) Main.npc[(int) this.ai[2]].localAI[2];
                        int num41 = 3 - num37 - num38;
                        int num42 = 0;
                        if (this.frameCounter == 40.0)
                          num42 = 1;
                        if (this.frameCounter == 100.0)
                          num42 = 2;
                        if (this.frameCounter == 160.0)
                          num42 = 3;
                        int num43 = 3 - num42;
                        int num44 = -1;
                        int num45 = 0;
                        while (num44 < 0 && ++num45 < 100)
                        {
                          num44 = Main.rand.Next(2);
                          if (num44 == 0 && num40 >= num38)
                            num44 = -1;
                          if (num44 == 1 && num39 >= num37)
                            num44 = -1;
                          if (num44 == -1 && num43 <= num41)
                            num44 = 2;
                        }
                        if (num44 == 0)
                        {
                          ++Main.npc[(int) this.ai[2]].localAI[3];
                          ++num39;
                        }
                        if (num44 == 1)
                        {
                          ++Main.npc[(int) this.ai[2]].localAI[2];
                          ++num40;
                        }
                        int emoticon1 = Utils.SelectRandom<int>(Main.rand, 38, 37, 36);
                        int emoticon2 = emoticon1;
                        if (num44 == 0)
                        {
                          switch (emoticon1)
                          {
                            case 36:
                              emoticon2 = 38;
                              break;
                            case 37:
                              emoticon2 = 36;
                              break;
                            case 38:
                              emoticon2 = 37;
                              break;
                          }
                        }
                        else if (num44 == 1)
                        {
                          switch (emoticon1)
                          {
                            case 36:
                              emoticon2 = 37;
                              break;
                            case 37:
                              emoticon2 = 38;
                              break;
                            case 38:
                              emoticon2 = 36;
                              break;
                          }
                        }
                        if (num43 == 0)
                        {
                          if (num39 >= 2)
                            emoticon1 -= 3;
                          if (num40 >= 2)
                            emoticon2 -= 3;
                        }
                        EmoteBubble.NewBubble(emoticon1, new WorldUIAnchor((Entity) this), time);
                        EmoteBubble.NewBubble(emoticon2, new WorldUIAnchor((Entity) Main.npc[(int) this.ai[2]]), time);
                      }
                      this.frame.Y = num1 * (flag3 ? num36 : num36);
                      if (this.frameCounter >= 420.0)
                      {
                        this.frameCounter = 0.0;
                        break;
                      }
                      break;
                    default:
                      if (num35 != 0)
                      {
                        this.frame.Y = 0;
                        this.frameCounter = 0.0;
                        goto case 1;
                      }
                      else
                        goto case 1;
                  }
                }
                else
                {
                  if ((double) this.velocity.X == 0.0)
                  {
                    if (this.type == 638)
                    {
                      int num46 = this.frame.Y / num1;
                      if (num46 > 7)
                        num46 = 0;
                      ++this.frameCounter;
                      if (this.frameCounter > 4.0)
                      {
                        this.frameCounter = 0.0;
                        ++num46;
                        if (num46 > 7)
                          num46 = 0;
                      }
                      this.frame.Y = num46 * num1;
                      break;
                    }
                    if (this.type == 140 || this.type == 489)
                    {
                      this.frame.Y = num1;
                      this.frameCounter = 0.0;
                      break;
                    }
                    this.frame.Y = 0;
                    this.frameCounter = 0.0;
                    break;
                  }
                  int num47 = 6;
                  if (this.type == 632)
                    num47 = 12;
                  if (this.type == 534)
                    num47 = 12;
                  if (this.type == 638)
                    num47 = 12;
                  if (this.type == 656)
                    num47 = 12;
                  if (flag1)
                    num47 = 12;
                  if (this.type == 489)
                  {
                    num47 = 8;
                    this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
                    this.frameCounter += 0.5;
                  }
                  else
                  {
                    this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
                    ++this.frameCounter;
                  }
                  if (this.type == 462)
                    num47 = 9;
                  int num48 = num1 * 2;
                  if (this.type == 638)
                    num48 = num1 * 9;
                  if (this.type == 656)
                    num48 = num1;
                  if (flag1)
                    num48 = num1;
                  if (this.frame.Y < num48)
                    this.frame.Y = num48;
                  if (this.frameCounter > (double) num47)
                  {
                    this.frame.Y += num1;
                    this.frameCounter = 0.0;
                  }
                  if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - num4)
                  {
                    this.frame.Y = num48;
                    break;
                  }
                  break;
                }
              }
            }
          }
          else
          {
            if (this.type == 462)
            {
              this.frameCounter = 0.0;
              this.frame.Y = (double) this.velocity.Y >= 0.0 ? num1 * 2 : num1;
              break;
            }
            if (flag1)
            {
              this.spriteDirection = -this.direction;
              int num49 = this.frame.Y / num1;
              if ((double) this.velocity.Y < 0.0)
              {
                if (num49 < 2 || num49 > 3)
                {
                  num49 = 2;
                  this.frameCounter = -1.0;
                }
                if (++this.frameCounter >= 4.0)
                {
                  this.frameCounter = 0.0;
                  ++num49;
                  if (num49 >= 3)
                    num49 = 3;
                }
                this.frame.Y = num49 * num1;
              }
              else if ((double) this.velocity.Y > 0.0)
              {
                if (num49 < 3 || num49 > 6)
                {
                  num49 = 3;
                  this.frameCounter = -1.0;
                }
                if (++this.frameCounter >= 4.0)
                {
                  this.frameCounter = 0.0;
                  ++num49;
                  if (num49 >= 6)
                    num49 = 6;
                }
                this.frame.Y = num49 * num1;
              }
            }
            else
            {
              this.frameCounter = 0.0;
              this.frame.Y = num1;
            }
            if (this.type == 489 || this.type == 21 || this.type == 31 || this.type == 294 || this.type == 326 || this.type == 295 || this.type == 296 || this.type == 44 || this.type == 77 || this.type == 120 || this.type == 140 || this.type == 159 || this.type == 167 || this.type == 197 || this.type == 201 || this.type == 202)
              this.frame.Y = 0;
            if (this.type == 638)
            {
              this.frame.Y = num1 * 8;
              break;
            }
            break;
          }
          break;
        case 24:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
          }
          if ((double) this.ai[1] > 0.0)
          {
            if (this.frame.Y < 4)
              this.frameCounter = 0.0;
            ++this.frameCounter;
            if (this.frameCounter <= 4.0)
            {
              this.frame.Y = num1 * 4;
              break;
            }
            if (this.frameCounter <= 8.0)
            {
              this.frame.Y = num1 * 5;
              break;
            }
            if (this.frameCounter <= 12.0)
            {
              this.frame.Y = num1 * 6;
              break;
            }
            if (this.frameCounter <= 16.0)
            {
              this.frame.Y = num1 * 7;
              break;
            }
            if (this.frameCounter <= 20.0)
            {
              this.frame.Y = num1 * 8;
              break;
            }
            this.frame.Y = num1 * 9;
            this.frameCounter = 100.0;
            break;
          }
          ++this.frameCounter;
          if (this.frameCounter <= 4.0)
          {
            this.frame.Y = 0;
            break;
          }
          if (this.frameCounter <= 8.0)
          {
            this.frame.Y = num1;
            break;
          }
          if (this.frameCounter <= 12.0)
          {
            this.frame.Y = num1 * 2;
            break;
          }
          this.frame.Y = num1 * 3;
          if (this.frameCounter >= 16.0)
          {
            this.frameCounter = 0.0;
            break;
          }
          break;
        case 29:
        case 32:
        case 45:
        case 172:
        case 281:
        case 282:
        case 283:
        case 284:
        case 285:
        case 286:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
          }
          this.frame.Y = 0;
          if ((double) this.velocity.Y != 0.0)
          {
            this.frame.Y += num1 * 2;
            break;
          }
          if ((double) this.ai[1] > 0.0)
          {
            this.frame.Y += num1;
            break;
          }
          break;
        case 34:
          ++this.frameCounter;
          if (this.frameCounter >= 4.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 42:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
          ++this.frameCounter;
          if (this.frameCounter < 2.0)
          {
            this.frame.Y = 0;
            break;
          }
          if (this.frameCounter < 4.0)
          {
            this.frame.Y = num1;
            break;
          }
          if (this.frameCounter < 6.0)
          {
            this.frame.Y = num1 * 2;
            break;
          }
          if (this.frameCounter < 8.0)
          {
            this.frame.Y = num1;
            break;
          }
          this.frameCounter = 0.0;
          break;
        case 43:
        case 56:
        case 175:
          ++this.frameCounter;
          if (this.frameCounter < 6.0)
            this.frame.Y = 0;
          else if (this.frameCounter < 12.0)
            this.frame.Y = num1;
          else if (this.frameCounter < 18.0)
            this.frame.Y = num1 * 2;
          else if (this.frameCounter < 24.0)
            this.frame.Y = num1;
          if (this.frameCounter == 23.0)
          {
            this.frameCounter = 0.0;
            break;
          }
          break;
        case 46:
        case 47:
        case 303:
        case 337:
        case 443:
        case 464:
        case 540:
        case 614:
        case 646:
        case 647:
        case 648:
        case 649:
        case 650:
        case 651:
        case 652:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              this.frameCounter = 0.0;
              break;
            }
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
            ++this.frameCounter;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          if ((double) this.velocity.Y < 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 4;
            break;
          }
          if ((double) this.velocity.Y > 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 6;
            break;
          }
          break;
        case 48:
        case 49:
        case 51:
        case 60:
        case 82:
        case 93:
        case 137:
        case 182:
        case 210:
        case 211:
        case 253:
        case 316:
        case 634:
        case 662:
        case 664:
          if (this.type == 60)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, Scale: 2f);
            Main.dust[index].noGravity = true;
          }
          if (this.type == 634 && Main.rand.Next(10) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 165, this.velocity.X, this.velocity.Y, 50);
            Main.dust[index].velocity *= 0.1f;
            Main.dust[index].noGravity = true;
          }
          if ((double) this.velocity.X > 0.0)
            this.spriteDirection = 1;
          if ((double) this.velocity.X < 0.0)
            this.spriteDirection = -1;
          this.rotation = this.velocity.X * 0.1f;
          if (this.type == 210 || this.type == 211)
          {
            ++this.frameCounter;
            this.rotation = this.velocity.X * 0.2f;
          }
          ++this.frameCounter;
          int num50 = 6;
          int num51 = Main.npcFrameCount[this.type];
          if (this.type == 49 || this.type == 51 || this.type == 60 || this.type == 634)
            --num51;
          if (this.type == 48)
            num50 = 5;
          if (this.frameCounter >= (double) num50)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * num51)
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 50:
          if ((double) this.velocity.Y != 0.0)
          {
            if (this.frame.Y < num1 * 4)
            {
              this.frame.Y = num1 * 4;
              this.frameCounter = 0.0;
            }
            if (++this.frameCounter >= 4.0)
            {
              this.frame.Y = num1 * 5;
              break;
            }
            break;
          }
          if (this.frame.Y >= num1 * 5)
          {
            this.frame.Y = num1 * 4;
            this.frameCounter = 0.0;
          }
          ++this.frameCounter;
          if (num2 > 0)
            ++this.frameCounter;
          if (num2 == 4)
            ++this.frameCounter;
          if (this.frameCounter >= 8.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
            if (this.frame.Y >= num1 * 4)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 55:
        case 57:
        case 58:
        case 102:
        case 241:
        case 465:
        case 592:
        case 607:
          this.spriteDirection = this.direction;
          ++this.frameCounter;
          if (this.wet)
          {
            if (this.frameCounter < 6.0)
            {
              this.frame.Y = 0;
              break;
            }
            if (this.frameCounter < 12.0)
            {
              this.frame.Y = num1;
              break;
            }
            if (this.frameCounter < 18.0)
            {
              this.frame.Y = num1 * 2;
              break;
            }
            if (this.frameCounter < 24.0)
            {
              this.frame.Y = num1 * 3;
              break;
            }
            this.frameCounter = 0.0;
            break;
          }
          if (this.frameCounter < 6.0)
          {
            this.frame.Y = num1 * 4;
            break;
          }
          if (this.frameCounter < 12.0)
          {
            this.frame.Y = num1 * 5;
            break;
          }
          this.frameCounter = 0.0;
          break;
        case 61:
          this.spriteDirection = this.direction;
          this.rotation = this.velocity.X * 0.1f;
          if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          {
            this.frame.Y = 0;
            this.frameCounter = 0.0;
            break;
          }
          int num52 = 5;
          int num53 = 5;
          ++this.frameCounter;
          if (this.frameCounter >= (double) (num52 * num53))
            this.frameCounter = 0.0;
          this.frame.Y = ((int) (this.frameCounter / (double) num52) + 1) * num1;
          break;
        case 62:
        case 66:
          this.spriteDirection = this.direction;
          this.rotation = this.velocity.X * 0.1f;
          int num54 = 5;
          int num55 = 5;
          ++this.frameCounter;
          if (this.frameCounter >= (double) (num54 * num55))
            this.frameCounter = 0.0;
          this.frame.Y = (int) (this.frameCounter / (double) num54) * num1;
          break;
        case 63:
        case 64:
        case 103:
        case 242:
        case 256:
          if ((this.type == 63 || this.type == 64 || this.type == 103 || this.type == 242) && (double) this.ai[1] == 1.0)
          {
            ++this.frameCounter;
            if (this.frameCounter > 4.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
            }
            if (this.frame.Y > num1 * 6)
              this.frame.Y = num1 * 4;
            if (this.frame.Y >= num1 * 4)
              return;
            this.frame.Y = num1 * 4;
            return;
          }
          ++this.frameCounter;
          if (this.frameCounter < 6.0)
          {
            this.frame.Y = 0;
            break;
          }
          if (this.frameCounter < 12.0)
          {
            this.frame.Y = num1;
            break;
          }
          if (this.frameCounter < 18.0)
          {
            this.frame.Y = num1 * 2;
            break;
          }
          this.frame.Y = num1 * 3;
          if (this.frameCounter >= 23.0)
          {
            this.frameCounter = 0.0;
            break;
          }
          break;
        case 65:
          this.spriteDirection = this.direction;
          ++this.frameCounter;
          if (this.wet && this.type == 65)
          {
            if (this.frameCounter < 6.0)
            {
              this.frame.Y = 0;
              break;
            }
            if (this.frameCounter < 12.0)
            {
              this.frame.Y = num1;
              break;
            }
            if (this.frameCounter < 18.0)
            {
              this.frame.Y = num1 * 2;
              break;
            }
            if (this.frameCounter < 24.0)
            {
              this.frame.Y = num1 * 3;
              break;
            }
            this.frameCounter = 0.0;
            break;
          }
          break;
        case 67:
        case 217:
        case 218:
        case 219:
          if ((double) this.velocity.Y == 0.0)
            this.spriteDirection = this.direction;
          ++this.frameCounter;
          if (this.frameCounter >= 6.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 69:
          if ((double) this.ai[0] < 190.0)
          {
            ++this.frameCounter;
            if (this.frameCounter >= 6.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 1)
              {
                this.frame.Y = 0;
                break;
              }
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1 * (Main.npcFrameCount[this.type] - 1);
          break;
        case 72:
          ++this.frameCounter;
          if (this.frameCounter >= 3.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 74:
        case 297:
        case 298:
        case 442:
          this.spriteDirection = this.direction;
          this.rotation = this.velocity.X * 0.1f;
          if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          {
            this.frame.Y = num1 * 4;
            this.frameCounter = 0.0;
            break;
          }
          int num56 = Main.npcFrameCount[this.type] - 1;
          ++this.frameCounter;
          if (this.frameCounter >= 4.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * num56)
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 75:
          this.spriteDirection = (double) this.velocity.X <= 0.0 ? -1 : 1;
          this.rotation = this.velocity.X * 0.1f;
          ++this.frameCounter;
          if (this.frameCounter >= 4.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 83:
        case 84:
        case 179:
          if ((double) this.ai[0] == 2.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          ++this.frameCounter;
          if (this.frameCounter >= 4.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 85:
        case 341:
        case 629:
          if ((double) this.ai[0] == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
          }
          else
          {
            int num57 = 3;
            if ((double) this.velocity.Y == 0.0)
              --this.frameCounter;
            else
              ++this.frameCounter;
            if (this.frameCounter < 0.0)
              this.frameCounter = 0.0;
            if (this.frameCounter > (double) (num57 * 4))
              this.frameCounter = (double) (num57 * 4);
            if (this.frameCounter < (double) num57)
              this.frame.Y = num1;
            else if (this.frameCounter < (double) (num57 * 2))
              this.frame.Y = num1 * 2;
            else if (this.frameCounter < (double) (num57 * 3))
              this.frame.Y = num1 * 3;
            else if (this.frameCounter < (double) (num57 * 4))
              this.frame.Y = num1 * 4;
            else if (this.frameCounter < (double) (num57 * 5))
              this.frame.Y = num1 * 5;
            else if (this.frameCounter < (double) (num57 * 6))
              this.frame.Y = num1 * 4;
            else if (this.frameCounter < (double) (num57 * 7))
            {
              this.frame.Y = num1 * 3;
            }
            else
            {
              this.frame.Y = num1 * 2;
              if (this.frameCounter >= (double) (num57 * 8))
                this.frameCounter = (double) num57;
            }
          }
          if ((double) this.ai[3] == 2.0 || this.IsABestiaryIconDummy && this.type == 85)
          {
            this.frame.Y += num1 * 6;
            break;
          }
          if ((double) this.ai[3] == 3.0)
          {
            this.frame.Y += num1 * 12;
            break;
          }
          break;
        case 86:
          if ((double) this.velocity.Y == 0.0 || this.wet)
            this.spriteDirection = (double) this.velocity.X >= -2.0 ? ((double) this.velocity.X <= 2.0 ? this.direction : 1) : -1;
          if ((double) this.velocity.Y != 0.0)
          {
            this.frame.Y = num1 * 15;
            this.frameCounter = 0.0;
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          if ((double) Math.Abs(this.velocity.X) < 3.0)
          {
            this.frameCounter += (double) Math.Abs(this.velocity.X);
            if (this.frameCounter >= 6.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              if (this.frame.Y / num1 >= 9)
                this.frame.Y = num1;
              if (this.frame.Y / num1 <= 0)
              {
                this.frame.Y = num1;
                break;
              }
              break;
            }
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter >= 10.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 >= 15)
              this.frame.Y = num1 * 9;
            if (this.frame.Y / num1 <= 8)
            {
              this.frame.Y = num1 * 9;
              break;
            }
            break;
          }
          break;
        case 94:
          ++this.frameCounter;
          if (this.frameCounter < 6.0)
          {
            this.frame.Y = 0;
            break;
          }
          if (this.frameCounter < 12.0)
          {
            this.frame.Y = num1;
            break;
          }
          if (this.frameCounter < 18.0)
          {
            this.frame.Y = num1 * 2;
            break;
          }
          this.frame.Y = num1;
          if (this.frameCounter >= 23.0)
          {
            this.frameCounter = 0.0;
            break;
          }
          break;
        case 101:
          ++this.frameCounter;
          if (this.frameCounter > 6.0)
          {
            this.frame.Y += num1 * 2;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y > num1 * 2)
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 109:
          if ((double) this.velocity.Y == 0.0 && ((double) this.velocity.X <= 0.0 && this.direction < 0 || (double) this.velocity.X >= 0.0 && this.direction > 0))
            this.spriteDirection = this.direction;
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter >= 7.0)
          {
            this.frameCounter -= 7.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 110:
        case 214:
        case 215:
        case 216:
        case 293:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.ai[2] > 0.0)
            {
              this.spriteDirection = this.direction;
              this.frame.Y = num1 * (int) this.ai[2];
              this.frameCounter = 0.0;
              break;
            }
            if (this.frame.Y < num1 * 6)
              this.frame.Y = num1 * 6;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
            this.frameCounter += (double) this.velocity.X;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = num1 * 6;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = 0;
          break;
        case 111:
        case 291:
        case 292:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.ai[2] > 0.0)
            {
              this.spriteDirection = this.direction;
              this.frame.Y = num1 * ((int) this.ai[2] - 1);
              this.frameCounter = 0.0;
              break;
            }
            if (this.frame.Y < num1 * 7)
              this.frame.Y = num1 * 7;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
            this.frameCounter += (double) this.velocity.X * 1.2999999523162842;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = num1 * 7;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1 * 6;
          break;
        case 113:
        case 114:
          if ((double) this.ai[2] == 0.0)
          {
            ++this.frameCounter;
            if (this.frameCounter >= 12.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          this.frame.Y = 0;
          this.frameCounter = -60.0;
          break;
        case 115:
          ++this.frameCounter;
          if (this.frameCounter < 3.0)
            this.frame.Y = 0;
          else if (this.frameCounter < 6.0)
            this.frame.Y = num1;
          else if (this.frameCounter < 12.0)
            this.frame.Y = num1 * 2;
          else if (this.frameCounter < 15.0)
            this.frame.Y = num1;
          if (this.frameCounter == 15.0)
          {
            this.frameCounter = 0.0;
            break;
          }
          break;
        case 116:
          if ((double) this.velocity.X > 0.0)
          {
            this.spriteDirection = 1;
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
          }
          if ((double) this.velocity.X < 0.0)
          {
            this.spriteDirection = -1;
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 3.14f;
          }
          ++this.frameCounter;
          if (this.frameCounter >= 5.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 122:
          this.spriteDirection = this.direction;
          this.rotation = this.velocity.X * 0.05f;
          if ((double) this.ai[3] > 0.0)
          {
            int num58 = (int) ((double) this.ai[3] / 8.0);
            this.frameCounter = 0.0;
            this.frame.Y = (num58 + 3) * num1;
            break;
          }
          ++this.frameCounter;
          if (this.frameCounter >= 8.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * 3)
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case (int) sbyte.MaxValue:
          if (NPC.IsMechQueenUp)
          {
            if ((double) this.ai[1] == 0.0)
            {
              ++this.frameCounter;
              if (this.frameCounter >= 12.0)
              {
                this.frameCounter = 0.0;
                this.frame.Y += num1;
                if (this.frame.Y / num1 >= 5)
                {
                  this.frame.Y = num1 * 3;
                  break;
                }
                break;
              }
              break;
            }
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 5;
            break;
          }
          if ((double) this.ai[1] == 0.0)
          {
            ++this.frameCounter;
            if (this.frameCounter >= 12.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              if (this.frame.Y / num1 >= 2)
              {
                this.frame.Y = 0;
                break;
              }
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1 * 2;
          break;
        case 129:
          if ((double) this.velocity.Y == 0.0)
            this.spriteDirection = this.direction;
          ++this.frameCounter;
          if (this.frameCounter >= 2.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 130:
          if ((double) this.velocity.Y == 0.0)
            this.spriteDirection = this.direction;
          ++this.frameCounter;
          if (this.frameCounter >= 8.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 133:
          if ((double) this.velocity.X > 0.0)
          {
            this.spriteDirection = 1;
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
          }
          if ((double) this.velocity.X < 0.0)
          {
            this.spriteDirection = -1;
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 3.14f;
          }
          ++this.frameCounter;
          this.frame.Y = this.frameCounter < 8.0 ? 0 : num1;
          if (this.frameCounter >= 16.0)
          {
            this.frame.Y = 0;
            this.frameCounter = 0.0;
          }
          if ((double) this.life < (double) this.lifeMax * 0.5)
          {
            this.frame.Y += num1 * 2;
            break;
          }
          break;
        case 135:
          this.frame.Y = (double) this.ai[2] != 0.0 ? num1 : 0;
          break;
        case 141:
          this.spriteDirection = this.direction;
          if ((double) this.velocity.Y != 0.0)
          {
            this.frame.Y = num1 * 2;
            break;
          }
          ++this.frameCounter;
          if (this.frameCounter >= 8.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y > num1)
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 143:
          if ((double) this.velocity.Y > 0.0)
            ++this.frameCounter;
          else if ((double) this.velocity.Y < 0.0)
            --this.frameCounter;
          if (this.frameCounter < 6.0)
            this.frame.Y = num1;
          else if (this.frameCounter < 12.0)
            this.frame.Y = num1 * 2;
          else if (this.frameCounter < 18.0)
            this.frame.Y = num1 * 3;
          if (this.frameCounter < 0.0)
            this.frameCounter = 0.0;
          if (this.frameCounter > 17.0)
          {
            this.frameCounter = 17.0;
            break;
          }
          break;
        case 144:
          if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          {
            ++this.localAI[3];
            if ((double) this.localAI[3] < 6.0)
              this.frame.Y = 0;
            else if ((double) this.localAI[3] < 12.0)
              this.frame.Y = num1;
            if ((double) this.localAI[3] >= 11.0)
            {
              this.localAI[3] = 0.0f;
              break;
            }
            break;
          }
          if ((double) this.velocity.Y > 0.0)
            ++this.frameCounter;
          else if ((double) this.velocity.Y < 0.0)
            --this.frameCounter;
          if (this.frameCounter < 6.0)
            this.frame.Y = num1 * 2;
          else if (this.frameCounter < 12.0)
            this.frame.Y = num1 * 3;
          else if (this.frameCounter < 18.0)
            this.frame.Y = num1 * 4;
          if (this.frameCounter < 0.0)
            this.frameCounter = 0.0;
          if (this.frameCounter > 17.0)
          {
            this.frameCounter = 17.0;
            break;
          }
          break;
        case 145:
          if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          {
            if ((double) this.ai[2] < 4.0)
            {
              this.frame.Y = 0;
              break;
            }
            if ((double) this.ai[2] < 8.0)
            {
              this.frame.Y = num1;
              break;
            }
            if ((double) this.ai[2] < 12.0)
            {
              this.frame.Y = num1 * 2;
              break;
            }
            if ((double) this.ai[2] < 16.0)
            {
              this.frame.Y = num1 * 3;
              break;
            }
            break;
          }
          if ((double) this.velocity.Y > 0.0)
            ++this.frameCounter;
          else if ((double) this.velocity.Y < 0.0)
            --this.frameCounter;
          if (this.frameCounter < 6.0)
            this.frame.Y = num1 * 4;
          else if (this.frameCounter < 12.0)
            this.frame.Y = num1 * 5;
          else if (this.frameCounter < 18.0)
            this.frame.Y = num1 * 6;
          if (this.frameCounter < 0.0)
            this.frameCounter = 0.0;
          if (this.frameCounter > 17.0)
          {
            this.frameCounter = 17.0;
            break;
          }
          break;
        case 148:
        case 149:
        case 168:
        case 470:
          int num59 = 0;
          if ((double) this.localAI[0] == 2.0)
            num59 = 3;
          if ((double) this.localAI[0] == 3.0)
            num59 = 6;
          if ((double) this.localAI[0] == 4.0)
            num59 = 9;
          int num60 = num59 * num1;
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = num60;
              this.frameCounter = 0.0;
              break;
            }
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
            if (this.frameCounter < 6.0)
            {
              this.frame.Y = num60;
              break;
            }
            if (this.frameCounter < 12.0)
            {
              this.frame.Y = num1 + num60;
              break;
            }
            if (this.frameCounter < 15.0)
            {
              this.frame.Y = num1 * 2 + num60;
              break;
            }
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 2 + num60;
            break;
          }
          if ((double) this.velocity.Y < 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 2 + num60;
            break;
          }
          if ((double) this.velocity.Y > 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 2 + num60;
            break;
          }
          break;
        case 150:
        case 151:
        case 152:
        case 158:
        case 226:
          if (this.type == 151)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, Scale: 2f);
            Main.dust[index].noGravity = true;
          }
          if (this.type == 150 && Main.rand.Next(10) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 90, Scale: 1.5f);
            Main.dust[index].noGravity = true;
            Main.dust[index].velocity *= 0.2f;
            Main.dust[index].noLight = true;
          }
          if ((double) this.velocity.X > 0.0)
            this.spriteDirection = 1;
          if ((double) this.velocity.X < 0.0)
            this.spriteDirection = -1;
          this.rotation = this.velocity.X * 0.1f;
          ++this.frameCounter;
          if (this.frameCounter >= 6.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * 4)
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 155:
          int num61 = this.frame.Y / num1;
          if (this.IsABestiaryIconDummy && num61 < 3)
            num61 = 3;
          if ((double) this.velocity.Y < 0.0)
            num61 = 10;
          else if ((double) this.velocity.Y > 0.0)
            num61 = 11;
          else if ((double) this.velocity.X == 0.0)
          {
            num61 = 0;
            this.frameCounter = 0.0;
          }
          else if ((this.direction > 0 && (double) this.velocity.X < 0.0 || this.direction < 0 && (double) this.velocity.X > 0.0) && (double) Math.Abs(this.velocity.X) < 4.0)
          {
            this.spriteDirection = this.direction;
            if (num61 > 2)
            {
              num61 = 0;
              this.frameCounter = 0.0;
            }
            if (num61 < 2)
            {
              ++this.frameCounter;
              if (this.frameCounter > 5.0)
              {
                this.frameCounter = 0.0;
                ++num61;
              }
            }
            else
              this.frameCounter = 0.0;
          }
          else
          {
            this.spriteDirection = (double) this.velocity.X < 0.0 ? -1 : 1;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 0.40000000596046448;
            if (num61 == 10 || num61 == 11)
            {
              num61 = 12;
              this.frameCounter = 0.0;
            }
            else if (this.frameCounter > 8.0)
            {
              this.frameCounter -= 8.0;
              ++num61;
              if (num61 > 9)
                num61 = 3;
            }
          }
          this.frame.Y = num61 * num1;
          break;
        case 156:
          this.spriteDirection = this.direction;
          this.rotation = this.velocity.X * 0.1f;
          ++this.frameCounter;
          if (this.frameCounter >= 20.0)
            this.frameCounter = 0.0;
          this.frame.Y = (int) this.frameCounter / 4 * num1;
          break;
        case 157:
          this.spriteDirection = this.direction;
          ++this.frameCounter;
          if (!this.wet)
            ++this.frameCounter;
          int num62 = 5;
          if (this.frameCounter < (double) num62)
          {
            this.frame.Y = 0;
            break;
          }
          if (this.frameCounter < (double) (num62 * 2))
          {
            this.frame.Y = num1;
            break;
          }
          if (this.frameCounter < (double) (num62 * 3))
          {
            this.frame.Y = num1 * 2;
            break;
          }
          if (this.frameCounter < (double) (num62 * 4))
          {
            this.frame.Y = num1;
            break;
          }
          if (this.frameCounter < (double) (num62 * 5))
          {
            this.frame.Y = num1 * 3;
            break;
          }
          if (this.frameCounter < (double) (num62 * 6))
          {
            this.frame.Y = num1 * 4;
            break;
          }
          if (this.frameCounter < (double) (num62 * 7))
          {
            this.frame.Y = num1 * 5;
            break;
          }
          if (this.frameCounter < (double) (num62 * 8))
          {
            this.frame.Y = num1 * 4;
            break;
          }
          this.frameCounter = 0.0;
          break;
        case 163:
          if ((double) this.velocity.Y != 0.0)
          {
            this.frameCounter = -12.0;
            this.frame.Y = (double) this.velocity.Y >= 0.0 ? num1 * 6 : num1 * 5;
            break;
          }
          this.spriteDirection = this.direction;
          this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.1000000238418579;
          if (this.frameCounter < -6.0)
          {
            this.frame.Y = num1 * 6;
            break;
          }
          if (this.frameCounter < 0.0)
          {
            this.frame.Y = num1 * 7;
            break;
          }
          if (this.frameCounter < 6.0)
          {
            this.frame.Y = num1;
            break;
          }
          if (this.frameCounter < 12.0)
          {
            this.frame.Y = num1 * 2;
            break;
          }
          if (this.frameCounter < 18.0)
          {
            this.frame.Y = num1 * 3;
            break;
          }
          this.frameCounter = 0.0;
          break;
        case 164:
        case 236:
        case 239:
        case 530:
          if ((double) this.velocity.Y != 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = (double) this.velocity.Y >= 0.0 ? 0 : num1 * 4;
            break;
          }
          this.spriteDirection = this.direction;
          this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.1000000238418579;
          while (this.frameCounter >= 6.0)
          {
            this.frameCounter -= 6.0;
            this.frame.Y += num1;
            if (this.frame.Y > num1 * 3)
              this.frame.Y = 0;
          }
          break;
        case 165:
        case 237:
        case 238:
        case 240:
        case 531:
          float num63 = 0.5f;
          if (this.type == 531)
            num63 = 0.4f;
          this.frameCounter += ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * (double) num63;
          if (this.frameCounter < 6.0)
          {
            this.frame.Y = 0;
            break;
          }
          if (this.frameCounter < 12.0)
          {
            this.frame.Y = num1;
            break;
          }
          if (this.frameCounter < 18.0)
          {
            this.frame.Y = num1 * 2;
            break;
          }
          if (this.frameCounter < 24.0)
          {
            this.frame.Y = num1 * 3;
            break;
          }
          this.frameCounter = 0.0;
          break;
        case 166:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.velocity.X == 0.0)
            {
              this.frameCounter += 2.0;
              if (this.frameCounter > 7.0)
              {
                this.frame.Y += num1;
                this.frameCounter = 0.0;
              }
              if (this.frame.Y / num1 > 5)
              {
                this.frame.Y = 0;
                break;
              }
              break;
            }
            this.frameCounter += (double) Math.Abs(this.velocity.X);
            ++this.frameCounter;
            if (this.frameCounter > 9.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 > 12)
              this.frame.Y = num1 * 7;
            if (this.frame.Y / num1 < 7)
            {
              this.frame.Y = num1 * 7;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1 * 6;
          break;
        case 170:
        case 171:
        case 180:
          this.spriteDirection = this.direction;
          ++this.frameCounter;
          if (this.frameCounter >= 4.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * 14)
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 174:
          if (this.IsABestiaryIconDummy)
          {
            ++this.frameCounter;
            if (this.frameCounter > 5.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
            }
            if (this.frame.Y > num1 * 4)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          this.frame.Y = (double) this.velocity.Y != 0.0 ? ((double) this.velocity.Y >= -1.5 ? ((double) this.velocity.Y <= 1.5 ? num1 * 2 : num1 * 3) : num1) : 0;
          break;
        case 176:
          ++this.frameCounter;
          if (this.frameCounter > 4.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y > num1)
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 177:
          if ((double) this.velocity.Y == 0.0)
          {
            ++this.frameCounter;
            if (this.frameCounter >= 10.0)
            {
              this.frameCounter = 30.0;
              this.frame.Y = 0;
              break;
            }
            this.frame.Y = num1;
            break;
          }
          if ((double) this.velocity.Y < 0.0)
          {
            this.frame.Y = num1 * 2;
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1 * 2;
          break;
        case 195:
          this.frame.Y = (double) this.ai[0] >= 3.0 ? ((double) this.ai[0] >= 6.0 ? ((double) this.ai[0] >= 9.0 ? ((double) this.ai[0] >= 12.0 ? ((double) this.ai[0] >= 15.0 ? num1 * 5 : num1 * 4) : num1 * 3) : num1 * 2) : num1) : 0;
          break;
        case 199:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
          }
          if (this.frame.Y < num1 * 3)
          {
            ++this.frameCounter;
            if (this.frameCounter > 6.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              break;
            }
            break;
          }
          if ((double) this.velocity.Y == 0.0)
          {
            this.frameCounter += (double) Math.Abs(this.velocity.X);
            if (this.frameCounter > 12.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              if (this.frame.Y > num1 * 7)
              {
                this.frame.Y = num1 * 3;
                break;
              }
              break;
            }
            break;
          }
          break;
        case 205:
          this.frameCounter += 0.5;
          if (this.frameCounter < 2.0)
          {
            this.frame.Y = 0;
            break;
          }
          if (this.frameCounter < 4.0)
          {
            this.frame.Y = num1;
            break;
          }
          if (this.frameCounter < 6.0)
          {
            this.frame.Y = num1 * 2;
            break;
          }
          if (this.frameCounter < 8.0)
          {
            this.frame.Y = num1;
            break;
          }
          this.frameCounter = 0.0;
          break;
        case 206:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.ai[2] > 0.0)
            {
              this.spriteDirection = this.direction;
              this.frame.Y = num1 * (int) this.ai[2];
              this.frameCounter = 0.0;
              break;
            }
            if (this.frame.Y < num1 * 6)
              this.frame.Y = num1 * 6;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
            this.frameCounter += (double) this.velocity.X;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = num1 * 6;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = 0;
          break;
        case 220:
          if ((double) this.velocity.Y == 0.0)
            this.spriteDirection = this.direction;
          ++this.frameCounter;
          if (this.frameCounter >= 10.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 221:
          if ((double) this.localAI[2] == 1.0)
          {
            if ((double) this.localAI[0] == 1.0)
            {
              this.frame.Y = 0;
              this.localAI[0] = 0.0f;
            }
            ++this.frameCounter;
            if (this.frameCounter >= 8.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
            {
              this.frame.Y = num1 * Main.npcFrameCount[this.type] - num1;
              break;
            }
            break;
          }
          ++this.frameCounter;
          if (this.frameCounter >= 13.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 222:
          ++this.frameCounter;
          if ((double) this.localAI[0] == 1.0)
          {
            if (this.frameCounter > 4.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y >= num1 * 4)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          if (this.frameCounter > 4.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y < num1 * 4)
            this.frame.Y = num1 * 4;
          if (this.frame.Y >= num1 * 12)
          {
            this.frame.Y = num1 * 4;
            break;
          }
          break;
        case 224:
        case 587:
          if ((double) this.velocity.X > 0.0)
          {
            this.spriteDirection = 1;
            this.rotation = this.velocity.Y * 0.2f;
          }
          if ((double) this.velocity.X < 0.0)
          {
            this.spriteDirection = -1;
            this.rotation = (float) (-(double) this.velocity.Y * 0.20000000298023224);
          }
          ++this.frameCounter;
          if (this.frameCounter >= 6.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * 4)
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 230:
          if ((double) this.velocity.Y == 0.0)
          {
            this.rotation = 0.0f;
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              this.frameCounter = 0.0;
              break;
            }
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
            ++this.frameCounter;
            if (this.frameCounter > 10.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = 0;
          if ((double) this.velocity.Y > 4.0)
          {
            this.rotation -= this.velocity.Y * 0.01f;
            break;
          }
          break;
        case 243:
          if (this.frameCounter < 0.0)
          {
            if ((double) this.velocity.Y == 0.0)
            {
              ++this.frameCounter;
              if (this.frameCounter < -12.0)
              {
                if (this.frame.Y > num1 * 9)
                {
                  this.frame.Y = num1 * 11;
                  break;
                }
                break;
              }
              if (this.frameCounter < -6.0)
              {
                if (this.frame.Y > num1 * 9)
                {
                  this.frame.Y = num1 * 12;
                  break;
                }
                break;
              }
              if (this.frameCounter < 0.0)
              {
                this.frameCounter = 0.0;
                if (this.frame.Y > num1 * 9)
                {
                  this.frame.Y = num1 * 11;
                  break;
                }
                break;
              }
              break;
            }
            this.frameCounter = -18.0;
            this.frame.Y = (double) this.velocity.Y >= 0.0 ? num1 * 13 : num1 * 14;
            break;
          }
          this.spriteDirection = this.direction;
          this.frameCounter += (double) Math.Abs(this.velocity.X * 1.1f);
          if (this.frameCounter >= 6.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y > num1 * 9)
              this.frame.Y = 0;
          }
          if ((double) this.velocity.Y < -2.0 || (double) this.velocity.Y > 5.0)
          {
            this.frameCounter = -18.0;
            break;
          }
          break;
        case 244:
          ++this.frameCounter;
          if (num2 > 0)
            ++this.frameCounter;
          if (num2 == 4)
            ++this.frameCounter;
          if (this.frameCounter >= 8.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 245:
          if ((double) this.ai[0] == 0.0)
          {
            this.frame.Y = (double) this.ai[1] >= -16.0 ? ((double) this.ai[1] >= -12.0 ? ((double) this.ai[1] >= -8.0 ? ((double) this.ai[1] >= -4.0 ? ((double) this.ai[1] >= 0.0 ? 0 : num1 * 4) : num1 * 3) : num1 * 2) : num1) : 0;
            break;
          }
          if ((double) this.ai[0] == 1.0)
          {
            this.frame.Y = 1;
            break;
          }
          break;
        case 246:
          if ((double) this.ai[0] == 0.0)
          {
            this.frame.Y = (double) this.localAI[0] != 1.0 ? 0 : num1;
            break;
          }
          if ((double) this.ai[0] == 1.0)
          {
            this.frame.Y = (double) this.localAI[0] != 1.0 ? 0 : num1;
            if ((double) this.localAI[1] == -1.0)
              this.frame.Y += num1 * 4;
            if ((double) this.localAI[1] == 1.0)
            {
              this.frame.Y += num1 * 2;
              break;
            }
            break;
          }
          break;
        case 249:
          this.frame.Y = (double) this.localAI[0] != 1.0 ? 0 : num1;
          if (++this.frameCounter >= 16.0)
          {
            this.frameCounter = 0.0;
            break;
          }
          break;
        case 250:
        case 264:
        case 268:
          ++this.frameCounter;
          if (this.frameCounter >= 6.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 252:
        case 301:
          if (this.type == 301)
          {
            if ((double) this.velocity.Y == 0.0)
            {
              this.spriteDirection = -this.direction;
            }
            else
            {
              if ((double) this.velocity.X > 0.5)
                this.spriteDirection = -1;
              if ((double) this.velocity.X < -0.5)
                this.spriteDirection = 1;
            }
          }
          else
          {
            if ((double) this.velocity.X > 0.5)
              this.spriteDirection = 1;
            if ((double) this.velocity.X < -0.5)
              this.spriteDirection = -1;
          }
          this.rotation = this.velocity.X * 0.1f;
          if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          {
            this.frame.Y = 0;
            this.frameCounter = 0.0;
            break;
          }
          ++this.frameCounter;
          if (this.frameCounter > 4.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
          }
          if (this.frame.Y > num1 * 4 || this.frame.Y == 0)
          {
            this.frame.Y = num1;
            break;
          }
          break;
        case 257:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
          }
          if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 || this.direction == 1 && (double) this.velocity.X < 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 4;
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter < 8.0)
          {
            this.frame.Y = 0;
            break;
          }
          if (this.frameCounter < 16.0)
          {
            this.frame.Y = num1;
            break;
          }
          if (this.frameCounter < 24.0)
          {
            this.frame.Y = num1 * 2;
            break;
          }
          if (this.frameCounter < 32.0)
          {
            this.frame.Y = num1 * 3;
            break;
          }
          this.frameCounter = 0.0;
          break;
        case 258:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
          }
          if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 || this.direction == 1 && (double) this.velocity.X < 0.0)
          {
            ++this.frameCounter;
            if (this.frameCounter > 1.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y > num1 * 5 || this.frame.Y < num1 * 3)
            {
              this.frame.Y = num1 * 3;
              break;
            }
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter < 8.0)
          {
            this.frame.Y = 0;
            break;
          }
          if (this.frameCounter < 16.0)
          {
            this.frame.Y = num1;
            break;
          }
          if (this.frameCounter < 24.0)
          {
            this.frame.Y = num1 * 2;
            break;
          }
          this.frameCounter = 0.0;
          break;
        case 262:
          ++this.frameCounter;
          if (this.frameCounter > 6.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
          }
          if (this.life > this.lifeMax / 2)
          {
            if (this.frame.Y > num1 * 3)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          if (this.frame.Y < num1 * 4)
            this.frame.Y = num1 * 4;
          if (this.frame.Y > num1 * 7)
          {
            this.frame.Y = num1 * 4;
            break;
          }
          break;
        case 263:
          if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          {
            if (this.frame.Y > 0)
            {
              ++this.frameCounter;
              if (this.frameCounter > 4.0)
              {
                this.frameCounter = 0.0;
                this.frame.Y -= num1;
                break;
              }
              break;
            }
            break;
          }
          if (this.frame.Y < 2)
          {
            ++this.frameCounter;
            if (this.frameCounter > 4.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              break;
            }
            break;
          }
          break;
        case 266:
          ++this.frameCounter;
          if (this.frameCounter > 6.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
          }
          if ((double) this.ai[0] >= 0.0)
          {
            if (this.frame.Y > num1 * 3)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          if (this.frame.Y < num1 * 4)
            this.frame.Y = num1 * 4;
          if (this.frame.Y > num1 * 7)
          {
            this.frame.Y = num1 * 4;
            break;
          }
          break;
        case 269:
        case 270:
        case 271:
        case 272:
        case 273:
        case 274:
        case 275:
        case 276:
        case 277:
        case 278:
        case 279:
        case 280:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.velocity.X == 0.0)
            {
              if (this.type == 140)
              {
                this.frame.Y = num1;
                this.frameCounter = 0.0;
                break;
              }
              this.frame.Y = 0;
              this.frameCounter = 0.0;
              break;
            }
            if (this.frame.Y < num1 * 2)
              this.frame.Y = num1 * 2;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
            ++this.frameCounter;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = 0;
          break;
        case 288:
          ++this.frameCounter;
          if (this.frameCounter >= 6.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 289:
          ++this.frameCounter;
          if (this.frameCounter < 4.0)
            this.frame.Y = 0;
          else if (this.frameCounter < 8.0)
          {
            this.frame.Y = num1;
          }
          else
          {
            this.frame.Y = num1 * 2;
            this.frameCounter = 0.0;
            if (this.frameCounter > 12.0)
              this.frameCounter = 0.0;
          }
          if ((double) this.ai[3] == 1.0)
          {
            this.frame.Y += num1 * 3;
            break;
          }
          break;
        case 290:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.ai[2] > 0.0)
            {
              this.frame.Y = (double) this.ai[1] >= 10.0 ? ((double) this.ai[1] >= 20.0 ? num1 * 9 : num1 * 10) : num1 * 11;
              break;
            }
            if ((double) this.velocity.X == 0.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y = 0;
              break;
            }
            if (this.frame.Y < num1 * 2)
              this.frame.Y = num1 * 2;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y > num1 * 8)
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1;
          break;
        case 299:
        case 538:
        case 539:
        case 639:
        case 640:
        case 641:
        case 642:
        case 643:
        case 644:
        case 645:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              this.frameCounter = 0.0;
              break;
            }
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 0.5;
            ++this.frameCounter;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 1)
            {
              this.frame.Y = num1;
              break;
            }
            break;
          }
          if ((double) this.velocity.Y < 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 2;
            break;
          }
          if ((double) this.velocity.Y > 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 4;
            break;
          }
          break;
        case 300:
        case 447:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.velocity.X == 0.0)
            {
              ++this.frameCounter;
              if (this.frameCounter > 8.0)
              {
                this.frame.Y += num1;
                this.frameCounter = 0.0;
              }
              if (this.frame.Y / num1 > 1)
              {
                this.frame.Y = 0;
                break;
              }
              break;
            }
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 0.5;
            ++this.frameCounter;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X) * 0.5;
          ++this.frameCounter;
          if (this.frameCounter > 6.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
          {
            this.frame.Y = num1 * 2;
            break;
          }
          break;
        case 305:
        case 306:
        case 307:
        case 308:
        case 309:
          if ((double) this.velocity.Y == 0.0)
            this.spriteDirection = this.direction;
          this.frame.Y = (double) this.velocity.Y >= -3.0 ? ((double) this.velocity.Y > 0.0 ? ((double) this.velocity.Y >= 2.0 ? num1 : num1 * 3) : 0) : num1 * 5;
          this.rotation = this.velocity.X * 0.1f;
          break;
        case 315:
          if ((double) this.velocity.Y == 0.0 || this.wet)
            this.spriteDirection = (double) this.velocity.X >= -1.0 ? ((double) this.velocity.X <= 1.0 ? this.direction : 1) : -1;
          if ((double) this.velocity.Y != 0.0)
          {
            this.frame.Y = 0;
            this.frameCounter = 0.0;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter >= 8.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 > 10)
            {
              this.frame.Y = num1;
              break;
            }
            break;
          }
          break;
        case 325:
          if ((double) this.velocity.X == 0.0)
          {
            ++this.frameCounter;
            if (this.frameCounter > 4.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
            }
            if (this.frame.Y > num1 * 4)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          ++this.frameCounter;
          if (this.frameCounter > 4.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
          }
          if (this.frame.Y < num1 * 5)
            this.frame.Y = num1 * 5;
          if (this.frame.Y > num1 * 9)
          {
            this.frame.Y = num1 * 5;
            break;
          }
          break;
        case 327:
          if ((double) this.ai[3] == 0.0)
          {
            if (this.frame.Y > num1 * 5)
              ++this.frameCounter;
            else if (this.frame.Y > 0)
              --this.frameCounter;
          }
          else if ((double) this.ai[3] == 1.0)
          {
            if (this.frame.Y > num1 * 10)
              ++this.frameCounter;
            else if (this.frame.Y > num1 * 4)
              --this.frameCounter;
            else if (this.frame.Y < num1 * 4)
              ++this.frameCounter;
          }
          else if ((double) this.ai[3] == 2.0)
          {
            if (this.frame.Y < num1 * 2)
              --this.frameCounter;
            else if (this.frame.Y > num1 * 8)
              --this.frameCounter;
            else if (this.frame.Y < num1 * 8)
              ++this.frameCounter;
          }
          if (this.frameCounter > 6.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y > num1 * 11)
              this.frame.Y = 0;
          }
          if (this.frameCounter < 0.0)
          {
            this.frameCounter = 6.0;
            this.frame.Y -= num1;
            if (this.frame.Y < 0)
            {
              this.frame.Y = num1 * 11;
              break;
            }
            break;
          }
          break;
        case 329:
          if ((double) this.velocity.Y > 0.0)
          {
            this.frame.Y = num1 * 3;
            this.frameCounter = 0.0;
            break;
          }
          if ((double) this.velocity.Y < 0.0)
          {
            this.frame.Y = num1 * 2;
            this.frameCounter = 0.0;
            break;
          }
          this.spriteDirection = this.direction;
          this.frameCounter += (double) Math.Abs(this.velocity.X) * 0.40000000596046448;
          if (this.frameCounter > 4.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y < num1 * 2)
              this.frame.Y = num1 * 2;
            if (this.frame.Y > num1 * 9)
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          break;
        case 330:
          if ((double) this.velocity.X > 0.0)
            this.spriteDirection = 1;
          if ((double) this.velocity.X < 0.0)
            this.spriteDirection = -1;
          this.rotation = this.velocity.X * 0.15f;
          ++this.frameCounter;
          if (this.frameCounter >= 8.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 343:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = num1 * 2;
              this.frameCounter = 0.0;
              break;
            }
            if (this.frame.Y < num1 * 2)
              this.frame.Y = num1 * 2;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
            ++this.frameCounter;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.frame.Y = (double) this.velocity.Y >= 0.0 ? num1 : 0;
          this.frameCounter = 0.0;
          break;
        case 344:
          if ((double) this.velocity.X == 0.0)
          {
            ++this.frameCounter;
            if (this.frameCounter > 5.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
            }
            if (this.frame.Y > num1 * 9)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          this.frameCounter += (double) Math.Max(1f, Math.Abs(this.velocity.X) * 0.75f);
          if (this.frameCounter > 5.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
          }
          if (this.frame.Y > num1 * 9)
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 345:
          if ((double) this.ai[0] == 0.0)
          {
            this.frame.Y = (double) this.ai[3] < 0.0 ? ((double) this.velocity.X >= 0.0 ? num1 * 2 : num1) : 0;
            break;
          }
          if ((double) this.ai[0] == 1.0)
          {
            ++this.frameCounter;
            if (this.frameCounter > 5.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
            }
            if (this.frame.Y > num1 * 4)
              this.frame.Y = num1 * 3;
            if (this.frame.Y < num1 * 3)
            {
              this.frame.Y = num1 * 3;
              break;
            }
            break;
          }
          if ((double) this.ai[0] == 2.0)
          {
            this.frame.Y = num1 * 5;
            break;
          }
          break;
        case 346:
          if ((double) this.ai[0] == 1.0)
          {
            this.spriteDirection = this.direction;
            ++this.frameCounter;
            if (this.frameCounter > 2.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y > num1 * 8)
              this.frame.Y = num1 * 6;
            if (this.frame.Y < num1 * 6)
            {
              this.frame.Y = num1 * 6;
              break;
            }
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            ref int local = ref this.frame.Y;
            local = local;
            this.frameCounter = 0.0;
            break;
          }
          this.spriteDirection = this.direction;
          ++this.frameCounter;
          this.frameCounter += (double) Math.Abs(this.velocity.X) / 2.0;
          if (this.frameCounter > 4.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y > num1 * 5)
            this.frame.Y = num1;
          if (this.frame.Y < num1)
          {
            this.frame.Y = num1;
            break;
          }
          break;
        case 347:
          ++this.frameCounter;
          if (this.frameCounter > 1.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y > num1 * 3)
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 348:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
          }
          if ((double) this.velocity.Y != 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 8;
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          ++this.frameCounter;
          if (this.frameCounter > 6.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y > num1 * 7)
          {
            this.frame.Y = num1;
            break;
          }
          break;
        case 349:
          ++this.frameCounter;
          if (this.frameCounter > 3.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y > num1 * 7)
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 350:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.ai[2] > 0.0)
            {
              this.spriteDirection = this.direction;
              this.frame.Y = num1 * ((int) this.ai[2] - 1);
              this.frameCounter = 0.0;
              break;
            }
            if (this.frame.Y < num1 * 7)
              this.frame.Y = num1 * 7;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
            this.frameCounter += (double) this.velocity.X * 1.2999999523162842;
            if (this.frameCounter > 4.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = num1 * 7;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1 * 5;
          break;
        case 351:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              this.frameCounter = 0.0;
              break;
            }
            if (this.frame.Y < num1 * 2)
              this.frame.Y = num1 * 2;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
            ++this.frameCounter;
            if (this.frameCounter > 8.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.frame.Y = (double) this.velocity.Y >= 0.0 ? num1 : num1;
          this.frameCounter = 0.0;
          break;
        case 352:
          ++this.frameCounter;
          if (this.frameCounter > 3.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y > num1 * 5)
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 355:
        case 358:
        case 654:
          this.spriteDirection = this.direction;
          ++this.frameCounter;
          if (this.frameCounter < 4.0)
          {
            this.frame.Y = 0;
          }
          else
          {
            this.frame.Y = num1;
            if (this.frameCounter >= 7.0)
              this.frameCounter = 0.0;
          }
          if ((double) this.localAI[2] <= 0.0)
          {
            this.frame.Y += num1 * 2;
            break;
          }
          break;
        case 356:
        case 444:
        case 653:
        case 661:
          int num64 = 7;
          this.rotation = this.velocity.X * 0.3f;
          this.spriteDirection = this.direction;
          this.frameCounter = this.frameCounter + 1.0 + ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) / 2.0;
          if (this.frameCounter < (double) num64)
            this.frame.Y = 0;
          else if (this.frameCounter < (double) (num64 * 2))
            this.frame.Y = num1;
          else if (this.frameCounter < (double) (num64 * 3))
          {
            this.frame.Y = num1 * 2;
          }
          else
          {
            this.frame.Y = num1;
            if (this.frameCounter >= (double) (num64 * 4 - 1))
              this.frameCounter = 0.0;
          }
          if (this.type != 444 && this.type != 653 && this.type != 661)
          {
            this.frame.Y += (int) ((double) (num1 * 3) * ((double) this.ai[2] - 1.0));
            break;
          }
          break;
        case 357:
        case 448:
        case 484:
        case 606:
          this.localAI[0] = -2f;
          if ((double) this.velocity.Y == 0.0)
          {
            this.rotation = 0.0f;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = num1;
              this.frameCounter = 0.0;
            }
            else
            {
              ++this.frameCounter;
              if (this.frameCounter > 12.0)
              {
                this.frameCounter = 0.0;
                this.frame.Y += num1;
                if (this.frame.Y > num1)
                  this.frame.Y = 0;
              }
            }
          }
          else
          {
            this.rotation += (float) this.direction * 0.1f;
            this.frame.Y = num1;
          }
          int i1 = (int) this.Center.X / 16;
          int j1 = (int) this.position.Y / 16;
          Tile tileSafely1 = Framing.GetTileSafely(i1, j1);
          if (tileSafely1 != null)
          {
            if (tileSafely1.slope() == (byte) 0)
            {
              int j2 = j1 + 1;
              tileSafely1 = Framing.GetTileSafely(i1, j2);
            }
            if (tileSafely1.slope() == (byte) 1)
            {
              this.rotation = 0.785f;
              this.localAI[0] = 0.0f;
              break;
            }
            if (tileSafely1.slope() == (byte) 2)
            {
              this.rotation = -0.785f;
              this.localAI[0] = 0.0f;
              break;
            }
            break;
          }
          break;
        case 359:
        case 360:
        case 655:
          if ((double) this.velocity.Y > 1.0)
          {
            ++this.frameCounter;
            int num65 = 6;
            if (this.frameCounter < (double) num65)
            {
              this.frame.Y = num1 * 4;
              break;
            }
            this.frame.Y = num1 * 5;
            if (this.frameCounter >= (double) (num65 * 2 - 1))
            {
              this.frameCounter = 0.0;
              break;
            }
            break;
          }
          ++this.frameCounter;
          int num66 = 10;
          if (this.frameCounter < (double) num66)
          {
            this.frame.Y = 0;
            break;
          }
          if (this.frameCounter < (double) (num66 * 2))
          {
            this.frame.Y = num1;
            break;
          }
          if (this.frameCounter < (double) (num66 * 3))
          {
            this.frame.Y = num1 * 2;
            break;
          }
          if (this.frameCounter < (double) (num66 * 4))
          {
            this.frame.Y = num1 * 3;
            break;
          }
          if (this.frameCounter < (double) (num66 * 5))
          {
            this.frame.Y = num1 * 2;
            break;
          }
          this.frame.Y = num1;
          if (this.frameCounter >= (double) (num66 * 6 - 1))
          {
            this.frameCounter = 0.0;
            break;
          }
          break;
        case 361:
        case 445:
        case 687:
          this.spriteDirection = this.direction;
          if (this.wet)
          {
            this.frameCounter = 0.0;
            this.frame.Y = (double) this.velocity.X > 0.25 || (double) this.velocity.X < -0.25 ? num1 * 10 : ((double) this.velocity.X > 0.15000000596046448 || (double) this.velocity.X < -0.15000000596046448 ? num1 * 11 : num1 * 12);
            break;
          }
          if ((double) this.velocity.Y == 0.0)
          {
            if ((double) this.velocity.X == 0.0)
            {
              ++this.frameCounter;
              if (this.frameCounter > 6.0)
              {
                this.frameCounter = 0.0;
                this.frame.Y += num1;
              }
              if (this.frame.Y > num1 * 5)
              {
                this.frame.Y = 0;
                break;
              }
              break;
            }
            ++this.frameCounter;
            int num67 = 6;
            if (this.frameCounter < (double) num67)
            {
              this.frame.Y = 0;
              break;
            }
            if (this.frameCounter < (double) (num67 * 2))
            {
              this.frame.Y = num1 * 6;
              break;
            }
            if (this.frameCounter < (double) (num67 * 3))
            {
              this.frame.Y = num1 * 8;
              break;
            }
            this.frame.Y = num1 * 9;
            if (this.frameCounter >= (double) (num67 * 4 - 1))
            {
              this.frameCounter = 0.0;
              break;
            }
            break;
          }
          this.frame.Y = (double) this.velocity.Y <= 0.0 ? num1 * 8 : num1 * 9;
          break;
        case 362:
        case 364:
        case 608:
          this.spriteDirection = this.direction;
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          ++this.frameCounter;
          if (this.frameCounter >= 4.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * 10)
            this.frame.Y = num1 * 3;
          if (this.frame.Y < num1 * 3)
          {
            this.frame.Y = num1 * 3;
            break;
          }
          break;
        case 363:
        case 365:
        case 609:
          this.spriteDirection = this.direction;
          if (this.wet)
          {
            ++this.frameCounter;
            if (this.frameCounter >= 8.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y > num1 * 2)
              this.frame.Y = num1;
            if (this.frame.Y < num1)
              this.frame.Y = num1;
            this.rotation = 0.0f;
            break;
          }
          if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          {
            this.frame.Y = num1;
            this.frameCounter = 0.0;
            this.rotation = 0.0f;
            break;
          }
          this.rotation = this.velocity.X * 0.1f;
          ++this.frameCounter;
          if (this.frameCounter >= 4.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
            this.frame.Y = num1 * 11;
          if (this.frame.Y < num1 * 11)
          {
            this.frame.Y = num1 * 11;
            break;
          }
          break;
        case 366:
        case 367:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frame.Y = 0;
            this.frameCounter = 0.0;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
          ++this.frameCounter;
          if (this.frameCounter > 6.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 370:
          if ((double) this.ai[0] == 0.0 || (double) this.ai[0] == 5.0)
          {
            int num68 = 5;
            if ((double) this.ai[0] == 5.0)
              num68 = 4;
            ++this.frameCounter;
            if (this.frameCounter > (double) num68)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
            }
            if (this.frame.Y >= num1 * 6)
              this.frame.Y = 0;
          }
          if ((double) this.ai[0] == 1.0 || (double) this.ai[0] == 6.0)
            this.frame.Y = (double) this.ai[2] >= 10.0 ? num1 * 7 : num1 * 6;
          if ((double) this.ai[0] == 2.0 || (double) this.ai[0] == 7.0)
            this.frame.Y = (double) this.ai[2] >= 10.0 ? num1 * 7 : num1 * 6;
          if ((double) this.ai[0] == 3.0 || (double) this.ai[0] == 8.0 || (double) this.ai[0] == -1.0)
          {
            int num69 = 90;
            if ((double) this.ai[2] < (double) (num69 - 30) || (double) this.ai[2] > (double) (num69 - 10))
            {
              ++this.frameCounter;
              if (this.frameCounter > 5.0)
              {
                this.frameCounter = 0.0;
                this.frame.Y += num1;
              }
              if (this.frame.Y >= num1 * 6)
                this.frame.Y = 0;
            }
            else
            {
              this.frame.Y = num1 * 6;
              if ((double) this.ai[2] > (double) (num69 - 20) && (double) this.ai[2] < (double) (num69 - 15))
                this.frame.Y = num1 * 7;
            }
          }
          if ((double) this.ai[0] == 4.0 || (double) this.ai[0] == 9.0)
          {
            int num70 = 180;
            if ((double) this.ai[2] < (double) (num70 - 60) || (double) this.ai[2] > (double) (num70 - 20))
            {
              ++this.frameCounter;
              if (this.frameCounter > 5.0)
              {
                this.frameCounter = 0.0;
                this.frame.Y += num1;
              }
              if (this.frame.Y >= num1 * 6)
              {
                this.frame.Y = 0;
                break;
              }
              break;
            }
            this.frame.Y = num1 * 6;
            if ((double) this.ai[2] > (double) (num70 - 50) && (double) this.ai[2] < (double) (num70 - 25))
            {
              this.frame.Y = num1 * 7;
              break;
            }
            break;
          }
          break;
        case 371:
        case 372:
        case 373:
          this.frame.Y = num1;
          break;
        case 374:
          this.localAI[0] = -2f;
          if ((double) this.velocity.Y == 0.0)
          {
            this.rotation = 0.0f;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              this.frameCounter = 0.0;
              break;
            }
            ++this.frameCounter;
            if (this.frameCounter > 6.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              if (this.frame.Y >= num1 * 4)
              {
                this.frame.Y = num1;
                break;
              }
              break;
            }
            break;
          }
          this.rotation += (float) this.direction * 0.1f;
          ++this.frameCounter;
          if (this.frameCounter > 3.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y >= num1 * 4)
            {
              this.frame.Y = num1;
              break;
            }
            break;
          }
          break;
        case 375:
          ++this.frameCounter;
          if (this.frameCounter > 4.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y >= num1 * 4)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 376:
          ++this.frameCounter;
          if (this.frameCounter > 30.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y >= num1 * 2)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 377:
        case 446:
          if (this.IsABestiaryIconDummy)
          {
            ++this.frameCounter;
            if (this.frameCounter > 4.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
            }
            if (this.frame.Y > num1)
              this.frame.Y = 0;
          }
          else
            this.frame.Y = (double) this.velocity.Y == 0.0 ? 0 : num1;
          this.spriteDirection = this.direction;
          break;
        case 378:
          if ((double) this.velocity.Y != 0.0 && this.frame.Y < num1 * 2)
            this.frame.Y += num1 * 2;
          if ((double) this.velocity.Y == 0.0 && this.frame.Y > num1 * 2)
            this.frame.Y -= num1 * 2;
          ++this.frameCounter;
          if (this.frameCounter >= 6.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if ((double) this.velocity.Y != 0.0 && this.frame.Y >= num1 * 4)
              this.frame.Y = num1 * 2;
            if ((double) this.velocity.Y == 0.0 && this.frame.Y >= num1 * 2)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 379:
        case 380:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.ai[2] > 0.0)
            {
              this.spriteDirection = this.direction;
              this.frame.Y = num1 * ((int) this.ai[2] - 1 + 2);
              this.frameCounter = 0.0;
              break;
            }
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              break;
            }
            if (this.frame.Y < num1 * 7)
              this.frame.Y = num1 * 7;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = num1 * 7;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1;
          break;
        case 381:
        case 382:
        case 383:
        case 385:
        case 389:
          if ((double) this.velocity.Y == 0.0)
          {
            this.spriteDirection = this.direction;
            if (this.frame.Y < num1 * 2)
              this.frame.Y = num1 * 2;
            if (this.type == 389 || this.type == 385)
              this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.2;
            else
              this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
              this.frame.Y = num1 * 2;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1;
          break;
        case 386:
          if ((double) this.ai[2] > 0.0)
          {
            int num71 = (int) this.ai[2] / 12;
            this.frame.Y = num1 * (9 + num71 % 2);
            break;
          }
          if ((double) this.velocity.Y == 0.0)
          {
            this.spriteDirection = this.direction;
            if (this.frame.Y < num1 * 2)
              this.frame.Y = num1 * 2;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= 9)
              this.frame.Y = num1 * 2;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1;
          break;
        case 387:
          if ((double) this.ai[0] > 0.0)
          {
            ++this.frameCounter;
            if ((double) this.ai[0] >= 20.0)
              ++this.frameCounter;
            if ((double) this.ai[0] >= 40.0)
              ++this.frameCounter;
            if (this.frameCounter >= 10.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              if (this.frame.Y >= num1 * 2)
              {
                this.frame.Y = 0;
                break;
              }
              break;
            }
            break;
          }
          ++this.frameCounter;
          if (this.frameCounter >= 15.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y >= num1 * 2)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 388:
          ++this.frameCounter;
          if (this.frameCounter >= 6.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y >= num1 * 2)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 390:
          if (this.IsABestiaryIconDummy)
          {
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 0.5;
            if (this.frameCounter > 6.0)
            {
              this.frameCounter = 0.0;
              ++this.localAI[3];
              if ((double) this.localAI[3] >= (double) Main.npcFrameCount[391])
                this.localAI[3] = 0.0f;
            }
          }
          if (this.direction != 0)
            this.spriteDirection = -this.direction;
          this.frame.Y = (double) this.ai[2] <= 0.0 ? num1 * 2 : num1 * ((int) this.ai[2] - 1);
          break;
        case 391:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = -1;
            if (this.direction == -1)
              this.spriteDirection = 1;
            if (this.frame.Y < num1)
              this.frame.Y = num1;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 0.5;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
              this.frame.Y = num1;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = 0;
          break;
        case 392:
          float num72 = 20f;
          float num73 = 240f;
          bool flag4 = (double) this.ai[3] >= (double) num72 && (double) this.ai[3] < (double) num72 + (double) num73;
          ++this.frameCounter;
          if (flag4)
            ++this.frameCounter;
          if (this.frameCounter >= 12.0)
            this.frameCounter = 0.0;
          int num74 = (int) this.frameCounter % 12 / 3;
          this.frame.Y = num1 * num74;
          break;
        case 393:
          Vector2 rotationVector2 = this.ai[2].ToRotationVector2();
          int num75 = (double) rotationVector2.Y <= (double) Math.Abs(rotationVector2.X) * 2.0 ? ((double) rotationVector2.Y <= (double) Math.Abs(rotationVector2.X) * 1.5 ? ((double) Math.Abs(rotationVector2.X) <= (double) rotationVector2.Y * 2.0 ? ((double) Math.Abs(rotationVector2.X) <= (double) rotationVector2.Y * 1.5 ? ((double) rotationVector2.X > 0.0 ? 6 : 2) : ((double) rotationVector2.X > 0.0 ? 7 : 1)) : ((double) rotationVector2.X > 0.0 ? 8 : 0)) : ((double) rotationVector2.X > 0.0 ? 5 : 3)) : 4;
          this.frame.Y = num1 * num75;
          float num76 = 280f;
          float num77 = 140f;
          if ((double) this.ai[3] >= (double) num76 && (double) this.ai[3] < (double) num76 + (double) num77 && (int) this.ai[3] % 6 <= 2)
          {
            this.frame.Y += num1 * 9;
            break;
          }
          break;
        case 394:
          int num78 = (int) this.ai[3] - 300;
          if (num78 >= 120)
          {
            int num79 = num78 - 120;
            this.frame.Y = num79 < 160 ? (num79 < 20 ? num1 * (4 + num79 / 5) : num1 * (num79 / 4 % 4)) : num1 * (7 - (num79 - 160) / 5);
            break;
          }
          this.frame.Y = num1 * 4;
          break;
        case 395:
          float num80 = 20f;
          float num81 = 240f;
          bool flag5 = (double) this.ai[3] >= (double) num80 && (double) this.ai[3] < (double) num80 + (double) num81;
          ++this.frameCounter;
          if (this.frameCounter >= 66.0)
            this.frameCounter = 0.0;
          if (flag5)
          {
            ++this.frameCounter;
            if (this.frameCounter >= 54.0 || this.frameCounter < 36.0)
              this.frameCounter = 36.0;
          }
          int num82 = (int) this.frameCounter % 66 / 6;
          this.frame.Y = num1 * num82;
          break;
        case 397:
          int num83 = (int) this.frameCounter / 7;
          this.frame.Y = num1 * num83;
          break;
        case 398:
          if ((double) this.ai[0] <= 0.0)
          {
            this.frame.Y = 0;
            break;
          }
          if (this.frame.Y == 0)
          {
            Gore.NewGore(this.position + new Vector2(-10f, -15f), this.velocity, 619);
            Gore.NewGore(this.position + new Vector2(10f, -15f), this.velocity, 620);
            Gore.NewGore(this.position + new Vector2(-10f, 15f), this.velocity, 621);
            Gore.NewGore(this.position + new Vector2(10f, 15f), this.velocity, 622);
            for (int index = 0; index < 50; ++index)
            {
              this.frame.Y = num1;
              Dust.NewDust(this.position, this.width, this.height, 209);
            }
          }
          ++this.frameCounter;
          if (this.frameCounter >= 30.0)
            this.frameCounter = 6.0;
          int num84 = (int) this.frameCounter % 30 / 6;
          this.frame.Y = num1 * num84;
          break;
        case 399:
          this.frameCounter = (this.frameCounter + 0.25) % 4.0 + ((double) this.ai[0] == 0.0 ? 0.0 : 4.0);
          this.frame.Y = num1 * (int) this.frameCounter;
          break;
        case 400:
          ++this.frameCounter;
          if ((double) this.ai[0] == 0.0 || (double) this.ai[0] == 3.0)
            ++this.frameCounter;
          if (this.frameCounter >= 16.0)
            this.frameCounter = 0.0;
          int num85 = (int) this.frameCounter % 16 / 4;
          this.frame.Y = num1 * num85;
          break;
        case 405:
        case 406:
          if (++this.frameCounter >= 4.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 407:
          if (++this.frameCounter >= 6.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 409:
          if ((double) this.velocity.Y == 0.0 && (double) this.ai[1] <= 30.0 && (double) this.ai[1] > 0.0)
          {
            this.frame.Y = num1 * (Main.npcFrameCount[this.type] - 1);
            this.frameCounter = 0.0;
            break;
          }
          if ((double) this.velocity.Y == 0.0)
            this.spriteDirection = this.direction;
          if (++this.frameCounter >= 6.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 2)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 410:
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter >= 10.0)
          {
            this.frameCounter -= 10.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 411:
          if ((double) this.ai[1] >= 120.0 && (double) this.ai[1] < 240.0)
          {
            this.spriteDirection = -this.direction;
            this.frame.Y = num1 * (Main.npcFrameCount[this.type] - 1);
            this.frameCounter = 0.0;
            break;
          }
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction != 0)
              this.spriteDirection = -this.direction;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              this.frameCounter = 0.0;
              break;
            }
            if (this.frame.Y < num1 * 2)
              this.frame.Y = num1 * 2;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
            ++this.frameCounter;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 1)
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.frame.Y = num1;
          this.frameCounter = 0.0;
          break;
        case 415:
          if ((double) this.ai[2] < 0.0)
          {
            if (this.frame.Y / num1 != 8 && this.frame.Y / num1 != 9 && this.frame.Y / num1 != 0)
              this.frameCounter = 0.0;
            ++this.frameCounter;
            int num86 = 0;
            int num87 = 18;
            int num88 = 4;
            if (this.frameCounter > (double) (num87 - num88 * 2))
              num86 = 8 + (int) this.frameCounter / 4 % 2;
            if (this.frameCounter > (double) (num87 + num88 * 6))
            {
              num86 = 0;
              this.frameCounter = 0.0;
            }
            this.frame.Y = num1 * num86;
            break;
          }
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction != 0)
              this.spriteDirection = this.direction;
            if (this.frame.Y < num1 * 2)
              this.frame.Y = num1 * 2;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 0.5;
            if (this.frameCounter >= 8.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 2)
              this.frame.Y = num1 * 2;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1;
          break;
        case 416:
          if (this.IsABestiaryIconDummy)
          {
            ++this.frameCounter;
            if (this.frameCounter > 5.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
            }
            if (this.frame.Y < num1 * 2 || this.frame.Y > num1 * 7)
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          if (Main.netMode != 2 && !Main.dedServ)
          {
            int index = (int) this.ai[0];
            if (Main.npc[index].active && Main.npc[index].type == 415 && TextureAssets.Npc[415].IsLoaded)
            {
              this.frame.Y = Main.npc[index].frame.Y / (TextureAssets.Npc[415].Height() / Main.npcFrameCount[415]) * num1;
              break;
            }
            break;
          }
          break;
        case 417:
          if ((double) this.ai[0] == 0.0)
          {
            this.rotation = 0.0f;
            if ((double) this.velocity.Y == 0.0)
              this.spriteDirection = this.direction;
            else if ((double) this.velocity.Y < 0.0)
              this.frameCounter = 0.0;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.1000000238418579;
            this.frame.Y = (int) (this.frameCounter / 6.0) * num1;
            if (this.frameCounter >= 48.0)
            {
              this.frameCounter = 0.0;
              break;
            }
            break;
          }
          if ((double) this.ai[0] == 1.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * (9 + (int) ((double) this.ai[1] / 6.0));
            break;
          }
          if ((double) this.ai[0] == 5.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * (13 - (int) ((double) this.ai[1] / 6.0));
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1 * 14;
          break;
        case 418:
          if ((double) this.ai[0] == 0.0 || (double) this.ai[0] == 1.0 || (double) this.ai[0] == -1.0)
          {
            ++this.frameCounter;
            if (this.frameCounter > 6.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
            }
            if (this.frame.Y > num1 * 4)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          if ((double) this.ai[0] == 2.0)
          {
            this.frame.Y = (double) this.ai[1] >= 10.0 ? ((double) this.ai[1] >= 20.0 ? num1 * 7 : num1 * 6) : num1 * 5;
            break;
          }
          if ((double) this.ai[0] == -2.0)
          {
            ++this.frameCounter;
            if (this.frameCounter > 12.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
            }
            if (this.frame.Y > num1 * 7)
            {
              this.frame.Y = num1 * 5;
              break;
            }
            break;
          }
          break;
        case 419:
          if ((double) this.ai[2] < 0.0)
          {
            int num89 = 1;
            if (this.direction != 0)
              this.spriteDirection = this.direction;
            if (this.frame.Y / num1 >= 9)
            {
              this.frame.Y = num1 * 2;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 < 2)
            {
              this.frame.Y = num1 * 2;
              this.frameCounter = 0.0;
            }
            ++this.frameCounter;
            if (this.frameCounter >= (double) (num89 * 4 + 6))
              this.frameCounter = 8.0;
            this.frame.Y = this.frameCounter >= 6.0 ? num1 * (int) (4.0 + (this.frameCounter - 6.0) / (double) num89) : num1 * (int) (2.0 + this.frameCounter / 3.0);
            break;
          }
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction != 0)
              this.spriteDirection = this.direction;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              this.frameCounter = 0.0;
              break;
            }
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
            ++this.frameCounter;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
              this.frame.Y = num1 * 9;
            if (this.frame.Y / num1 < 9)
            {
              this.frame.Y = num1 * 9;
              break;
            }
            break;
          }
          this.frame.Y = num1;
          this.frameCounter = 0.0;
          break;
        case 420:
          if (++this.frameCounter >= 5.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 421:
          if ((double) this.ai[0] == 5.0)
            ++this.frameCounter;
          if (++this.frameCounter >= 5.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 423:
          if ((double) this.ai[2] == 1.0)
          {
            int num90 = 2;
            if ((double) this.ai[1] >= 30.0 && (double) this.ai[1] < 45.0)
              num90 = 3;
            this.frame.Y = num90 * num1;
            break;
          }
          if ((double) this.velocity.Y != 0.0)
          {
            this.frame.Y = num1;
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frame.Y = 0;
            break;
          }
          if ((double) this.velocity.X != 0.0)
            this.spriteDirection = Math.Sign(-this.velocity.X);
          if (this.frame.Y / num1 < 4)
            this.frame.Y = num1 * 4;
          this.frameCounter += 1.0 + (double) Math.Abs(this.velocity.X) / 2.0;
          if (this.frameCounter > 6.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
          {
            this.frame.Y = num1 * 4;
            break;
          }
          break;
        case 424:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction != 0)
              this.spriteDirection = -this.direction;
            if ((double) this.ai[2] > 0.0)
            {
              this.frame.Y = num1 * ((double) this.ai[1] > 90.0 ? Main.npcFrameCount[this.type] - 2 : Main.npcFrameCount[this.type] - 1);
              this.frameCounter = 0.0;
              break;
            }
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              break;
            }
            if (this.frame.Y < num1 * 2)
              this.frame.Y = num1 * 2;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
            this.frameCounter += (double) this.velocity.X * 1.2999999523162842;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 2)
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1;
          break;
        case 425:
          if (this.direction != 0)
            this.spriteDirection = -this.direction;
          if ((double) this.ai[2] == 1.0)
          {
            ++this.frameCounter;
            if (this.frameCounter >= 3.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y > num1 * 12 || this.frame.Y < num1 * 10)
            {
              this.frame.Y = num1 * 10;
              break;
            }
            break;
          }
          if ((double) this.velocity.Y != 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1;
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter >= 8.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y > num1 * 9 || this.frame.Y < num1 * 2)
          {
            this.frame.Y = num1 * 2;
            break;
          }
          break;
        case 426:
          if (this.direction != 0)
            this.spriteDirection = this.direction;
          if ((double) this.ai[1] >= 45.0)
          {
            if ((double) this.velocity.Y == 0.0)
            {
              this.frame.Y = num1 * 8;
              break;
            }
            ++this.frameCounter;
            if (this.frameCounter >= 2.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y >= num1 * 15 || this.frame.Y < num1 * 12)
            {
              this.frame.Y = num1 * 12;
              break;
            }
            break;
          }
          if ((double) this.velocity.Y != 0.0)
          {
            ++this.frameCounter;
            if (this.frameCounter >= 2.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y >= num1 * 12 || this.frame.Y < num1 * 9)
            {
              this.frame.Y = num1 * 9;
              break;
            }
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter >= 10.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y > num1 * 7 || this.frame.Y < num1)
          {
            this.frame.Y = num1;
            break;
          }
          break;
        case 427:
          if (this.direction != 0)
            this.spriteDirection = this.direction;
          if ((double) this.velocity.Y != 0.0)
          {
            ++this.frameCounter;
            if (this.frameCounter >= 2.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y >= num1 * 9 || this.frame.Y < num1 * 6)
            {
              this.frame.Y = num1 * 6;
              break;
            }
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter >= 8.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y > num1 * 5 || this.frame.Y < num1)
          {
            this.frame.Y = num1;
            break;
          }
          break;
        case 428:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction != 0)
              this.spriteDirection = this.direction;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              this.frameCounter = 0.0;
              break;
            }
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
            if (++this.frameCounter > 10.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 1)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          if (this.frame.Y / num1 != 4)
          {
            if (this.frameCounter > 0.0)
              this.frameCounter = 0.0;
            if (--this.frameCounter < -10.0 || (double) this.velocity.Y > 0.60000002384185791)
            {
              this.frame.Y = num1 * 4;
              this.frameCounter = 0.0;
              break;
            }
            break;
          }
          break;
        case 429:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction != 0)
              this.spriteDirection = this.direction;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              this.frameCounter = 0.0;
              break;
            }
            if (this.frame.Y < num1 * 2)
              this.frame.Y = num1 * 2;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
            ++this.frameCounter;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.frame.Y = num1;
          this.frameCounter = 0.0;
          break;
        case 430:
        case 431:
        case 432:
        case 433:
        case 434:
        case 435:
        case 436:
        case 591:
          if ((double) this.ai[2] > 0.0)
          {
            this.frame.Y = (double) this.ai[2] >= 5.0 ? ((double) this.ai[2] >= 10.0 ? ((double) this.ai[2] >= 15.0 ? num1 * 6 : num1 * 5) : num1 * 4) : num1 * 3;
            break;
          }
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
          }
          if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 || this.direction == 1 && (double) this.velocity.X < 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 2;
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter < 8.0)
          {
            this.frame.Y = 0;
            break;
          }
          if (this.frameCounter < 16.0)
          {
            this.frame.Y = num1;
            break;
          }
          if (this.frameCounter < 24.0)
          {
            this.frame.Y = num1 * 2;
            break;
          }
          if (this.frameCounter < 32.0)
          {
            this.frame.Y = num1;
            break;
          }
          this.frameCounter = 0.0;
          break;
        case 437:
          ++this.frameCounter;
          if (this.frameCounter >= 20.0)
            this.frameCounter = 0.0;
          int num91 = (int) this.frameCounter % 20 / 5;
          this.frame.Y = num1 * num91;
          break;
        case 438:
          ++this.frameCounter;
          if ((double) this.ai[1] == 1.0)
            ++this.frameCounter;
          if (this.frameCounter >= 49.0)
            this.frameCounter = 0.0;
          int num92 = (int) this.frameCounter % 49 / 7;
          if (num92 >= 4)
            num92 = 6 - num92;
          this.frame.Y = num1 * num92;
          break;
        case 439:
        case 440:
          int num93 = (int) this.localAI[2];
          if (this.IsABestiaryIconDummy)
          {
            if (this.frameCounter > 5.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
            }
            if (this.frame.Y < num1 * 4 || this.frame.Y > num1 * 6)
              this.frame.Y = num1 * 4;
          }
          else
          {
            switch (num93)
            {
              case 0:
                if (this.frameCounter >= 15.0)
                {
                  this.frameCounter = 0.0;
                  this.frame.Y = 0;
                  break;
                }
                if (this.frame.Y != 0)
                {
                  this.frame.Y = ((int) this.frameCounter / 5 + 4) * num1;
                  break;
                }
                break;
              case 1:
                if (this.frameCounter >= 15.0)
                {
                  this.frameCounter = 0.0;
                  this.frame.Y = num1;
                  break;
                }
                if (this.frame.Y != num1)
                {
                  this.frame.Y = ((int) this.frameCounter / 5 + 10) * num1;
                  break;
                }
                break;
              case 2:
                if (this.frameCounter >= 15.0)
                {
                  this.frameCounter = 0.0;
                  this.frame.Y = num1 * 2;
                  break;
                }
                if (this.frame.Y != num1 * 2)
                {
                  this.frame.Y = ((int) this.frameCounter / 5 + 7) * num1;
                  break;
                }
                break;
              case 10:
                if (this.frameCounter >= 15.0)
                  this.frameCounter = 0.0;
                this.frame.Y = ((int) this.frameCounter / 5 + 4) * num1;
                break;
              case 11:
                if (this.frameCounter >= 15.0)
                  this.frameCounter = 0.0;
                this.frame.Y = ((int) this.frameCounter / 5 + 10) * num1;
                break;
              case 12:
                if (this.frameCounter >= 15.0)
                  this.frameCounter = 0.0;
                this.frame.Y = ((int) this.frameCounter / 5 + 7) * num1;
                break;
              case 13:
                if (this.frameCounter >= 15.0)
                  this.frameCounter = 0.0;
                this.frame.Y = ((int) this.frameCounter / 5 + 13) * num1;
                break;
            }
          }
          ++this.frameCounter;
          break;
        case 449:
        case 450:
        case 451:
        case 452:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.ai[2] > 0.0)
            {
              this.spriteDirection = this.direction;
              int num94 = Main.npcFrameCount[this.type] - 5;
              int num95 = 7;
              int num96 = (double) this.ai[1] < 50.0 ? ((double) this.ai[1] < (double) (50 - num95) ? ((double) this.ai[1] < (double) (50 - num95 * 2) ? ((double) this.ai[1] < (double) (50 - num95 * 3) ? 0 : 4) : 3) : 2) : 1;
              this.frame.Y = num1 * (num94 + num96);
              this.frameCounter = 0.0;
              break;
            }
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              break;
            }
            if (this.frame.Y < num1 * 2)
              this.frame.Y = num1 * 2;
            if (this.frame.Y < num1 * 2)
              this.frame.Y = num1 * 2;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= 15)
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1;
          break;
        case 454:
          int num97 = (int) (this.frameCounter / 2.0);
          this.frame.Y = num1 * num97;
          break;
        case 461:
          if (this.wet)
          {
            if ((double) this.velocity.X < 0.0)
              this.direction = -1;
            if ((double) this.velocity.X > 0.0)
              this.direction = 1;
            if (this.spriteDirection != this.direction)
            {
              this.rotation *= -1f;
              this.spriteDirection = this.direction;
            }
            float num98 = (float) Math.Atan2((double) this.velocity.Y * (double) this.direction, (double) this.velocity.X * (double) this.direction);
            if ((double) Math.Abs(this.rotation - num98) >= 3.14)
            {
              if ((double) num98 < (double) this.rotation)
                this.rotation -= 6.28f;
              else
                this.rotation += 6.28f;
            }
            this.rotation = (float) (((double) this.rotation * 4.0 + (double) num98) / 5.0);
            this.frameCounter += (double) Math.Abs(this.velocity.Length());
            ++this.frameCounter;
            if (this.frameCounter > 8.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 > 20)
            {
              this.frame.Y = num1 * 16;
              break;
            }
            if (this.frame.Y / num1 < 16)
            {
              this.frame.Y = num1 * 19;
              break;
            }
            break;
          }
          if ((double) this.rotation > 3.14)
            this.rotation -= 6.28f;
          if ((double) this.rotation > -0.01 && (double) this.rotation < 0.01)
            this.rotation = 0.0f;
          else
            this.rotation *= 0.9f;
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              this.frameCounter = 0.0;
              break;
            }
            if (this.frame.Y < num1 * 2)
              this.frame.Y = num1 * 2;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
            ++this.frameCounter;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 > 15)
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1;
          break;
        case 466:
          if (!this.IsABestiaryIconDummy && (double) this.ai[2] <= 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            this.frame.Y = (double) this.ai[2] != 0.0 ? ((double) this.ai[2] >= -8.0 ? num1 * 2 : num1) : 0;
            break;
          }
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = num1 * 2;
              this.frameCounter = 0.0;
              break;
            }
            if (this.frame.Y / num1 < 4)
              this.frame.Y = num1 * 4;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
            ++this.frameCounter;
            if (this.frameCounter > 7.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 > 17)
              this.frame.Y = num1 * 4;
            if (this.frame.Y / num1 < 4)
            {
              this.frame.Y = num1 * 4;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1 * 3;
          break;
        case 467:
          if ((double) this.ai[0] == 1.0 || this.IsABestiaryIconDummy)
          {
            ++this.frameCounter;
            if (this.frameCounter > 4.0)
            {
              this.frameCounter = 0.0;
              if (this.frame.Y < num1 * 6)
              {
                this.frame.Y += num1;
                this.frameCounter = 0.0;
                break;
              }
              if (this.IsABestiaryIconDummy)
              {
                this.frame.Y = 0;
                break;
              }
              break;
            }
            break;
          }
          ++this.frameCounter;
          if (this.frameCounter > 4.0)
          {
            this.frameCounter = 0.0;
            if (this.frame.Y > num1 * 3)
              this.frame.Y = num1 * 3;
            if (this.frame.Y > 0)
            {
              this.frame.Y -= num1;
              this.frameCounter = 0.0;
              break;
            }
            break;
          }
          break;
        case 468:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.ai[2] > 0.0)
            {
              this.spriteDirection = this.direction;
              int num99 = 0;
              if ((double) this.ai[1] < 22.0)
                num99 = -15;
              else if ((double) this.ai[1] < 28.0)
                num99 = 3;
              else if ((double) this.ai[1] < 34.0)
                num99 = 2;
              else if ((double) this.ai[1] < 40.0)
                num99 = 1;
              this.frame.Y = num1 * (15 + num99);
              this.frameCounter = 0.0;
              break;
            }
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              break;
            }
            if (this.frame.Y < num1 * 2)
              this.frame.Y = num1 * 2;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= 15)
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1;
          break;
        case 469:
          if ((double) this.ai[2] == 1.0)
          {
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
            if ((double) this.velocity.X < 0.0)
              this.direction = -1;
            if ((double) this.velocity.X > 0.0)
              this.direction = 1;
            this.spriteDirection = this.direction;
            this.frameCounter += (double) Math.Abs(this.velocity.Length());
            if (this.frameCounter > 11.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 > 5)
              this.frame.Y = num1 * 2;
            if (this.frame.Y / num1 < 2)
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.rotation = 0.0f;
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.velocity.X == 0.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y = 0;
              break;
            }
            this.frameCounter += (double) Math.Abs(this.velocity.X);
            ++this.frameCounter;
            if (this.frameCounter > 9.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 > 11)
              this.frame.Y = num1 * 6;
            if (this.frame.Y / num1 < 6)
            {
              this.frame.Y = num1 * 6;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1;
          break;
        case 471:
          bool flag6 = false;
          if ((double) this.ai[3] < 0.0)
            flag6 = true;
          if (flag6)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            this.frameCounter += (double) Math.Abs(this.velocity.Length()) * 0.5;
            ++this.frameCounter;
            if (this.frameCounter < 6.0)
            {
              this.frame.Y = num1 * 17;
              break;
            }
            if (this.frameCounter < 12.0)
            {
              this.frame.Y = num1 * 18;
              break;
            }
            if (this.frameCounter < 18.0)
            {
              this.frame.Y = num1 * 19;
              break;
            }
            if (this.frameCounter < 23.0)
            {
              this.frame.Y = num1 * 18;
              break;
            }
            this.frame.Y = num1 * 18;
            this.frameCounter = 0.0;
            break;
          }
          if ((double) this.ai[3] == 1.0)
          {
            this.frame.Y = num1 * 16;
            this.frameCounter = 0.0;
            break;
          }
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              this.frameCounter = 0.0;
              break;
            }
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
            ++this.frameCounter;
            if (this.frameCounter > 7.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 > 15)
              this.frame.Y = num1 * 2;
            if (this.frame.Y / num1 < 2)
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1;
          break;
        case 472:
          if ((double) this.velocity.X < 0.0)
            this.direction = -1;
          else
            this.direction = 1;
          if (this.direction == 1)
            this.spriteDirection = 1;
          if (this.direction == -1)
            this.spriteDirection = -1;
          this.rotation = (float) Math.Atan2((double) this.velocity.Y * (double) this.direction, (double) this.velocity.X * (double) this.direction);
          ++this.frameCounter;
          if (this.frameCounter > 4.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y / num1 >= 6)
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 473:
        case 474:
        case 475:
        case 476:
          if ((double) this.velocity.Y == 0.0)
            this.spriteDirection = this.direction;
          if ((double) this.ai[0] == 0.0 || (double) this.ai[0] == 7.0)
          {
            this.rotation = 0.0f;
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          if ((double) this.ai[0] == 1.0)
          {
            this.rotation = 0.0f;
            this.frameCounter = 0.0;
            int num100 = 6;
            this.frame.Y = (double) this.ai[1] >= (double) num100 ? ((double) this.ai[1] >= (double) (num100 * 2) ? ((double) this.ai[1] >= (double) (num100 * 3) ? ((double) this.ai[1] >= (double) (num100 * 4) ? ((double) this.ai[1] >= (double) (num100 * 5) ? num1 * 6 : num1 * 5) : num1 * 4) : num1 * 3) : num1 * 2) : num1;
            break;
          }
          if ((double) this.ai[0] == 8.0)
          {
            this.rotation = 0.0f;
            ++this.frameCounter;
            if (this.frameCounter >= 24.0)
              this.frameCounter = 0.0;
            this.frame.Y = num1 * Math.Min(6, Math.Max(3, 3 + (int) this.frameCounter / 6));
            break;
          }
          if ((double) this.ai[0] == 2.0 || (double) this.ai[0] == 6.0)
          {
            this.rotation = 0.0f;
            if ((double) this.velocity.Y == 0.0)
            {
              int num101 = 6;
              ++this.frameCounter;
              if (this.frame.Y < num1 * 7)
                this.frame.Y = num1 * 12;
              if (this.frame.Y < num1 * 10)
              {
                if (this.frameCounter > 8.0)
                {
                  this.frame.Y += num1;
                  this.frameCounter = 0.0;
                  if (this.frame.Y == num1 * 10)
                  {
                    this.frameCounter = (double) (num101 * 2);
                    break;
                  }
                  break;
                }
                break;
              }
              if (this.frameCounter < (double) num101)
              {
                this.frame.Y = num1 * 12;
                break;
              }
              if (this.frameCounter < (double) (num101 * 2))
              {
                this.frame.Y = num1 * 11;
                break;
              }
              if (this.frameCounter < (double) (num101 * 3))
              {
                this.frame.Y = num1 * 10;
                break;
              }
              this.frame.Y = num1 * 11;
              if (this.frameCounter >= (double) (num101 * 4 - 1))
              {
                this.frameCounter = 0.0;
                break;
              }
              break;
            }
            this.frame.Y = num1 * 13;
            this.frameCounter = 0.0;
            break;
          }
          if ((double) this.ai[0] == 3.0)
          {
            this.rotation = 0.0f;
            ++this.frameCounter;
            if (this.frameCounter > 6.0)
            {
              this.frameCounter = 0.0;
              if (this.frame.Y > num1 * 7)
              {
                this.frame.Y -= num1;
                break;
              }
              break;
            }
            break;
          }
          if ((double) this.ai[0] == 4.0 || (double) this.ai[0] == 5.0)
          {
            if ((double) this.ai[0] == 4.0 && (double) this.ai[2] == 1.0)
              this.rotation = 0.0f;
            this.frame.Y = num1 * 13;
            this.frameCounter = 0.0;
            break;
          }
          if ((double) this.ai[0] == 4.0999999046325684)
          {
            this.rotation = 0.0f;
            if (this.frame.Y > num1 * 6)
              this.frameCounter = 0.0;
            ++this.frameCounter;
            int num102 = 4;
            if (this.frameCounter < (double) num102)
            {
              this.frame.Y = num1 * 6;
              break;
            }
            if (this.frameCounter < (double) (num102 * 2))
            {
              this.frame.Y = num1 * 5;
              break;
            }
            if (this.frameCounter < (double) (num102 * 3))
            {
              this.frame.Y = num1 * 4;
              break;
            }
            if (this.frameCounter < (double) (num102 * 4))
            {
              this.frame.Y = num1 * 3;
              break;
            }
            if (this.frameCounter < (double) (num102 * 5))
            {
              this.frame.Y = num1 * 4;
              break;
            }
            this.frame.Y = num1 * 5;
            if (this.frameCounter >= (double) (num102 * 6 - 1))
            {
              this.frameCounter = 0.0;
              break;
            }
            break;
          }
          break;
        case 477:
          this.frameCounter += (double) this.velocity.Length() / 4.0;
          ++this.frameCounter;
          if (this.frameCounter >= 6.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
          }
          if (this.frame.Y / num1 > 5)
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 479:
          ++this.frameCounter;
          int num103 = 4;
          if (this.frameCounter < (double) num103)
          {
            this.frame.Y = 0;
            break;
          }
          if (this.frameCounter < (double) (num103 * 2))
          {
            this.frame.Y = num1;
            break;
          }
          if (this.frameCounter < (double) (num103 * 3))
          {
            this.frame.Y = num1 * 2;
            break;
          }
          if (this.frameCounter < (double) (num103 * 4 - 1))
          {
            this.frame.Y = num1;
            break;
          }
          this.frameCounter = 0.0;
          break;
        case 480:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.ai[2] < 0.0)
            {
              ++this.frameCounter;
              if (this.frameCounter > 3.0)
              {
                this.frame.Y += num1;
                this.frameCounter = 0.0;
              }
              if (this.frame.Y >= Main.npcFrameCount[this.type] * num1)
              {
                this.frame.Y = num1 * 21;
                break;
              }
              if (this.frame.Y < num1 * 21)
              {
                this.frame.Y = num1 * 21;
                break;
              }
              break;
            }
            if ((double) this.velocity.X == 0.0)
            {
              ++this.frameCounter;
              if (this.frameCounter > 4.0)
              {
                this.frame.Y += num1;
                this.frameCounter = 0.0;
              }
              if (this.frame.Y / num1 > 7)
              {
                this.frame.Y = 0;
                break;
              }
              break;
            }
            this.frameCounter += 1.0 + (double) Math.Abs(this.velocity.X);
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 4)
            {
              this.frame.Y = num1 * 10;
              break;
            }
            if (this.frame.Y / num1 < 10)
            {
              this.frame.Y = num1 * 10;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1 * 8;
          break;
        case 481:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.ai[2] > 0.0)
            {
              this.spriteDirection = this.direction;
              int num104 = 0;
              if ((double) this.ai[1] < 22.0)
                num104 = -14;
              else if ((double) this.ai[1] < 28.0)
                num104 = 3;
              else if ((double) this.ai[1] < 34.0)
                num104 = 2;
              else if ((double) this.ai[1] < 40.0)
                num104 = 1;
              this.frame.Y = num1 * (15 + num104);
              this.frameCounter = 0.0;
              break;
            }
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = num1;
              break;
            }
            if (this.frame.Y < num1 * 2)
              this.frame.Y = num1 * 2;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= 15)
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = 0;
          break;
        case 482:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.ai[2] < 0.0)
            {
              ++this.frameCounter;
              if (this.frameCounter > 3.0)
              {
                this.frame.Y += num1;
                this.frameCounter = 0.0;
              }
              if (this.frame.Y >= Main.npcFrameCount[this.type] * num1)
              {
                this.frame.Y = num1 * 11;
                break;
              }
              if (this.frame.Y < num1 * 11)
              {
                this.frame.Y = num1 * 11;
                break;
              }
              break;
            }
            if ((double) this.velocity.X == 0.0)
            {
              ++this.frameCounter;
              this.frame.Y = 0;
              break;
            }
            this.frameCounter += 0.20000000298023224 + (double) Math.Abs(this.velocity.X);
            if (this.frameCounter > 8.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 10)
            {
              this.frame.Y = num1 * 2;
              break;
            }
            if (this.frame.Y / num1 < 2)
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1;
          break;
        case 483:
          if ((double) this.ai[0] == -1.0)
          {
            ++this.frameCounter;
            if (this.frameCounter > 4.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y > num1 * 21)
              this.frame.Y = num1 * 21;
            else if (this.frame.Y < num1 * 13)
              this.frame.Y = num1 * 13;
            this.rotation += this.velocity.X * 0.2f;
            break;
          }
          ++this.frameCounter;
          if (this.frameCounter > 4.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y > num1 * 11)
            this.frame.Y = 0;
          this.rotation = this.velocity.X * 0.1f;
          break;
        case 485:
        case 486:
        case 487:
          this.spriteDirection = this.direction;
          this.localAI[0] = -2f;
          if ((double) this.velocity.Y == 0.0)
          {
            this.rotation = 0.0f;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = num1;
              this.frameCounter = 0.0;
            }
            else
            {
              this.frameCounter += (double) Math.Abs(this.velocity.X * 5f);
              if (this.frameCounter > 10.0)
              {
                this.frameCounter = 0.0;
                this.frame.Y += num1;
                if (this.frame.Y > num1 * 3)
                  this.frame.Y = 0;
              }
            }
          }
          else
          {
            this.rotation += (float) this.direction * 0.1f;
            this.frame.Y = num1;
          }
          int i2 = (int) this.Center.X / 16;
          int j3 = (int) this.position.Y / 16;
          Tile tileSafely2 = Framing.GetTileSafely(i2, j3);
          if (tileSafely2 != null)
          {
            if (tileSafely2.slope() == (byte) 0)
            {
              int j4 = j3 + 1;
              tileSafely2 = Framing.GetTileSafely(i2, j4);
            }
            if (tileSafely2.slope() == (byte) 1)
            {
              this.rotation = 0.785f;
              this.localAI[0] = 0.0f;
              break;
            }
            if (tileSafely2.slope() == (byte) 2)
            {
              this.rotation = -0.785f;
              this.localAI[0] = 0.0f;
              break;
            }
            break;
          }
          break;
        case 488:
          int num105 = (int) this.localAI[1];
          if (Framing.GetTileSafely((int) this.ai[0], (int) this.ai[1]).frameX >= (short) 36)
            num105 *= -1;
          if ((double) this.localAI[0] > 24.0)
            this.localAI[0] = 24f;
          if ((double) this.localAI[0] > 0.0)
            --this.localAI[0];
          if ((double) this.localAI[0] < 0.0)
            this.localAI[0] = 0.0f;
          int num106 = num105 == -1 ? 4 : 6;
          int num107 = (int) this.localAI[0] / num106;
          if ((double) this.localAI[0] % (double) num106 != 0.0)
            ++num107;
          if (num107 != 0 && num105 == 1)
            num107 += 5;
          this.frame.Y = num107 * num1;
          break;
        case 490:
          this.rotation = this.velocity.X * 0.15f;
          ++this.frameCounter;
          if (this.frameCounter > 6.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
          }
          if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 492:
          this.frame.Y = num1 * (int) this.ai[2];
          break;
        case 494:
        case 495:
          if ((double) this.ai[2] > 0.0)
          {
            if ((double) this.ai[2] < 7.0)
            {
              this.frame.Y = num1 * 5;
              break;
            }
            if ((double) this.ai[2] < 14.0)
            {
              this.frame.Y = num1 * 6;
              break;
            }
            if ((double) this.ai[2] < 20.0)
            {
              this.frame.Y = num1 * 7;
              break;
            }
            break;
          }
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
          }
          if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 || this.direction == 1 && (double) this.velocity.X < 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = (double) this.velocity.Y >= 0.0 ? num1 * 3 : num1 * 2;
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter < 8.0)
          {
            this.frame.Y = 0;
            break;
          }
          if (this.frameCounter < 16.0)
          {
            this.frame.Y = num1;
            break;
          }
          if (this.frameCounter < 24.0)
          {
            this.frame.Y = num1 * 2;
            break;
          }
          if (this.frameCounter < 32.0)
          {
            this.frame.Y = num1 * 3;
            break;
          }
          if (this.frameCounter < 39.0)
          {
            this.frame.Y = num1 * 4;
            break;
          }
          this.frame.Y = num1 * 4;
          this.frameCounter = 0.0;
          break;
        case 496:
        case 497:
          if ((double) this.ai[0] == 0.0)
          {
            this.rotation = 0.0f;
            if ((double) this.velocity.Y == 0.0)
              this.spriteDirection = this.direction;
            else if ((double) this.velocity.Y < 0.0)
              this.frameCounter = 0.0;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.1000000238418579;
            if (this.frameCounter < 6.0)
            {
              this.frame.Y = 0;
              break;
            }
            if (this.frameCounter < 12.0)
            {
              this.frame.Y = num1;
              break;
            }
            if (this.frameCounter < 18.0)
            {
              this.frame.Y = num1 * 2;
              break;
            }
            if (this.frameCounter < 24.0)
            {
              this.frame.Y = num1 * 3;
              break;
            }
            this.frameCounter = 0.0;
            break;
          }
          if ((double) this.ai[0] == 1.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = (double) this.ai[1] >= 10.0 ? ((double) this.ai[1] >= 20.0 ? num1 * 6 : num1 * 5) : num1 * 4;
            break;
          }
          if ((double) this.ai[0] == 5.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = (double) this.ai[1] >= 10.0 ? ((double) this.ai[1] >= 20.0 ? num1 * 3 : num1 * 11) : num1 * 10;
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1 * 7;
          break;
        case 498:
        case 499:
        case 500:
        case 501:
        case 502:
        case 503:
        case 504:
        case 505:
        case 506:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.ai[2] > 0.0)
            {
              this.spriteDirection = this.direction;
              this.frame.Y = (double) this.ai[1] >= 12.0 ? ((double) this.ai[1] >= 34.0 ? num1 * 8 : num1 * 9) : num1 * 8;
              this.frameCounter = 0.0;
              break;
            }
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              break;
            }
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
            if (this.frameCounter > 4.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y > num1 * 7)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1 * 10;
          break;
        case 508:
        case 532:
        case 580:
        case 582:
          if ((double) this.velocity.Y != 0.0)
          {
            this.frame.Y = num1;
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frame.Y = 0;
            break;
          }
          if (this.direction < 0 && (double) this.velocity.X < 0.0)
            this.spriteDirection = -1;
          if (this.direction > 0 && (double) this.velocity.X > 0.0)
            this.spriteDirection = 1;
          if (this.frame.Y / num1 < 2)
            this.frame.Y = num1 * 2;
          this.frameCounter += 1.0 + (double) Math.Abs(this.velocity.X) / 2.0;
          if (this.frameCounter > 6.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
          {
            this.frame.Y = num1 * 2;
            break;
          }
          break;
        case 509:
        case 581:
          if ((double) this.velocity.X > 0.0 && this.direction > 0 || (double) this.velocity.X < 0.0 && this.direction < 0)
            this.spriteDirection = this.direction;
          if (++this.frameCounter >= 3.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 516:
          if ((double) this.localAI[1] == 0.0)
          {
            this.localAI[1] = 1f;
            this.frame.Y = num1 * Main.rand.Next(3);
            this.frameCounter += (double) Main.rand.Next(3);
          }
          ++this.frameCounter;
          if (this.frameCounter > 3.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y > num1 * 3)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 518:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction != 0)
              this.spriteDirection = this.direction;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              this.frameCounter = 0.0;
              break;
            }
            if (this.frame.Y < num1 * 2)
              this.frame.Y = num1 * 2;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
            ++this.frameCounter;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.frame.Y = num1;
          this.frameCounter = 0.0;
          break;
        case 520:
          if ((double) this.velocity.Y == 0.0)
          {
            this.spriteDirection = this.direction;
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
            if (this.frameCounter > 6.0)
            {
              if ((double) Math.Abs(this.velocity.X) < 0.20000000298023224)
              {
                this.frame.Y = 0;
                this.frameCounter = 0.0;
              }
              else
              {
                this.frame.Y += num1;
                this.frameCounter = 0.0;
              }
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
              this.frame.Y = num1;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1;
          break;
        case 521:
          if ((double) this.velocity.X < 0.0)
            this.direction = -1;
          else
            this.direction = 1;
          if (this.direction != 0)
            this.spriteDirection = this.direction;
          this.rotation = (float) Math.Atan2((double) this.velocity.Y * (double) this.spriteDirection, (double) this.velocity.X * (double) this.spriteDirection) + this.velocity.X * 0.1f;
          if (++this.frameCounter >= 5.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 523:
          if (++this.frameCounter >= 6.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 524:
        case 525:
        case 526:
        case 527:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction != 0)
              this.spriteDirection = this.direction;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              this.frameCounter = 0.0;
              break;
            }
            if (this.frame.Y <= num1)
              this.frame.Y = num1 * 2;
            this.frameCounter += (double) Math.Abs(this.velocity.X);
            ++this.frameCounter;
            if (this.frameCounter > 9.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.frame.Y = num1;
          this.frameCounter = 0.0;
          break;
        case 528:
        case 529:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction != 0)
              this.spriteDirection = this.direction;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              this.frameCounter = 0.0;
              break;
            }
            this.frameCounter += (double) Math.Abs(this.velocity.X);
            ++this.frameCounter;
            if (this.frameCounter > 9.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type] - 1)
            {
              this.frame.Y = num1;
              break;
            }
            break;
          }
          this.frame.Y = num1 * (Main.npcFrameCount[this.type] - 1);
          this.frameCounter = 0.0;
          break;
        case 533:
          if ((double) this.velocity.Y == 0.0 && this.direction != 0)
            this.spriteDirection = this.direction;
          ++this.frameCounter;
          if (this.frameCounter >= 48.0)
            this.frameCounter = 0.0;
          this.frame.Y = (int) (this.frameCounter / 6.0) * num1;
          if ((double) this.ai[1] > 0.0)
          {
            this.frame.Y += num1 * 8;
            break;
          }
          break;
        case 541:
          if ((double) this.ai[0] > 0.0)
          {
            float num108 = this.ai[0];
            this.frame.Y = (double) num108 >= 6.0 ? ((double) num108 >= 105.0 ? ((double) num108 >= 114.0 ? ((double) num108 >= 135.0 ? num1 : num1 * (int) (((double) num108 - 99.0 - 15.0) / 7.0 + 10.0)) : num1 * 9) : num1 * (int) ((double) num108 / 8.0 % 4.0 + 5.0)) : num1 * 4;
            break;
          }
          this.frameCounter = this.frameCounter + (double) this.velocity.Length() * 0.10000000149011612 + 1.0;
          if (this.frameCounter >= 8.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * 4)
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 542:
        case 543:
        case 544:
        case 545:
          this.spriteDirection = this.direction;
          ++this.frameCounter;
          if (this.frameCounter >= 16.0)
            this.frameCounter = 0.0;
          this.frame.Y = num1 * (int) (this.frameCounter / 4.0);
          break;
        case 549:
          this.spriteDirection = 1;
          this.rotation = 0.0f;
          if (++this.frameCounter >= 6.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
            if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 551:
          int num109 = this.frame.Y / num1;
          int num110;
          if ((double) this.ai[0] == 4.0)
          {
            float num111 = 60f;
            int num112 = 6 * 10;
            if (num109 < 5)
              this.frameCounter = 0.0;
            num110 = 5;
            this.frameCounter = (double) (int) this.ai[1];
            int num113 = 0;
            double frameCounter1 = this.frameCounter;
            int num114 = num113 + 1;
            int num115 = num114;
            double num116 = (double) (5 * num114);
            if (frameCounter1 >= num116)
              num110 = 6;
            num115 = 0;
            if (this.frameCounter >= (double) num111 - 6.0)
              num110 = 7;
            if (this.frameCounter >= (double) num111 - 3.0)
              num110 = 8;
            if (this.frameCounter >= (double) num111)
              num110 = 9 + (int) this.frameCounter / 3 % 2;
            int num117 = 0;
            if (this.frameCounter >= (double) num111 + (double) num112 + 3.0)
              num110 = 8;
            double frameCounter2 = this.frameCounter;
            double num118 = (double) num111 + (double) num112 + 3.0;
            int num119 = num117 + 1;
            int num120 = num119;
            double num121 = (double) (5 * num119);
            double num122 = num118 + num121;
            if (frameCounter2 >= num122)
              num110 = 7;
            double frameCounter3 = this.frameCounter;
            double num123 = (double) num111 + (double) num112 + 3.0;
            int num124 = num120 + 1;
            num115 = num124;
            double num125 = (double) (5 * num124);
            double num126 = num123 + num125;
            if (frameCounter3 >= num126)
              num110 = 0;
          }
          else if ((double) this.ai[0] == 3.0)
          {
            float num127 = 40f;
            float num128 = 80f;
            float num129 = num127 + num128;
            float num130 = 25f;
            if (num109 < 5)
              this.frameCounter = 0.0;
            num110 = 5;
            this.frameCounter = (double) (int) this.ai[1];
            int num131 = 0;
            double frameCounter4 = this.frameCounter;
            int num132 = num131 + 1;
            int num133 = num132;
            double num134 = (double) (5 * num132);
            if (frameCounter4 >= num134)
              num110 = 6;
            num133 = 0;
            if (this.frameCounter >= (double) num127 - 6.0)
              num110 = 7;
            if (this.frameCounter >= (double) num127 - 3.0)
              num110 = 8;
            if (this.frameCounter >= (double) num127)
              num110 = 9 + (int) this.frameCounter / 3 % 2;
            int num135 = 0;
            if (this.frameCounter >= (double) num129 - (double) num130 + 3.0)
              num110 = 8;
            double frameCounter5 = this.frameCounter;
            double num136 = (double) num129 - (double) num130 + 3.0;
            int num137 = num135 + 1;
            int num138 = num137;
            double num139 = (double) (5 * num137);
            double num140 = num136 + num139;
            if (frameCounter5 >= num140)
              num110 = 7;
            double frameCounter6 = this.frameCounter;
            double num141 = (double) num129 - (double) num130 + 3.0;
            int num142 = num138 + 1;
            num133 = num142;
            double num143 = (double) (5 * num142);
            double num144 = num141 + num143;
            if (frameCounter6 >= num144)
              num110 = 0;
          }
          else if ((double) this.ai[0] == 5.0)
            num110 = 3;
          else if ((double) this.ai[0] == 6.0)
          {
            if (num109 > 4)
              this.frameCounter = 0.0;
            num110 = 1;
            this.frameCounter = (double) (int) this.ai[1];
            int num145 = 0;
            double frameCounter7 = this.frameCounter;
            int num146 = num145 + 1;
            int num147 = num146;
            double num148 = (double) (8 * num146);
            if (frameCounter7 >= num148)
              num110 = 2;
            double frameCounter8 = this.frameCounter;
            int num149 = num147 + 1;
            int num150 = num149;
            double num151 = (double) (8 * num149);
            if (frameCounter8 >= num151)
              num110 = 3;
            double frameCounter9 = this.frameCounter;
            int num152 = num150 + 1;
            int num153 = num152;
            double num154 = (double) (8 * num152);
            if (frameCounter9 >= num154)
              num110 = 4;
            double frameCounter10 = this.frameCounter;
            int num155 = num153 + 1;
            int num156 = num155;
            double num157 = (double) (8 * num155);
            if (frameCounter10 >= num157)
              num110 = 3;
            double frameCounter11 = this.frameCounter;
            int num158 = num156 + 1;
            int num159 = num158;
            double num160 = (double) (8 * num158);
            if (frameCounter11 >= num160)
              num110 = 4;
            double frameCounter12 = this.frameCounter;
            int num161 = num159 + 1;
            int num162 = num161;
            double num163 = (double) (8 * num161);
            if (frameCounter12 >= num163)
              num110 = 3;
            double frameCounter13 = this.frameCounter;
            int num164 = num162 + 1;
            int num165 = num164;
            double num166 = (double) (8 * num164);
            if (frameCounter13 >= num166)
              num110 = 2;
            double frameCounter14 = this.frameCounter;
            int num167 = num165 + 1;
            int num168 = num167;
            double num169 = (double) (8 * num167);
            if (frameCounter14 >= num169)
              num110 = 1;
            if (this.frameCounter >= (double) (8 * (num168 + 1)))
              num110 = 0;
          }
          else
            num110 = 0;
          this.frame.Y = num1 * num110;
          break;
        case 552:
        case 553:
        case 554:
          if ((double) this.ai[0] > 0.0)
          {
            this.spriteDirection = this.direction;
            if (this.frame.Y < num1 * 10 || this.frame.Y > num1 * 13 || (double) this.ai[1] == 29.0)
            {
              this.frame.Y = num1 * 10;
              this.frameCounter = 0.0;
            }
            if (++this.frameCounter >= 6.0 && this.frame.Y < num1 * 13)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              break;
            }
            break;
          }
          if ((double) this.velocity.Y == 0.0)
            this.spriteDirection = this.direction;
          if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 || this.direction == 1 && (double) this.velocity.X < 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 8;
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 9;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
            this.frameCounter = 0.0;
          this.frame.Y = num1 * (int) (this.frameCounter / 8.0);
          break;
        case 555:
        case 556:
        case 557:
          if ((double) this.ai[1] > 0.0 && (double) this.ai[0] > 0.0)
          {
            this.spriteDirection = this.direction;
            if (this.frame.Y < num1 * 10 || this.frame.Y > num1 * 16 || (double) this.ai[1] == 41.0)
            {
              this.frame.Y = num1 * 10;
              this.frameCounter = 0.0;
            }
            if (++this.frameCounter >= 6.0 && this.frame.Y < num1 * 16)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              break;
            }
            break;
          }
          if ((double) this.velocity.Y == 0.0)
            this.spriteDirection = this.direction;
          if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 || this.direction == 1 && (double) this.velocity.X < 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1;
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
            this.frameCounter = 0.0;
          this.frame.Y = num1 * ((int) (this.frameCounter / 8.0) + 2);
          break;
        case 558:
        case 559:
        case 560:
          if ((double) this.velocity.X > 0.0)
            this.spriteDirection = 1;
          if ((double) this.velocity.X < 0.0)
            this.spriteDirection = -1;
          float num170 = this.velocity.ToRotation();
          if ((double) this.velocity.X < 0.0)
            num170 += 3.14159274f;
          if ((double) this.ai[0] != 2.0)
            num170 = this.velocity.X * 0.1f;
          this.rotation = num170;
          if ((double) this.ai[0] == 2.0)
          {
            this.frame.Y = num1 * 4;
            break;
          }
          if (++this.frameCounter >= 6.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
            if (this.frame.Y >= num1 * 4)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 561:
        case 562:
        case 563:
          if ((double) this.ai[1] > 0.0 && (double) this.ai[0] > 0.0)
          {
            this.spriteDirection = this.direction;
            if (this.frame.Y < num1 * 10 || this.frame.Y > num1 * 13 || (double) this.ai[1] == 89.0)
            {
              this.frame.Y = num1 * 10;
              this.frameCounter = 0.0;
            }
            if (++this.frameCounter >= 6.0 && this.frame.Y < num1 * 13)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              break;
            }
            break;
          }
          if ((double) this.velocity.Y == 0.0)
            this.spriteDirection = this.direction;
          if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 || this.direction == 1 && (double) this.velocity.X < 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 8;
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 9;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
            this.frameCounter = 0.0;
          this.frame.Y = num1 * (int) (this.frameCounter / 8.0);
          break;
        case 564:
        case 565:
          int y1 = this.frame.Y;
          this.frame.Width = 80;
          this.frame.Height = 80;
          int num171;
          if ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 0.0)
          {
            this.spriteDirection = this.direction;
            if (y1 < 5 || y1 > 13)
              this.frameCounter = 0.0;
            num171 = 5;
            ++this.frameCounter;
            int num172 = 0;
            double frameCounter15 = this.frameCounter;
            int num173 = num172 + 1;
            int num174 = num173;
            double num175 = (double) (7 * num173);
            if (frameCounter15 >= num175)
              num171 = 6;
            double frameCounter16 = this.frameCounter;
            int num176 = num174 + 1;
            int num177 = num176;
            double num178 = (double) (7 * num176);
            if (frameCounter16 >= num178)
              num171 = 7;
            double frameCounter17 = this.frameCounter;
            int num179 = num177 + 1;
            int num180 = num179;
            double num181 = (double) (7 * num179);
            if (frameCounter17 >= num181)
              num171 = 5;
            double frameCounter18 = this.frameCounter;
            int num182 = num180 + 1;
            int num183 = num182;
            double num184 = (double) (7 * num182);
            if (frameCounter18 >= num184)
              num171 = 6;
            double frameCounter19 = this.frameCounter;
            int num185 = num183 + 1;
            int num186 = num185;
            double num187 = (double) (7 * num185);
            if (frameCounter19 >= num187)
              num171 = 7;
            double frameCounter20 = this.frameCounter;
            int num188 = num186 + 1;
            int num189 = num188;
            double num190 = (double) (7 * num188);
            if (frameCounter20 >= num190)
              num171 = 5;
            double frameCounter21 = this.frameCounter;
            int num191 = num189 + 1;
            int num192 = num191;
            double num193 = (double) (7 * num191);
            if (frameCounter21 >= num193)
              num171 = 6;
            double frameCounter22 = this.frameCounter;
            int num194 = num192 + 1;
            int num195 = num194;
            double num196 = (double) (7 * num194);
            if (frameCounter22 >= num196)
              num171 = 7;
            double frameCounter23 = this.frameCounter;
            int num197 = num195 + 1;
            int num198 = num197;
            double num199 = (double) (7 * num197);
            if (frameCounter23 >= num199)
              num171 = 8;
            double frameCounter24 = this.frameCounter;
            int num200 = num198 + 1;
            int num201 = num200;
            double num202 = (double) (7 * num200);
            if (frameCounter24 >= num202)
              num171 = 9;
            double frameCounter25 = this.frameCounter;
            int num203 = num201 + 1;
            int num204 = num203;
            double num205 = (double) (7 * num203);
            if (frameCounter25 >= num205)
              num171 = 10;
            double frameCounter26 = this.frameCounter;
            int num206 = num204 + 1;
            int num207 = num206;
            double num208 = (double) (7 * num206);
            if (frameCounter26 >= num208)
              num171 = 11;
            double frameCounter27 = this.frameCounter;
            int num209 = num207 + 1;
            int num210 = num209;
            double num211 = (double) (7 * num209);
            if (frameCounter27 >= num211)
              num171 = 12;
            if (this.frameCounter >= (double) (7 * (num210 + 1)))
            {
              num171 = 5;
              this.frameCounter = 0.0;
            }
          }
          else if ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 1.0)
          {
            this.spriteDirection = this.direction;
            if (y1 < 13 || y1 > 25)
              this.frameCounter = 0.0;
            num171 = 13;
            ++this.frameCounter;
            int num212 = 0;
            double frameCounter28 = this.frameCounter;
            int num213 = num212 + 1;
            int num214 = num213;
            double num215 = (double) (8 * num213);
            if (frameCounter28 >= num215)
              num171 = 14;
            double frameCounter29 = this.frameCounter;
            int num216 = num214 + 1;
            int num217 = num216;
            double num218 = (double) (8 * num216);
            if (frameCounter29 >= num218)
              num171 = 15;
            double frameCounter30 = this.frameCounter;
            int num219 = num217 + 1;
            int num220 = num219;
            double num221 = (double) (8 * num219);
            if (frameCounter30 >= num221)
              num171 = 16;
            double frameCounter31 = this.frameCounter;
            int num222 = num220 + 1;
            int num223 = num222;
            double num224 = (double) (8 * num222);
            if (frameCounter31 >= num224)
              num171 = 17;
            double frameCounter32 = this.frameCounter;
            int num225 = num223 + 1;
            int num226 = num225;
            double num227 = (double) (8 * num225);
            if (frameCounter32 >= num227)
              num171 = 18;
            double frameCounter33 = this.frameCounter;
            int num228 = num226 + 1;
            int num229 = num228;
            double num230 = (double) (8 * num228);
            if (frameCounter33 >= num230)
              num171 = 19;
            double frameCounter34 = this.frameCounter;
            int num231 = num229 + 1;
            int num232 = num231;
            double num233 = (double) (8 * num231);
            if (frameCounter34 >= num233)
              num171 = 20;
            double frameCounter35 = this.frameCounter;
            int num234 = num232 + 1;
            int num235 = num234;
            double num236 = (double) (8 * num234);
            if (frameCounter35 >= num236)
              num171 = 18;
            double frameCounter36 = this.frameCounter;
            int num237 = num235 + 1;
            int num238 = num237;
            double num239 = (double) (8 * num237);
            if (frameCounter36 >= num239)
              num171 = 19;
            double frameCounter37 = this.frameCounter;
            int num240 = num238 + 1;
            int num241 = num240;
            double num242 = (double) (8 * num240);
            if (frameCounter37 >= num242)
              num171 = 20;
            double frameCounter38 = this.frameCounter;
            int num243 = num241 + 1;
            int num244 = num243;
            double num245 = (double) (8 * num243);
            if (frameCounter38 >= num245)
              num171 = 21;
            double frameCounter39 = this.frameCounter;
            int num246 = num244 + 1;
            int num247 = num246;
            double num248 = (double) (8 * num246);
            if (frameCounter39 >= num248)
              num171 = 22;
            double frameCounter40 = this.frameCounter;
            int num249 = num247 + 1;
            int num250 = num249;
            double num251 = (double) (8 * num249);
            if (frameCounter40 >= num251)
              num171 = 23;
            double frameCounter41 = this.frameCounter;
            int num252 = num250 + 1;
            int num253 = num252;
            double num254 = (double) (8 * num252);
            if (frameCounter41 >= num254)
              num171 = 24;
            double frameCounter42 = this.frameCounter;
            int num255 = num253 + 1;
            int num256 = num255;
            double num257 = (double) (8 * num255);
            if (frameCounter42 >= num257)
              num171 = 25;
            if (this.frameCounter >= (double) (8 * (num256 + 1)))
            {
              num171 = 14;
              this.frameCounter = 0.0;
            }
          }
          else if ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 2.0)
          {
            this.spriteDirection = this.direction;
            if (y1 < 26 || y1 > 40)
              this.frameCounter = 0.0;
            num171 = 26;
            ++this.frameCounter;
            int num258 = 0;
            double frameCounter43 = this.frameCounter;
            int num259 = num258 + 1;
            int num260 = num259;
            double num261 = (double) (8 * num259);
            if (frameCounter43 >= num261)
              num171 = 27;
            double frameCounter44 = this.frameCounter;
            int num262 = num260 + 1;
            int num263 = num262;
            double num264 = (double) (8 * num262);
            if (frameCounter44 >= num264)
              num171 = 28;
            double frameCounter45 = this.frameCounter;
            int num265 = num263 + 1;
            int num266 = num265;
            double num267 = (double) (8 * num265);
            if (frameCounter45 >= num267)
              num171 = 29;
            double frameCounter46 = this.frameCounter;
            int num268 = num266 + 1;
            int num269 = num268;
            double num270 = (double) (8 * num268);
            if (frameCounter46 >= num270)
              num171 = 26;
            double frameCounter47 = this.frameCounter;
            int num271 = num269 + 1;
            int num272 = num271;
            double num273 = (double) (8 * num271);
            if (frameCounter47 >= num273)
              num171 = 27;
            double frameCounter48 = this.frameCounter;
            int num274 = num272 + 1;
            int num275 = num274;
            double num276 = (double) (8 * num274);
            if (frameCounter48 >= num276)
              num171 = 28;
            double frameCounter49 = this.frameCounter;
            int num277 = num275 + 1;
            int num278 = num277;
            double num279 = (double) (8 * num277);
            if (frameCounter49 >= num279)
              num171 = 29;
            double frameCounter50 = this.frameCounter;
            int num280 = num278 + 1;
            int num281 = num280;
            double num282 = (double) (8 * num280);
            if (frameCounter50 >= num282)
              num171 = 26;
            double frameCounter51 = this.frameCounter;
            int num283 = num281 + 1;
            int num284 = num283;
            double num285 = (double) (8 * num283);
            if (frameCounter51 >= num285)
              num171 = 27;
            double frameCounter52 = this.frameCounter;
            int num286 = num284 + 1;
            int num287 = num286;
            double num288 = (double) (8 * num286);
            if (frameCounter52 >= num288)
              num171 = 28;
            double frameCounter53 = this.frameCounter;
            int num289 = num287 + 1;
            int num290 = num289;
            double num291 = (double) (8 * num289);
            if (frameCounter53 >= num291)
              num171 = 29;
            double frameCounter54 = this.frameCounter;
            int num292 = num290 + 1;
            int num293 = num292;
            double num294 = (double) (8 * num292);
            if (frameCounter54 >= num294)
              num171 = 30;
            double frameCounter55 = this.frameCounter;
            int num295 = num293 + 1;
            int num296 = num295;
            double num297 = (double) (8 * num295);
            if (frameCounter55 >= num297)
              num171 = 31;
            double frameCounter56 = this.frameCounter;
            int num298 = num296 + 1;
            int num299 = num298;
            double num300 = (double) (8 * num298);
            if (frameCounter56 >= num300)
              num171 = 32;
            double frameCounter57 = this.frameCounter;
            int num301 = num299 + 1;
            int num302 = num301;
            double num303 = (double) (8 * num301);
            if (frameCounter57 >= num303)
              num171 = 33;
            double frameCounter58 = this.frameCounter;
            int num304 = num302 + 1;
            int num305 = num304;
            double num306 = (double) (8 * num304);
            if (frameCounter58 >= num306)
              num171 = 34;
            double frameCounter59 = this.frameCounter;
            int num307 = num305 + 1;
            int num308 = num307;
            double num309 = (double) (8 * num307);
            if (frameCounter59 >= num309)
              num171 = 35;
            double frameCounter60 = this.frameCounter;
            int num310 = num308 + 1;
            int num311 = num310;
            double num312 = (double) (8 * num310);
            if (frameCounter60 >= num312)
              num171 = 36;
            double frameCounter61 = this.frameCounter;
            int num313 = num311 + 1;
            int num314 = num313;
            double num315 = (double) (8 * num313);
            if (frameCounter61 >= num315)
              num171 = 37;
            double frameCounter62 = this.frameCounter;
            int num316 = num314 + 1;
            int num317 = num316;
            double num318 = (double) (8 * num316);
            if (frameCounter62 >= num318)
              num171 = 38;
            double frameCounter63 = this.frameCounter;
            int num319 = num317 + 1;
            int num320 = num319;
            double num321 = (double) (8 * num319);
            if (frameCounter63 >= num321)
              num171 = 39;
            double frameCounter64 = this.frameCounter;
            int num322 = num320 + 1;
            int num323 = num322;
            double num324 = (double) (8 * num322);
            if (frameCounter64 >= num324)
              num171 = 40;
            if (this.frameCounter >= (double) (8 * (num323 + 1)))
            {
              num171 = 26;
              this.frameCounter = 0.0;
            }
          }
          else
          {
            this.frameCounter = this.frameCounter + (double) this.velocity.Length() * 0.10000000149011612 + 1.0;
            if (this.frameCounter >= 40.0 || this.frameCounter < 0.0)
              this.frameCounter = 0.0;
            num171 = (int) (this.frameCounter / 8.0);
          }
          this.frame.Y = num171;
          break;
        case 566:
        case 567:
          if ((double) this.velocity.Y == 0.0)
            this.spriteDirection = this.direction;
          if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 || this.direction == 1 && (double) this.velocity.X < 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 8;
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
            this.frameCounter = 0.0;
          this.frame.Y = num1 * (int) (this.frameCounter / 8.0);
          break;
        case 568:
        case 569:
          if ((double) this.ai[0] > 0.0)
          {
            int num325 = this.frame.Y / num1;
            this.spriteDirection = this.direction;
            if (num325 < 5 || num325 > 16)
              this.frameCounter = 0.0;
            int num326 = 7;
            ++this.frameCounter;
            int num327 = 0;
            double frameCounter65 = this.frameCounter;
            int num328 = num327 + 1;
            int num329 = num328;
            double num330 = (double) (5 * num328);
            if (frameCounter65 >= num330)
              num326 = 8;
            double frameCounter66 = this.frameCounter;
            int num331 = num329 + 1;
            int num332 = num331;
            double num333 = (double) (5 * num331);
            if (frameCounter66 >= num333)
              num326 = 9;
            double frameCounter67 = this.frameCounter;
            int num334 = num332 + 1;
            int num335 = num334;
            double num336 = (double) (5 * num334);
            if (frameCounter67 >= num336)
              num326 = 10;
            double frameCounter68 = this.frameCounter;
            int num337 = num335 + 1;
            int num338 = num337;
            double num339 = (double) (5 * num337);
            if (frameCounter68 >= num339)
              num326 = 7;
            double frameCounter69 = this.frameCounter;
            int num340 = num338 + 1;
            int num341 = num340;
            double num342 = (double) (5 * num340);
            if (frameCounter69 >= num342)
              num326 = 8;
            double frameCounter70 = this.frameCounter;
            int num343 = num341 + 1;
            int num344 = num343;
            double num345 = (double) (5 * num343);
            if (frameCounter70 >= num345)
              num326 = 9;
            double frameCounter71 = this.frameCounter;
            int num346 = num344 + 1;
            int num347 = num346;
            double num348 = (double) (5 * num346);
            if (frameCounter71 >= num348)
              num326 = 10;
            double frameCounter72 = this.frameCounter;
            int num349 = num347 + 1;
            int num350 = num349;
            double num351 = (double) (5 * num349);
            if (frameCounter72 >= num351)
              num326 = 7;
            double frameCounter73 = this.frameCounter;
            int num352 = num350 + 1;
            int num353 = num352;
            double num354 = (double) (5 * num352);
            if (frameCounter73 >= num354)
              num326 = 8;
            double frameCounter74 = this.frameCounter;
            int num355 = num353 + 1;
            int num356 = num355;
            double num357 = (double) (5 * num355);
            if (frameCounter74 >= num357)
              num326 = 9;
            double frameCounter75 = this.frameCounter;
            int num358 = num356 + 1;
            int num359 = num358;
            double num360 = (double) (5 * num358);
            if (frameCounter75 >= num360)
              num326 = 10;
            double frameCounter76 = this.frameCounter;
            int num361 = num359 + 1;
            int num362 = num361;
            double num363 = (double) (5 * num361);
            if (frameCounter76 >= num363)
              num326 = 7;
            double frameCounter77 = this.frameCounter;
            int num364 = num362 + 1;
            int num365 = num364;
            double num366 = (double) (5 * num364);
            if (frameCounter77 >= num366)
              num326 = 8;
            double frameCounter78 = this.frameCounter;
            int num367 = num365 + 1;
            int num368 = num367;
            double num369 = (double) (5 * num367);
            if (frameCounter78 >= num369)
              num326 = 9;
            double frameCounter79 = this.frameCounter;
            int num370 = num368 + 1;
            int num371 = num370;
            double num372 = (double) (5 * num370);
            if (frameCounter79 >= num372)
              num326 = 10;
            double frameCounter80 = this.frameCounter;
            int num373 = num371 + 1;
            int num374 = num373;
            double num375 = (double) (5 * num373);
            if (frameCounter80 >= num375)
              num326 = 7;
            double frameCounter81 = this.frameCounter;
            int num376 = num374 + 1;
            int num377 = num376;
            double num378 = (double) (5 * num376);
            if (frameCounter81 >= num378)
              num326 = 8;
            double frameCounter82 = this.frameCounter;
            int num379 = num377 + 1;
            int num380 = num379;
            double num381 = (double) (5 * num379);
            if (frameCounter82 >= num381)
              num326 = 9;
            double frameCounter83 = this.frameCounter;
            int num382 = num380 + 1;
            int num383 = num382;
            double num384 = (double) (5 * num382);
            if (frameCounter83 >= num384)
              num326 = 10;
            double frameCounter84 = this.frameCounter;
            int num385 = num383 + 1;
            int num386 = num385;
            double num387 = (double) (5 * num385);
            if (frameCounter84 >= num387)
              num326 = 7;
            double frameCounter85 = this.frameCounter;
            int num388 = num386 + 1;
            int num389 = num388;
            double num390 = (double) (5 * num388);
            if (frameCounter85 >= num390)
              num326 = 8;
            double frameCounter86 = this.frameCounter;
            int num391 = num389 + 1;
            int num392 = num391;
            double num393 = (double) (5 * num391);
            if (frameCounter86 >= num393)
              num326 = 9;
            double frameCounter87 = this.frameCounter;
            int num394 = num392 + 1;
            int num395 = num394;
            double num396 = (double) (5 * num394);
            if (frameCounter87 >= num396)
              num326 = 10;
            double frameCounter88 = this.frameCounter;
            int num397 = num395 + 1;
            int num398 = num397;
            double num399 = (double) (5 * num397);
            if (frameCounter88 >= num399)
              num326 = 11;
            double frameCounter89 = this.frameCounter;
            int num400 = num398 + 1;
            int num401 = num400;
            double num402 = (double) (5 * num400);
            if (frameCounter89 >= num402)
              num326 = 12;
            double frameCounter90 = this.frameCounter;
            int num403 = num401 + 1;
            int num404 = num403;
            double num405 = (double) (5 * num403);
            if (frameCounter90 >= num405)
              num326 = 13;
            if (this.frameCounter >= (double) (5 * (num404 + 1)))
              num326 = 14;
            if (this.frameCounter >= 270.0)
            {
              num326 = 14;
              this.frameCounter -= 10.0;
            }
            this.frame.Y = num1 * num326;
            break;
          }
          if ((double) this.velocity.Y == 0.0)
            this.spriteDirection = this.direction;
          if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 || this.direction == 1 && (double) this.velocity.X < 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 4;
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 6;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter >= 56.0 || this.frameCounter < 0.0)
            this.frameCounter = 0.0;
          this.frame.Y = num1 * (int) (this.frameCounter / 8.0);
          break;
        case 570:
        case 571:
          if ((double) this.ai[1] > 0.0 && (double) this.ai[0] > 0.0)
          {
            this.spriteDirection = this.direction;
            if (this.frame.Y < num1 * 10 || this.frame.Y > num1 * 15 || (double) this.ai[1] == 59.0)
            {
              this.frame.Y = num1 * 10;
              this.frameCounter = 0.0;
            }
            int num406 = 5;
            if (this.frame.Y == num1 * 14)
              num406 = 35;
            if (++this.frameCounter >= (double) num406 && this.frame.Y < num1 * 15)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              break;
            }
            break;
          }
          if ((double) this.velocity.Y == 0.0)
            this.spriteDirection = this.direction;
          if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 || this.direction == 1 && (double) this.velocity.X < 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1;
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 9;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
            this.frameCounter = 0.0;
          this.frame.Y = num1 * (int) (this.frameCounter / 8.0 + 2.0);
          break;
        case 572:
        case 573:
          if ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 0.0)
          {
            this.spriteDirection = this.direction;
            if (this.frame.Y != num1 * 8 || this.frameCounter > 2.0)
            {
              this.frame.Y = num1 * 8;
              this.frameCounter = 0.0;
            }
            if (this.frameCounter == 0.0)
            {
              this.frameCounter = 1.0;
              EmoteBubble.NewBubble(3, new WorldUIAnchor((Entity) this), 60);
              break;
            }
            break;
          }
          if ((double) this.ai[1] == 1.0)
          {
            if ((double) this.velocity.Y == 0.0)
              this.spriteDirection = this.direction;
            if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 || this.direction == 1 && (double) this.velocity.X < 0.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y = num1 * 17;
              break;
            }
            if ((double) this.velocity.X == 0.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y = num1 * 8;
              break;
            }
            this.frameCounter += (double) Math.Abs(this.velocity.X);
            if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
              this.frameCounter = 0.0;
            this.frame.Y = num1 * ((int) (this.frameCounter / 8.0) + 8);
            break;
          }
          if ((double) this.velocity.Y == 0.0)
            this.spriteDirection = this.direction;
          if ((double) this.velocity.Y != 0.0 || this.direction == -1 && (double) this.velocity.X > 0.0 || this.direction == 1 && (double) this.velocity.X < 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 16;
            break;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter >= 64.0 || this.frameCounter < 0.0)
            this.frameCounter = 0.0;
          this.frame.Y = num1 * (int) (this.frameCounter / 8.0);
          break;
        case 574:
        case 575:
          if ((double) this.velocity.X > 0.0)
            this.spriteDirection = 1;
          if ((double) this.velocity.X < 0.0)
            this.spriteDirection = -1;
          float rotation = this.velocity.ToRotation();
          if ((double) this.velocity.X < 0.0)
            rotation += 3.14159274f;
          this.rotation = this.rotation.AngleTowards(rotation, 0.02f);
          if ((double) this.ai[0] != 0.0)
          {
            if (this.frame.Y < num1 * 2)
            {
              this.frame.Y = num1 * 2;
              this.frameCounter = 0.0;
            }
            int num407 = 4;
            if (this.frame.Y >= num1 * 5)
              num407 = 8;
            Vector2 Position = this.Center + new Vector2((float) (56 * this.spriteDirection), -30f).RotatedBy((double) this.rotation);
            if (++this.frameCounter >= (double) num407 && this.frame.Y < num1 * 9)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              if (this.frame.Y == num1 * 9)
              {
                for (int index = 0; index < 8; ++index)
                {
                  Dust dust = Dust.NewDustDirect(Position, 0, 0, 6, Alpha: 100);
                  dust.velocity *= 3f;
                  dust.scale = 0.6f;
                  dust.fadeIn = 1.2f;
                  dust.noGravity = true;
                  dust.noLight = true;
                }
              }
            }
            if (this.frame.Y >= num1 * 9 && (double) this.ai[0] < 3.0)
            {
              Vector2 vector2_1 = Position;
              Vector2 vector2_2 = Position + (this.oldPos[3] - this.position);
              int maxValue = 5;
              if (this.frameCounter > 60.0)
                maxValue = 4;
              if (this.frameCounter > 180.0)
                maxValue = 3;
              if (this.frameCounter > 300.0)
                maxValue = 2;
              if (this.frameCounter > 600.0)
                maxValue = 1;
              for (int index = 0; index < 2; ++index)
              {
                if (Main.rand.Next(maxValue) == 0)
                {
                  Dust dust = Dust.NewDustDirect(Vector2.Lerp(vector2_2, vector2_1, (float) ((double) index / 10.0 + 0.10000000149011612)), 0, 0, 6, Alpha: 50);
                  dust.scale = 0.3f;
                  dust.fadeIn = 1.5f;
                  dust.noGravity = true;
                  dust.noLight = true;
                }
              }
              break;
            }
            break;
          }
          if (++this.frameCounter >= 6.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
            if (this.frame.Y >= num1 * 2)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 576:
        case 577:
          int num408 = this.frame.Y;
          this.frame.Width = 80;
          if ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 0.0)
          {
            this.spriteDirection = this.direction;
            if (num408 < 11 || num408 > 20)
            {
              num408 = 11;
              this.frameCounter = 0.0;
            }
            int num409 = 4;
            if (num408 == 13 || num408 == 19)
              num409 = 8;
            if (num408 == 14 || num408 == 18)
              num409 = 2;
            if (++this.frameCounter >= (double) num409 && num408 < 20)
            {
              this.frameCounter = 0.0;
              ++num408;
            }
          }
          else if ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 2.0)
          {
            this.spriteDirection = this.direction;
            if (num408 < 37 || num408 > 47)
            {
              num408 = 39;
              this.frameCounter = 0.0;
            }
            int num410 = 5;
            if (num408 == 42)
              num410 = 6;
            if (num408 == 45)
              num410 = 8;
            if (num408 == 46)
              num410 = 4;
            if (num408 == 47)
              num410 = 26;
            if (num408 == 37 || num408 == 38)
              num410 = 7;
            bool flag7 = true;
            if (num408 == 46 && (double) this.velocity.Y != 0.0)
              flag7 = false;
            if (num408 == 38)
              flag7 = false;
            if (flag7)
              ++this.frameCounter;
            if (this.frameCounter >= (double) num410)
            {
              if (num408 < 47)
              {
                this.frameCounter = 0.0;
                ++num408;
              }
              else
              {
                num408 = 37;
                this.frameCounter = 0.0;
              }
            }
          }
          else if ((double) this.ai[0] > 0.0 && (double) this.ai[1] == 1.0)
          {
            this.spriteDirection = this.direction;
            if (num408 < 21 || num408 > 38)
            {
              num408 = 21;
              this.frameCounter = 0.0;
            }
            if (++this.frameCounter >= 5.0 && num408 < 38)
            {
              this.frameCounter = 0.0;
              ++num408;
            }
          }
          else
          {
            if ((double) this.velocity.Y == 0.0)
              this.spriteDirection = this.direction;
            if ((double) this.velocity.Y != 0.0)
            {
              this.frameCounter = 0.0;
              num408 = 43;
            }
            else if ((double) this.velocity.X == 0.0)
            {
              this.frameCounter = 0.0;
              num408 = 0;
            }
            else
            {
              this.frameCounter += (double) Math.Abs(this.velocity.X);
              if (this.frameCounter >= 60.0 || this.frameCounter < 0.0)
                this.frameCounter = 0.0;
              num408 = 1 + (int) (this.frameCounter / 6.0);
            }
          }
          this.frame.Y = num408;
          break;
        case 578:
          this.rotation = this.velocity.X * 0.1f;
          if (++this.frameCounter >= 4.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
            if (this.frame.Y >= num1 * 4)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 583:
        case 584:
        case 585:
          this.rotation = this.velocity.X * 0.1f;
          if (++this.frameCounter >= 4.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
            if (this.frame.Y >= num1 * 4)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 586:
          if (this.wet)
          {
            if ((double) this.velocity.X < 0.0)
              this.direction = -1;
            if ((double) this.velocity.X > 0.0)
              this.direction = 1;
            this.spriteDirection = this.direction;
            this.frameCounter += (double) Math.Abs(this.velocity.Length());
            ++this.frameCounter;
            if (this.frameCounter > 60.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 > 1)
            {
              this.frame.Y = 0;
              break;
            }
            if (this.frame.Y / num1 < 0)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          if ((double) this.velocity.Y == 0.0)
            this.spriteDirection = this.direction;
          if ((double) this.velocity.X == 0.0)
          {
            this.frame.Y = num1;
            this.frameCounter = 0.0;
            break;
          }
          int num411 = 8;
          this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.0;
          this.frameCounter += 0.5;
          if (this.frameCounter > (double) num411)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
          {
            this.frame.Y = 0;
            break;
          }
          break;
        case 589:
          int num412 = this.frame.Y / num1;
          ++this.frameCounter;
          if ((double) this.velocity.Y != 0.0)
          {
            this.frame.Y = 0;
            this.frameCounter = 0.0;
          }
          if (num412 >= 12)
          {
            if (this.frameCounter > 6.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
              {
                this.frame.Y = 0;
                break;
              }
              break;
            }
            break;
          }
          if (num412 >= 11)
          {
            if (this.frameCounter > (double) Main.rand.Next(40, 140))
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              break;
            }
            break;
          }
          if (num412 >= 8)
          {
            if (this.frameCounter > 3.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              if (this.frame.Y == num1 * 9)
              {
                Vector2 position = this.position;
                position.Y += (float) (this.height - 6);
                if (this.direction == 1)
                  position.X += 30f;
                else
                  position.X -= 22f;
                for (int index = 0; index < 4; ++index)
                  Dust.NewDust(position, 1, 1, 32);
                break;
              }
              break;
            }
            break;
          }
          if (num412 >= 7)
          {
            if (this.frameCounter > (double) Main.rand.Next(30, 90))
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              break;
            }
            break;
          }
          if (num412 >= 4)
          {
            if (this.frameCounter > 4.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              break;
            }
            break;
          }
          if (num412 >= 1)
          {
            if (this.frameCounter > 4.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              if (this.frame.Y >= num1 * 4 && Main.rand.Next(3) != 0)
              {
                this.frame.Y = 0;
                break;
              }
              break;
            }
            break;
          }
          if (this.frameCounter > (double) Main.rand.Next(90, 450))
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            break;
          }
          break;
        case 593:
          if ((double) this.velocity.Y == 0.0)
          {
            this.rotation = 0.0f;
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              this.frameCounter = 0.0;
              break;
            }
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 2.0;
            ++this.frameCounter;
            if (this.frameCounter > 10.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = 0;
          if ((double) this.velocity.Y > 4.0)
          {
            this.rotation -= this.velocity.Y * 0.01f;
            break;
          }
          break;
        case 594:
          this.spriteDirection = 1;
          this.frame.Y = (int) this.ai[2];
          this.frame.Width = 32;
          break;
        case 595:
        case 596:
        case 597:
        case 598:
        case 599:
        case 600:
        case 601:
          this.spriteDirection = this.direction;
          int num413 = 3;
          if (++this.frameCounter >= (double) (Main.npcFrameCount[this.type] * num413))
            this.frameCounter = 0.0;
          this.frame.Y = num1 * ((int) this.frameCounter / num413);
          break;
        case 602:
          this.spriteDirection = this.direction;
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          ++this.frameCounter;
          if (this.frameCounter >= 4.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * 10)
            this.frame.Y = num1 * 3;
          if (this.frame.Y < num1 * 3)
          {
            this.frame.Y = num1 * 3;
            break;
          }
          break;
        case 603:
          this.spriteDirection = this.direction;
          if (this.wet)
          {
            ++this.frameCounter;
            if (this.frameCounter >= 8.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y > num1 * 2)
              this.frame.Y = num1;
            if (this.frame.Y < num1)
              this.frame.Y = num1;
            this.rotation = 0.0f;
            break;
          }
          if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          {
            this.frame.Y = num1;
            this.frameCounter = 0.0;
            this.rotation = 0.0f;
            break;
          }
          this.rotation = this.velocity.X * 0.1f;
          ++this.frameCounter;
          if (this.frameCounter >= 4.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y >= num1 * Main.npcFrameCount[this.type])
            this.frame.Y = num1 * 11;
          if (this.frame.Y < num1 * 11)
          {
            this.frame.Y = num1 * 11;
            break;
          }
          break;
        case 604:
        case 605:
          this.spriteDirection = this.direction;
          int num414 = 2;
          if (++this.frameCounter >= (double) (4 * num414))
            this.frameCounter = 0.0;
          this.frame.Y = (double) this.velocity.Y != 0.0 ? num1 * (4 + (int) this.frameCounter / num414) : num1 * ((int) this.frameCounter / num414);
          break;
        case 610:
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.velocity.X == 0.0)
            {
              ++this.frameCounter;
              if (this.frameCounter > 8.0)
              {
                this.frame.Y += num1;
                this.frameCounter = 0.0;
              }
              if (this.frame.Y / num1 > 1)
              {
                this.frame.Y = 0;
                break;
              }
              break;
            }
            this.frameCounter += (double) Math.Abs(this.velocity.X) * 0.5;
            ++this.frameCounter;
            if (this.frameCounter > 6.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X) * 0.5;
          ++this.frameCounter;
          if (this.frameCounter > 6.0)
          {
            this.frame.Y += num1;
            this.frameCounter = 0.0;
          }
          if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
          {
            this.frame.Y = num1 * 2;
            break;
          }
          break;
        case 611:
          this.spriteDirection = -this.direction;
          this.rotation = this.velocity.X * 0.1f;
          if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          {
            switch (this.frame.Y / num1)
            {
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
                if ((int) this.frameCounter % 40 != 0 || Main.rand.Next(80) == 0)
                  ++this.frameCounter;
                if ((this.frameCounter + 1.0) % 40.0 == 39.0)
                  this.frameCounter = (double) (40 * Main.rand.Next(3));
                int num415 = (int) this.frameCounter % 40 / 10;
                int num416 = (int) this.frameCounter / 40;
                int num417 = 0;
                switch (num416)
                {
                  case 0:
                    if (num415 == 3)
                      num415 = 1;
                    num417 = num415;
                    break;
                  case 1:
                    if (num415 == 3)
                      num415 = 1;
                    num417 = 0;
                    if (num415 != 0)
                    {
                      num417 = 2 + num415;
                      break;
                    }
                    break;
                  case 2:
                    num417 = 0;
                    if (num415 != 0)
                    {
                      num417 = 4 + num415;
                      break;
                    }
                    break;
                }
                this.frame.Y = num1 * num417;
                break;
              default:
                this.frame.Y = 0;
                goto case 0;
            }
          }
          else
          {
            ++this.frameCounter;
            if (this.frameCounter >= 5.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y >= num1 * Main.npcFrameCount[this.type] || this.frame.Y < num1 * 8)
            {
              this.frame.Y = num1 * 8;
              break;
            }
            break;
          }
          break;
        case 612:
        case 613:
          if (this.IsABestiaryIconDummy)
          {
            ++this.frameCounter;
            if (this.frameCounter > 50.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y = 0;
            }
            this.frame.Y = (int) Utils.WrappedLerp(0.0f, 4f, (float) this.frameCounter / 50f) * num1;
            break;
          }
          bool flag8 = true;
          if (this.frame.Y == 0 && Main.rand.Next(180) != 0)
            flag8 = false;
          if (flag8)
            ++this.frameCounter;
          if ((double) this.velocity.X != 0.0)
            this.spriteDirection = Math.Sign(this.velocity.X);
          int num418 = 10;
          bool flag9 = (double) Math.Abs(this.velocity.X) > 1.0;
          if ((double) this.ai[1] == 1.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 4;
          }
          if ((double) Math.Abs(this.velocity.Y) > 0.10000000149011612 | flag9)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 4;
          }
          else if (this.frame.Y == 0)
            num418 = 2;
          if (this.frame.Y == num1 * 4)
          {
            num418 = 60;
            if (!flag9)
              num418 = 2;
          }
          if (this.frameCounter >= (double) num418)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 >= 5)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 615:
          this.spriteDirection = this.direction;
          if (!this.wet && (double) this.ai[2] == 1.0)
          {
            this.frame.Y = 4 * num1;
            break;
          }
          if (!this.wet)
            ++this.frameCounter;
          if (++this.frameCounter >= (double) (7 * (Main.npcFrameCount[this.type] - 1)))
            this.frameCounter = 0.0;
          this.frame.Y = (int) (this.frameCounter / 7.0) * num1;
          break;
        case 616:
        case 617:
          int num419 = 8;
          int num420 = 5;
          if ((double) this.velocity.X == 0.0)
            num420 = 10;
          this.spriteDirection = this.direction;
          if (this.wet)
          {
            ++this.frameCounter;
            if (this.frameCounter > (double) num420)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              if (this.frame.Y > num1 * 13)
              {
                this.frame.Y = num1 * 8;
                break;
              }
              break;
            }
            break;
          }
          ++this.frameCounter;
          if (this.frameCounter > (double) num419)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y > num1 * 7)
              this.frame.Y = 0;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
          }
          if ((double) this.velocity.Y != 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = num1 * 8;
            break;
          }
          break;
        case 618:
          if (++this.frameCounter >= 5.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 619:
          if (++this.frameCounter >= 6.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y / num1 >= Main.npcFrameCount[this.type])
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
        case 620:
          if ((double) this.ai[1] > 0.0 && (double) this.ai[0] > 0.0)
          {
            this.spriteDirection = this.direction;
            if (this.frame.Y < num1 * 14 || this.frame.Y > num1 * 20 || (double) this.ai[1] == 59.0)
            {
              this.frame.Y = num1 * 14;
              this.frameCounter = 0.0;
            }
            int num421 = 5;
            if (this.frame.Y == num1 * 17 || this.frame.Y == num1 * 16)
              num421 = 3;
            if (++this.frameCounter >= (double) num421 && this.frame.Y < num1 * 20)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              if ((double) this.ai[1] > 0.0 && this.frame.Y == num1 * 18)
              {
                this.frame.Y = num1 * 16;
                break;
              }
              break;
            }
            break;
          }
          if (this.wet)
          {
            if ((double) this.velocity.X < 0.0)
              this.direction = -1;
            if ((double) this.velocity.X > 0.0)
              this.direction = 1;
            if (this.spriteDirection != this.direction)
            {
              this.rotation *= -1f;
              this.spriteDirection = this.direction;
            }
            float num422 = (float) Math.Atan2((double) this.velocity.Y * (double) this.direction, (double) this.velocity.X * (double) this.direction);
            if ((double) Math.Abs(this.rotation - num422) >= 3.1415927410125732)
            {
              if ((double) num422 < (double) this.rotation)
                this.rotation -= 6.28318548f;
              else
                this.rotation += 6.28318548f;
            }
            this.rotation = (float) (((double) this.rotation * 4.0 + (double) num422) / 5.0);
            this.frameCounter += (double) Math.Abs(this.velocity.Length());
            ++this.frameCounter;
            if (this.frameCounter > 8.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 > 13)
            {
              this.frame.Y = num1 * 8;
              break;
            }
            if (this.frame.Y / num1 < 8)
            {
              this.frame.Y = num1 * 13;
              break;
            }
            break;
          }
          if ((double) this.rotation > 3.14)
            this.rotation -= 6.28f;
          if ((double) this.rotation > -0.01 && (double) this.rotation < 0.01)
            this.rotation = 0.0f;
          else
            this.rotation *= 0.9f;
          if ((double) this.velocity.Y == 0.0)
          {
            if (this.direction == 1)
              this.spriteDirection = 1;
            if (this.direction == -1)
              this.spriteDirection = -1;
            if ((double) this.velocity.X == 0.0)
            {
              this.frame.Y = 0;
              this.frameCounter = 0.0;
              break;
            }
            if (this.frame.Y < num1 * 2)
              this.frame.Y = num1 * 2;
            this.frameCounter += (double) Math.Abs(this.velocity.X);
            ++this.frameCounter;
            if (this.frameCounter > 9.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y / num1 > 7)
            {
              this.frame.Y = num1 * 2;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = num1;
          break;
        case 624:
          if ((double) this.velocity.Y == 0.0)
            this.spriteDirection = this.direction;
          if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          if ((double) this.velocity.Y < 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 9 * num1;
            break;
          }
          if ((double) this.velocity.Y > 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 10 * num1;
            break;
          }
          this.frameCounter += (double) Math.Abs(this.velocity.X);
          if (this.frameCounter > 8.0)
          {
            int num423 = this.frame.Y / num1;
            this.frameCounter -= 8.0;
            int num424 = num423 + 1;
            if (num424 > 8)
              num424 = 1;
            this.frame.Y = num424 * num1;
            break;
          }
          break;
        case 625:
          int num425 = 7;
          int num426 = 4;
          if ((double) this.velocity.X == 0.0)
            num426 = 8;
          this.spriteDirection = this.direction;
          if (this.wet)
          {
            if (this.frame.Y < num1 * 6)
              this.frame.Y = num1 * 6;
            ++this.frameCounter;
            if (this.frameCounter > (double) num426)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
              if (this.frame.Y > num1 * 11)
              {
                this.frame.Y = num1 * 6;
                break;
              }
              break;
            }
            break;
          }
          if (this.frame.Y > num1 * 5)
            this.frame.Y = 0;
          ++this.frameCounter;
          if (this.frameCounter > (double) num425)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
            if (this.frame.Y > num1 * 5)
              this.frame.Y = 0;
          }
          if ((double) this.velocity.X == 0.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y = 0;
            break;
          }
          break;
        case 626:
        case 627:
          if ((double) this.velocity.X != 0.0)
            this.spriteDirection = (double) this.velocity.X < 0.0 ? -1 : 1;
          if (this.IsABestiaryIconDummy)
          {
            ++this.frameCounter;
            if (this.frameCounter > 5.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y += num1;
            }
            if (this.frame.Y > num1 * 5)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          this.frame.Y = this.wet ? ((double) this.velocity.Length() <= 0.15000000596046448 ? ((double) this.velocity.Length() <= 0.05000000074505806 ? ((double) this.velocity.Length() <= 0.02500000037252903 ? 0 : num1) : num1 * 2) : num1 * 3) : 0;
          break;
        case 628:
          this.spriteDirection = (double) Main.WindForVisuals > 0.0 ? -1 : 1;
          if (this.IsABestiaryIconDummy)
          {
            int num427 = this.frame.Y / num1;
            int num428 = 5;
            this.spriteDirection = 1;
            ++this.frameCounter;
            if (this.frameCounter > (double) num428)
            {
              this.frameCounter -= (double) num428;
              int num429 = num427 + 1;
              if (num429 > 5)
                num429 = 0;
              this.frame.Y = num429 * num1;
              break;
            }
            break;
          }
          if ((double) this.ai[0] == 0.0)
          {
            int num430 = this.frame.Y / num1;
            int num431 = 8;
            if (num430 == 6)
            {
              this.frameCounter += 1.0 + 0.5 * (double) Math.Abs(Main.WindForVisuals);
              if (this.frameCounter > (double) num431)
              {
                this.frameCounter -= (double) num431;
                this.frame.Y = 0 * num1;
                break;
              }
              break;
            }
            if (num430 > 5)
            {
              int num432 = 6;
              this.frameCounter = 0.0;
              this.frame.Y = num432 * num1;
              break;
            }
            this.frameCounter += 1.0 + 0.5 * (double) Math.Abs(Main.WindForVisuals);
            if (this.frameCounter > (double) num431)
            {
              this.frameCounter -= (double) num431;
              int num433 = num430 + 1;
              if (num433 > 5)
                num433 = 0;
              this.frame.Y = num433 * num1;
              break;
            }
            break;
          }
          if ((double) this.localAI[0] == 0.0)
          {
            ++this.frameCounter;
            if (this.frameCounter > 4.0)
            {
              this.frameCounter = 0.0;
              int num434 = this.frame.Y / num1;
              int num435;
              if (num434 == 6)
                num435 = 7;
              else if (num434 < 7)
              {
                num435 = 6;
              }
              else
              {
                num435 = num434 + 1;
                if (num435 > 10)
                  num435 = 7;
              }
              this.frame.Y = num435 * num1;
              break;
            }
            break;
          }
          if ((double) this.localAI[0] == 1.0)
          {
            int num436 = this.frame.Y / num1;
            int num437 = (int) MathHelper.Lerp(7f, 20f, (float) this.frameCounter / 80f);
            if (num437 > 19)
              num437 = 19;
            if (num437 > 16)
              num437 -= 9;
            ++this.frameCounter;
            if (this.frameCounter > 80.0)
              this.frameCounter = 0.0;
            this.frame.Y = num437 * num1;
            break;
          }
          break;
        case 631:
          int num438 = 100;
          int num439 = 32;
          int num440 = 8;
          if ((double) this.velocity.Y == 0.0)
          {
            this.spriteDirection = this.direction;
            if ((double) this.ai[2] != 0.0 && (double) this.ai[2] < (double) num438)
            {
              float amount = (this.ai[2] - (float) (num438 - num439)) / (float) num439;
              Player source = Main.player[this.target];
              bool flag10 = source != null && ((double) source.Center.X < (double) this.Center.X ? this.direction == -1 : this.direction == 1);
              bool flag11 = source != null && source.Hitbox.Intersects(this.Hitbox);
              this.frame.Y = !(source != null & flag10) || flag11 || !Collision.CanHit((Entity) source, (Entity) this) ? (!(flag10 & flag11) ? 0 : (int) MathHelper.Lerp(10f, 15f, amount) * num1) : (int) MathHelper.Lerp(15f, (float) Main.npcFrameCount[this.type], amount) * num1;
              break;
            }
            if ((double) this.velocity.X == 0.0)
            {
              this.frameCounter = 0.0;
              this.frame.Y = 0;
              break;
            }
            this.frameCounter += 0.20000000298023224 + (double) Math.Abs(this.velocity.X);
            if (this.frameCounter > 8.0)
            {
              this.frame.Y += num1;
              this.frameCounter = 0.0;
            }
            if (this.frame.Y >= num440 * num1)
            {
              this.frame.Y = num1;
              break;
            }
            if (this.frame.Y / num1 < 1)
            {
              this.frame.Y = num1;
              break;
            }
            break;
          }
          this.frameCounter = 0.0;
          this.frame.Y = 0;
          break;
        case 636:
          this.frame.Y = this.AI_120_HallowBoss_IsInPhase2() ? num1 : 0;
          break;
        case 657:
          bool flag12 = this.life <= this.lifeMax / 2;
          this.frame.Width = 180;
          int num441 = this.frame.Y / num1;
          if (flag12 && this.noGravity || (double) this.velocity.Y < 0.0)
          {
            if (num441 < 20 || num441 > 23)
            {
              if (num441 < 4 || num441 > 7)
              {
                num441 = 4;
                this.frameCounter = -1.0;
              }
              if (++this.frameCounter >= 4.0)
              {
                this.frameCounter = 0.0;
                ++num441;
                if (num441 >= 7)
                  num441 = !flag12 ? 7 : 22;
              }
            }
            else if (++this.frameCounter >= 5.0)
            {
              this.frameCounter = 0.0;
              ++num441;
              if (num441 >= 24)
                num441 = 20;
            }
            this.frame.Y = num441 * num1;
            break;
          }
          if ((double) this.velocity.Y > 0.0)
          {
            if (num441 < 8 || num441 > 10)
            {
              num441 = 8;
              this.frameCounter = -1.0;
            }
            if (++this.frameCounter >= 8.0)
            {
              this.frameCounter = 0.0;
              ++num441;
              if (num441 >= 10)
                num441 = 10;
            }
            this.frame.Y = num441 * num1;
            break;
          }
          if ((double) this.velocity.Y == 0.0)
          {
            if ((double) this.ai[0] == 5.0)
            {
              this.frameCounter = 0.0;
              switch ((int) this.ai[1] / 3 % 3)
              {
                case 1:
                  num441 = 14;
                  break;
                case 2:
                  num441 = 15;
                  break;
                default:
                  num441 = 13;
                  break;
              }
            }
            else if ((double) this.ai[0] == 4.0)
            {
              this.frameCounter = 0.0;
              switch ((int) this.ai[1] / 15)
              {
                case 1:
                  num441 = 11;
                  break;
                case 2:
                case 3:
                  num441 = 10;
                  break;
                default:
                  num441 = 12;
                  break;
              }
            }
            else
            {
              bool flag13 = num441 >= 10 && num441 <= 12;
              int num442 = 10;
              if (flag13)
                num442 = 6;
              if (!flag13 && num441 >= 4)
              {
                num441 = 0;
                this.frameCounter = -1.0;
              }
              if (++this.frameCounter >= (double) num442)
              {
                this.frameCounter = 0.0;
                ++num441;
                if ((!flag13 || num441 == 13) && num441 >= 4)
                  num441 = 0;
              }
            }
            this.frame.Y = num441 * num1;
            break;
          }
          break;
        case 668:
          int y2 = this.frame.Y;
          int num443 = y2;
          this.frame.Width = 180;
          int num444;
          if ((double) this.ai[0] == 1.0)
          {
            this.spriteDirection = this.direction;
            int num445 = 12;
            int num446 = 17;
            if (y2 < num445 || y2 > num446)
            {
              int num447 = num445;
              this.frameCounter = 0.0;
              if (!this.IsABestiaryIconDummy && num447 != num443)
                SoundEngine.PlaySound(SoundID.DeerclopsScream, this.Center);
            }
            ++this.frameCounter;
            num444 = NPC.FindFrame_Deerclops_GetAttack1Frame((int) this.frameCounter / 4);
          }
          else if ((double) this.ai[0] == 2.0)
          {
            this.spriteDirection = this.direction;
            int num448 = 12;
            int num449 = 18;
            if (y2 < num448 || y2 > num449)
            {
              int num450 = num448;
              this.frameCounter = 0.0;
              if (!this.IsABestiaryIconDummy && num450 != num443)
                SoundEngine.PlaySound(SoundID.DeerclopsScream, this.Center);
            }
            ++this.frameCounter;
            num444 = NPC.FindFrame_Deerclops_GetAttack2Frame((int) this.frameCounter / 4);
            this.spriteDirection = this.direction;
          }
          else if ((double) this.ai[0] == 3.0 || (double) this.ai[0] == 5.0 || (double) this.ai[0] == 7.0 || (double) this.ai[0] == 8.0)
          {
            this.spriteDirection = this.direction;
            int num451 = 19;
            int num452 = 24;
            if (y2 < num451 || y2 > num452)
              this.frameCounter = 0.0;
            ++this.frameCounter;
            num444 = NPC.FindFrame_Deerclops_GetAttack3Frame((int) this.frameCounter / 4);
            if (num444 == 21)
              this.spriteDirection = this.direction;
          }
          else if ((double) this.ai[0] == 4.0)
          {
            this.spriteDirection = this.direction;
            int num453 = 12;
            int num454 = 17;
            if (y2 < num453 || y2 > num454)
            {
              int num455 = num453;
              this.frameCounter = 0.0;
              if (!this.IsABestiaryIconDummy && num455 != num443)
                SoundEngine.PlaySound(SoundID.DeerclopsScream, this.Center);
            }
            ++this.frameCounter;
            num444 = NPC.FindFrame_Deerclops_GetAttack1Frame((int) this.frameCounter / 4);
          }
          else
          {
            if ((double) this.velocity.Y == 0.0)
              this.spriteDirection = this.direction;
            if ((double) this.velocity.Y > 0.0 || (double) this.localAI[0] == 1.0)
            {
              this.frameCounter = 0.0;
              num444 = 1;
            }
            else if ((double) this.velocity.X == 0.0)
            {
              this.frameCounter = 0.0;
              num444 = 0;
            }
            else
            {
              this.frameCounter += (double) Math.Abs(this.velocity.X);
              int num456 = 10;
              int num457 = 15;
              if (this.frameCounter >= (double) (num456 * num457) || this.frameCounter < 0.0)
                this.frameCounter = 0.0;
              num444 = 2 + (int) (this.frameCounter / (double) num457);
              if (num443 != num444 && !this.IsABestiaryIconDummy && (num444 == 4 || num444 == 9))
                SoundEngine.PlaySound(SoundID.DeerclopsStep, this.Bottom);
            }
          }
          this.frame.Y = num444;
          break;
        case 669:
          this.spriteDirection = this.direction;
          int num458 = 2;
          if (++this.frameCounter >= (double) (4 * num458))
            this.frameCounter = 0.0;
          this.frame.Y = (double) this.velocity.Y != 0.0 ? num1 * (4 + (int) this.frameCounter / num458) : num1 * ((int) this.frameCounter / num458);
          break;
        case 671:
        case 672:
        case 673:
        case 674:
        case 675:
          this.spriteDirection = this.direction;
          this.rotation = this.velocity.X * 0.1f;
          if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          {
            this.frame.Y = 0;
            this.frameCounter = 0.0;
            break;
          }
          int num459 = Main.npcFrameCount[this.type];
          ++this.frameCounter;
          if (this.frameCounter >= 4.0)
          {
            this.frameCounter = 0.0;
            this.frame.Y += num1;
          }
          if (this.frame.Y >= num1 * num459)
          {
            this.frame.Y = num1;
            break;
          }
          break;
        case 677:
          this.spriteDirection = this.direction;
          ++this.frameCounter;
          if (++this.frameCounter >= 6.0)
          {
            this.frameCounter = 0.0;
            ref int local1 = ref this.frame.Y;
            ref int local2 = ref local1;
            int num460 = local1 + 1;
            int num461 = num460;
            local2 = num461;
            if (num460 >= 5)
            {
              this.frame.Y = 0;
              break;
            }
            break;
          }
          break;
      }
      if (this.aiStyle == 39 && this.type != 417)
      {
        if ((double) this.ai[0] == 0.0)
        {
          this.rotation = 0.0f;
          if ((double) this.velocity.Y == 0.0)
            this.spriteDirection = this.direction;
          else if ((double) this.velocity.Y < 0.0)
            this.frameCounter = 0.0;
          this.frameCounter += (double) Math.Abs(this.velocity.X) * 1.1000000238418579;
          if (this.frameCounter < 6.0)
            this.frame.Y = 0;
          else if (this.frameCounter < 12.0)
            this.frame.Y = num1;
          else if (this.frameCounter < 18.0)
            this.frame.Y = num1 * 2;
          else if (this.frameCounter < 24.0)
            this.frame.Y = num1 * 3;
          else if (this.frameCounter < 32.0)
            this.frame.Y = num1 * 4;
          else
            this.frameCounter = 0.0;
        }
        else if ((double) this.ai[0] == 1.0)
        {
          this.frameCounter = 0.0;
          this.frame.Y = (double) this.ai[1] >= 10.0 ? ((double) this.ai[1] >= 20.0 ? num1 * 7 : num1 * 6) : num1 * 5;
        }
        else if ((double) this.ai[0] == 5.0)
        {
          this.frameCounter = 0.0;
          this.frame.Y = (double) this.ai[1] >= 10.0 ? ((double) this.ai[1] >= 20.0 ? num1 * 5 : num1 * 6) : num1 * 7;
        }
        else
        {
          this.frameCounter = 0.0;
          this.frame.Y = num1 * 7;
        }
      }
      this.position = this.position - this.netOffset;
    }

    private static int FindFrame_FromSequence(int sequenceFrame, int[] frames)
    {
      int index = sequenceFrame;
      if (index >= frames.Length)
        index = frames.Length - 1;
      return frames[index];
    }

    private static int FindFrame_Deerclops_GetAttack1Frame(int sequenceFrame) => NPC.FindFrame_FromSequence(sequenceFrame, NPC._deerclopsAttack1Frames);

    private static int FindFrame_Deerclops_GetAttack2Frame(int sequenceFrame) => NPC.FindFrame_FromSequence(sequenceFrame, NPC._deerclopsAttack2Frames);

    private static int FindFrame_Deerclops_GetAttack3Frame(int sequenceFrame) => NPC.FindFrame_FromSequence(sequenceFrame, NPC._deerclopsAttack3Frames);

    public void SimpleFlyMovement(Vector2 desiredVelocity, float moveSpeed)
    {
      if ((double) this.velocity.X < (double) desiredVelocity.X)
      {
        this.velocity.X += moveSpeed;
        if ((double) this.velocity.X < 0.0 && (double) desiredVelocity.X > 0.0)
          this.velocity.X += moveSpeed;
      }
      else if ((double) this.velocity.X > (double) desiredVelocity.X)
      {
        this.velocity.X -= moveSpeed;
        if ((double) this.velocity.X > 0.0 && (double) desiredVelocity.X < 0.0)
          this.velocity.X -= moveSpeed;
      }
      if ((double) this.velocity.Y < (double) desiredVelocity.Y)
      {
        this.velocity.Y += moveSpeed;
        if ((double) this.velocity.Y >= 0.0 || (double) desiredVelocity.Y <= 0.0)
          return;
        this.velocity.Y += moveSpeed;
      }
      else
      {
        if ((double) this.velocity.Y <= (double) desiredVelocity.Y)
          return;
        this.velocity.Y -= moveSpeed;
        if ((double) this.velocity.Y <= 0.0 || (double) desiredVelocity.Y >= 0.0)
          return;
        this.velocity.Y -= moveSpeed;
      }
    }

    public void HealEffect(int healAmount, bool broadcast = true) => NPC.HealEffect(new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height), healAmount, broadcast);

    public static void HealEffect(Microsoft.Xna.Framework.Rectangle r, int healAmount, bool broadcast = true)
    {
      if (broadcast && Main.netMode == 2)
        NetMessage.SendData(81, number: ((int) CombatText.HealLife.PackedValue), number2: ((float) r.Center.X), number3: ((float) r.Center.Y), number4: ((float) healAmount));
      else
        CombatText.NewText(r, CombatText.HealLife, healAmount);
    }

    public int FindClosestPlayer() => this.FindClosestPlayer(out float _);

    public int FindClosestPlayer(out float distanceToPlayer)
    {
      Vector2 center = this.Center;
      float d = float.MaxValue;
      int closestPlayer = -1;
      for (int index = 0; index < (int) byte.MaxValue; ++index)
      {
        Player player = Main.player[index];
        if (player.active && !player.dead && !player.ghost)
        {
          float num = Vector2.DistanceSquared(center, player.Center);
          if ((double) num < (double) d)
          {
            d = num;
            closestPlayer = index;
          }
        }
      }
      if (closestPlayer < 0)
      {
        for (int index = 0; index < (int) byte.MaxValue; ++index)
        {
          Player player = Main.player[index];
          if (player.active)
          {
            float num = Vector2.DistanceSquared(center, player.Center);
            if ((double) num < (double) d)
            {
              d = num;
              closestPlayer = index;
            }
          }
        }
      }
      distanceToPlayer = (float) Math.Sqrt((double) d);
      return closestPlayer;
    }

    public void BigMimicSpawnSmoke()
    {
      if (Main.netMode == 2)
      {
        NetMessage.SendData(51, number: this.whoAmI, number2: 4f);
      }
      else
      {
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(this.position, this.width, this.height, 54, Alpha: 50, Scale: 1.5f);
          Main.dust[index2].velocity *= 2f;
          Main.dust[index2].noGravity = true;
        }
        for (int index3 = 0; index3 < 3; ++index3)
        {
          for (int index4 = 0; index4 < 2; ++index4)
          {
            int index5 = Gore.NewGore(new Vector2((float) ((double) this.position.X + (double) (this.width * index3) * 0.44999998807907104 - 20.0), (float) ((double) this.position.Y + (double) (this.height * index4) * 0.5 + 10.0)), new Vector2(0.0f, 0.0f), 99, 1.1f);
            Main.gore[index5].velocity *= 0.3f;
          }
        }
      }
    }

    public static bool BigMimicSummonCheck(int x, int y, Player user)
    {
      if (Main.netMode == 1 || !Main.hardMode)
        return false;
      int chest1 = Chest.FindChest(x, y);
      if (chest1 < 0)
        return false;
      int num1 = 0;
      int num2 = 0;
      int num3 = 0;
      for (int index = 0; index < 40; ++index)
      {
        ushort type = Main.tile[Main.chest[chest1].x, Main.chest[chest1].y].type;
        int num4 = (int) Main.tile[Main.chest[chest1].x, Main.chest[chest1].y].frameX / 36;
        if (TileID.Sets.BasicChest[(int) type] && (type != (ushort) 21 || num4 < 5 || num4 > 6) && Main.chest[chest1].item[index] != null && Main.chest[chest1].item[index].type > 0)
        {
          if (Main.chest[chest1].item[index].type == 3092)
            num1 += Main.chest[chest1].item[index].stack;
          else if (Main.chest[chest1].item[index].type == 3091)
            num2 += Main.chest[chest1].item[index].stack;
          else
            ++num3;
        }
      }
      if (num3 == 0 && num1 + num2 == 1)
      {
        if (num1 != 1)
          ;
        if (TileID.Sets.BasicChest[(int) Main.tile[x, y].type])
        {
          if ((int) Main.tile[x, y].frameX % 36 != 0)
            --x;
          if ((int) Main.tile[x, y].frameY % 36 != 0)
            --y;
          int chest2 = Chest.FindChest(x, y);
          for (int index = 0; index < 40; ++index)
            Main.chest[chest1].item[index] = new Item();
          Chest.DestroyChest(x, y);
          for (int index1 = x; index1 <= x + 1; ++index1)
          {
            for (int index2 = y; index2 <= y + 1; ++index2)
            {
              if (TileID.Sets.BasicChest[(int) Main.tile[index1, index2].type])
                Main.tile[index1, index2].ClearTile();
            }
          }
          int number = 1;
          if (Main.tile[x, y].type == (ushort) 467)
            number = 5;
          NetMessage.SendData(34, number: number, number2: ((float) x), number3: ((float) y), number5: chest2);
          NetMessage.SendTileSquare(-1, x, y, 3);
        }
        int Type = 475;
        if (num2 == 1)
          Type = !WorldGen.crimson ? 473 : 474;
        int number1 = NPC.NewNPC(user.GetNPCSource_TileInteraction(x, y), x * 16 + 16, y * 16 + 32, Type);
        Main.npc[number1].whoAmI = number1;
        NetMessage.SendData(23, number: number1);
        Main.npc[number1].BigMimicSpawnSmoke();
      }
      return false;
    }

    public bool ShouldFaceTarget(
      ref NPCUtils.TargetSearchResults searchResults,
      NPCUtils.TargetType? overrideTargetType = null)
    {
      NPCUtils.TargetType nearestTargetType = searchResults.NearestTargetType;
      if (overrideTargetType.HasValue)
        nearestTargetType = overrideTargetType.Value;
      switch (nearestTargetType)
      {
        case NPCUtils.TargetType.NPC:
        case NPCUtils.TargetType.TankPet:
          return true;
        case NPCUtils.TargetType.Player:
          bool flag = true;
          Player nearestTankOwner = searchResults.NearestTankOwner;
          if (nearestTankOwner.dead || nearestTankOwner.npcTypeNoAggro[this.type] && this.direction != 0)
            flag = false;
          if (flag)
          {
            float num = (float) ((double) (nearestTankOwner.width + nearestTankOwner.height + this.width + this.height) / 4.0 + 800.0);
            return nearestTankOwner.itemAnimation != 0 || nearestTankOwner.aggro >= 0 || (double) searchResults.NearestTankDistance <= (double) num || this.oldTarget < 0 || this.oldTarget >= (int) byte.MaxValue;
          }
          break;
      }
      return false;
    }

    public void FaceTarget()
    {
      this.direction = (double) this.targetRect.Center.X < (double) this.Center.X ? -1 : 1;
      this.directionY = (double) this.targetRect.Center.Y < (double) this.Center.Y ? -1 : 1;
    }

    public void TargetClosestUpgraded(bool faceTarget = true, Vector2? checkPosition = null)
    {
      int index1 = -1;
      int index2 = -1;
      int index3 = -1;
      Vector2 center = this.Center;
      if (checkPosition.HasValue)
        center = checkPosition.Value;
      bool flag1 = this.direction == 0;
      float num1 = 9999999f;
      for (int index4 = 0; index4 < (int) byte.MaxValue; ++index4)
      {
        Player player = Main.player[index4];
        if (player.active && !player.dead && !player.ghost)
        {
          float num2 = Vector2.Distance(center, player.Center) - (float) player.aggro;
          bool flag2 = player.npcTypeNoAggro[this.type];
          if (flag2 && !flag1)
            num2 += 1000f;
          if ((double) num2 < (double) num1)
          {
            index1 = index4;
            index2 = -1;
            num1 = num2;
          }
          if (player.tankPet >= 0 && !flag2)
          {
            float num3 = Vector2.Distance(center, Main.projectile[player.tankPet].Center) - 200f;
            if ((double) num3 < (double) num1 && (double) num3 < 200.0 && Collision.CanHit(this.Center, 0, 0, Main.projectile[player.tankPet].Center, 0, 0))
            {
              index2 = player.tankPet;
              num1 = num3;
            }
          }
        }
      }
      for (int index5 = 0; index5 < 200; ++index5)
      {
        NPC npc = Main.npc[index5];
        if (npc.active && npc.type == 548)
        {
          float num4 = Vector2.Distance(center, npc.Center);
          if ((double) num1 > (double) num4)
          {
            index3 = index5;
            index1 = -1;
            index2 = -1;
            num1 = num4;
          }
        }
      }
      if ((double) num1 == 9999999.0)
        return;
      if (index3 >= 0)
      {
        this.target = Main.npc[index3].WhoAmIToTargettingIndex;
        this.targetRect = Main.npc[index3].Hitbox;
        this.direction = (double) this.targetRect.Center.X < (double) this.Center.X ? -1 : 1;
        this.directionY = (double) this.targetRect.Center.Y < (double) this.Center.Y ? -1 : 1;
      }
      else if (index2 >= 0)
      {
        this.target = Main.projectile[index2].owner;
        this.targetRect = Main.projectile[index2].Hitbox;
        this.direction = (double) this.targetRect.Center.X < (double) this.Center.X ? -1 : 1;
        this.directionY = (double) this.targetRect.Center.Y < (double) this.Center.Y ? -1 : 1;
      }
      else
      {
        if (index1 < 0 || index1 >= (int) byte.MaxValue)
          index1 = 0;
        Player player = Main.player[index1];
        this.targetRect = player.Hitbox;
        this.target = index1;
        if (player.dead || player.npcTypeNoAggro[this.type] && !flag1)
          faceTarget = false;
        if (!faceTarget)
          return;
        float num5 = (float) ((double) (player.width + player.height + this.width + this.height) / 4.0 + 800.0);
        float num6 = num1 - (float) player.aggro;
        if (player.itemAnimation == 0 && player.aggro < 0 && (double) num6 > (double) num5 && this.oldTarget >= 0 && this.oldTarget < (int) byte.MaxValue)
          return;
        this.direction = (double) this.targetRect.Center.X < (double) this.Center.X ? -1 : 1;
        this.directionY = (double) this.targetRect.Center.Y < (double) this.Center.Y ? -1 : 1;
      }
    }

    public void TargetClosest(bool faceTarget = true)
    {
      float distance = 0.0f;
      float realDist = 0.0f;
      bool t = false;
      int tankTarget = -1;
      for (int j = 0; j < (int) byte.MaxValue; ++j)
      {
        if (Main.player[j].active && !Main.player[j].dead && !Main.player[j].ghost)
          this.TryTrackingTarget(ref distance, ref realDist, ref t, ref tankTarget, j);
      }
      this.SetTargetTrackingValues(faceTarget, realDist, tankTarget);
    }

    public void TargetClosest_WOF(bool faceTarget = true)
    {
      float distance = 0.0f;
      float realDist = 0.0f;
      bool t = false;
      int tankTarget = -1;
      for (int j = 0; j < (int) byte.MaxValue; ++j)
      {
        if (Main.player[j].active && !Main.player[j].dead && !Main.player[j].ghost && Main.player[j].gross)
          this.TryTrackingTarget(ref distance, ref realDist, ref t, ref tankTarget, j);
      }
      this.SetTargetTrackingValues(faceTarget, realDist, tankTarget);
    }

    private void TryTrackingTarget(
      ref float distance,
      ref float realDist,
      ref bool t,
      ref int tankTarget,
      int j)
    {
      float num1 = Math.Abs(Main.player[j].position.X + (float) (Main.player[j].width / 2) - this.position.X + (float) (this.width / 2)) + Math.Abs(Main.player[j].position.Y + (float) (Main.player[j].height / 2) - this.position.Y + (float) (this.height / 2)) - (float) Main.player[j].aggro;
      if (Main.player[j].npcTypeNoAggro[this.type] && this.direction != 0)
        num1 += 1000f;
      if (!t || (double) num1 < (double) distance)
      {
        t = true;
        tankTarget = -1;
        realDist = Math.Abs(Main.player[j].position.X + (float) (Main.player[j].width / 2) - this.position.X + (float) (this.width / 2)) + Math.Abs(Main.player[j].position.Y + (float) (Main.player[j].height / 2) - this.position.Y + (float) (this.height / 2));
        distance = num1;
        this.target = j;
      }
      if (Main.player[j].tankPet < 0 || Main.player[j].npcTypeNoAggro[this.type])
        return;
      int tankPet = Main.player[j].tankPet;
      float num2 = Math.Abs(Main.projectile[tankPet].position.X + (float) (Main.projectile[tankPet].width / 2) - this.position.X + (float) (this.width / 2)) + Math.Abs(Main.projectile[tankPet].position.Y + (float) (Main.projectile[tankPet].height / 2) - this.position.Y + (float) (this.height / 2)) - 200f;
      if ((double) num2 >= (double) distance || (double) num2 >= 200.0 || !Collision.CanHit(this.Center, 1, 1, Main.projectile[tankPet].Center, 1, 1))
        return;
      tankTarget = tankPet;
    }

    private void SetTargetTrackingValues(bool faceTarget, float realDist, int tankTarget)
    {
      if (tankTarget >= 0)
      {
        int index = tankTarget;
        this.targetRect = new Microsoft.Xna.Framework.Rectangle((int) Main.projectile[index].position.X, (int) Main.projectile[index].position.Y, Main.projectile[index].width, Main.projectile[index].height);
        this.direction = 1;
        if ((double) (this.targetRect.X + this.targetRect.Width / 2) < (double) this.position.X + (double) (this.width / 2))
          this.direction = -1;
        this.directionY = 1;
        if ((double) (this.targetRect.Y + this.targetRect.Height / 2) < (double) this.position.Y + (double) (this.height / 2))
          this.directionY = -1;
      }
      else
      {
        if (this.target < 0 || this.target >= (int) byte.MaxValue)
          this.target = 0;
        this.targetRect = new Microsoft.Xna.Framework.Rectangle((int) Main.player[this.target].position.X, (int) Main.player[this.target].position.Y, Main.player[this.target].width, Main.player[this.target].height);
        if (Main.player[this.target].dead)
          faceTarget = false;
        if (Main.player[this.target].npcTypeNoAggro[this.type] && this.direction != 0)
          faceTarget = false;
        if (faceTarget)
        {
          int aggro = Main.player[this.target].aggro;
          int num1 = (Main.player[this.target].height + Main.player[this.target].width + this.height + this.width) / 4;
          bool flag1 = this.oldTarget >= 0 && this.oldTarget <= 254;
          int num2 = Main.player[this.target].itemAnimation != 0 ? 0 : (Main.player[this.target].aggro < 0 ? 1 : 0);
          bool flag2 = !this.boss;
          int num3 = flag1 ? 1 : 0;
          if ((num2 & num3 & (flag2 ? 1 : 0)) == 0)
          {
            this.direction = 1;
            if ((double) (this.targetRect.X + this.targetRect.Width / 2) < (double) this.position.X + (double) (this.width / 2))
              this.direction = -1;
            this.directionY = 1;
            if ((double) (this.targetRect.Y + this.targetRect.Height / 2) < (double) this.position.Y + (double) (this.height / 2))
              this.directionY = -1;
          }
        }
      }
      if (this.confused)
        this.direction *= -1;
      if (this.direction == this.oldDirection && this.directionY == this.oldDirectionY && this.target == this.oldTarget || this.collideX || this.collideY)
        return;
      this.netUpdate = true;
    }

    public bool DoesntDespawnToInactivityAndCountsNPCSlots() => this.type == 668;

    public bool DoesntDespawnToInactivity()
    {
      switch (this.type)
      {
        case 8:
        case 9:
        case 11:
        case 12:
        case 14:
        case 15:
        case 36:
        case 40:
        case 41:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 96:
        case 97:
        case 99:
        case 100:
        case 113:
        case 114:
        case 115:
        case 118:
        case 119:
        case 128:
        case 129:
        case 130:
        case 131:
        case 134:
        case 135:
        case 136:
        case 246:
        case 247:
        case 248:
        case 249:
        case 263:
        case 267:
        case 328:
        case 379:
        case 380:
        case 392:
        case 393:
        case 394:
        case 396:
        case 397:
        case 398:
        case 400:
        case 422:
        case 437:
        case 438:
        case 439:
        case 440:
        case 488:
        case 492:
        case 493:
        case 507:
        case 517:
        case 548:
        case 549:
        case 551:
        case 564:
        case 565:
          return true;
        case 139:
          if (NPC.npcsFoundForCheckActive[134])
            return true;
          break;
        case 552:
        case 553:
        case 554:
        case 555:
        case 556:
        case 557:
        case 558:
        case 559:
        case 560:
        case 561:
        case 562:
        case 563:
        case 566:
        case 567:
        case 568:
        case 569:
        case 570:
        case 571:
        case 572:
        case 573:
        case 574:
        case 575:
        case 576:
        case 577:
        case 578:
          if (NPC.npcsFoundForCheckActive[548])
            return true;
          break;
      }
      return false;
    }

    public void CheckActive()
    {
      if (!this.active || this.DoesntDespawnToInactivity())
        return;
      if (this.townNPC)
      {
        this.AddIntoPlayersTownNPCSlots();
      }
      else
      {
        bool andCountsNpcSlots = this.DoesntDespawnToInactivityAndCountsNPCSlots();
        bool flag = false;
        Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle((int) ((double) this.position.X + (double) (this.width / 2) - (double) NPC.activeRangeX), (int) ((double) this.position.Y + (double) (this.height / 2) - (double) NPC.activeRangeY), NPC.activeRangeX * 2, NPC.activeRangeY * 2);
        Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int) ((double) this.position.X + (double) (this.width / 2) - (double) NPC.sWidth * 0.5 - (double) this.width), (int) ((double) this.position.Y + (double) (this.height / 2) - (double) NPC.sHeight * 0.5 - (double) this.height), NPC.sWidth + this.width * 2, NPC.sHeight + this.height * 2);
        for (int plr = 0; plr < (int) byte.MaxValue; ++plr)
        {
          if (Main.player[plr].active)
          {
            Microsoft.Xna.Framework.Rectangle hitbox = Main.player[plr].Hitbox;
            if (rectangle1.Intersects(hitbox))
            {
              flag = true;
              if (this.type != 25 && this.type != 30 && this.type != 33 && this.releaseOwner == (short) byte.MaxValue && this.lifeMax > 0)
              {
                if (Main.slimeRain && Main.slimeRainNPC[this.type])
                  Main.player[plr].nearbyActiveNPCs += this.npcSlots * Main.slimeRainNPCSlots;
                else
                  Main.player[plr].nearbyActiveNPCs += this.npcSlots;
              }
            }
            if (!andCountsNpcSlots)
            {
              if (rectangle2.Intersects(hitbox))
              {
                this.timeLeft = NPC.activeTime;
                this.despawnEncouraged = false;
                if (plr == Main.myPlayer && (this.type == 604 || this.type == 605))
                  this.LadyBugLuck(plr, this.type == 605);
              }
              if (this.boss)
                flag = true;
              switch (this.type)
              {
                case 7:
                case 10:
                case 13:
                case 35:
                case 36:
                case 39:
                case 87:
                case (int) sbyte.MaxValue:
                case 128:
                case 129:
                case 130:
                case 131:
                case 392:
                case 393:
                case 394:
                case 491:
                case 492:
                  flag = true;
                  continue;
                case 399:
                  if ((double) this.ai[0] == 2.0 || (double) this.ai[0] == 1.0)
                    this.timeLeft = NPC.activeTime;
                  flag = true;
                  continue;
                case 583:
                case 584:
                case 585:
                  if (!Main.dayTime && (double) this.ai[2] == 0.0)
                  {
                    flag = true;
                    this.timeLeft = NPC.activeTime;
                    continue;
                  }
                  continue;
                default:
                  continue;
              }
            }
          }
        }
        if (andCountsNpcSlots)
          return;
        --this.timeLeft;
        if (this.timeLeft <= 0)
          flag = false;
        if (flag || Main.netMode == 1)
          return;
        NPC.noSpawnCycle = true;
        this.active = false;
        if (Main.netMode == 2)
        {
          this.netSkip = -1;
          this.life = 0;
          NetMessage.SendData(23, number: this.whoAmI);
        }
        if (this.extraValue > 0)
          NPC.RevengeManager.CacheEnemy(this);
        this.CheckActive_WormSegments();
      }
    }

    private void CheckActive_WormSegments()
    {
      if (this.aiStyle != 6)
        return;
      NPC npc;
      for (int number = (int) this.ai[0]; number != this.whoAmI && number > 0 && number < 200; number = (int) npc.ai[0])
      {
        npc = Main.npc[number];
        if (!npc.active || npc.aiStyle != 6)
          break;
        npc.active = false;
        if (Main.netMode == 2)
        {
          npc.life = 0;
          npc.netSkip = -1;
          NetMessage.SendData(23, number: number);
        }
      }
    }

    private void AddIntoPlayersTownNPCSlots()
    {
      Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int) ((double) this.position.X + (double) (this.width / 2) - (double) NPC.townRangeX), (int) ((double) this.position.Y + (double) (this.height / 2) - (double) NPC.townRangeY), NPC.townRangeX * 2, NPC.townRangeY * 2);
      for (int index = 0; index < (int) byte.MaxValue; ++index)
      {
        if (Main.player[index].active && rectangle.Intersects(Main.player[index].Hitbox))
          Main.player[index].townNPCs += this.npcSlots;
      }
    }

    public void checkDead()
    {
      if (!this.active || this.realLife >= 0 && this.realLife != this.whoAmI || this.life > 0)
        return;
      if (this.type == 604 || this.type == 605)
        NPC.LadyBugKilled(this.Center, this.type == 605);
      if (this.type == 397 || this.type == 396)
      {
        if ((double) this.ai[0] == -2.0)
          return;
        this.ai[0] = -2f;
        this.life = this.lifeMax;
        this.netUpdate = true;
        this.dontTakeDamage = true;
        if (Main.netMode == 1)
          return;
        int index = NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) this.Center.X, (int) this.Center.Y, 400);
        Main.npc[index].ai[3] = this.ai[3];
        Main.npc[index].netUpdate = true;
      }
      else if (this.type == 398 && (double) this.ai[0] != 2.0)
      {
        this.ai[0] = 2f;
        this.life = this.lifeMax;
        this.netUpdate = true;
        this.dontTakeDamage = true;
      }
      else if ((this.type == 517 || this.type == 422 || this.type == 507 || this.type == 493) && (double) this.ai[2] != 1.0)
      {
        this.ai[2] = 1f;
        this.ai[1] = 0.0f;
        this.life = this.lifeMax;
        this.dontTakeDamage = true;
        this.netUpdate = true;
      }
      else if (this.type == 548 && (double) this.ai[1] != 1.0)
      {
        this.ai[1] = 1f;
        this.ai[0] = 0.0f;
        this.life = this.lifeMax;
        this.dontTakeDamageFromHostiles = true;
        this.netUpdate = true;
      }
      else
      {
        if (Main.netMode != 1 && Main.getGoodWorld && (this.type == 42 || this.type == 176 || this.type >= 231 && this.type <= 235))
          this.StingerExplosion();
        if (Main.netMode != 1 && Main.getGoodWorld)
        {
          if (this.type == 13)
          {
            int number = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), (int) this.Center.X, (int) ((double) this.position.Y + (double) this.height), -12);
            if (Main.netMode == 2 && number < 200)
              NetMessage.SendData(23, number: number);
          }
          if (this.type == 36)
          {
            int num1 = 3;
            for (int index1 = 0; index1 < num1; ++index1)
            {
              int num2 = 1000;
              for (int index2 = 0; index2 < num2; ++index2)
              {
                int i = (int) ((double) this.Center.X / 16.0) + Main.rand.Next(-50, 51);
                int j1 = (int) ((double) this.Center.Y / 16.0) + Main.rand.Next(-50, 51);
                while (j1 < Main.maxTilesY - 200 && !WorldGen.SolidTile(i, j1))
                  ++j1;
                int j2 = j1 - 1;
                if (!WorldGen.SolidTile(i, j2))
                {
                  int number = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), i * 16 + 8, j2 * 16, 32);
                  if (Main.netMode == 2 && number < 200)
                  {
                    NetMessage.SendData(23, number: number);
                    break;
                  }
                  break;
                }
              }
            }
          }
        }
        NPC.noSpawnCycle = true;
        if (this.townNPC && this.type != 37 && this.type != 453)
        {
          if (Main.netMode != 2)
            this.NPCLuck();
          bool flag = true;
          NetworkText fullNetName = this.GetFullNetName();
          int index3 = 19;
          if (this.type == 369 || this.type == 663 || NPCID.Sets.IsTownPet[this.type])
          {
            index3 = 36;
            flag = false;
          }
          NetworkText networkText = NetworkText.FromKey(Lang.misc[index3].Key, (object) fullNetName);
          if (flag)
          {
            for (int index4 = 0; index4 < (int) byte.MaxValue; ++index4)
            {
              Player player = Main.player[index4];
              if (player != null && player.active && player.difficulty != (byte) 2)
              {
                flag = false;
                break;
              }
            }
          }
          if (flag)
            this.DropTombstoneTownNPC(networkText);
          switch (Main.netMode)
          {
            case 0:
              Main.NewText(networkText.ToString(), G: (byte) 25, B: (byte) 25);
              break;
            case 2:
              ChatHelper.BroadcastChatMessage(networkText, new Color((int) byte.MaxValue, 25, 25));
              break;
          }
        }
        if (Main.netMode != 1 && !Main.IsItDay() && this.type == 54 && !NPC.AnyNPCs(35))
        {
          for (int onWho = 0; onWho < (int) byte.MaxValue; ++onWho)
          {
            if (Main.player[onWho].active && !Main.player[onWho].dead && Main.player[onWho].killClothier)
            {
              NPC.SpawnSkeletron(onWho);
              break;
            }
          }
        }
        if (this.townNPC && Main.netMode != 1 && this.homeless && WorldGen.prioritizedTownNPCType == this.type)
          WorldGen.prioritizedTownNPCType = 0;
        LegacySoundStyle type = this.DeathSound;
        if (this.type == 229 && this.IsShimmerVariant)
          type = SoundID.NPCDeath6;
        if (type != null)
          SoundEngine.PlaySound(type, this.position);
        if (this.type == 13 || this.type == 14 || this.type == 15)
          this.DropEoWLoot();
        else if (this.type == 134)
        {
          Vector2 position1 = this.position;
          Vector2 center = Main.player[this.target].Center;
          float num3 = 1E+08f;
          Vector2 position2 = this.position;
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].active && (Main.npc[index].type == 134 || Main.npc[index].type == 135 || Main.npc[index].type == 136))
            {
              float num4 = Math.Abs(Main.npc[index].Center.X - center.X) + Math.Abs(Main.npc[index].Center.Y - center.Y);
              if ((double) num4 < (double) num3)
              {
                num3 = num4;
                position2 = Main.npc[index].position;
              }
            }
          }
          this.position = position2;
          this.NPCLoot();
          this.position = position1;
        }
        else
          this.NPCLoot();
        this.active = false;
        if (Main.getGoodWorld && Main.netMode != 1 && this.type == 631)
          Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center, Vector2.Zero, 99, 70, 10f, Main.myPlayer);
        DD2Event.CheckProgress(this.type);
        this.CheckProgressFrostMoon();
        this.CheckProgressPumpkinMoon();
        int npcInvasionGroup = NPC.GetNPCInvasionGroup(this.type);
        if (npcInvasionGroup <= 0 || npcInvasionGroup != Main.invasionType)
          return;
        int num = 1;
        switch (this.type)
        {
          case 216:
            num = 5;
            break;
          case 387:
            num = 0;
            break;
          case 395:
            num = 10;
            break;
          case 471:
            num = 10;
            break;
          case 472:
            num = 0;
            break;
          case 491:
            num = 10;
            break;
        }
        if (num <= 0)
          return;
        Main.invasionSize -= num;
        if (Main.invasionSize < 0)
          Main.invasionSize = 0;
        if (Main.netMode != 1)
          Main.ReportInvasionProgress(Main.invasionSizeStart - Main.invasionSize, Main.invasionSizeStart, npcInvasionGroup + 3, 0);
        if (Main.netMode != 2)
          return;
        NetMessage.SendData(78, number: Main.invasionProgress, number2: ((float) Main.invasionProgressMax), number3: ((float) Main.invasionProgressIcon));
      }
    }

    public void DropTombstoneTownNPC(NetworkText deathText)
    {
      if (Main.netMode == 1)
        return;
      float num1 = 0.1f;
      if (Main.rand.Next(2) == 0)
        num1 = -0.1f;
      float num2 = (float) Main.rand.Next(-35, 36) * 0.1f;
      while ((double) num2 < 2.0 && (double) num2 > -2.0)
        num2 += (float) Main.rand.Next(-30, 31) * 0.1f;
      int num3 = Main.rand.Next(6);
      int Type = this.type == 17 || this.type == 441 ? Main.rand.Next(5) + 527 : (num3 != 0 ? num3 + 200 : 43);
      int index = Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.position.X + (float) (this.width / 2), this.position.Y + (float) (this.height / 2), (float) Main.rand.Next(10, 30) * num1 + num2, (float) Main.rand.Next(-40, -20) * 0.1f, Type, 0, 0.0f, Main.myPlayer);
      Main.projectile[index].miscText = deathText.ToString();
    }

    public static int GetNPCInvasionGroup(int npcID)
    {
      int npcInvasionGroup = 0;
      if (npcID <= 216)
      {
        if (npcID <= 111)
        {
          if ((uint) (npcID - 26) > 3U && npcID != 111)
            goto label_18;
        }
        else if ((uint) (npcID - 143) > 2U)
        {
          if ((uint) (npcID - 212) <= 4U)
            goto label_13;
          else
            goto label_18;
        }
        else
        {
          npcInvasionGroup = 2;
          goto label_18;
        }
      }
      else if (npcID <= 395)
      {
        switch (npcID - 305)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 20:
          case 21:
          case 22:
          case 24:
          case 25:
            npcInvasionGroup = -2;
            goto label_18;
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 23:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 32:
            goto label_18;
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
            npcInvasionGroup = -1;
            goto label_18;
          default:
            switch (npcID - 381)
            {
              case 0:
              case 1:
              case 2:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 14:
                npcInvasionGroup = 4;
                goto label_18;
              default:
                goto label_18;
            }
        }
      }
      else if ((uint) (npcID - 471) > 1U)
      {
        if (npcID != 491)
        {
          if ((uint) (npcID - 547) <= 31U)
          {
            npcInvasionGroup = -3;
            goto label_18;
          }
          else
            goto label_18;
        }
        else
          goto label_13;
      }
      npcInvasionGroup = 1;
      goto label_18;
label_13:
      npcInvasionGroup = 3;
label_18:
      return npcInvasionGroup;
    }

    private void DropEoWLoot(bool fromCheckDead = true)
    {
      bool flag = true;
      for (int index = 0; index < 200; ++index)
      {
        if (index != this.whoAmI && Main.npc[index].active && (Main.npc[index].type == 13 || Main.npc[index].type == 14 || Main.npc[index].type == 15))
        {
          flag = false;
          break;
        }
      }
      if (flag)
      {
        this.boss = true;
        this.NPCLoot();
      }
      else
        this.NPCLoot();
    }

    private float GetMoonEventPointScalar()
    {
      if (Main.masterMode)
        return 2.5f;
      return Main.expertMode ? 2f : 1f;
    }

    private void CheckProgressFrostMoon()
    {
      if (!Main.snowMoon)
        return;
      NetworkText text = NetworkText.Empty;
      int progressMax = NPC.MoonEventRequiredPointsPerWaveLookup[NPC.waveNumber];
      switch (NPC.waveNumber)
      {
        case 1:
          text = Lang.GetInvasionWaveText(2, (short) 338, (short) 350);
          break;
        case 2:
          text = Lang.GetInvasionWaveText(3, (short) 338, (short) 350, (short) 342, (short) 348);
          break;
        case 3:
          text = Lang.GetInvasionWaveText(4, (short) 344, (short) 338, (short) 350, (short) 342);
          break;
        case 4:
          text = Lang.GetInvasionWaveText(5, (short) 344, (short) 338, (short) 350, (short) 348);
          break;
        case 5:
          text = Lang.GetInvasionWaveText(6, (short) 344, (short) 350, (short) 348, (short) 347);
          break;
        case 6:
          text = Lang.GetInvasionWaveText(7, (short) 346, (short) 342, (short) 350, (short) 338);
          break;
        case 7:
          text = Lang.GetInvasionWaveText(8, (short) 346, (short) 347, (short) 350, (short) 348, (short) 351);
          break;
        case 8:
          text = Lang.GetInvasionWaveText(9, (short) 346, (short) 344, (short) 348, (short) 347, (short) 342);
          break;
        case 9:
          text = Lang.GetInvasionWaveText(10, (short) 346, (short) 344, (short) 351, (short) 338, (short) 347);
          break;
        case 10:
          text = Lang.GetInvasionWaveText(11, (short) 345, (short) 352, (short) 338, (short) 342);
          break;
        case 11:
          text = Lang.GetInvasionWaveText(12, (short) 345, (short) 344, (short) 342, (short) 343, (short) 338);
          break;
        case 12:
          text = Lang.GetInvasionWaveText(13, (short) 345, (short) 346, (short) 342, (short) 352, (short) 343, (short) 347);
          break;
        case 13:
          text = Lang.GetInvasionWaveText(14, (short) 345, (short) 346, (short) 344, (short) 343, (short) 351);
          break;
        case 14:
          text = Lang.GetInvasionWaveText(15, (short) 345, (short) 346, (short) 344, (short) 343, (short) 347);
          break;
        case 15:
          text = Lang.GetInvasionWaveText(16, (short) 345, (short) 346, (short) 344, (short) 343, (short) 352);
          break;
        case 16:
          text = Lang.GetInvasionWaveText(17, (short) 345, (short) 346, (short) 344, (short) 343, (short) 351, (short) 347);
          break;
        case 17:
          text = Lang.GetInvasionWaveText(18, (short) 345, (short) 346, (short) 344, (short) 343, (short) 348, (short) 351);
          break;
        case 18:
          text = Lang.GetInvasionWaveText(19, (short) 345, (short) 346, (short) 344, (short) 343);
          break;
        case 19:
          text = Lang.GetInvasionWaveText(-1, (short) 345, (short) 346, (short) 344);
          break;
      }
      float num1 = 0.0f;
      switch (this.type)
      {
        case 338:
        case 339:
        case 340:
          num1 = 1f;
          break;
        case 341:
          num1 = 20f;
          break;
        case 342:
          num1 = 2f;
          break;
        case 343:
          num1 = 18f;
          break;
        case 344:
          num1 = 50f;
          break;
        case 345:
          num1 = 150f;
          break;
        case 346:
          num1 = 100f;
          break;
        case 347:
          num1 = 8f;
          break;
        case 348:
        case 349:
          num1 = 4f;
          break;
        case 350:
          num1 = 3f;
          break;
        case 351:
          num1 = 10f;
          break;
        case 352:
          num1 = 5f;
          break;
      }
      float num2 = num1 * this.GetMoonEventPointScalar();
      float waveKills = NPC.waveKills;
      NPC.waveKills += num2;
      NPC.totalInvasionPoints += num2;
      if ((double) NPC.waveKills >= (double) progressMax && progressMax != 0)
      {
        NPC.waveKills = 0.0f;
        ++NPC.waveNumber;
        progressMax = NPC.MoonEventRequiredPointsPerWaveLookup[NPC.waveNumber];
        if (text != NetworkText.Empty)
        {
          switch (Main.netMode)
          {
            case 0:
              Main.NewText(text.ToString(), (byte) 175, (byte) 75);
              break;
            case 2:
              ChatHelper.BroadcastChatMessage(text, new Color(175, 75, (int) byte.MaxValue));
              break;
          }
          if (NPC.waveNumber == 15)
            AchievementsHelper.NotifyProgressionEvent(14);
        }
      }
      if ((double) NPC.waveKills == (double) waveKills || (double) num2 == 0.0)
        return;
      if (Main.netMode != 1)
        Main.ReportInvasionProgress((int) NPC.waveKills, progressMax, 1, NPC.waveNumber);
      if (Main.netMode != 2)
        return;
      NetMessage.SendData(78, number: Main.invasionProgress, number2: ((float) Main.invasionProgressMax), number3: 1f, number4: ((float) NPC.waveNumber));
    }

    private void CheckProgressPumpkinMoon()
    {
      if (!Main.pumpkinMoon)
        return;
      NetworkText text = NetworkText.Empty;
      int progressMax = NPC.MoonEventRequiredPointsPerWaveLookup[NPC.waveNumber];
      switch (NPC.waveNumber)
      {
        case 1:
          text = Lang.GetInvasionWaveText(2, (short) 326, (short) 305);
          break;
        case 2:
          text = Lang.GetInvasionWaveText(3, (short) 329, (short) 326);
          break;
        case 3:
          text = Lang.GetInvasionWaveText(4, (short) 330, (short) 326, (short) 305);
          break;
        case 4:
          text = Lang.GetInvasionWaveText(5, (short) 315, (short) 329);
          break;
        case 5:
          text = Lang.GetInvasionWaveText(6, (short) 325, (short) 326, (short) 305);
          break;
        case 6:
          text = Lang.GetInvasionWaveText(7, (short) 325, (short) 330, (short) 329);
          break;
        case 7:
          text = Lang.GetInvasionWaveText(8, (short) 315, (short) 330, (short) 329);
          break;
        case 8:
          text = Lang.GetInvasionWaveText(9, (short) 325, (short) 330, (short) 329, (short) 326, (short) 305);
          break;
        case 9:
          text = Lang.GetInvasionWaveText(10, (short) 327, (short) 329, (short) 326);
          break;
        case 10:
          text = Lang.GetInvasionWaveText(11, (short) 325, (short) 330, (short) 326);
          break;
        case 11:
          text = Lang.GetInvasionWaveText(12, (short) 327, (short) 330);
          break;
        case 12:
          text = Lang.GetInvasionWaveText(13, (short) 325, (short) 315, (short) 330, (short) 329, (short) 326);
          break;
        case 13:
          text = Lang.GetInvasionWaveText(14, (short) 327, (short) 325, (short) 315, (short) 330, (short) 329, (short) 326, (short) 305);
          break;
        case 14:
          text = Lang.GetInvasionWaveText(15, (short) 327, (short) 325, (short) 330, (short) 326, (short) 305);
          break;
        case 15:
          text = Lang.GetInvasionWaveText(16, (short) 327, (short) 315, (short) 330, (short) 329, (short) 326);
          break;
        case 16:
          text = Lang.GetInvasionWaveText(17, (short) 327, (short) 325, (short) 315, (short) 330, (short) 329);
          break;
        case 17:
          text = Lang.GetInvasionWaveText(18, (short) 327, (short) 325, (short) 315, (short) 330);
          break;
        case 18:
          text = Lang.GetInvasionWaveText(19, (short) 327, (short) 325, (short) 315);
          break;
        case 19:
          text = Lang.GetInvasionWaveText(-1, (short) 327, (short) 325, (short) 315);
          break;
      }
      float num1 = 0.0f;
      switch (this.type)
      {
        case 305:
        case 306:
        case 307:
        case 308:
        case 309:
        case 310:
        case 311:
        case 312:
        case 313:
        case 314:
          num1 = 1f;
          break;
        case 315:
          num1 = 50f;
          break;
        case 325:
          num1 = 75f;
          break;
        case 326:
          num1 = 2f;
          break;
        case 327:
          num1 = 150f;
          break;
        case 329:
          num1 = 5f;
          break;
        case 330:
          num1 = 10f;
          break;
      }
      float num2 = num1 * this.GetMoonEventPointScalar();
      float waveKills = NPC.waveKills;
      NPC.waveKills += num2;
      NPC.totalInvasionPoints += num2;
      if ((double) NPC.waveKills >= (double) progressMax && progressMax != 0)
      {
        NPC.waveKills = 0.0f;
        ++NPC.waveNumber;
        progressMax = NPC.MoonEventRequiredPointsPerWaveLookup[NPC.waveNumber];
        if (text != NetworkText.Empty)
        {
          switch (Main.netMode)
          {
            case 0:
              Main.NewText(text.ToString(), (byte) 175, (byte) 75);
              break;
            case 2:
              ChatHelper.BroadcastChatMessage(text, new Color(175, 75, (int) byte.MaxValue));
              break;
          }
          if (NPC.waveNumber == 15)
            AchievementsHelper.NotifyProgressionEvent(15);
        }
      }
      if ((double) NPC.waveKills == (double) waveKills || (double) num2 == 0.0)
        return;
      if (Main.netMode != 1)
        Main.ReportInvasionProgress((int) NPC.waveKills, progressMax, 2, NPC.waveNumber);
      if (Main.netMode != 2)
        return;
      NetMessage.SendData(78, number: Main.invasionProgress, number2: ((float) Main.invasionProgressMax), number3: 2f, number4: ((float) NPC.waveNumber));
    }

    public static void ResetKillCount()
    {
      for (int index = 0; index < (int) NPCID.Count; ++index)
        NPC.killCount[index] = 0;
    }

    public bool AnyInteractions()
    {
      if (Main.netMode == 0)
      {
        if (this.playerInteraction[Main.myPlayer])
          return true;
      }
      else
      {
        for (int index = 0; index < (int) byte.MaxValue; ++index)
        {
          if (this.playerInteraction[index])
            return true;
        }
      }
      return false;
    }

    public bool IsDamageDodgeable()
    {
      switch (this.type)
      {
        case 21:
        case 68:
          return (double) this.ai[1] != 2.0;
        case 636:
          return !Main.dayTime;
        default:
          return true;
      }
    }

    public static void SetEventFlagCleared(ref bool eventFlag, int gameEventId)
    {
      bool flag = eventFlag;
      eventFlag = true;
      if (eventFlag == flag)
        return;
      NPC.OnGameEventClearedForTheFirstTime(gameEventId);
    }

    public static void OnGameEventClearedForTheFirstTime(int gameEventId)
    {
      switch (gameEventId)
      {
        case 4:
          break;
        case 10:
          LanternNight.NextNightIsLanternNight = true;
          CreditsRollEvent.TryStartingCreditsRoll();
          break;
        case 16:
        case 17:
        case 18:
          LanternNight.NextNightIsLanternNight = true;
          if (Main.netMode == 1 || !Main.hardMode || !NPC.downedMechBoss1 || !NPC.downedMechBoss2 || !NPC.downedMechBoss3)
            break;
          WorldGen.GeneratePlanteraBulbOnAllMechsDefeated();
          break;
        case 21:
        case 22:
          break;
        default:
          LanternNight.NextNightIsLanternNight = true;
          break;
      }
    }

    public void NPCLoot()
    {
      if (Main.netMode == 1 || this.type >= (int) NPCID.Count || Main.getGoodWorld && !NPC.downedBoss3 && (this.type == 31 || this.type == 294 || this.type == 296 || this.type == 295 || this.type == 32 || this.type == 34 || this.type == 71))
        return;
      Player closestPlayer = Main.player[(int) Player.FindClosest(this.position, this.width, this.height)];
      if (true)
      {
        this.CountKillForAchievements();
        if (this.GetWereThereAnyInteractions())
        {
          if (this.IsNPCValidForBestiaryKillCredit())
            Main.BestiaryTracker.Kills.RegisterKill(this);
          this.CountKillForBannersAndDropThem();
        }
      }
      if (this.type == 23 && Main.hardMode || this.SpawnedFromStatue && NPCID.Sets.NoEarlymodeLootWhenSpawnedFromStatue[this.type] && !Main.hardMode || this.SpawnedFromStatue && (double) NPCID.Sets.StatueSpawnedDropRarity[this.type] != -1.0 && ((double) Main.rand.NextFloat() >= (double) NPCID.Sets.StatueSpawnedDropRarity[this.type] || !this.AnyInteractions()))
        return;
      int num = !NPC.downedMechBoss1 || !NPC.downedMechBoss2 ? 0 : (NPC.downedMechBoss3 ? 1 : 0);
      this.DoDeathEvents_BeforeLoot(closestPlayer);
      this.NPCLoot_DropItems(closestPlayer);
      this.DoDeathEvents(closestPlayer);
      if (num == 0 && NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3 && Main.hardMode)
      {
        switch (Main.netMode)
        {
          case 0:
            Main.NewText(Lang.misc[32].Value, (byte) 50, B: (byte) 130);
            break;
          case 2:
            ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[32].Key), new Color(50, (int) byte.MaxValue, 130));
            break;
        }
      }
      this.NPCLoot_DropMoney(closestPlayer);
      this.NPCLoot_DropHeals(closestPlayer);
    }

    public bool IsNPCValidForBestiaryKillCredit()
    {
      switch (this.type)
      {
        case 13:
        case 14:
        case 15:
          return this.boss;
        default:
          return true;
      }
    }

    private void DoDeathEvents_BeforeLoot(Player closestPlayer)
    {
      switch (this.type)
      {
        case 125:
        case 126:
          if (!NPC.AnyNPCs(this.type == 125 ? 126 : 125))
            break;
          this.value = 0.0f;
          this.boss = false;
          break;
      }
    }

    private void NPCLoot_DropItems(Player closestPlayer)
    {
      DropAttemptInfo info = new DropAttemptInfo()
      {
        player = closestPlayer,
        npc = this,
        IsExpertMode = Main.expertMode,
        IsMasterMode = Main.masterMode,
        IsInSimulation = false,
        rng = Main.rand
      };
      Main.ItemDropSolver.TryDropping(info);
    }

    public static void ResetBadgerHatTime()
    {
      NPC.EoCKilledToday = false;
      NPC.WoFKilledToday = false;
    }

    private void DoDeathEvents_DropBossPotionsAndHearts()
    {
      int Stack = Main.rand.Next(5, 16);
      int Type = 28;
      if (this.type == 113)
        Type = 188;
      else if (this.type == 35)
        Type = 188;
      else if (this.type == 668)
        Type = 188;
      else if (this.type == 222)
        Type = 1134;
      else if (this.type == 657)
        Type = 499;
      else if (this.type > 113 && this.type < 222)
        Type = 499;
      else if (this.type == 636)
        Type = 499;
      else if (this.type == 245 || this.type == 262)
        Type = 499;
      else if (this.type == 370)
        Type = 499;
      else if (this.type == 395)
        Type = 499;
      else if (this.type == 439)
        Type = 499;
      else if (this.type == 398)
        Type = 3544;
      Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, Type, Stack);
      int num = Main.rand.Next(5) + 5;
      for (int index = 0; index < num; ++index)
        Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 58);
      if (this.type == 4)
        NPC.EoCKilledToday = true;
      else if (this.type == 113)
        NPC.WoFKilledToday = true;
      if (!NPC.EoCKilledToday || !NPC.WoFKilledToday)
        return;
      NPC.ResetBadgerHatTime();
      Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 5004);
    }

    private void DoDeathEvents_CelebrateBossDeath()
    {
      if (this.type == 125 || this.type == 126)
      {
        if (Main.netMode == 0)
        {
          Main.NewText(Language.GetTextValue("Announcement.HasBeenDefeated_Plural", (object) Language.GetTextValue("Enemies.TheTwins")), (byte) 175, (byte) 75);
        }
        else
        {
          if (Main.netMode != 2)
            return;
          ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasBeenDefeated_Plural", (object) NetworkText.FromKey("Enemies.TheTwins")), new Color(175, 75, (int) byte.MaxValue));
        }
      }
      else if (this.type == 398)
      {
        if (Main.netMode == 0)
        {
          Main.NewText(Language.GetTextValue("Announcement.HasBeenDefeated_Single", (object) Language.GetTextValue("Enemies.MoonLord")), (byte) 175, (byte) 75);
        }
        else
        {
          if (Main.netMode != 2)
            return;
          ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasBeenDefeated_Single", (object) NetworkText.FromKey("Enemies.MoonLord")), new Color(175, 75, (int) byte.MaxValue));
        }
      }
      else if (Main.netMode == 0)
      {
        Main.NewText(Language.GetTextValue("Announcement.HasBeenDefeated_Single", (object) this.TypeName), (byte) 175, (byte) 75);
      }
      else
      {
        if (Main.netMode != 2)
          return;
        ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasBeenDefeated_Single", (object) this.GetTypeNetName()), new Color(175, 75, (int) byte.MaxValue));
      }
    }

    private void CreateBrickBoxForWallOfFlesh()
    {
      int num1 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
      int num2 = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16;
      int num3 = this.width / 2 / 16 + 1;
      for (int index1 = num1 - num3; index1 <= num1 + num3; ++index1)
      {
        for (int index2 = num2 - num3; index2 <= num2 + num3; ++index2)
        {
          if ((index1 == num1 - num3 || index1 == num1 + num3 || index2 == num2 - num3 || index2 == num2 + num3) && !Main.tile[index1, index2].active())
          {
            Main.tile[index1, index2].type = WorldGen.crimson ? (ushort) 347 : (ushort) 140;
            Main.tile[index1, index2].active(true);
          }
          Main.tile[index1, index2].lava(false);
          Main.tile[index1, index2].liquid = (byte) 0;
          if (Main.netMode == 2)
            NetMessage.SendTileSquare(-1, index1, index2);
          else
            WorldGen.SquareTileFrame(index1, index2);
        }
      }
    }

    private void DoDeathEvents_SummonDungeonSpirit(Player closestPlayer)
    {
      if (this.lifeMax <= 100 || this.type == 288 || (double) this.value <= 0.0 || !this.HasPlayerTarget || !Main.hardMode || !NPC.downedPlantBoss || !Main.player[this.target].ZoneDungeon)
        return;
      int range = 13;
      if (Main.expertMode)
        range = 9;
      if (closestPlayer.RollLuck(range) != 0 || !Main.wallDungeon[(int) Main.tile[(int) this.Center.X / 16, (int) this.Center.Y / 16].wall])
        return;
      NPC.NewNPC(this.GetSpawnSource_NPCHurt(), (int) this.Center.X, (int) this.Center.Y, 288);
    }

    private void DoDeathEvents_AdvanceSlimeRain(Player closestPlayer)
    {
      if (!Main.slimeRain || !Main.slimeRainNPC[this.type] || NPC.AnyNPCs(50))
        return;
      int num = 150;
      if (NPC.downedSlimeKing)
        num /= 2;
      ++Main.slimeRainKillCount;
      if (Main.slimeRainKillCount < num)
        return;
      NPC.SpawnOnPlayer(closestPlayer.whoAmI, 50);
      Main.slimeRainKillCount = -num / 2;
    }

    private void NPCLoot_DropHeals(Player closestPlayer)
    {
      this.NPCLoot_DropCommonLifeAndMana(closestPlayer);
      switch (this.type)
      {
        case 13:
        case 14:
        case 15:
          if (Main.rand.Next(4) != 0 || closestPlayer.statLife >= closestPlayer.statLifeMax2)
            break;
          Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 58);
          break;
        case 116:
        case 117:
        case 118:
        case 119:
          if (Main.expertMode && Main.rand.Next(5) != 0)
            break;
          Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 58);
          break;
        case 139:
          if (Main.rand.Next(2) != 0)
            break;
          Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 58);
          break;
        case 267:
          if (Main.rand.Next(2) != 0 || closestPlayer.statLife >= closestPlayer.statLifeMax2)
            break;
          Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 58);
          break;
        case 305:
        case 306:
        case 307:
        case 308:
        case 309:
        case 310:
        case 311:
        case 312:
        case 313:
        case 314:
        case 329:
        case 330:
          if (closestPlayer.RollLuck(4) != 0)
            break;
          Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 58);
          break;
        case 315:
          Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 58);
          break;
        case 325:
        case 327:
        case 344:
        case 345:
        case 346:
          int num1 = Main.rand.Next(6) + 6;
          for (int index = 0; index < num1; ++index)
            Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 58);
          break;
        case 326:
          if (closestPlayer.RollLuck(6) != 0)
            break;
          Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 58);
          break;
        case 338:
        case 339:
        case 340:
          if (closestPlayer.RollLuck(5) != 0)
            break;
          Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 58);
          break;
        case 341:
          int num2 = Main.rand.Next(5, 11);
          for (int index = 0; index < num2; ++index)
            Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 58);
          break;
        case 342:
          if (Main.rand.Next(3) == 0)
            break;
          Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 58);
          break;
      }
    }

    private void DoDeathEvents(Player closestPlayer)
    {
      this.DoDeathEvents_AdvanceSlimeRain(closestPlayer);
      this.DoDeathEvents_SummonDungeonSpirit(closestPlayer);
      if (Main.remixWorld && !NPC.downedSlimeKing && this.AnyInteractions() && Main.AnyPlayerReadyToFightKingSlime() && this.type == 1 && !NPC.AnyNPCs(50) && Main.rand.Next(200) == 0)
        NPC.SpawnOnPlayer(closestPlayer.whoAmI, 50);
      switch (this.type)
      {
        case 4:
          NPC.SetEventFlagCleared(ref NPC.downedBoss1, 13);
          break;
        case 13:
        case 14:
        case 15:
        case 266:
          if (this.boss)
          {
            if (!NPC.downedBoss2 || Main.rand.Next(2) == 0)
              WorldGen.spawnMeteor = true;
            NPC.SetEventFlagCleared(ref NPC.downedBoss2, 14);
            break;
          }
          break;
        case 22:
          if (Collision.LavaCollision(this.position, this.width, this.height))
          {
            NPC.SpawnWOF(this.position);
            break;
          }
          break;
        case 35:
          if (this.boss)
          {
            NPC.SetEventFlagCleared(ref NPC.downedBoss3, 15);
            break;
          }
          break;
        case 50:
          if (Main.slimeRain)
          {
            Main.StopSlimeRain();
            AchievementsHelper.NotifyProgressionEvent(16);
          }
          if (Main.netMode != 1 && !NPC.unlockedSlimeBlueSpawn)
          {
            NPC.unlockedSlimeBlueSpawn = true;
            this.ViolentlySpawnNerdySlime();
          }
          NPC.SetEventFlagCleared(ref NPC.downedSlimeKing, 11);
          if (Main.netMode == 2)
          {
            NetMessage.SendData(7);
            break;
          }
          break;
        case 109:
          if (!NPC.downedClown)
          {
            NPC.downedClown = true;
            if (Main.netMode == 2)
            {
              NetMessage.SendData(7);
              break;
            }
            break;
          }
          break;
        case 113:
          if (Main.netMode != 1)
          {
            this.CreateBrickBoxForWallOfFlesh();
            bool hardMode = Main.hardMode;
            WorldGen.StartHardmode();
            if (NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3 && !hardMode)
            {
              switch (Main.netMode)
              {
                case 0:
                  Main.NewText(Lang.misc[32].Value, (byte) 50, B: (byte) 130);
                  break;
                case 2:
                  ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[32].Key), new Color(50, (int) byte.MaxValue, 130));
                  break;
              }
            }
            NPC.SetEventFlagCleared(ref hardMode, 19);
            break;
          }
          break;
        case 125:
        case 126:
          if (this.boss)
          {
            NPC.SetEventFlagCleared(ref NPC.downedMechBoss2, 17);
            NPC.downedMechBossAny = true;
            break;
          }
          break;
        case (int) sbyte.MaxValue:
          if (this.boss)
          {
            NPC.SetEventFlagCleared(ref NPC.downedMechBoss3, 18);
            NPC.downedMechBossAny = true;
            break;
          }
          break;
        case 134:
          if (this.boss)
          {
            NPC.SetEventFlagCleared(ref NPC.downedMechBoss1, 16);
            NPC.downedMechBossAny = true;
            break;
          }
          break;
        case 216:
          NPC.SpawnBoss((int) this.position.X, (int) this.position.Y, 662, this.target);
          break;
        case 222:
          NPC.SetEventFlagCleared(ref NPC.downedQueenBee, 8);
          if (Main.netMode == 2)
          {
            NetMessage.SendData(7);
            break;
          }
          break;
        case 245:
          NPC.SetEventFlagCleared(ref NPC.downedGolemBoss, 6);
          break;
        case 262:
          int num = NPC.downedPlantBoss ? 1 : 0;
          NPC.SetEventFlagCleared(ref NPC.downedPlantBoss, 12);
          if (num == 0)
          {
            switch (Main.netMode)
            {
              case 0:
                Main.NewText(Lang.misc[33].Value, (byte) 50, B: (byte) 130);
                break;
              case 2:
                ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[33].Key), new Color(50, (int) byte.MaxValue, 130));
                break;
            }
          }
          else
            break;
          break;
        case 325:
          if (Main.pumpkinMoon)
          {
            NPC.SetEventFlagCleared(ref NPC.downedHalloweenTree, 4);
            break;
          }
          break;
        case 327:
          if (Main.pumpkinMoon)
          {
            NPC.SetEventFlagCleared(ref NPC.downedHalloweenKing, 5);
            break;
          }
          break;
        case 344:
          if (Main.snowMoon)
          {
            NPC.SetEventFlagCleared(ref NPC.downedChristmasTree, 21);
            break;
          }
          break;
        case 345:
          if (Main.snowMoon)
          {
            NPC.SetEventFlagCleared(ref NPC.downedChristmasIceQueen, 20);
            break;
          }
          break;
        case 346:
          if (Main.snowMoon)
          {
            NPC.SetEventFlagCleared(ref NPC.downedChristmasSantank, 22);
            break;
          }
          break;
        case 370:
          NPC.SetEventFlagCleared(ref NPC.downedFishron, 7);
          break;
        case 398:
          NPC.SetEventFlagCleared(ref NPC.downedMoonlord, 10);
          NPC.LunarApocalypseIsUp = false;
          break;
        case 402:
        case 405:
        case 407:
        case 409:
        case 411:
          if (NPC.ShieldStrengthTowerStardust > 0)
          {
            Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X, this.Center.Y, 0.0f, 0.0f, 629, 0, 0.0f, Main.myPlayer, (float) NPC.FindFirstNPC(493));
            break;
          }
          break;
        case 412:
        case 413:
        case 414:
        case 415:
        case 416:
        case 417:
        case 418:
        case 419:
        case 518:
          if (NPC.ShieldStrengthTowerSolar > 0)
          {
            Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X, this.Center.Y, 0.0f, 0.0f, 629, 0, 0.0f, Main.myPlayer, (float) NPC.FindFirstNPC(517));
            break;
          }
          break;
        case 420:
        case 421:
        case 423:
        case 424:
          if (NPC.ShieldStrengthTowerNebula > 0)
          {
            Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X, this.Center.Y, 0.0f, 0.0f, 629, 0, 0.0f, Main.myPlayer, (float) NPC.FindFirstNPC(507));
            break;
          }
          break;
        case 422:
          NPC.downedTowerVortex = true;
          NPC.TowerActiveVortex = false;
          WorldGen.UpdateLunarApocalypse();
          WorldGen.MessageLunarApocalypse();
          break;
        case 425:
        case 426:
        case 427:
        case 429:
          if (NPC.ShieldStrengthTowerVortex > 0)
          {
            Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X, this.Center.Y, 0.0f, 0.0f, 629, 0, 0.0f, Main.myPlayer, (float) NPC.FindFirstNPC(422));
            break;
          }
          break;
        case 439:
          NPC.SetEventFlagCleared(ref NPC.downedAncientCultist, 9);
          WorldGen.TriggerLunarApocalypse();
          break;
        case 493:
          NPC.downedTowerStardust = true;
          NPC.TowerActiveStardust = false;
          WorldGen.UpdateLunarApocalypse();
          WorldGen.MessageLunarApocalypse();
          break;
        case 507:
          NPC.downedTowerNebula = true;
          NPC.TowerActiveNebula = false;
          WorldGen.UpdateLunarApocalypse();
          WorldGen.MessageLunarApocalypse();
          break;
        case 517:
          NPC.downedTowerSolar = true;
          NPC.TowerActiveSolar = false;
          WorldGen.UpdateLunarApocalypse();
          WorldGen.MessageLunarApocalypse();
          break;
        case 552:
        case 553:
        case 554:
          if (DD2Event.Ongoing)
          {
            DD2Event.AnnounceGoblinDeath(this);
            if (DD2Event.ShouldDropCrystals())
            {
              Item.NewItem(this.GetItemSource_Loot(), this.position, this.Size, 3822);
              break;
            }
            break;
          }
          break;
        case 555:
        case 556:
        case 557:
        case 558:
        case 559:
        case 560:
        case 561:
        case 562:
        case 563:
        case 564:
        case 565:
        case 568:
        case 569:
        case 570:
        case 571:
        case 572:
        case 573:
        case 574:
        case 575:
        case 576:
        case 577:
        case 578:
          if (DD2Event.ShouldDropCrystals())
          {
            Item.NewItem(this.GetItemSource_Loot(), this.position, this.Size, 3822);
            break;
          }
          break;
        case 614:
          int Damage = 175;
          if (this.SpawnedFromStatue)
            Damage = 0;
          Projectile.NewProjectile(this.GetSpawnSource_ForProjectile(), this.Center.X, this.Center.Y, 0.0f, 0.0f, 281, Damage, 0.0f, Main.myPlayer, -2f, (float) ((int) this.releaseOwner + 1));
          break;
        case 636:
          NPC.SetEventFlagCleared(ref NPC.downedEmpressOfLight, 23);
          break;
        case 657:
          NPC.SetEventFlagCleared(ref NPC.downedQueenSlime, 24);
          break;
        case 661:
          if (Main.netMode != 1 && this.GetWereThereAnyInteractions())
          {
            int Type = 636;
            if (!NPC.AnyNPCs(Type))
            {
              Vector2 vector2 = this.Center + new Vector2(0.0f, -200f) + Main.rand.NextVector2Circular(50f, 50f);
              NPC.SpawnBoss((int) vector2.X, (int) vector2.Y, Type, closestPlayer.whoAmI);
              break;
            }
            break;
          }
          break;
        case 668:
          NPC.SetEventFlagCleared(ref NPC.downedDeerclops, 25);
          break;
      }
      if (!this.boss)
        return;
      this.DoDeathEvents_DropBossPotionsAndHearts();
      this.DoDeathEvents_CelebrateBossDeath();
      if (Main.netMode != 2)
        return;
      NetMessage.SendData(7);
    }

    private void ViolentlySpawnNerdySlime()
    {
      int index = NPC.NewNPC(this.GetSpawnSourceForNPCFromNPCAI(), (int) this.Center.X - 10, (int) this.Center.Y, 670);
      NPC npc = Main.npc[index];
      Vector2 vector2 = new Vector2(Main.rand.NextFloatDirection() * 3f, -10f);
      npc.velocity = vector2;
      npc.netUpdate = true;
      WorldGen.CheckAchievement_RealEstateAndTownSlimes();
      ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.TownSlimeTransform, new ParticleOrchestraSettings()
      {
        PositionInWorld = this.Center,
        MovementVector = vector2,
        UniqueInfoPiece = 0
      });
    }

    private void NPCLoot_DropCommonLifeAndMana(Player closestPlayer)
    {
      if (this.type != 16 && this.type != 81 && this.type != 121 && closestPlayer.RollLuck(6) == 0 && this.lifeMax > 1 && this.damage > 0)
      {
        if (Main.rand.Next(2) == 0 && closestPlayer.statMana < closestPlayer.statManaMax2)
          Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 184);
        else if (Main.rand.Next(2) == 0 && closestPlayer.statLife < closestPlayer.statLifeMax2)
          Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 58);
      }
      if (this.type == 16 || this.type == 81 || this.type == 121 || closestPlayer.RollLuck(2) != 0 || this.lifeMax <= 1 || this.damage <= 0 || closestPlayer.statMana >= closestPlayer.statManaMax2)
        return;
      Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 184);
    }

    private void NPCLoot_DropMoney(Player closestPlayer)
    {
      float num1 = 0.0f;
      float luck = closestPlayer.luck;
      int num2 = 1;
      if ((double) Main.rand.NextFloat() < (double) Math.Abs(luck))
        num2 = 2;
      for (int index = 0; index < num2; ++index)
      {
        float num3 = this.value;
        if (this.midas)
          num3 *= (float) (1.0 + (double) Main.rand.Next(10, 51) * 0.0099999997764825821);
        float num4 = num3 * (float) (1.0 + (double) Main.rand.Next(-20, 76) * 0.0099999997764825821);
        if (Main.rand.Next(2) == 0)
          num4 *= (float) (1.0 + (double) Main.rand.Next(5, 11) * 0.0099999997764825821);
        if (Main.rand.Next(4) == 0)
          num4 *= (float) (1.0 + (double) Main.rand.Next(10, 21) * 0.0099999997764825821);
        if (Main.rand.Next(8) == 0)
          num4 *= (float) (1.0 + (double) Main.rand.Next(15, 31) * 0.0099999997764825821);
        if (Main.rand.Next(16) == 0)
          num4 *= (float) (1.0 + (double) Main.rand.Next(20, 41) * 0.0099999997764825821);
        if (Main.rand.Next(32) == 0)
          num4 *= (float) (1.0 + (double) Main.rand.Next(25, 51) * 0.0099999997764825821);
        if (Main.rand.Next(64) == 0)
          num4 *= (float) (1.0 + (double) Main.rand.Next(50, 101) * 0.0099999997764825821);
        if (Main.bloodMoon)
          num4 *= (float) (1.0 + (double) Main.rand.Next(101) * 0.0099999997764825821);
        if (index == 0)
          num1 = num4;
        else if ((double) luck < 0.0)
        {
          if ((double) num4 < (double) num1)
            num1 = num4;
        }
        else if ((double) num4 > (double) num1)
          num1 = num4;
      }
      float num5 = num1 + (float) this.extraValue;
      while ((int) num5 > 0)
      {
        if ((double) num5 > 1000000.0)
        {
          int num6 = (int) ((double) num5 / 1000000.0);
          if (num6 > 50 && Main.rand.Next(5) == 0)
            num6 /= Main.rand.Next(3) + 1;
          if (Main.rand.Next(5) == 0)
            num6 /= Main.rand.Next(3) + 1;
          int Stack = num6;
          while (Stack > 999)
          {
            Stack -= 999;
            Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 74, 999);
          }
          num5 -= (float) (1000000 * num6);
          Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 74, Stack);
        }
        else if ((double) num5 > 10000.0)
        {
          int Stack = (int) ((double) num5 / 10000.0);
          if (Stack > 50 && Main.rand.Next(5) == 0)
            Stack /= Main.rand.Next(3) + 1;
          if (Main.rand.Next(5) == 0)
            Stack /= Main.rand.Next(3) + 1;
          num5 -= (float) (10000 * Stack);
          Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 73, Stack);
        }
        else if ((double) num5 > 100.0)
        {
          int Stack = (int) ((double) num5 / 100.0);
          if (Stack > 50 && Main.rand.Next(5) == 0)
            Stack /= Main.rand.Next(3) + 1;
          if (Main.rand.Next(5) == 0)
            Stack /= Main.rand.Next(3) + 1;
          num5 -= (float) (100 * Stack);
          Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 72, Stack);
        }
        else
        {
          int Stack = (int) num5;
          if (Stack > 50 && Main.rand.Next(5) == 0)
            Stack /= Main.rand.Next(3) + 1;
          if (Main.rand.Next(5) == 0)
            Stack /= Main.rand.Next(4) + 1;
          if (Stack < 1)
            Stack = 1;
          num5 -= (float) Stack;
          Item.NewItem(this.GetItemSource_Loot(), (int) this.position.X, (int) this.position.Y, this.width, this.height, 71, Stack);
        }
      }
    }

    public static int GetStackForSlimeItemDrop(int item)
    {
      int forSlimeItemDrop = 1;
      switch (item)
      {
        case 8:
          forSlimeItemDrop = Main.rand.Next(5, 11);
          break;
        case 166:
          forSlimeItemDrop = Main.rand.Next(2, 7);
          break;
        case 965:
          forSlimeItemDrop = Main.rand.Next(20, 46);
          break;
        default:
          if (item >= 11 && item <= 14 || item >= 699 && item <= 702)
          {
            forSlimeItemDrop = Main.rand.Next(3, 9);
            if (Main.rand.Next(2) == 0)
            {
              forSlimeItemDrop += 5;
              break;
            }
            break;
          }
          switch (item)
          {
            case 71:
              forSlimeItemDrop = Main.rand.Next(50, 100);
              break;
            case 72:
              forSlimeItemDrop = Main.rand.Next(20, 100);
              break;
            case 73:
              forSlimeItemDrop = Main.rand.Next(1, 3);
              break;
          }
          break;
      }
      return forSlimeItemDrop;
    }

    public bool ExcludedFromDeathTally() => this.netID < 0 ? this.netID == -5 || this.netID == -1 : NPCID.Sets.ProjectileNPC[this.netID] || NPCID.Sets.PositiveNPCTypesExcludedFromDeathTally[this.netID];

    private void CountKillForBannersAndDropThem()
    {
      int index1 = Item.NPCtoBanner(this.BannerID());
      if (index1 <= 0 || this.ExcludedFromDeathTally())
        return;
      ++NPC.killCount[index1];
      if (Main.netMode == 2)
        NetMessage.SendData(83, number: index1);
      int num = ItemID.Sets.KillsToBanner[Item.BannerToItem(index1)];
      if (NPC.killCount[index1] % num != 0 || index1 <= 0)
        return;
      int npc = Item.BannerToNPC(index1);
      int index2 = this.lastInteraction;
      if (!Main.player[index2].active || Main.player[index2].dead)
        index2 = this.FindClosestPlayer();
      NetworkText text = NetworkText.FromKey("Game.EnemiesDefeatedAnnouncement", (object) NPC.killCount[index1], (object) NetworkText.FromKey(Lang.GetNPCName(npc).Key));
      if (index2 >= 0 && index2 < (int) byte.MaxValue)
        text = NetworkText.FromKey("Game.EnemiesDefeatedByAnnouncement", (object) Main.player[index2].name, (object) NPC.killCount[index1], (object) NetworkText.FromKey(Lang.GetNPCName(npc).Key));
      switch (Main.netMode)
      {
        case 0:
          Main.NewText(text.ToString(), (byte) 250, (byte) 250, (byte) 0);
          break;
        case 2:
          ChatHelper.BroadcastChatMessage(text, new Color(250, 250, 0));
          break;
      }
      int Type = Item.BannerToItem(index1);
      Vector2 position = this.position;
      if (index2 >= 0 && index2 < (int) byte.MaxValue)
        position = Main.player[index2].position;
      Item.NewItem(this.GetItemSource_Loot(), (int) position.X, (int) position.Y, this.width, this.height, Type);
    }

    public bool GetWereThereAnyInteractions() => this.realLife < 0 ? this.AnyInteractions() : Main.npc[this.realLife].AnyInteractions();

    private void CountKillForAchievements()
    {
      switch (this.type)
      {
        case 13:
        case 14:
        case 15:
          if (!this.boss)
            break;
          AchievementsHelper.NotifyNPCKilled(this);
          break;
        case 125:
        case 126:
          if (NPC.AnyNPCs(this.type == 126 ? 125 : 126))
            break;
          AchievementsHelper.NotifyNPCKilled(this);
          AchievementsHelper.CheckMechaMayhem(this.type);
          break;
        case (int) sbyte.MaxValue:
        case 134:
          AchievementsHelper.CheckMechaMayhem(this.type);
          AchievementsHelper.NotifyNPCKilled(this);
          break;
        default:
          AchievementsHelper.NotifyNPCKilled(this);
          break;
      }
    }

    private bool TryTeleportingCaughtMysticFrog()
    {
      if (Main.netMode == 1 || this.type != 687)
        return false;
      Vector2 zero = Vector2.Zero;
      Point tileCoordinates = this.Center.ToTileCoordinates();
      if (this.AI_AttemptToFindTeleportSpot(ref zero, tileCoordinates.X, tileCoordinates.Y, 15, 8))
      {
        Vector2 newPos = new Vector2(zero.X * 16f - (float) (this.width / 2), zero.Y * 16f - (float) this.height);
        NetMessage.SendData(23, number: this.whoAmI);
        this.Teleport(newPos, 13);
        return true;
      }
      Vector2 position = this.Center - new Vector2(20f);
      Utils.PoofOfSmoke(position);
      this.active = false;
      NetMessage.SendData(23, number: this.whoAmI);
      NetMessage.SendData(106, number: ((int) position.X), number2: position.Y);
      return false;
    }

    public static void CatchNPC(int i, int who = -1)
    {
      if (!Main.npc[i].active)
        return;
      if (who == -1)
        who = Main.myPlayer;
      if (Main.netMode == 1)
      {
        Main.npc[i].active = false;
        NetMessage.SendData(70, number: i, number2: ((float) who));
      }
      else
      {
        if (Main.npc[i].catchItem <= (short) 0)
          return;
        if (Main.npc[i].type == 687)
          Main.npc[i].TryTeleportingCaughtMysticFrog();
        else if (Main.npc[i].SpawnedFromStatue)
        {
          Vector2 position = Main.npc[i].Center - new Vector2(20f);
          Utils.PoofOfSmoke(position);
          Main.npc[i].active = false;
          NetMessage.SendData(23, number: i);
          NetMessage.SendData(106, number: ((int) position.X), number2: position.Y);
        }
        else
        {
          new Item().SetDefaults((int) Main.npc[i].catchItem);
          Item.NewItem(NPC.GetSpawnSource_NPCCatch(who), (int) Main.player[who].Center.X, (int) Main.player[who].Center.Y, 0, 0, (int) Main.npc[i].catchItem, noGrabDelay: true);
          Main.npc[i].active = false;
          NetMessage.SendData(23, number: i);
        }
      }
    }

    public void DropItemInstanced(
      Vector2 Position,
      Vector2 HitboxSize,
      int itemType,
      int itemStack = 1,
      bool interactionRequired = true)
    {
      if (itemType <= 0)
        return;
      switch (Main.netMode)
      {
        case 0:
          Item.NewItem(this.GetItemSource_Loot(), (int) Position.X, (int) Position.Y, (int) HitboxSize.X, (int) HitboxSize.Y, itemType, itemStack);
          break;
        case 2:
          int number = Item.NewItem(this.GetItemSource_Loot(), (int) Position.X, (int) Position.Y, (int) HitboxSize.X, (int) HitboxSize.Y, itemType, itemStack, true);
          Main.timeItemSlotCannotBeReusedFor[number] = 54000;
          for (int remoteClient = 0; remoteClient < (int) byte.MaxValue; ++remoteClient)
          {
            if (Main.player[remoteClient].active && (this.playerInteraction[remoteClient] || !interactionRequired))
              NetMessage.SendData(90, remoteClient, number: number);
          }
          Main.item[number].active = false;
          break;
      }
      this.value = 0.0f;
    }

    public void PlayerInteraction(int player)
    {
      if (this.realLife < 0 ? this.lastInteraction == player : Main.npc[this.realLife].lastInteraction == player)
        return;
      if (this.type == 13 || this.type == 14 || this.type == 15)
      {
        for (int index = 0; index < 200; ++index)
        {
          if (index != this.whoAmI && Main.npc[index].active && (Main.npc[index].type == 13 || Main.npc[index].type == 14 || Main.npc[index].type == 15))
            Main.npc[index].ApplyInteraction(player);
        }
      }
      if (this.type == 134 || this.type == 135 || this.type == 136)
      {
        for (int index = 0; index < 200; ++index)
        {
          if (index != this.whoAmI && Main.npc[index].active && (Main.npc[index].type == 134 || Main.npc[index].type == 135 || Main.npc[index].type == 136))
            Main.npc[index].ApplyInteraction(player);
        }
      }
      if (this.type == 35 || this.type == 36)
      {
        for (int index = 0; index < 200; ++index)
        {
          if (index != this.whoAmI && Main.npc[index].active && (Main.npc[index].type == 35 || Main.npc[index].type == 36))
            Main.npc[index].ApplyInteraction(player);
        }
      }
      if (this.type == 113 || this.type == 114)
      {
        for (int index = 0; index < 200; ++index)
        {
          if (index != this.whoAmI && Main.npc[index].active && (Main.npc[index].type == 113 || Main.npc[index].type == 114))
            Main.npc[index].ApplyInteraction(player);
        }
      }
      if (this.type >= (int) sbyte.MaxValue && this.type <= 131)
      {
        for (int index = 0; index < 200; ++index)
        {
          if (index != this.whoAmI && Main.npc[index].active && Main.npc[index].type >= (int) sbyte.MaxValue && Main.npc[index].type <= 131)
            Main.npc[index].ApplyInteraction(player);
        }
      }
      if (this.type >= 245 && this.type <= 249)
      {
        for (int index = 0; index < 200; ++index)
        {
          if (index != this.whoAmI && Main.npc[index].active && Main.npc[index].type >= 245 && Main.npc[index].type <= 249)
            Main.npc[index].ApplyInteraction(player);
        }
      }
      if ((this.type == 396 || this.type == 397) && Main.npc[(int) this.ai[3]].active && Main.npc[(int) this.ai[3]].type == 398)
        Main.npc[(int) this.ai[3]].ApplyInteraction(player);
      if ((this.type == 393 || this.type == 394) && Main.npc[(int) this.ai[0]].active && Main.npc[(int) this.ai[0]].type == 395)
        Main.npc[(int) this.ai[0]].ApplyInteraction(player);
      if (this.type == 492 && Main.npc[(int) this.ai[0]].active && Main.npc[(int) this.ai[0]].type == 491)
        Main.npc[(int) this.ai[0]].ApplyInteraction(player);
      if (this.type == 125 || this.type == 126)
      {
        for (int index = 0; index < 200; ++index)
        {
          if (index != this.whoAmI && Main.npc[index].active && (Main.npc[index].type == 125 || Main.npc[index].type == 126))
            Main.npc[index].ApplyInteraction(player);
        }
      }
      this.ApplyInteraction(player);
    }

    public void ApplyInteraction(int player)
    {
      if (this.realLife >= 0)
        Main.npc[this.realLife].playerInteraction[player] = true;
      else
        this.playerInteraction[player] = true;
      if (player >= (int) byte.MaxValue)
        return;
      if (this.realLife >= 0)
        Main.npc[this.realLife].lastInteraction = player;
      else
        this.lastInteraction = player;
    }

    public static bool CanReleaseNPCs(int who)
    {
      float num1 = 0.7f;
      if (Main.netMode != 1)
        num1 += 0.05f;
      int num2 = 0;
      int num3 = 0;
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active)
        {
          ++num3;
          if ((int) Main.npc[index].releaseOwner == who)
            ++num2;
        }
      }
      int num4 = 0;
      for (int index = 0; index < (int) byte.MaxValue; ++index)
      {
        if (Main.player[index].active)
          ++num4;
      }
      int num5 = (int) (200.0 * (double) num1 / (double) num4);
      return (double) num3 < 200.0 * (double) num1 && num2 < num5;
    }

    public static int ReleaseNPC(int x, int y, int Type, int Style, int who)
    {
      int index = -1;
      if (Main.netMode == 1)
        NetMessage.SendData(71, number: x, number2: ((float) y), number3: ((float) Type), number4: ((float) Style));
      else if (Type >= 0 && Type < (int) NPCID.Count && (Main.npcCatchable[Type] || who == Main.myPlayer) && NPC.CanReleaseNPCs(who))
      {
        switch (Type)
        {
          case 148:
            int Type1 = Type + Main.rand.Next(2);
            index = NPC.NewNPC(NPC.GetSpawnSource_NPCRelease(who), x, y, Type1);
            Main.npc[index].releaseOwner = (short) who;
            break;
          case 356:
            index = NPC.NewNPC(NPC.GetSpawnSource_NPCRelease(who), x, y, Type);
            Main.npc[index].ai[2] = (float) Style;
            Main.npc[index].releaseOwner = (short) who;
            break;
          case 583:
          case 584:
          case 585:
            index = NPC.NewNPC(NPC.GetSpawnSource_NPCRelease(who), x, y, Type);
            Main.npc[index].releaseOwner = (short) who;
            Main.npc[index].ai[2] = 2f;
            Main.npc[index].TargetClosest();
            Main.npc[index].ai[3] = 0.0f;
            Main.npc[index].netUpdate = true;
            break;
          case 614:
            index = NPC.NewNPC(NPC.GetSpawnSource_NPCRelease(who), x, y, Type);
            Main.npc[index].releaseOwner = (short) who;
            int num = Main.player[who].direction;
            if (Style > 2)
            {
              Style -= 2;
              Main.npc[index].SpawnedFromStatue = true;
              Main.npc[index].CanBeReplacedByOtherNPCs = true;
            }
            if (Style == 1)
              num = 1;
            if (Style == 2)
              num = -1;
            Main.npc[index].direction = num;
            Main.npc[index].spriteDirection = num;
            Main.npc[index].netUpdate = true;
            break;
          default:
            index = NPC.NewNPC(NPC.GetSpawnSource_NPCRelease(who), x, y, Type);
            Main.npc[index].releaseOwner = (short) who;
            break;
        }
      }
      return index;
    }

    public static void SlimeRainSpawns(int plr)
    {
      int checkScreenHeight = Main.LogicCheckScreenHeight;
      int checkScreenWidth = Main.LogicCheckScreenWidth;
      float num1 = 15f;
      Player player = Main.player[plr];
      if ((double) player.position.Y > Main.worldSurface * 16.0 + (double) (checkScreenHeight / 2) || (double) player.nearbyActiveNPCs > (double) num1)
        return;
      int maxValue1 = 45 + (int) (450.0 * (double) (player.nearbyActiveNPCs / num1));
      if (Main.expertMode)
        maxValue1 = (int) ((double) maxValue1 * 0.85);
      if (Main.GameModeInfo.IsJourneyMode)
      {
        CreativePowers.SpawnRateSliderPerPlayerPower power = CreativePowerManager.Instance.GetPower<CreativePowers.SpawnRateSliderPerPlayerPower>();
        if (power != null && power.GetIsUnlocked())
        {
          if (power.GetShouldDisableSpawnsFor(plr))
            return;
          float num2;
          if (power.GetRemappedSliderValueFor(plr, out num2))
            maxValue1 = (int) ((double) maxValue1 / (double) num2);
        }
      }
      if (Main.rand.Next(maxValue1) != 0)
        return;
      int minValue1 = (int) ((double) player.Center.X - (double) checkScreenWidth);
      int maxValue2 = minValue1 + checkScreenWidth * 2;
      int minValue2 = (int) ((double) player.Center.Y - (double) checkScreenHeight * 1.5);
      int maxValue3 = (int) ((double) player.Center.Y - (double) checkScreenHeight * 0.75);
      int num3 = Main.rand.Next(minValue1, maxValue2);
      int num4 = Main.rand.Next(minValue2, maxValue3);
      int index1 = num3 / 16;
      int index2 = num4 / 16;
      if (index1 < 10 || index1 > Main.maxTilesX + 10 || (double) index2 < Main.worldSurface * 0.3 || (double) index2 > Main.worldSurface || Collision.SolidTiles(index1 - 3, index1 + 3, index2 - 5, index2 + 2) || Main.wallHouse[(int) Main.tile[index1, index2].wall])
        return;
      int index3 = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 1);
      if (Main.rand.Next(200) == 0)
        Main.npc[index3].SetDefaults(-4);
      else if (Main.expertMode)
      {
        if (Main.rand.Next(7) == 0)
        {
          Main.npc[index3].SetDefaults(-7);
        }
        else
        {
          if (Main.rand.Next(3) != 0)
            return;
          Main.npc[index3].SetDefaults(-3);
        }
      }
      else if (Main.rand.Next(10) == 0)
      {
        Main.npc[index3].SetDefaults(-7);
      }
      else
      {
        if (Main.rand.Next(5) >= 2)
          return;
        Main.npc[index3].SetDefaults(-3);
      }
    }

    public static bool Spawning_SandstoneCheck(int x, int y)
    {
      if (!WorldGen.InWorld(x, y, 10))
        return false;
      int num = 0;
      for (int index1 = 0; index1 < 8; ++index1)
      {
        Tile tile1 = Main.tile[x, y + index1];
        if (tile1.active() && TileID.Sets.Conversion.Sand[(int) tile1.type])
        {
          ++num;
          for (int index2 = 1; index2 <= 4; ++index2)
          {
            Tile tile2 = Main.tile[x + index2, y + index1];
            if (tile2.active() && TileID.Sets.Conversion.Sand[(int) tile2.type])
              ++num;
            else
              break;
          }
          for (int index3 = 1; index3 <= 4; ++index3)
          {
            Tile tile3 = Main.tile[x - index3, y + index1];
            if (tile3.active() && TileID.Sets.Conversion.Sand[(int) tile3.type])
              ++num;
            else
              break;
          }
        }
        else
          break;
      }
      return Main.remixWorld ? num >= 10 : num >= 40;
    }

    public static bool Spawning_FlyingAntlionCheck(int x, int y)
    {
      if (!WorldGen.InWorld(x, y, 10))
        return false;
      for (int index = 0; index < 50 && y - index >= 10; ++index)
      {
        Tile tile = Main.tile[x, y - index];
        if (!WallID.Sets.Conversion.HardenedSand[(int) tile.wall] && !WallID.Sets.Conversion.Sandstone[(int) tile.wall])
          return false;
      }
      return true;
    }

    private static int RollDragonflyType(int tileType = 2) => tileType == 53 ? (int) Main.rand.NextFromList<short>((short) 595, (short) 598, (short) 600) : (int) Main.rand.NextFromList<short>((short) 596, (short) 597, (short) 599);

    public static void ResetRemixHax()
    {
      Main.dayTime = NPC.dayTimeHax;
      Main.raining = NPC.rainingHax;
      Main.cloudAlpha = NPC.cloudAlphaHax;
    }

    public static void SetRemixHax()
    {
      NPC.dayTimeHax = Main.dayTime;
      NPC.rainingHax = Main.raining;
      NPC.cloudAlphaHax = Main.cloudAlpha;
    }

    public static bool SpawnTileOrAboveHasAnyWallInSet(int x, int y, bool[] wallTypes)
    {
      if (!WorldGen.InWorld(x, y, 2))
        return false;
      Tile tile1 = Main.tile[x, y];
      Tile tile2 = Main.tile[x, y - 1];
      if (tile1 == null || tile2 == null)
        return false;
      if (tile1.wall >= (ushort) 0 && (int) tile1.wall < (int) WallID.Count && wallTypes[(int) tile1.wall])
        return true;
      return tile2.wall >= (ushort) 0 && (int) tile2.wall < (int) WallID.Count && wallTypes[(int) tile2.wall];
    }

    public static void SpawnNPC()
    {
      if (NPC.noSpawnCycle)
      {
        NPC.noSpawnCycle = false;
      }
      else
      {
        bool windyForButterflies = NPC.TooWindyForButterflies;
        bool flag1 = (double) Main.windSpeedTarget < -0.4 || (double) Main.windSpeedTarget > 0.4;
        NPC.RevengeManager.CheckRespawns();
        bool flag2 = false;
        int index1 = 0;
        int index2 = 0;
        int num1 = 0;
        int num2 = 0;
        for (int index3 = 0; index3 < (int) byte.MaxValue; ++index3)
        {
          if (Main.player[index3].active)
            ++num2;
        }
        float num3 = 0.0f;
        for (int index4 = 0; index4 < 200; ++index4)
        {
          if (Main.npc[index4].active)
          {
            switch (Main.npc[index4].type)
            {
              case 315:
              case 325:
              case 327:
              case 328:
              case 344:
              case 345:
              case 346:
                num3 += Main.npc[index4].npcSlots;
                continue;
              default:
                continue;
            }
          }
        }
        float num4 = (float) (int) ((double) NPC.defaultMaxSpawns * (2.0 + 0.30000001192092896 * (double) num2));
        for (int index5 = 0; index5 < (int) byte.MaxValue; ++index5)
        {
          if (Main.player[index5].active && !Main.player[index5].dead)
          {
            bool flag3 = false;
            if (!Main.player[index5].isNearNPC(398, (float) NPC.MoonLordFightingDistance))
            {
              if (Main.slimeRain)
                NPC.SlimeRainSpawns(index5);
              bool flag4 = false;
              bool flag5 = false;
              bool flag6 = false;
              bool flag7 = false;
              bool flag8 = false;
              bool flag9 = false;
              bool flag10 = false;
              bool flag11 = false;
              bool flag12 = false;
              bool flag13 = false;
              bool flag14 = NPC.downedPlantBoss && Main.hardMode;
              bool itAhappyWindyDay = Main.IsItAHappyWindyDay;
              if (Main.player[index5].active && Main.invasionType > 0 && Main.invasionDelay == 0 && Main.invasionSize > 0 && ((double) Main.player[index5].position.Y < Main.worldSurface * 16.0 + (double) NPC.sHeight || Main.remixWorld))
              {
                int num5 = 3000;
                if ((double) Main.player[index5].position.X > Main.invasionX * 16.0 - (double) num5 && (double) Main.player[index5].position.X < Main.invasionX * 16.0 + (double) num5)
                  flag6 = true;
                else if (Main.invasionX >= (double) (Main.maxTilesX / 2 - 5) && Main.invasionX <= (double) (Main.maxTilesX / 2 + 5))
                {
                  for (int index6 = 0; index6 < 200; ++index6)
                  {
                    if (Main.npc[index6].townNPC && (double) Math.Abs(Main.player[index5].position.X - Main.npc[index6].Center.X) < (double) num5)
                    {
                      if (Main.rand.Next(3) != 0)
                      {
                        flag6 = true;
                        break;
                      }
                      break;
                    }
                  }
                }
              }
              if (Main.player[index5].ZoneTowerSolar || Main.player[index5].ZoneTowerNebula || Main.player[index5].ZoneTowerVortex || Main.player[index5].ZoneTowerStardust)
                flag6 = true;
              int index7 = (int) ((double) Main.player[index5].position.X + (double) (Main.player[index5].width / 2)) / 16;
              int index8 = (int) ((double) Main.player[index5].position.Y + (double) (Main.player[index5].height / 2)) / 16;
              if (Main.wallHouse[(int) Main.tile[index7, index8].wall])
                flag5 = true;
              if (Main.tile[index7, index8].wall == (ushort) 87)
                flag4 = true;
              bool flag15 = false;
              NPC.spawnRate = NPC.defaultSpawnRate;
              NPC.maxSpawns = NPC.defaultMaxSpawns;
              if (Main.hardMode)
              {
                NPC.spawnRate = (int) ((double) NPC.defaultSpawnRate * 0.9);
                NPC.maxSpawns = NPC.defaultMaxSpawns + 1;
              }
              if ((double) Main.player[index5].position.Y > (double) (Main.UnderworldLayer * 16))
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 2.0);
              else if ((double) Main.player[index5].position.Y > Main.rockLayer * 16.0 + (double) NPC.sHeight)
              {
                if (Main.remixWorld)
                {
                  if (Main.hardMode)
                  {
                    NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.45);
                    NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.7999999523162842);
                  }
                  else
                  {
                    NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.5);
                    NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.7000000476837158);
                  }
                }
                else
                {
                  NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.4);
                  NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.8999999761581421);
                }
              }
              else if ((double) Main.player[index5].position.Y > Main.worldSurface * 16.0 + (double) NPC.sHeight)
              {
                if (Main.remixWorld)
                {
                  NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.4);
                  NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.8999999761581421);
                }
                else if (Main.hardMode)
                {
                  NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.45);
                  NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.7999999523162842);
                }
                else
                {
                  NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.5);
                  NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.7000000476837158);
                }
              }
              else if (Main.remixWorld)
              {
                if (!Main.dayTime)
                {
                  NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.6);
                  NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.2999999523162842);
                }
              }
              else if (!Main.dayTime)
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.6);
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.2999999523162842);
                if (Main.bloodMoon)
                {
                  NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.3);
                  NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.7999999523162842);
                }
                if ((Main.pumpkinMoon || Main.snowMoon) && (double) Main.player[index5].position.Y < Main.worldSurface * 16.0)
                {
                  NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.2);
                  NPC.maxSpawns *= 2;
                }
              }
              else if (Main.dayTime && Main.eclipse)
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.2);
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.8999999761581421);
              }
              if (Main.remixWorld)
              {
                if (!Main.dayTime)
                {
                  if (Main.bloodMoon)
                  {
                    NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.3);
                    NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.7999999523162842);
                    if ((double) Main.player[index5].position.Y > Main.rockLayer * 16.0 + (double) NPC.sHeight)
                      NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.6);
                  }
                  if (Main.pumpkinMoon || Main.snowMoon)
                  {
                    NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.2);
                    NPC.maxSpawns *= 2;
                    if ((double) Main.player[index5].position.Y > Main.rockLayer * 16.0 + (double) NPC.sHeight)
                      NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.6);
                  }
                }
                else if (Main.dayTime && Main.eclipse)
                {
                  NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.2);
                  NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.8999999761581421);
                }
              }
              if (Main.player[index5].ZoneSnow && (double) Main.player[index5].position.Y / 16.0 < Main.worldSurface)
              {
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns + (double) NPC.maxSpawns * (double) Main.cloudAlpha);
                NPC.spawnRate = (int) ((double) NPC.spawnRate * (1.0 - (double) Main.cloudAlpha + 1.0) / 2.0);
              }
              if (Main.drunkWorld && Main.tile[index7, index8].wall == (ushort) 86)
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.3);
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.7999999523162842);
              }
              if (Main.player[index5].ZoneDungeon)
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.3);
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.7999999523162842);
              }
              else if (Main.player[index5].ZoneSandstorm)
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * (Main.hardMode ? 0.40000000596046448 : 0.89999997615814209));
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * (Main.hardMode ? 1.5 : 1.2000000476837158));
              }
              else if (Main.player[index5].ZoneUndergroundDesert)
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.20000000298023224);
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 3.0);
              }
              else if (Main.player[index5].ZoneJungle)
              {
                if ((double) Main.player[index5].townNPCs == 0.0)
                {
                  NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.4);
                  NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.5);
                }
                else if ((double) Main.player[index5].townNPCs == 1.0)
                {
                  NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.55);
                  NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.4);
                }
                else if ((double) Main.player[index5].townNPCs == 2.0)
                {
                  NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.7);
                  NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.2999999523162842);
                }
                else
                {
                  NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.85);
                  NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.2000000476837158);
                }
              }
              else if (Main.player[index5].ZoneCorrupt || Main.player[index5].ZoneCrimson)
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.65);
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.2999999523162842);
              }
              else if (Main.player[index5].ZoneMeteor)
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.4);
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.1000000238418579);
              }
              if (flag4)
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.800000011920929);
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.2000000476837158);
                if (Main.remixWorld)
                {
                  NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.4);
                  NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.5);
                }
              }
              if (Main.remixWorld && (Main.player[index5].ZoneCorrupt || Main.player[index5].ZoneCrimson) && (double) Main.player[index5].position.Y / 16.0 < Main.worldSurface)
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.5);
                NPC.maxSpawns *= 2;
              }
              if (Main.player[index5].ZoneHallow && (double) Main.player[index5].position.Y > Main.rockLayer * 16.0 + (double) NPC.sHeight)
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.65);
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.2999999523162842);
              }
              if (Main.wofNPCIndex >= 0 && (double) Main.player[index5].position.Y > (double) (Main.UnderworldLayer * 16))
              {
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.30000001192092896);
                NPC.spawnRate *= 3;
              }
              if ((double) Main.player[index5].nearbyActiveNPCs < (double) NPC.maxSpawns * 0.2)
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.60000002384185791);
              else if ((double) Main.player[index5].nearbyActiveNPCs < (double) NPC.maxSpawns * 0.4)
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.699999988079071);
              else if ((double) Main.player[index5].nearbyActiveNPCs < (double) NPC.maxSpawns * 0.6)
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.800000011920929);
              else if ((double) Main.player[index5].nearbyActiveNPCs < (double) NPC.maxSpawns * 0.8)
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.89999997615814209);
              if ((double) Main.player[index5].position.Y / 16.0 > (Main.worldSurface + Main.rockLayer) / 2.0 || Main.player[index5].ZoneCorrupt || Main.player[index5].ZoneCrimson)
              {
                if ((double) Main.player[index5].nearbyActiveNPCs < (double) NPC.maxSpawns * 0.2)
                  NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.699999988079071);
                else if ((double) Main.player[index5].nearbyActiveNPCs < (double) NPC.maxSpawns * 0.4)
                  NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.89999997615814209);
              }
              int maxValue1 = 65;
              if (Main.remixWorld && (double) Main.player[index5].position.Y / 16.0 < Main.worldSurface && (Main.player[index5].ZoneCorrupt || Main.player[index5].ZoneCrimson))
              {
                maxValue1 = 25;
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.8);
                NPC.maxSpawns *= 2;
              }
              if (Main.player[index5].invis)
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 1.2000000476837158);
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.800000011920929);
              }
              if (Main.player[index5].calmed)
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 1.6499999761581421);
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.60000002384185791);
              }
              if (Main.player[index5].sunflower)
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 1.2000000476837158);
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.800000011920929);
              }
              if (Main.player[index5].anglerSetSpawnReduction)
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 1.2999999523162842);
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.699999988079071);
              }
              if (Main.player[index5].enemySpawns)
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.5);
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 2.0);
              }
              if (Main.player[index5].ZoneWaterCandle || Main.player[index5].inventory[Main.player[index5].selectedItem].type == 148)
              {
                if (!Main.player[index5].ZonePeaceCandle && Main.player[index5].inventory[Main.player[index5].selectedItem].type != 3117)
                {
                  NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.75);
                  NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.5);
                }
              }
              else if (Main.player[index5].ZonePeaceCandle || Main.player[index5].inventory[Main.player[index5].selectedItem].type == 3117)
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 1.3);
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.699999988079071);
              }
              if (Main.player[index5].ZoneShadowCandle || Main.player[index5].inventory[Main.player[index5].selectedItem].type == 5322)
                Main.player[index5].townNPCs = 0.0f;
              if (Main.player[index5].ZoneWaterCandle && (double) Main.player[index5].position.Y / 16.0 < Main.worldSurface * 0.34999999403953552)
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.5);
              if (Main.player[index5].isNearFairy())
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 1.2000000476837158);
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.800000011920929);
              }
              if ((double) NPC.spawnRate < (double) NPC.defaultSpawnRate * 0.1)
                NPC.spawnRate = (int) ((double) NPC.defaultSpawnRate * 0.1);
              if (NPC.maxSpawns > NPC.defaultMaxSpawns * 3)
                NPC.maxSpawns = NPC.defaultMaxSpawns * 3;
              if (Main.getGoodWorld)
              {
                NPC.spawnRate = (int) ((double) NPC.spawnRate * 0.800000011920929);
                NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 1.2000000476837158);
              }
              if (Main.GameModeInfo.IsJourneyMode)
              {
                CreativePowers.SpawnRateSliderPerPlayerPower power = CreativePowerManager.Instance.GetPower<CreativePowers.SpawnRateSliderPerPlayerPower>();
                if (power != null && power.GetIsUnlocked())
                {
                  if (!power.GetShouldDisableSpawnsFor(index5))
                  {
                    float num6;
                    if (power.GetRemappedSliderValueFor(index5, out num6))
                    {
                      NPC.spawnRate = (int) ((double) NPC.spawnRate / (double) num6);
                      NPC.maxSpawns = (int) ((double) NPC.maxSpawns * (double) num6);
                    }
                  }
                  else
                    continue;
                }
              }
              if ((Main.pumpkinMoon || Main.snowMoon) && (Main.remixWorld || (double) Main.player[index5].position.Y < Main.worldSurface * 16.0))
              {
                NPC.maxSpawns = (int) ((double) NPC.defaultMaxSpawns * (2.0 + 0.3 * (double) num2));
                NPC.spawnRate = 20;
              }
              if (DD2Event.Ongoing && Main.player[index5].ZoneOldOneArmy)
              {
                NPC.maxSpawns = NPC.defaultMaxSpawns;
                NPC.spawnRate = NPC.defaultSpawnRate;
              }
              if (flag6)
              {
                NPC.maxSpawns = (int) ((double) NPC.defaultMaxSpawns * (2.0 + 0.3 * (double) num2));
                NPC.spawnRate = 20;
              }
              if (Main.player[index5].ZoneDungeon && !NPC.downedBoss3)
                NPC.spawnRate = 10;
              if (!flag6 && (!Main.bloodMoon && !Main.pumpkinMoon && !Main.snowMoon || Main.dayTime) && (!Main.eclipse || !Main.dayTime) && !Main.player[index5].ZoneDungeon && !Main.player[index5].ZoneCorrupt && !Main.player[index5].ZoneCrimson && !Main.player[index5].ZoneMeteor && !Main.player[index5].ZoneOldOneArmy)
              {
                if ((double) Main.player[index5].Center.Y / 16.0 > (double) Main.UnderworldLayer && (!Main.remixWorld || (double) Main.player[index5].Center.X / 16.0 <= (double) Main.maxTilesX * 0.39 + 50.0 || (double) Main.player[index5].Center.X / 16.0 >= (double) Main.maxTilesX * 0.61))
                {
                  if ((double) Main.player[index5].townNPCs == 1.0)
                  {
                    if (Main.rand.Next(2) == 0)
                      flag5 = true;
                    if (Main.rand.Next(10) == 0)
                    {
                      flag12 = true;
                      NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.5);
                    }
                    else
                      NPC.spawnRate = (int) ((double) NPC.spawnRate * 1.25);
                  }
                  else if ((double) Main.player[index5].townNPCs == 2.0)
                  {
                    if (Main.rand.Next(4) != 0)
                      flag5 = true;
                    if (Main.rand.Next(5) == 0)
                    {
                      flag12 = true;
                      NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.5);
                    }
                    else
                      NPC.spawnRate = (int) ((double) NPC.spawnRate * 1.5);
                  }
                  else if ((double) Main.player[index5].townNPCs >= 3.0)
                  {
                    if (Main.rand.Next(10) != 0)
                      flag5 = true;
                    if (Main.rand.Next(3) == 0)
                    {
                      flag12 = true;
                      NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.5);
                    }
                    else
                      NPC.spawnRate = (int) ((double) NPC.spawnRate * 2.0);
                  }
                }
                else if ((double) Main.player[index5].townNPCs == 1.0)
                {
                  flag5 = true;
                  if (Main.player[index5].ZoneGraveyard)
                  {
                    NPC.spawnRate = (int) ((double) NPC.spawnRate * 1.66);
                    if (Main.rand.Next(9) == 1)
                    {
                      flag12 = true;
                      NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.6);
                    }
                  }
                  else if (Main.rand.Next(3) == 1)
                  {
                    flag12 = true;
                    NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.6);
                  }
                  else
                    NPC.spawnRate = (int) ((double) NPC.spawnRate * 2.0);
                }
                else if ((double) Main.player[index5].townNPCs == 2.0)
                {
                  flag5 = true;
                  if (Main.player[index5].ZoneGraveyard)
                  {
                    NPC.spawnRate = (int) ((double) NPC.spawnRate * 2.33);
                    if (Main.rand.Next(6) == 1)
                    {
                      flag12 = true;
                      NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.6);
                    }
                  }
                  else if (Main.rand.Next(3) != 0)
                  {
                    flag12 = true;
                    NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.6);
                  }
                  else
                    NPC.spawnRate = (int) ((double) NPC.spawnRate * 3.0);
                }
                else if ((double) Main.player[index5].townNPCs >= 3.0)
                {
                  flag5 = true;
                  if (Main.player[index5].ZoneGraveyard)
                  {
                    NPC.spawnRate = (int) ((double) NPC.spawnRate * 3.0);
                    if (Main.rand.Next(3) == 1)
                    {
                      flag12 = true;
                      NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.6);
                    }
                  }
                  else
                  {
                    if (!Main.expertMode || Main.rand.Next(30) != 0)
                      flag12 = true;
                    NPC.maxSpawns = (int) ((double) NPC.maxSpawns * 0.6);
                  }
                }
              }
              bool flag16 = false;
              if (Main.player[index5].active && !Main.player[index5].dead && (double) Main.player[index5].nearbyActiveNPCs < (double) NPC.maxSpawns && Main.rand.Next(NPC.spawnRate) == 0)
              {
                bool flag17 = Main.player[index5].ZoneTowerNebula || Main.player[index5].ZoneTowerSolar || Main.player[index5].ZoneTowerStardust || Main.player[index5].ZoneTowerVortex;
                NPC.spawnRangeX = (int) ((double) (NPC.sWidth / 16) * 0.7);
                NPC.spawnRangeY = (int) ((double) (NPC.sHeight / 16) * 0.7);
                NPC.safeRangeX = (int) ((double) (NPC.sWidth / 16) * 0.52);
                NPC.safeRangeY = (int) ((double) (NPC.sHeight / 16) * 0.52);
                if (Main.player[index5].inventory[Main.player[index5].selectedItem].type == 1254 || Main.player[index5].inventory[Main.player[index5].selectedItem].type == 1299 || Main.player[index5].scope)
                {
                  float num7 = 1.5f;
                  if (Main.player[index5].inventory[Main.player[index5].selectedItem].type == 1254 && Main.player[index5].scope)
                    num7 = 1.25f;
                  else if (Main.player[index5].inventory[Main.player[index5].selectedItem].type == 1254)
                    num7 = 1.5f;
                  else if (Main.player[index5].inventory[Main.player[index5].selectedItem].type == 1299)
                    num7 = 1.5f;
                  else if (Main.player[index5].scope)
                    num7 = 2f;
                  NPC.spawnRangeX += (int) ((double) (NPC.sWidth / 16) * 0.5 / (double) num7);
                  NPC.spawnRangeY += (int) ((double) (NPC.sHeight / 16) * 0.5 / (double) num7);
                  NPC.safeRangeX += (int) ((double) (NPC.sWidth / 16) * 0.5 / (double) num7);
                  NPC.safeRangeY += (int) ((double) (NPC.sHeight / 16) * 0.5 / (double) num7);
                }
                int minValue1 = (int) ((double) Main.player[index5].position.X / 16.0) - NPC.spawnRangeX;
                int maxValue2 = (int) ((double) Main.player[index5].position.X / 16.0) + NPC.spawnRangeX;
                int minValue2 = (int) ((double) Main.player[index5].position.Y / 16.0) - NPC.spawnRangeY;
                int maxValue3 = (int) ((double) Main.player[index5].position.Y / 16.0) + NPC.spawnRangeY;
                int num8 = (int) ((double) Main.player[index5].position.X / 16.0) - NPC.safeRangeX;
                int num9 = (int) ((double) Main.player[index5].position.X / 16.0) + NPC.safeRangeX;
                int num10 = (int) ((double) Main.player[index5].position.Y / 16.0) - NPC.safeRangeY;
                int num11 = (int) ((double) Main.player[index5].position.Y / 16.0) + NPC.safeRangeY;
                if (minValue1 < 0)
                  minValue1 = 0;
                if (maxValue2 > Main.maxTilesX)
                  maxValue2 = Main.maxTilesX;
                if (minValue2 < 0)
                  minValue2 = 0;
                if (maxValue3 > Main.maxTilesY)
                  maxValue3 = Main.maxTilesY;
                for (int index9 = 0; index9 < 50; ++index9)
                {
                  int index10 = Main.rand.Next(minValue1, maxValue2);
                  int index11 = Main.rand.Next(minValue2, maxValue3);
                  if (!Main.tile[index10, index11].nactive() || !Main.tileSolid[(int) Main.tile[index10, index11].type])
                  {
                    if (flag17 || !Main.wallHouse[(int) Main.tile[index10, index11].wall])
                    {
                      if (!flag6 && (double) index11 < Main.worldSurface * 0.34999999403953552 && !flag12 && ((double) index10 < (double) Main.maxTilesX * 0.45 || (double) index10 > (double) Main.maxTilesX * 0.55 || Main.hardMode))
                      {
                        num1 = (int) Main.tile[index10, index11].type;
                        index1 = index10;
                        index2 = index11;
                        flag15 = true;
                        flag3 = true;
                      }
                      else if (!flag6 && (double) index11 < Main.worldSurface * 0.44999998807907104 && !flag12 && Main.hardMode && Main.rand.Next(10) == 0)
                      {
                        num1 = (int) Main.tile[index10, index11].type;
                        index1 = index10;
                        index2 = index11;
                        flag15 = true;
                        flag3 = true;
                      }
                      else
                      {
                        for (int index12 = index11; index12 < Main.maxTilesY && index12 < maxValue3; ++index12)
                        {
                          if (Main.tile[index10, index12].nactive() && Main.tileSolid[(int) Main.tile[index10, index12].type])
                          {
                            if (index10 < num8 || index10 > num9 || index12 < num10 || index12 > num11)
                            {
                              num1 = (int) Main.tile[index10, index12].type;
                              index1 = index10;
                              index2 = index12;
                              flag15 = true;
                              break;
                            }
                            break;
                          }
                        }
                      }
                      if (Main.player[index5].ZoneShadowCandle)
                        flag5 = false;
                      else if (!flag3 && Main.player[index5].afkCounter >= NPC.AFKTimeNeededForNoWorms)
                        flag5 = true;
                      if (flag15)
                      {
                        int num12 = index1 - NPC.spawnSpaceX / 2;
                        int num13 = index1 + NPC.spawnSpaceX / 2;
                        int num14 = index2 - NPC.spawnSpaceY;
                        int num15 = index2;
                        if (num12 < 0)
                          flag15 = false;
                        if (num13 > Main.maxTilesX)
                          flag15 = false;
                        if (num14 < 0)
                          flag15 = false;
                        if (num15 > Main.maxTilesY)
                          flag15 = false;
                        if (flag15)
                        {
                          for (int index13 = num12; index13 < num13; ++index13)
                          {
                            for (int index14 = num14; index14 < num15; ++index14)
                            {
                              if (Main.tile[index13, index14].nactive() && Main.tileSolid[(int) Main.tile[index13, index14].type])
                              {
                                flag15 = false;
                                break;
                              }
                              if (Main.tile[index13, index14].lava())
                              {
                                flag15 = false;
                                break;
                              }
                            }
                          }
                        }
                        if (index1 >= num8 && index1 <= num9)
                          flag16 = true;
                      }
                    }
                    else
                      continue;
                  }
                  if (flag15 || flag15)
                    break;
                }
              }
              if (flag15)
              {
                Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle(index1 * 16, index2 * 16, 16, 16);
                for (int index15 = 0; index15 < (int) byte.MaxValue; ++index15)
                {
                  if (Main.player[index15].active)
                  {
                    Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int) ((double) Main.player[index15].position.X + (double) (Main.player[index15].width / 2) - (double) (NPC.sWidth / 2) - (double) NPC.safeRangeX), (int) ((double) Main.player[index15].position.Y + (double) (Main.player[index15].height / 2) - (double) (NPC.sHeight / 2) - (double) NPC.safeRangeY), NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
                    if (rectangle1.Intersects(rectangle2))
                      flag15 = false;
                  }
                }
              }
              if (flag15)
              {
                if (Main.player[index5].ZoneDungeon && (!Main.tileDungeon[(int) Main.tile[index1, index2].type] || Main.tile[index1, index2 - 1].wall == (ushort) 0))
                  flag15 = false;
                if (Main.tile[index1, index2 - 1].liquid > (byte) 0 && Main.tile[index1, index2 - 2].liquid > (byte) 0 && !Main.tile[index1, index2 - 1].lava())
                {
                  if (Main.tile[index1, index2 - 1].shimmer())
                    flag15 = false;
                  if (Main.tile[index1, index2 - 1].honey())
                    flag8 = true;
                  else
                    flag7 = true;
                }
                int index16 = (int) Main.player[index5].Center.X / 16;
                int index17 = (int) ((double) Main.player[index5].Bottom.Y + 8.0) / 16;
                if (Main.tile[index1, index2].type == (ushort) 367)
                  flag10 = true;
                else if (Main.tile[index1, index2].type == (ushort) 368)
                  flag9 = true;
                else if (Main.tile[index16, index17].type == (ushort) 367)
                  flag10 = true;
                else if (Main.tile[index16, index17].type == (ushort) 368)
                {
                  flag9 = true;
                }
                else
                {
                  int num16 = Main.rand.Next(20, 31);
                  int num17 = Main.rand.Next(1, 4);
                  if (index1 - num16 < 0)
                    num16 = index1;
                  if (index2 - num16 < 0)
                    num16 = index2;
                  if (index1 + num16 >= Main.maxTilesX)
                    num16 = Main.maxTilesX - index1 - 1;
                  if (index2 + num16 >= Main.maxTilesY)
                    num16 = Main.maxTilesY - index2 - 1;
                  for (int index18 = index1 - num16; index18 <= index1 + num16; index18 += num17)
                  {
                    int num18 = Main.rand.Next(1, 4);
                    for (int index19 = index2 - num16; index19 <= index2 + num16; index19 += num18)
                    {
                      if (Main.tile[index18, index19].type == (ushort) 367)
                        flag10 = true;
                      if (Main.tile[index18, index19].type == (ushort) 368)
                        flag9 = true;
                    }
                  }
                  int num19 = Main.rand.Next(30, 61);
                  int num20 = Main.rand.Next(3, 7);
                  if (index16 - num19 < 0)
                    num19 = index16;
                  if (index17 - num19 < 0)
                    num19 = index17;
                  if (index16 + num19 >= Main.maxTilesX)
                    num19 = Main.maxTilesX - index16 - 2;
                  if (index17 + num19 >= Main.maxTilesY)
                    num19 = Main.maxTilesY - index17 - 2;
                  for (int index20 = index16 - num19; index20 <= index16 + num19; index20 += num20)
                  {
                    int num21 = Main.rand.Next(3, 7);
                    for (int index21 = index17 - num19; index21 <= index17 + num19; index21 += num21)
                    {
                      if (Main.tile[index20, index21].type == (ushort) 367)
                        flag10 = true;
                      if (Main.tile[index20, index21].type == (ushort) 368)
                        flag9 = true;
                    }
                  }
                }
                if (flag8)
                  flag15 = false;
                if ((num1 == 477 || num1 == 492) && !Main.bloodMoon && !Main.eclipse && Main.invasionType <= 0 && !Main.pumpkinMoon && !Main.snowMoon && !Main.slimeRain && Main.rand.Next(100) < 10)
                  flag15 = false;
              }
              if (flag15)
              {
                if (Main.remixWorld)
                  NPC.ResetRemixHax();
                bool flag18 = (double) index2 <= Main.rockLayer;
                if (Main.remixWorld)
                  flag18 = (double) index2 > Main.rockLayer && index2 <= Main.maxTilesY - 190;
                bool flag19 = (double) index2 > Main.rockLayer && index2 < Main.UnderworldLayer;
                if (Main.dontStarveWorld)
                  flag19 = index2 < Main.UnderworldLayer;
                if (flag19 && !Main.player[index5].ZoneDungeon && !flag6)
                {
                  if (Main.rand.Next(3) == 0)
                  {
                    int num22 = Main.rand.Next(5, 15);
                    if (index1 - num22 >= 0 && index1 + num22 < Main.maxTilesX)
                    {
                      for (int index22 = index1 - num22; index22 < index1 + num22; ++index22)
                      {
                        for (int index23 = index2 - num22; index23 < index2 + num22; ++index23)
                        {
                          if (Main.tile[index22, index23].wall == (ushort) 62)
                            flag11 = true;
                        }
                      }
                    }
                  }
                  else
                  {
                    int index24 = (int) Main.player[index5].position.X / 16;
                    int index25 = (int) Main.player[index5].position.Y / 16;
                    if (Main.tile[index24, index25].wall == (ushort) 62)
                      flag11 = true;
                  }
                }
                if ((double) index2 < Main.rockLayer && index2 > 200 && !Main.player[index5].ZoneDungeon && !flag6)
                {
                  if (Main.rand.Next(3) == 0)
                  {
                    int num23 = Main.rand.Next(5, 15);
                    if (index1 - num23 >= 0 && index1 + num23 < Main.maxTilesX)
                    {
                      for (int index26 = index1 - num23; index26 < index1 + num23; ++index26)
                      {
                        for (int index27 = index2 - num23; index27 < index2 + num23; ++index27)
                        {
                          if (WallID.Sets.AllowsUndergroundDesertEnemiesToSpawn[(int) Main.tile[index26, index27].wall])
                            flag13 = true;
                        }
                      }
                    }
                  }
                  else
                  {
                    int index28 = (int) Main.player[index5].position.X / 16;
                    int index29 = (int) Main.player[index5].position.Y / 16;
                    if (WallID.Sets.AllowsUndergroundDesertEnemiesToSpawn[(int) Main.tile[index28, index29].wall])
                      flag13 = true;
                  }
                }
                flag2 = false;
                int type = (int) Main.tile[index1, index2].type;
                int num24 = (int) Main.tile[index1, index2 - 1].wall;
                if (Main.tile[index1, index2 - 2].wall == (ushort) 244 || Main.tile[index1, index2].wall == (ushort) 244)
                  num24 = 244;
                bool flag20 = (double) new Point(index7 - index1, index8 - index2).X * (double) Main.windSpeedTarget > 0.0;
                bool flag21 = (double) index2 <= Main.worldSurface;
                bool flag22 = (double) index2 >= Main.rockLayer;
                bool flag23 = (index1 < WorldGen.oceanDistance || index1 > Main.maxTilesX - WorldGen.oceanDistance) && Main.tileSand[type] && (double) index2 < Main.rockLayer || num1 == 53 && WorldGen.oceanDepths(index1, index2);
                bool flag24 = (double) index2 <= Main.worldSurface && (index1 < WorldGen.beachDistance || index1 > Main.maxTilesX - WorldGen.beachDistance);
                bool flag25 = (double) Main.cloudAlpha > 0.0;
                int range = 10;
                if (Main.remixWorld)
                {
                  flag25 = Main.raining;
                  flag22 = (double) index2 > Main.worldSurface && (double) index2 < Main.rockLayer;
                  if ((double) index2 < Main.worldSurface + 5.0)
                  {
                    Main.raining = false;
                    Main.cloudAlpha = 0.0f;
                    Main.dayTime = false;
                  }
                  range = 5;
                  if (Main.player[index5].ZoneCorrupt || Main.player[index5].ZoneCrimson)
                  {
                    flag23 = false;
                    flag24 = false;
                  }
                  if ((double) index1 < (double) Main.maxTilesX * 0.43 || (double) index1 > (double) Main.maxTilesX * 0.57)
                  {
                    if ((double) index2 > Main.rockLayer - 200.0 && index2 < Main.maxTilesY - 200 && Main.rand.Next(2) == 0)
                      flag23 = true;
                    if ((double) index2 > Main.rockLayer - 200.0 && index2 < Main.maxTilesY - 200 && Main.rand.Next(2) == 0)
                      flag24 = true;
                  }
                  if ((double) index2 > Main.rockLayer - 20.0)
                  {
                    if (index2 <= Main.maxTilesY - 190 && Main.rand.Next(3) != 0)
                    {
                      flag21 = true;
                      Main.dayTime = false;
                      if (Main.rand.Next(2) == 0)
                        Main.dayTime = true;
                    }
                    else if ((Main.bloodMoon || Main.eclipse && Main.dayTime) && (double) index1 > (double) Main.maxTilesX * 0.38 + 50.0 && (double) index1 < (double) Main.maxTilesX * 0.62)
                      flag21 = true;
                  }
                }
                int tileType = NPC.SpawnNPC_TryFindingProperGroundTileType(type, index1, index2);
                int newNPC = 200;
                if (Main.player[index5].ZoneTowerNebula)
                {
                  bool flag26 = true;
                  int Type = 0;
                  while (flag26)
                  {
                    Type = Utils.SelectRandom<int>(Main.rand, 424, 424, 424, 423, 423, 423, 421, 421, 421, 420, 420);
                    flag26 = false;
                    if (Type == 424 && NPC.CountNPCS(Type) >= 3)
                      flag26 = true;
                    if (Type == 423 && NPC.CountNPCS(Type) >= 3)
                      flag26 = true;
                    if (Type == 420 && NPC.CountNPCS(Type) >= 3)
                      flag26 = true;
                  }
                  if (Type != 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Type, 1);
                }
                else if (Main.player[index5].ZoneTowerVortex)
                {
                  bool flag27 = true;
                  int Type = 0;
                  while (flag27)
                  {
                    Type = Utils.SelectRandom<int>(Main.rand, 429, 429, 429, 429, 427, 427, 425, 425, 426);
                    flag27 = false;
                    if (Type == 425 && NPC.CountNPCS(Type) >= 3)
                      flag27 = true;
                    if (Type == 426 && NPC.CountNPCS(Type) >= 3)
                      flag27 = true;
                    if (Type == 429 && NPC.CountNPCS(Type) >= 4)
                      flag27 = true;
                  }
                  if (Type != 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Type, 1);
                }
                else if (Main.player[index5].ZoneTowerStardust)
                {
                  int Type = Utils.SelectRandom<int>(Main.rand, 411, 411, 411, 409, 409, 407, 402, 405);
                  if (Type != 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Type, 1);
                }
                else if (Main.player[index5].ZoneTowerSolar)
                {
                  bool flag28 = true;
                  int Type = 0;
                  while (flag28)
                  {
                    Type = Utils.SelectRandom<int>(Main.rand, 518, 419, 418, 412, 417, 416, 415);
                    flag28 = false;
                    if (Type == 418 && Main.rand.Next(2) == 0)
                      Type = Utils.SelectRandom<int>(Main.rand, 415, 416, 419, 417);
                    if (Type == 518 && NPC.CountNPCS(Type) >= 2)
                      flag28 = true;
                    if (Type == 412 && NPC.CountNPCS(Type) >= 1)
                      flag28 = true;
                  }
                  if (Type != 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Type, 1);
                }
                else if (flag3)
                {
                  int maxValue4 = 8;
                  int maxValue5 = 30;
                  bool flag29 = (double) Math.Abs(index1 - Main.maxTilesX / 2) / (double) (Main.maxTilesX / 2) > 0.33000001311302185 && (Main.wallLight[(int) Main.tile[index7, index8].wall] || Main.tile[index7, index8].wall == (ushort) 73);
                  if (flag29 && NPC.AnyDanger())
                    flag29 = false;
                  if (Main.player[index5].ZoneWaterCandle)
                  {
                    maxValue4 = 3;
                    maxValue5 = 10;
                  }
                  if (flag6 && Main.invasionType == 4)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 388);
                  else if (flag29 && Main.hardMode && NPC.downedGolemBoss && (!NPC.downedMartians && Main.rand.Next(maxValue4) == 0 || Main.rand.Next(maxValue5) == 0) && !NPC.AnyNPCs(399))
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 399);
                  else if (flag29 && Main.hardMode && NPC.downedGolemBoss && (!NPC.downedMartians && Main.rand.Next(maxValue4) == 0 || Main.rand.Next(maxValue5) == 0) && !NPC.AnyNPCs(399) && (Main.player[index5].inventory[Main.player[index5].selectedItem].type == 148 || Main.player[index5].ZoneWaterCandle))
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 399);
                  else if (Main.hardMode && !NPC.AnyNPCs(87) && !flag5 && Main.rand.Next(10) == 0)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 87, 1);
                  else if (Main.hardMode && !NPC.AnyNPCs(87) && !flag5 && Main.rand.Next(10) == 0 && (Main.player[index5].inventory[Main.player[index5].selectedItem].type == 148 || Main.player[index5].ZoneWaterCandle))
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 87, 1);
                  else if (!NPC.unlockedSlimePurpleSpawn && Main.player[index5].RollLuck(25) == 0 && !NPC.AnyNPCs(686))
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 686);
                  else
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 48);
                }
                else if (flag6)
                {
                  switch (Main.invasionType)
                  {
                    case 1:
                      if (Main.hardMode && !NPC.AnyNPCs(471) && Main.rand.Next(30) == 0)
                      {
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 471);
                        break;
                      }
                      if (Main.rand.Next(9) == 0)
                      {
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 29);
                        break;
                      }
                      if (Main.rand.Next(5) == 0)
                      {
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 26);
                        break;
                      }
                      if (Main.rand.Next(3) == 0)
                      {
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 111);
                        break;
                      }
                      if (Main.rand.Next(3) == 0)
                      {
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 27);
                        break;
                      }
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 28);
                      break;
                    case 2:
                      if (Main.rand.Next(7) == 0)
                      {
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 145);
                        break;
                      }
                      if (Main.rand.Next(3) == 0)
                      {
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 143);
                        break;
                      }
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 144);
                      break;
                    case 3:
                      if (Main.invasionSize < Main.invasionSizeStart / 2 && Main.rand.Next(20) == 0 && !NPC.AnyNPCs(491) && !Collision.SolidTiles(index1 - 20, index1 + 20, index2 - 40, index2 - 10))
                      {
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, (index2 - 10) * 16, 491);
                        break;
                      }
                      if (Main.rand.Next(30) == 0 && !NPC.AnyNPCs(216))
                      {
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 216);
                        break;
                      }
                      if (Main.rand.Next(11) == 0)
                      {
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 215);
                        break;
                      }
                      if (Main.rand.Next(9) == 0)
                      {
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 252);
                        break;
                      }
                      if (Main.rand.Next(7) == 0)
                      {
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 214);
                        break;
                      }
                      if (Main.rand.Next(3) == 0)
                      {
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 213);
                        break;
                      }
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 212);
                      break;
                    case 4:
                      int Type1 = 0;
                      int num25 = Main.rand.Next(7);
                      bool flag30 = (double) (Main.invasionSizeStart - Main.invasionSize) / (double) Main.invasionSizeStart >= 0.30000001192092896 && !NPC.AnyNPCs(395);
                      if (Main.rand.Next(45) == 0 & flag30)
                        Type1 = 395;
                      else if (num25 >= 6)
                      {
                        if (Main.rand.Next(20) == 0 & flag30)
                        {
                          Type1 = 395;
                        }
                        else
                        {
                          int num26 = Main.rand.Next(2);
                          if (num26 == 0)
                            Type1 = 390;
                          if (num26 == 1)
                            Type1 = 386;
                        }
                      }
                      else if (num25 >= 4)
                      {
                        int num27 = Main.rand.Next(5);
                        Type1 = num27 >= 2 ? (num27 >= 4 ? 388 : 381) : 382;
                      }
                      else
                      {
                        int num28 = Main.rand.Next(4);
                        if (num28 == 3)
                        {
                          if (!NPC.AnyNPCs(520))
                            Type1 = 520;
                          else
                            num28 = Main.rand.Next(3);
                        }
                        if (num28 == 0)
                          Type1 = 385;
                        if (num28 == 1)
                          Type1 = 389;
                        if (num28 == 2)
                          Type1 = 383;
                      }
                      if (Type1 != 0)
                      {
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Type1, 1);
                        break;
                      }
                      break;
                  }
                }
                else if (num24 == 244 && !Main.remixWorld)
                {
                  if (flag7)
                  {
                    if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 592);
                    else
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 55);
                  }
                  else if ((double) index2 > Main.worldSurface)
                  {
                    if (Main.rand.Next(3) == 0)
                    {
                      if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 447);
                      else
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 300);
                    }
                    else if (Main.rand.Next(2) == 0)
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 359);
                    else if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 448);
                    else if (Main.rand.Next(3) != 0)
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 357);
                  }
                  else if (Main.player[index5].RollLuck(2) == 0)
                  {
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 624);
                    Main.npc[newNPC].timeLeft *= 10;
                  }
                  else if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 443);
                  else if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 539);
                  else if (Main.halloween && Main.rand.Next(3) != 0)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 303);
                  else if (Main.xMas && Main.rand.Next(3) != 0)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 337);
                  else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) != 0)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 540);
                  else if (Main.rand.Next(3) == 0)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, (int) Utils.SelectRandom<short>(Main.rand, (short) 299, (short) 538));
                  else
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 46);
                }
                else if (!NPC.savedBartender && DD2Event.ReadyToFindBartender && !NPC.AnyNPCs(579) && Main.rand.Next(80) == 0 && !flag7)
                  NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 579);
                else if (Main.tile[index1, index2].wall == (ushort) 62 | flag11)
                {
                  bool flag31 = flag22 && index2 < Main.maxTilesY - 210;
                  if (Main.dontStarveWorld)
                    flag31 = index2 < Main.maxTilesY - 210;
                  if (((Main.tile[index1, index2].wall != (ushort) 62 || Main.rand.Next(8) != 0 ? 0 : (!flag7 ? 1 : 0)) & (flag31 ? 1 : 0)) != 0 && !NPC.savedStylist && !NPC.AnyNPCs(354))
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 354);
                  else if (Main.hardMode && Main.rand.Next(10) != 0)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 163);
                  else
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 164);
                }
                else if (NPC.SpawnTileOrAboveHasAnyWallInSet(index1, index2, WallID.Sets.AllowsUndergroundDesertEnemiesToSpawn) | flag13 && WorldGen.checkUnderground(index1, index2))
                {
                  float num29 = 1.15f;
                  if ((double) index2 > (Main.rockLayer * 2.0 + (double) Main.maxTilesY) / 3.0)
                    num29 *= 0.5f;
                  else if ((double) index2 > Main.rockLayer)
                    num29 *= 0.85f;
                  if (Main.rand.Next(20) == 0 && !flag7 && !NPC.savedGolfer && !NPC.AnyNPCs(589))
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 589);
                  else if (Main.hardMode && Main.rand.Next((int) (45.0 * (double) num29)) == 0 && !flag5 && (double) index2 > Main.worldSurface + 100.0)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 510);
                  else if (Main.rand.Next((int) (45.0 * (double) num29)) == 0 && !flag5 && (double) index2 > Main.worldSurface + 100.0 && NPC.CountNPCS(513) == 0)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 513);
                  else if (Main.hardMode && Main.rand.Next(5) != 0)
                  {
                    List<int> intList = new List<int>();
                    if (Main.player[index5].ZoneCorrupt)
                    {
                      intList.Add(525);
                      intList.Add(525);
                    }
                    if (Main.player[index5].ZoneCrimson)
                    {
                      intList.Add(526);
                      intList.Add(526);
                    }
                    if (Main.player[index5].ZoneHallow)
                    {
                      intList.Add(527);
                      intList.Add(527);
                    }
                    if (intList.Count == 0)
                    {
                      intList.Add(524);
                      intList.Add(524);
                    }
                    if (Main.player[index5].ZoneCorrupt || Main.player[index5].ZoneCrimson)
                    {
                      intList.Add(533);
                      intList.Add(529);
                    }
                    else
                    {
                      intList.Add(530);
                      intList.Add(528);
                    }
                    intList.Add(532);
                    int Type2 = Utils.SelectRandom<int>(Main.rand, intList.ToArray());
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Type2);
                    intList.Clear();
                  }
                  else
                  {
                    int Type3 = Utils.SelectRandom<int>(Main.rand, 69, 580, 580, 580, 581);
                    if (Main.rand.Next(15) == 0)
                      Type3 = 537;
                    else if (Main.rand.Next(10) == 0)
                    {
                      switch (Type3)
                      {
                        case 580:
                          Type3 = 508;
                          break;
                        case 581:
                          Type3 = 509;
                          break;
                      }
                    }
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Type3);
                  }
                }
                else if (Main.hardMode & flag7 && Main.player[index5].ZoneJungle && Main.rand.Next(3) != 0)
                  NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 157);
                else if (Main.hardMode & flag7 && Main.player[index5].ZoneCrimson && Main.rand.Next(3) != 0)
                  NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 242);
                else if (Main.hardMode & flag7 && Main.player[index5].ZoneCrimson && Main.rand.Next(3) != 0)
                  NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 241);
                else if (((!flag12 ? 1 : (NPC.savedAngler ? 0 : (!NPC.AnyNPCs(376) ? 1 : 0))) & (flag7 ? 1 : 0) & (flag23 ? 1 : 0)) != 0)
                {
                  bool flag32 = false;
                  if (!NPC.savedAngler && !NPC.AnyNPCs(376) && ((double) index2 < Main.worldSurface - 10.0 || Main.remixWorld))
                  {
                    int num30 = -1;
                    for (int j = index2 - 1; j > index2 - 50; --j)
                    {
                      if (Main.tile[index1, j].liquid == (byte) 0 && !WorldGen.SolidTile(index1, j) && !WorldGen.SolidTile(index1, j + 1) && !WorldGen.SolidTile(index1, j + 2))
                      {
                        num30 = j + 2;
                        break;
                      }
                    }
                    if (num30 > index2)
                      num30 = index2;
                    if (num30 > 0 && !flag16)
                    {
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num30 * 16, 376);
                      flag32 = true;
                    }
                  }
                  if (!flag32 && !flag16)
                  {
                    int index30 = -1;
                    int num31 = -1;
                    if (((double) index2 < Main.worldSurface || Main.remixWorld) && index2 > 50)
                    {
                      for (int j = index2 - 1; j > index2 - 50; --j)
                      {
                        if (Main.tile[index1, j].liquid == (byte) 0 && !WorldGen.SolidTile(index1, j) && !WorldGen.SolidTile(index1, j + 1) && !WorldGen.SolidTile(index1, j + 2))
                        {
                          index30 = j + 2;
                          if (!WorldGen.SolidTile(index1, index30 + 1) && !WorldGen.SolidTile(index1, index30 + 2) && !Main.wallHouse[(int) Main.tile[index1, index30 + 2].wall])
                            num31 = index30 + 2;
                          if (Main.wallHouse[(int) Main.tile[index1, index30].wall])
                          {
                            index30 = -1;
                            break;
                          }
                          break;
                        }
                      }
                      if (index30 > index2)
                        index30 = index2;
                      if (num31 > index2)
                        num31 = index2;
                    }
                    if (index30 > 0 && !flag16 && Main.rand.Next(10) == 0)
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index30 * 16, 602);
                    else if (Main.rand.Next(10) == 0)
                    {
                      int num32 = Main.rand.Next(3);
                      if (num32 == 0 && index30 > 0)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index30 * 16, 625);
                      else if (num32 == 1 && num31 > 0)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num31 * 16, 615);
                      else if (num32 == 2)
                      {
                        int num33 = index2;
                        if (num31 > 0)
                          num33 = num31;
                        if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num33 * 16, 627);
                        else
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num33 * 16, 626);
                      }
                    }
                    else if (Main.rand.Next(40) == 0)
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 220);
                    else if (Main.rand.Next(18) == 0)
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 221);
                    else if (Main.rand.Next(8) == 0)
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 65);
                    else if (Main.rand.Next(3) == 0)
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 67);
                    else
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 64);
                  }
                }
                else if (!flag7 && !NPC.savedAngler && !NPC.AnyNPCs(376) && (index1 < WorldGen.beachDistance || index1 > Main.maxTilesX - WorldGen.beachDistance) && Main.tileSand[tileType] && ((double) index2 < Main.worldSurface || Main.remixWorld))
                  NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 376);
                else if (!flag12 & flag7 && (flag22 && Main.rand.Next(2) == 0 || tileType == 60))
                {
                  bool flag33 = false;
                  if (tileType == 60 & flag21 && index2 > 50 && Main.rand.Next(3) == 0 && Main.dayTime)
                  {
                    int num34 = -1;
                    for (int j = index2 - 1; j > index2 - 50; --j)
                    {
                      if (Main.tile[index1, j].liquid == (byte) 0 && !WorldGen.SolidTile(index1, j) && !WorldGen.SolidTile(index1, j + 1) && !WorldGen.SolidTile(index1, j + 2))
                      {
                        num34 = j + 2;
                        break;
                      }
                    }
                    if (num34 > index2)
                      num34 = index2;
                    if (num34 > 0 && !flag16)
                    {
                      flag33 = true;
                      if (Main.rand.Next(4) == 0)
                      {
                        flag33 = true;
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num34 * 16, 617);
                      }
                      else if (!flag1 && (double) Main.cloudAlpha == 0.0)
                      {
                        flag33 = true;
                        int num35 = Main.rand.Next(1, 4);
                        for (int index31 = 0; index31 < num35; ++index31)
                        {
                          if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                            NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 + Main.rand.Next(-16, 17), num34 * 16 - 16, 613);
                          else
                            NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 + Main.rand.Next(-16, 17), num34 * 16 - 16, 612);
                        }
                      }
                    }
                  }
                  if (!flag33)
                  {
                    if (Main.hardMode && Main.rand.Next(3) > 0)
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 102);
                    else
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 58);
                  }
                }
                else if (!flag12 & flag7 && (double) index2 > Main.worldSurface && Main.rand.Next(3) == 0)
                {
                  if (Main.hardMode && Main.rand.Next(3) > 0)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 103);
                  else
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 63);
                }
                else if (flag7 && Main.rand.Next(4) == 0 && (index1 > WorldGen.oceanDistance && index1 < Main.maxTilesX - WorldGen.oceanDistance || (double) index2 > Main.worldSurface + 50.0))
                {
                  if (Main.player[index5].ZoneCorrupt)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 57);
                  else if (Main.player[index5].ZoneCrimson)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 465);
                  else if ((double) index2 < Main.worldSurface && index2 > 50 && Main.rand.Next(3) != 0 && Main.dayTime)
                  {
                    int num36 = -1;
                    for (int j = index2 - 1; j > index2 - 50; --j)
                    {
                      if (Main.tile[index1, j].liquid == (byte) 0 && !WorldGen.SolidTile(index1, j) && !WorldGen.SolidTile(index1, j + 1) && !WorldGen.SolidTile(index1, j + 2))
                      {
                        num36 = j + 2;
                        break;
                      }
                    }
                    if (num36 > index2)
                      num36 = index2;
                    if (num36 > 0 && !flag16)
                    {
                      if (Main.rand.Next(5) == 0 && (num1 == 2 || num1 == 477))
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num36 * 16, 616);
                      else if (num1 == 53)
                      {
                        if (Main.rand.Next(2) == 0 && !flag1 && (double) Main.cloudAlpha == 0.0)
                        {
                          int num37 = Main.rand.Next(1, 4);
                          for (int index32 = 0; index32 < num37; ++index32)
                          {
                            if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 + Main.rand.Next(-16, 17), num36 * 16 - 16, 613);
                            else
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 + Main.rand.Next(-16, 17), num36 * 16 - 16, 612);
                          }
                        }
                        else
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num36 * 16, 608);
                      }
                      else if (Main.rand.Next(2) == 0)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num36 * 16, 362);
                      else
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num36 * 16, 364);
                    }
                    else if (num1 == 53 && index1 > WorldGen.beachDistance && index1 < Main.maxTilesX - WorldGen.beachDistance)
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num36 * 16, 607);
                    else if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 592);
                    else
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 55);
                  }
                  else if (num1 == 53 && index1 > WorldGen.beachDistance && index1 < Main.maxTilesX - WorldGen.beachDistance)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 607);
                  else if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 592);
                  else
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 55);
                }
                else if (((!NPC.downedGoblins || Main.player[index5].RollLuck(20) != 0 ? 0 : (!flag7 ? 1 : 0)) & (flag22 ? 1 : 0)) != 0 && index2 < Main.maxTilesY - 210 && !NPC.savedGoblin && !NPC.AnyNPCs(105))
                  NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 105);
                else if (((!Main.hardMode || Main.player[index5].RollLuck(20) != 0 ? 0 : (!flag7 ? 1 : 0)) & (flag22 ? 1 : 0)) != 0 && index2 < Main.maxTilesY - 210 && !NPC.savedWizard && !NPC.AnyNPCs(106))
                  NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 106);
                else if (((!NPC.downedBoss3 || Main.player[index5].RollLuck(20) != 0 ? 0 : (!flag7 ? 1 : 0)) & (flag22 ? 1 : 0)) != 0 && index2 < Main.maxTilesY - 210 && !NPC.unlockedSlimeOldSpawn && !NPC.AnyNPCs(685))
                  NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 685);
                else if (flag12)
                {
                  if (Main.player[index5].ZoneGraveyard)
                  {
                    if (!flag7)
                    {
                      if (Main.rand.Next(2) == 0)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 606);
                      else
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 610);
                    }
                  }
                  else if (!flag16 & flag24)
                  {
                    if (flag7)
                    {
                      int num38 = -1;
                      int num39 = -1;
                      if (((double) index2 < Main.worldSurface || Main.remixWorld) && index2 > 50)
                      {
                        for (int j = index2 - 1; j > index2 - 50; --j)
                        {
                          if (Main.tile[index1, j].liquid == (byte) 0 && !WorldGen.SolidTile(index1, j) && !WorldGen.SolidTile(index1, j + 1) && !WorldGen.SolidTile(index1, j + 2))
                          {
                            num38 = j + 2;
                            if (!WorldGen.SolidTile(index1, num38 + 1) && !WorldGen.SolidTile(index1, num38 + 2))
                            {
                              num39 = num38 + 2;
                              break;
                            }
                            break;
                          }
                        }
                        if (num38 > index2)
                          num38 = index2;
                        if (num39 > index2)
                          num39 = index2;
                      }
                      if (Main.rand.Next(2) == 0)
                      {
                        int num40 = Main.rand.Next(3);
                        if (num40 == 0 && num38 > 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num38 * 16, 625);
                        else if (num40 == 1 && num39 > 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num39 * 16, 615);
                        else if (num40 == 2)
                        {
                          int num41 = index2;
                          if (num39 > 0)
                            num41 = num39;
                          if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                            NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num41 * 16, 627);
                          else
                            NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num41 * 16, 626);
                        }
                      }
                      else if (num38 > 0 && !flag16)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num38 * 16, 602);
                    }
                    else
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 602);
                  }
                  else
                  {
                    int cattailX;
                    int cattailY;
                    if ((tileType == 2 || tileType == 477 || tileType == 53) && !windyForButterflies && Main.raining && Main.dayTime && Main.rand.Next(2) == 0 && ((double) index2 <= Main.worldSurface || Main.remixWorld) && NPC.FindCattailTop(index1, index2, out cattailX, out cattailY))
                    {
                      if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8, cattailY * 16, 601);
                      else
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8, cattailY * 16, NPC.RollDragonflyType(tileType));
                      if (Main.rand.Next(3) == 0)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8 - 16, cattailY * 16, NPC.RollDragonflyType(tileType));
                      if (Main.rand.Next(3) == 0)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8 + 16, cattailY * 16, NPC.RollDragonflyType(tileType));
                    }
                    else if (flag7)
                    {
                      if (flag21 && index2 > 50 && Main.rand.Next(3) != 0 && Main.dayTime)
                      {
                        int num42 = -1;
                        for (int j = index2 - 1; j > index2 - 50; --j)
                        {
                          if (Main.tile[index1, j].liquid == (byte) 0 && !WorldGen.SolidTile(index1, j) && !WorldGen.SolidTile(index1, j + 1) && !WorldGen.SolidTile(index1, j + 2))
                          {
                            num42 = j + 2;
                            break;
                          }
                        }
                        if (num42 > index2)
                          num42 = index2;
                        if (num42 > 0 && !flag16)
                        {
                          switch (num1)
                          {
                            case 53:
                              if (Main.rand.Next(3) != 0 && !flag1 && (double) Main.cloudAlpha == 0.0)
                              {
                                int num43 = Main.rand.Next(1, 4);
                                for (int index33 = 0; index33 < num43; ++index33)
                                {
                                  if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 + Main.rand.Next(-16, 17), num42 * 16 - 16, 613);
                                  else
                                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 + Main.rand.Next(-16, 17), num42 * 16 - 16, 612);
                                }
                                break;
                              }
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num42 * 16, 608);
                              break;
                            case 60:
                              if (Main.rand.Next(3) != 0 && !flag1 && (double) Main.cloudAlpha == 0.0)
                              {
                                int num44 = Main.rand.Next(1, 4);
                                for (int index34 = 0; index34 < num44; ++index34)
                                {
                                  if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 + Main.rand.Next(-16, 17), num42 * 16 - 16, 613);
                                  else
                                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 + Main.rand.Next(-16, 17), num42 * 16 - 16, 612);
                                }
                                break;
                              }
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num42 * 16, 617);
                              break;
                            default:
                              if (Main.rand.Next(5) == 0 && (num1 == 2 || num1 == 477))
                              {
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num42 * 16, 616);
                                break;
                              }
                              if (Main.rand.Next(2) == 0)
                              {
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num42 * 16, 362);
                                break;
                              }
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num42 * 16, 364);
                              break;
                          }
                        }
                        else if (num1 == 53 && index1 > WorldGen.beachDistance && index1 < Main.maxTilesX - WorldGen.beachDistance)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 607);
                        else if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 592);
                        else
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 55);
                      }
                      else if (num1 == 53 && index1 > WorldGen.beachDistance && index1 < Main.maxTilesX - WorldGen.beachDistance)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 607);
                      else if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 592);
                      else
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 55);
                    }
                    else
                    {
                      switch (tileType)
                      {
                        case 2:
                        case 109:
                        case 477:
                        case 492:
                          bool flag34 = flag21;
                          if (Main.raining && index2 <= Main.UnderworldLayer)
                          {
                            if (flag22 && Main.rand.Next(5) == 0)
                            {
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, NPC.SpawnNPC_GetGemSquirrelToSpawn());
                              break;
                            }
                            if (flag22 && Main.rand.Next(5) == 0)
                            {
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, NPC.SpawnNPC_GetGemBunnyToSpawn());
                              break;
                            }
                            if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                            {
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 448);
                              break;
                            }
                            if (Main.rand.Next(3) != 0)
                            {
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 357);
                              break;
                            }
                            if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                            {
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 593);
                              break;
                            }
                            NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 230);
                            break;
                          }
                          if (((Main.dayTime || Main.numClouds > 55 || (double) Main.cloudBGActive != 0.0 ? 0 : ((double) Star.starfallBoost > 3.0 ? 1 : 0)) & (flag34 ? 1 : 0)) != 0 && Main.player[index5].RollLuck(2) == 0)
                          {
                            NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 484);
                            break;
                          }
                          if (((windyForButterflies || Main.dayTime ? 0 : (Main.rand.Next(NPC.fireFlyFriendly) == 0 ? 1 : 0)) & (flag34 ? 1 : 0)) != 0)
                          {
                            int Type4 = 355;
                            if (tileType == 109)
                              Type4 = 358;
                            NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Type4);
                            if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 - 16, index2 * 16, Type4);
                            if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 + 16, index2 * 16, Type4);
                            if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16 - 16, Type4);
                            if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
                            {
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16 + 16, Type4);
                              break;
                            }
                            break;
                          }
                          if ((((double) Main.cloudAlpha != 0.0 || Main.dayTime ? 0 : (Main.rand.Next(5) == 0 ? 1 : 0)) & (flag34 ? 1 : 0)) != 0)
                          {
                            NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 611);
                            break;
                          }
                          if (((!Main.dayTime || Main.time >= 18000.0 ? 0 : (Main.rand.Next(3) != 0 ? 1 : 0)) & (flag34 ? 1 : 0)) != 0)
                          {
                            int num45 = Main.rand.Next(4);
                            if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                            {
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 442);
                              break;
                            }
                            switch (num45)
                            {
                              case 0:
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 297);
                                break;
                              case 1:
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 298);
                                break;
                              default:
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 74);
                                break;
                            }
                          }
                          else
                          {
                            if (((windyForButterflies || Main.raining || !Main.dayTime ? 0 : (Main.rand.Next(NPC.stinkBugChance) == 0 ? 1 : 0)) & (flag34 ? 1 : 0)) != 0)
                            {
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 669);
                              if (Main.rand.Next(4) == 0)
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 - 16, index2 * 16, 669);
                              if (Main.rand.Next(4) == 0)
                              {
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 + 16, index2 * 16, 669);
                                break;
                              }
                              break;
                            }
                            if (((windyForButterflies || Main.raining || !Main.dayTime ? 0 : (Main.rand.Next(NPC.butterflyChance) == 0 ? 1 : 0)) & (flag34 ? 1 : 0)) != 0)
                            {
                              if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 444);
                              else
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 356);
                              if (Main.rand.Next(4) == 0)
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 - 16, index2 * 16, 356);
                              if (Main.rand.Next(4) == 0)
                              {
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 + 16, index2 * 16, 356);
                                break;
                              }
                              break;
                            }
                            if (((!windyForButterflies || Main.raining || !Main.dayTime ? 0 : (Main.rand.Next(NPC.butterflyChance / 2) == 0 ? 1 : 0)) & (flag34 ? 1 : 0)) != 0)
                            {
                              if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 605);
                              else
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 604);
                              if (Main.rand.Next(3) != 0)
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 604);
                              if (Main.rand.Next(2) == 0)
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 604);
                              if (Main.rand.Next(3) == 0)
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 604);
                              if (Main.rand.Next(4) == 0)
                              {
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 604);
                                break;
                              }
                              break;
                            }
                            if (Main.rand.Next(2) == 0 & flag34)
                            {
                              int num46 = Main.rand.Next(4);
                              if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                              {
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 442);
                                break;
                              }
                              switch (num46)
                              {
                                case 0:
                                  NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 297);
                                  break;
                                case 1:
                                  NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 298);
                                  break;
                                default:
                                  NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 74);
                                  break;
                              }
                            }
                            else
                            {
                              if (index2 > Main.UnderworldLayer)
                              {
                                if (Main.remixWorld && (double) Main.player[index5].Center.X / 16.0 > (double) Main.maxTilesX * 0.39 + 50.0 && (double) Main.player[index5].Center.X / 16.0 < (double) Main.maxTilesX * 0.61 && Main.rand.Next(2) == 0)
                                {
                                  if (Main.rand.Next(2) == 0)
                                  {
                                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, NPC.SpawnNPC_GetGemSquirrelToSpawn());
                                    break;
                                  }
                                  NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, NPC.SpawnNPC_GetGemBunnyToSpawn());
                                  break;
                                }
                                newNPC = NPC.SpawnNPC_SpawnLavaBaitCritters(index1, index2);
                                break;
                              }
                              if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                              {
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 443);
                                break;
                              }
                              if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0 & flag34)
                              {
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 539);
                                break;
                              }
                              if (Main.halloween && Main.rand.Next(3) != 0)
                              {
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 303);
                                break;
                              }
                              if (Main.xMas && Main.rand.Next(3) != 0)
                              {
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 337);
                                break;
                              }
                              if (BirthdayParty.PartyIsUp && Main.rand.Next(3) != 0)
                              {
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 540);
                                break;
                              }
                              if (Main.rand.Next(3) == 0)
                              {
                                if (Main.remixWorld)
                                {
                                  if ((double) index2 < Main.rockLayer && (double) index2 > Main.worldSurface)
                                  {
                                    if (Main.rand.Next(5) == 0)
                                    {
                                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, NPC.SpawnNPC_GetGemSquirrelToSpawn());
                                      break;
                                    }
                                    break;
                                  }
                                  if (flag34)
                                  {
                                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, (int) Utils.SelectRandom<short>(Main.rand, (short) 299, (short) 538));
                                    break;
                                  }
                                  break;
                                }
                                if ((double) index2 >= Main.rockLayer && index2 <= Main.UnderworldLayer)
                                {
                                  if (Main.rand.Next(5) == 0)
                                  {
                                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, NPC.SpawnNPC_GetGemSquirrelToSpawn());
                                    break;
                                  }
                                  break;
                                }
                                if (flag34)
                                {
                                  NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, (int) Utils.SelectRandom<short>(Main.rand, (short) 299, (short) 538));
                                  break;
                                }
                                break;
                              }
                              if (Main.remixWorld)
                              {
                                if ((double) index2 < Main.rockLayer && (double) index2 > Main.worldSurface)
                                {
                                  if ((double) index2 >= Main.rockLayer && index2 <= Main.UnderworldLayer)
                                  {
                                    if (Main.rand.Next(5) == 0)
                                    {
                                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, NPC.SpawnNPC_GetGemBunnyToSpawn());
                                      break;
                                    }
                                    break;
                                  }
                                  NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 46);
                                  break;
                                }
                                break;
                              }
                              if ((double) index2 >= Main.rockLayer && index2 <= Main.UnderworldLayer)
                              {
                                if (Main.rand.Next(5) == 0)
                                {
                                  NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, NPC.SpawnNPC_GetGemBunnyToSpawn());
                                  break;
                                }
                                break;
                              }
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 46);
                              break;
                            }
                          }
                          break;
                        case 53:
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(366, 368));
                          break;
                        case 60:
                          if (Main.dayTime && Main.rand.Next(3) != 0)
                          {
                            switch (Main.rand.Next(5))
                            {
                              case 0:
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 671);
                                break;
                              case 1:
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 672);
                                break;
                              case 2:
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 673);
                                break;
                              case 3:
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 674);
                                break;
                              default:
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 675);
                                break;
                            }
                          }
                          else
                          {
                            NPC.SpawnNPC_SpawnFrog(index1, index2, index5);
                            break;
                          }
                          break;
                        case 147:
                        case 161:
                          if (Main.rand.Next(2) == 0)
                          {
                            NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 148);
                            break;
                          }
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 149);
                          break;
                        default:
                          if ((double) index2 <= Main.worldSurface)
                            return;
                          goto case 2;
                      }
                    }
                  }
                }
                else if (Main.player[index5].ZoneDungeon)
                {
                  int num47 = 0;
                  ushort wall1 = Main.tile[index1, index2].wall;
                  ushort wall2 = Main.tile[index1, index2 - 1].wall;
                  if (wall1 == (ushort) 94 || wall1 == (ushort) 96 || wall1 == (ushort) 98 || wall2 == (ushort) 94 || wall2 == (ushort) 96 || wall2 == (ushort) 98)
                    num47 = 1;
                  if (wall1 == (ushort) 95 || wall1 == (ushort) 97 || wall1 == (ushort) 99 || wall2 == (ushort) 95 || wall2 == (ushort) 97 || wall2 == (ushort) 99)
                    num47 = 2;
                  if (Main.player[index5].RollLuck(7) == 0)
                    num47 = Main.rand.Next(3);
                  bool flag35 = !NPC.downedBoss3;
                  if (Main.drunkWorld && (double) Main.player[index5].position.Y / 16.0 < (double) (Main.dungeonY + 40))
                    flag35 = false;
                  if (flag35)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 68);
                  else if (NPC.downedBoss3 && !NPC.savedMech && Main.rand.Next(5) == 0 && !flag7 && !NPC.AnyNPCs(123) && (double) index2 > (Main.worldSurface * 4.0 + Main.rockLayer) / 5.0)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 123);
                  else if (flag14 && Main.rand.Next(30) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 287);
                  else if (flag14 && num47 == 0 && Main.rand.Next(15) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 293);
                  else if (flag14 && num47 == 1 && Main.rand.Next(15) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 291);
                  else if (flag14 && num47 == 2 && Main.rand.Next(15) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 292);
                  else if (flag14 && !NPC.AnyNPCs(290) && num47 == 0 && Main.rand.Next(35) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 290);
                  else if (flag14 && (num47 == 1 || num47 == 2) && Main.rand.Next(30) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 289);
                  else if (flag14 && Main.rand.Next(20) == 0)
                  {
                    int num48 = 281;
                    if (num47 == 0)
                      num48 += 2;
                    if (num47 == 2)
                      num48 += 4;
                    int Type5 = num48 + Main.rand.Next(2);
                    if (!NPC.AnyNPCs(Type5))
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Type5);
                  }
                  else if (flag14 && Main.rand.Next(3) != 0)
                  {
                    int num49 = 269;
                    if (num47 == 0)
                      num49 += 4;
                    if (num47 == 2)
                      num49 += 8;
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, num49 + Main.rand.Next(4));
                  }
                  else if (Main.player[index5].RollLuck(35) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 71);
                  else if (num47 == 1 && Main.rand.Next(3) == 0 && !NPC.NearSpikeBall(index1, index2))
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 70);
                  else if (num47 == 2 && Main.rand.Next(5) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 72);
                  else if (num47 == 0 && Main.rand.Next(7) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 34);
                  else if (Main.rand.Next(7) == 0)
                  {
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 32);
                  }
                  else
                  {
                    switch (Main.rand.Next(5))
                    {
                      case 0:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 294);
                        break;
                      case 1:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 295);
                        break;
                      case 2:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 296);
                        break;
                      default:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 31);
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-14);
                          break;
                        }
                        if (Main.rand.Next(5) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-13);
                          break;
                        }
                        break;
                    }
                  }
                }
                else if (Main.player[index5].ZoneMeteor)
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 23);
                else if (DD2Event.Ongoing && Main.player[index5].ZoneOldOneArmy)
                  DD2Event.SpawnNPC(ref newNPC);
                else if ((Main.remixWorld || (double) index2 <= Main.worldSurface) && !Main.dayTime && Main.snowMoon)
                {
                  int waveNumber = NPC.waveNumber;
                  if (Main.rand.Next(30) == 0 && NPC.CountNPCS(341) < 4)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 341);
                  else if (waveNumber >= 20)
                  {
                    int num50 = Main.rand.Next(3);
                    if ((double) num3 < (double) num2 * (double) num4)
                    {
                      switch (num50)
                      {
                        case 0:
                          newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 345);
                          break;
                        case 1:
                          newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 346);
                          break;
                        default:
                          newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 344);
                          break;
                      }
                    }
                  }
                  else if (waveNumber >= 19)
                    newNPC = Main.rand.Next(10) != 0 || NPC.CountNPCS(345) >= 4 ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(346) >= 5 ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(344) >= 7 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 343) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 344)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 346)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 345);
                  else if (waveNumber >= 18)
                    newNPC = Main.rand.Next(10) != 0 || NPC.CountNPCS(345) >= 3 ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(346) >= 4 ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(344) >= 6 ? (Main.rand.Next(3) != 0 ? (Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 343) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 351)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 348)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 344)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 346)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 345);
                  else if (waveNumber >= 17)
                    newNPC = Main.rand.Next(10) != 0 || NPC.CountNPCS(345) >= 2 ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(346) >= 3 ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(344) >= 5 ? (Main.rand.Next(4) != 0 ? (Main.rand.Next(2) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 343) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 351)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 347)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 344)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 346)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 345);
                  else if (waveNumber >= 16)
                    newNPC = Main.rand.Next(10) != 0 || NPC.CountNPCS(345) >= 2 ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(346) >= 2 ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(344) >= 4 ? (Main.rand.Next(2) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 343) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 352)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 344)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 346)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 345);
                  else if (waveNumber >= 15)
                    newNPC = Main.rand.Next(10) != 0 || NPC.AnyNPCs(345) ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(346) >= 2 ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(344) >= 3 ? (Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 343) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 347)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 344)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 346)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 345);
                  else if (waveNumber == 14)
                  {
                    if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(345))
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 345);
                    else if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(346))
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 346);
                    else if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(344))
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 344);
                    else if (Main.rand.Next(3) == 0)
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 343);
                  }
                  else
                    newNPC = waveNumber != 13 ? (waveNumber != 12 ? (waveNumber != 11 ? (waveNumber != 10 ? (waveNumber != 9 ? (waveNumber != 8 ? (waveNumber != 7 ? (waveNumber != 6 ? (waveNumber != 5 ? (waveNumber != 4 ? (waveNumber != 3 ? (waveNumber != 2 ? (Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(338, 341)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 342)) : (Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(338, 341)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 350))) : (Main.rand.Next(8) != 0 ? (Main.rand.Next(4) != 0 ? (Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(338, 341)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 342)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 350)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 348))) : (Main.rand.Next(10) != 0 || NPC.AnyNPCs(344) ? (Main.rand.Next(4) != 0 ? (Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(338, 341)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 342)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 350)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 344))) : (Main.rand.Next(10) != 0 || NPC.AnyNPCs(344) ? (Main.rand.Next(4) != 0 ? (Main.rand.Next(8) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(338, 341)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 348)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 350)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 344))) : (Main.rand.Next(10) != 0 || NPC.CountNPCS(344) >= 2 ? (Main.rand.Next(4) != 0 ? (Main.rand.Next(2) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 350) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 348)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 347)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 344))) : (Main.rand.Next(10) != 0 || NPC.AnyNPCs(346) ? (Main.rand.Next(3) != 0 ? (Main.rand.Next(4) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(338, 341)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 350)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 342)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 346))) : (Main.rand.Next(10) != 0 || NPC.AnyNPCs(346) ? (Main.rand.Next(8) != 0 ? (Main.rand.Next(3) != 0 ? (Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 350) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 347)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 348)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 351)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 346))) : (Main.rand.Next(10) != 0 || NPC.AnyNPCs(346) ? (Main.rand.Next(10) != 0 || NPC.AnyNPCs(344) ? (Main.rand.Next(2) != 0 ? (Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 342) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 347)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 348)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 344)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 346))) : (Main.rand.Next(10) != 0 || NPC.AnyNPCs(346) ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(344) >= 2 ? (Main.rand.Next(6) != 0 ? (Main.rand.Next(3) != 0 ? (Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(338, 341)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 347)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 348)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 351)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 344)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 346))) : (Main.rand.Next(10) != 0 || NPC.AnyNPCs(345) ? (Main.rand.Next(6) != 0 ? (Main.rand.Next(2) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(338, 341)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 342)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 352)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 345))) : (Main.rand.Next(10) != 0 || NPC.AnyNPCs(345) ? (Main.rand.Next(10) != 0 || NPC.AnyNPCs(344) ? (Main.rand.Next(8) != 0 ? (Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(338, 341)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 342)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 343)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 344)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 345))) : (Main.rand.Next(10) != 0 || NPC.AnyNPCs(345) ? (Main.rand.Next(10) != 0 || NPC.AnyNPCs(346) ? (Main.rand.Next(3) != 0 ? (Main.rand.Next(6) != 0 ? (Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 347) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 342)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 343)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 352)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 346)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 345));
                }
                else if ((Main.remixWorld || (double) index2 <= Main.worldSurface) && !Main.dayTime && Main.pumpkinMoon)
                {
                  int waveNumber = NPC.waveNumber;
                  int num51;
                  if (NPC.waveNumber >= 20)
                  {
                    if ((double) num3 < (double) num2 * (double) num4)
                    {
                      if (Main.rand.Next(2) == 0 && NPC.CountNPCS(327) < 2)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 327);
                      else if (Main.rand.Next(3) != 0 && NPC.CountNPCS(325) < 2)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 325);
                      else if (NPC.CountNPCS(315) < 3)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 315);
                    }
                  }
                  else
                  {
                    switch (waveNumber)
                    {
                      case 2:
                        newNPC = Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(305, 315)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 326);
                        break;
                      case 3:
                        newNPC = Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 326) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 329);
                        break;
                      case 4:
                        newNPC = Main.rand.Next(8) != 0 || NPC.AnyNPCs(325) ? (Main.rand.Next(2) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(305, 315)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 326)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 330);
                        break;
                      case 5:
                        newNPC = Main.rand.Next(10) != 0 || NPC.AnyNPCs(315) ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 329) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 315);
                        break;
                      case 6:
                        newNPC = Main.rand.Next(7) != 0 || NPC.CountNPCS(325) >= 2 ? (Main.rand.Next(2) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(305, 315)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 326)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 325);
                        break;
                      case 7:
                        newNPC = Main.rand.Next(7) != 0 || NPC.CountNPCS(325) >= 2 ? (Main.rand.Next(4) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 329) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 330)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 325);
                        break;
                      case 8:
                        newNPC = Main.rand.Next(8) != 0 || NPC.CountNPCS(315) >= 2 ? (Main.rand.Next(4) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 329) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 330)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 315);
                        break;
                      case 9:
                        newNPC = Main.rand.Next(10) != 0 || NPC.CountNPCS(325) >= 2 ? (Main.rand.Next(8) != 0 ? (Main.rand.Next(5) != 0 ? (Main.rand.Next(2) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(305, 315)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 326)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 329)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 330)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 325);
                        break;
                      case 10:
                        newNPC = Main.rand.Next(10) != 0 || NPC.AnyNPCs(327) ? (Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(305, 315)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 329)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 327);
                        break;
                      case 11:
                        newNPC = Main.rand.Next(7) != 0 || NPC.CountNPCS(325) >= 2 ? (Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 326) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 330)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 325);
                        break;
                      case 12:
                        newNPC = Main.rand.Next(5) != 0 || NPC.AnyNPCs(327) ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 330) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 327);
                        break;
                      case 13:
                        newNPC = Main.rand.Next(7) != 0 || NPC.CountNPCS(325) >= 2 ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(315) >= 2 ? (Main.rand.Next(6) != 0 ? (Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 326) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 329)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 330)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 315)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 325);
                        break;
                      case 14:
                        if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(327))
                          num51 = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 327);
                        newNPC = Main.rand.Next(7) != 0 || NPC.CountNPCS(325) >= 2 ? (Main.rand.Next(10) != 0 || NPC.AnyNPCs(315) ? (Main.rand.Next(10) != 0 ? (Main.rand.Next(7) != 0 ? (Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(305, 315)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 326)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 329)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 330)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 315)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 325);
                        break;
                      case 15:
                        if (Main.rand.Next(10) == 0 && !NPC.AnyNPCs(327))
                          num51 = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 327);
                        newNPC = Main.rand.Next(7) != 0 || NPC.CountNPCS(325) >= 2 ? (Main.rand.Next(5) != 0 ? (Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(305, 315)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 326)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 330)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 325);
                        break;
                      case 16:
                        newNPC = Main.rand.Next(10) != 0 || NPC.CountNPCS(327) >= 2 ? (Main.rand.Next(10) != 0 || NPC.CountNPCS(315) >= 2 ? (Main.rand.Next(6) != 0 ? (Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 326) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 329)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 330)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 315)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 327);
                        break;
                      case 17:
                        if (Main.rand.Next(7) == 0 && NPC.CountNPCS(327) < 2)
                          num51 = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 327);
                        newNPC = Main.rand.Next(7) != 0 || NPC.CountNPCS(325) >= 2 ? (Main.rand.Next(7) != 0 || NPC.CountNPCS(315) >= 2 ? (Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 329) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 330)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 315)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 325);
                        break;
                      case 18:
                        if (Main.rand.Next(7) == 0 && NPC.CountNPCS(327) < 2)
                          num51 = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 327);
                        newNPC = Main.rand.Next(7) != 0 || NPC.CountNPCS(325) >= 2 ? (Main.rand.Next(7) != 0 || NPC.CountNPCS(315) >= 3 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 330) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 315)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 325);
                        break;
                      case 19:
                        if (Main.rand.Next(5) == 0 && NPC.CountNPCS(327) < 2)
                        {
                          newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 327);
                          break;
                        }
                        if (Main.rand.Next(5) == 0 && NPC.CountNPCS(325) < 2)
                        {
                          newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 325);
                          break;
                        }
                        if ((double) num3 < (double) num2 * (double) num4 && NPC.CountNPCS(315) < 5)
                        {
                          newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 315);
                          break;
                        }
                        break;
                      default:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(305, 315));
                        break;
                    }
                  }
                }
                else if (((double) index2 <= Main.worldSurface || Main.remixWorld && (double) index2 > Main.rockLayer) && Main.dayTime && Main.eclipse)
                {
                  bool flag36 = false;
                  if (NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3)
                    flag36 = true;
                  newNPC = !NPC.downedPlantBoss || Main.rand.Next(80) != 0 || NPC.AnyNPCs(477) ? (Main.rand.Next(50) != 0 || NPC.AnyNPCs(251) ? (!NPC.downedPlantBoss || Main.rand.Next(5) != 0 || NPC.AnyNPCs(466) ? (!NPC.downedPlantBoss || Main.rand.Next(20) != 0 || NPC.AnyNPCs(463) ? (!NPC.downedPlantBoss || Main.rand.Next(20) != 0 || NPC.CountNPCS(467) >= 2 ? (Main.rand.Next(15) != 0 ? (!flag36 || Main.rand.Next(13) != 0 ? (Main.rand.Next(8) != 0 ? (!NPC.downedPlantBoss || Main.rand.Next(7) != 0 ? (!NPC.downedPlantBoss || Main.rand.Next(5) != 0 ? (Main.rand.Next(4) != 0 ? (Main.rand.Next(3) != 0 ? (Main.rand.Next(2) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 166) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 462)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 461)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 162)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 460)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 468)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 469)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 253)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 159)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 467)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 463)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 466)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 251)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 477);
                }
                else if (NPC.SpawnNPC_CheckToSpawnUndergroundFairy(index1, index2, index5))
                {
                  int Type6 = Main.rand.Next(583, 586);
                  if (Main.tenthAnniversaryWorld && !Main.getGoodWorld && Main.rand.Next(4) != 0)
                    Type6 = 583;
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Type6);
                  Main.npc[newNPC].ai[2] = 2f;
                  Main.npc[newNPC].TargetClosest();
                  Main.npc[newNPC].ai[3] = 0.0f;
                }
                else if (!Main.remixWorld && !flag7 && (!Main.dayTime || Main.tile[index1, index2].wall > (ushort) 0) && Main.tile[index7, index8].wall == (ushort) 244 && !Main.eclipse && !Main.bloodMoon && Main.player[index5].RollLuck(30) == 0 && NPC.CountNPCS(624) <= Main.rand.Next(3))
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 624);
                else if (!Main.player[index5].ZoneCorrupt && !Main.player[index5].ZoneCrimson && !flag7 && !Main.eclipse && !Main.bloodMoon && Main.player[index5].RollLuck(range) == 0 && (!Main.remixWorld && (double) index2 >= Main.worldSurface * 0.800000011920929 && (double) index2 < Main.worldSurface * 1.1000000238418579 || Main.remixWorld && (double) index2 > Main.rockLayer && index2 < Main.maxTilesY - 350) && NPC.CountNPCS(624) <= Main.rand.Next(3) && (!Main.dayTime || Main.tile[index1, index2].wall > (ushort) 0) && (Main.tile[index1, index2].wall == (ushort) 63 || Main.tile[index1, index2].wall == (ushort) 2 || Main.tile[index1, index2].wall == (ushort) 196 || Main.tile[index1, index2].wall == (ushort) 197 || Main.tile[index1, index2].wall == (ushort) 198 || Main.tile[index1, index2].wall == (ushort) 199))
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 624);
                else if (((!Main.hardMode ? 0 : (num1 == 70 ? 1 : 0)) & (flag7 ? 1 : 0)) != 0)
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 256);
                else if (num1 == 70 && (double) index2 <= Main.worldSurface && Main.rand.Next(3) != 0)
                {
                  if (!Main.hardMode && Main.rand.Next(6) == 0 || Main.rand.Next(12) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 360);
                  else if (Main.rand.Next(3) == 0)
                  {
                    if (Main.rand.Next(4) == 0)
                    {
                      if (Main.hardMode && Main.rand.Next(3) != 0)
                      {
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 260);
                        Main.npc[newNPC].ai[0] = (float) index1;
                        Main.npc[newNPC].ai[1] = (float) index2;
                        Main.npc[newNPC].netUpdate = true;
                      }
                      else
                      {
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 259);
                        Main.npc[newNPC].ai[0] = (float) index1;
                        Main.npc[newNPC].ai[1] = (float) index2;
                        Main.npc[newNPC].netUpdate = true;
                      }
                    }
                    else
                      newNPC = Main.rand.Next(2) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 258) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 257);
                  }
                  else
                    newNPC = Main.rand.Next(2) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, (int) byte.MaxValue) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 254);
                }
                else if (num1 == 70 && Main.hardMode && (double) index2 >= Main.worldSurface && Main.rand.Next(3) != 0 && (!Main.remixWorld || Main.getGoodWorld || index2 < Main.maxTilesY - 360))
                {
                  if (Main.hardMode && Main.player[index5].RollLuck(5) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 374);
                  else if (!Main.hardMode && Main.rand.Next(4) == 0 || Main.rand.Next(8) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 360);
                  else if (Main.rand.Next(4) == 0)
                  {
                    if (Main.hardMode && Main.rand.Next(3) != 0)
                    {
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 260);
                      Main.npc[newNPC].ai[0] = (float) index1;
                      Main.npc[newNPC].ai[1] = (float) index2;
                      Main.npc[newNPC].netUpdate = true;
                    }
                    else
                    {
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 259);
                      Main.npc[newNPC].ai[0] = (float) index1;
                      Main.npc[newNPC].ai[1] = (float) index2;
                      Main.npc[newNPC].netUpdate = true;
                    }
                  }
                  else
                    newNPC = Main.rand.Next(2) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 258) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 257);
                }
                else if (Main.player[index5].ZoneCorrupt && Main.rand.Next(maxValue1) == 0 && !flag5)
                  newNPC = !Main.hardMode || Main.rand.Next(4) == 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 7, 1) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 98, 1);
                else if (Main.remixWorld && !Main.hardMode && (double) index2 > Main.worldSurface && Main.player[index5].RollLuck(100) == 0)
                  newNPC = !Main.player[index5].ZoneSnow ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 85) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 629);
                else if (Main.hardMode && (double) index2 > Main.worldSurface && Main.player[index5].RollLuck(Main.tenthAnniversaryWorld ? 25 : 75) == 0)
                  newNPC = Main.rand.Next(2) != 0 || !Main.player[index5].ZoneCorrupt || NPC.AnyNPCs(473) ? (Main.rand.Next(2) != 0 || !Main.player[index5].ZoneCrimson || NPC.AnyNPCs(474) ? (Main.rand.Next(2) != 0 || !Main.player[index5].ZoneHallow || NPC.AnyNPCs(475) ? (!Main.tenthAnniversaryWorld || Main.rand.Next(2) != 0 || !Main.player[index5].ZoneJungle || NPC.AnyNPCs(476) ? (!Main.player[index5].ZoneSnow ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 85) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 629)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 476)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 475)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 474)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 473);
                else if (Main.hardMode && Main.tile[index1, index2].wall == (ushort) 2 && Main.rand.Next(20) == 0)
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 85);
                else if (Main.hardMode && (double) index2 <= Main.worldSurface && !Main.dayTime && (Main.rand.Next(20) == 0 || Main.rand.Next(5) == 0 && Main.moonPhase == 4))
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 82);
                else if (Main.hardMode && Main.halloween && (double) index2 <= Main.worldSurface && !Main.dayTime && Main.rand.Next(10) == 0)
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 304);
                else if (tileType == 60 && Main.player[index5].RollLuck(500) == 0 && !Main.dayTime)
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 52);
                else if (tileType == 60 && (double) index2 > Main.worldSurface && Main.rand.Next(60) == 0)
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 219);
                else if ((double) index2 > Main.worldSurface && index2 < Main.maxTilesY - 210 && !Main.player[index5].ZoneSnow && !Main.player[index5].ZoneCrimson && !Main.player[index5].ZoneCorrupt && !Main.player[index5].ZoneJungle && !Main.player[index5].ZoneHallow && Main.rand.Next(8) == 0)
                {
                  if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 448);
                  else
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 357);
                }
                else if ((double) index2 > Main.worldSurface && index2 < Main.maxTilesY - 210 && !Main.player[index5].ZoneSnow && !Main.player[index5].ZoneCrimson && !Main.player[index5].ZoneCorrupt && !Main.player[index5].ZoneJungle && !Main.player[index5].ZoneHallow && Main.rand.Next(13) == 0)
                {
                  if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 447);
                  else
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 300);
                }
                else if ((double) index2 > Main.worldSurface && (double) index2 < (Main.rockLayer + (double) Main.maxTilesY) / 2.0 && !Main.player[index5].ZoneSnow && !Main.player[index5].ZoneCrimson && !Main.player[index5].ZoneCorrupt && !Main.player[index5].ZoneHallow && Main.rand.Next(13) == 0)
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 359);
                else if (flag21 && Main.player[index5].ZoneJungle && !Main.player[index5].ZoneCrimson && !Main.player[index5].ZoneCorrupt && Main.rand.Next(7) == 0)
                {
                  if (Main.dayTime && Main.time < 43200.000643730164 && Main.rand.Next(3) != 0)
                  {
                    switch (Main.rand.Next(5))
                    {
                      case 0:
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 671);
                        break;
                      case 1:
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 672);
                        break;
                      case 2:
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 673);
                        break;
                      case 3:
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 674);
                        break;
                      default:
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 675);
                        break;
                    }
                  }
                  else
                    NPC.SpawnNPC_SpawnFrog(index1, index2, index5);
                }
                else if (tileType == 225 && Main.rand.Next(2) == 0)
                {
                  if (Main.hardMode && Main.rand.Next(4) != 0)
                  {
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 176);
                    if (Main.rand.Next(10) == 0)
                      Main.npc[newNPC].SetDefaults(-18);
                    if (Main.rand.Next(10) == 0)
                      Main.npc[newNPC].SetDefaults(-19);
                    if (Main.rand.Next(10) == 0)
                      Main.npc[newNPC].SetDefaults(-20);
                    if (Main.rand.Next(10) == 0)
                      Main.npc[newNPC].SetDefaults(-21);
                  }
                  else
                  {
                    switch (Main.rand.Next(8))
                    {
                      case 0:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 231);
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-56);
                          break;
                        }
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-57);
                          break;
                        }
                        break;
                      case 1:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 232);
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-58);
                          break;
                        }
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-59);
                          break;
                        }
                        break;
                      case 2:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 233);
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-60);
                          break;
                        }
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-61);
                          break;
                        }
                        break;
                      case 3:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 234);
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-62);
                          break;
                        }
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-63);
                          break;
                        }
                        break;
                      case 4:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 235);
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-64);
                          break;
                        }
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-65);
                          break;
                        }
                        break;
                      default:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 42);
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-16);
                          break;
                        }
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-17);
                          break;
                        }
                        break;
                    }
                  }
                }
                else if (tileType == 60 && Main.hardMode && Main.rand.Next(3) != 0)
                {
                  if (flag21 && !Main.dayTime && Main.rand.Next(3) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 152);
                  else if (flag21 && Main.dayTime && Main.rand.Next(4) != 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 177);
                  else if ((double) index2 > Main.worldSurface && Main.rand.Next(100) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 205);
                  else if ((double) index2 > Main.worldSurface && Main.rand.Next(5) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 236);
                  else if ((double) index2 > Main.worldSurface && Main.rand.Next(4) != 0)
                  {
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 176);
                    if (Main.rand.Next(10) == 0)
                      Main.npc[newNPC].SetDefaults(-18);
                    if (Main.rand.Next(10) == 0)
                      Main.npc[newNPC].SetDefaults(-19);
                    if (Main.rand.Next(10) == 0)
                      Main.npc[newNPC].SetDefaults(-20);
                    if (Main.rand.Next(10) == 0)
                      Main.npc[newNPC].SetDefaults(-21);
                  }
                  else if (Main.rand.Next(3) == 0)
                  {
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 175);
                    Main.npc[newNPC].ai[0] = (float) index1;
                    Main.npc[newNPC].ai[1] = (float) index2;
                    Main.npc[newNPC].netUpdate = true;
                  }
                  else
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 153);
                }
                else if (((tileType == 226 ? 1 : (tileType == 232 ? 1 : 0)) & (flag4 ? 1 : 0)) != 0 || Main.remixWorld & flag4)
                  newNPC = Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 198) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 226);
                else if (num24 == 86 && Main.rand.Next(8) != 0)
                {
                  switch (Main.rand.Next(8))
                  {
                    case 0:
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 231);
                      if (Main.rand.Next(4) == 0)
                      {
                        Main.npc[newNPC].SetDefaults(-56);
                        break;
                      }
                      if (Main.rand.Next(4) == 0)
                      {
                        Main.npc[newNPC].SetDefaults(-57);
                        break;
                      }
                      break;
                    case 1:
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 232);
                      if (Main.rand.Next(4) == 0)
                      {
                        Main.npc[newNPC].SetDefaults(-58);
                        break;
                      }
                      if (Main.rand.Next(4) == 0)
                      {
                        Main.npc[newNPC].SetDefaults(-59);
                        break;
                      }
                      break;
                    case 2:
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 233);
                      if (Main.rand.Next(4) == 0)
                      {
                        Main.npc[newNPC].SetDefaults(-60);
                        break;
                      }
                      if (Main.rand.Next(4) == 0)
                      {
                        Main.npc[newNPC].SetDefaults(-61);
                        break;
                      }
                      break;
                    case 3:
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 234);
                      if (Main.rand.Next(4) == 0)
                      {
                        Main.npc[newNPC].SetDefaults(-62);
                        break;
                      }
                      if (Main.rand.Next(4) == 0)
                      {
                        Main.npc[newNPC].SetDefaults(-63);
                        break;
                      }
                      break;
                    case 4:
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 235);
                      if (Main.rand.Next(4) == 0)
                      {
                        Main.npc[newNPC].SetDefaults(-64);
                        break;
                      }
                      if (Main.rand.Next(4) == 0)
                      {
                        Main.npc[newNPC].SetDefaults(-65);
                        break;
                      }
                      break;
                    default:
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 42);
                      if (Main.rand.Next(4) == 0)
                      {
                        Main.npc[newNPC].SetDefaults(-16);
                        break;
                      }
                      if (Main.rand.Next(4) == 0)
                      {
                        Main.npc[newNPC].SetDefaults(-17);
                        break;
                      }
                      break;
                  }
                }
                else if (tileType == 60 && (!Main.remixWorld && (double) index2 > (Main.worldSurface + Main.rockLayer) / 2.0 || Main.remixWorld && ((double) index2 < Main.rockLayer || Main.rand.Next(2) == 0)))
                {
                  if (Main.rand.Next(4) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 204);
                  else if (Main.rand.Next(4) == 0)
                  {
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 43);
                    Main.npc[newNPC].ai[0] = (float) index1;
                    Main.npc[newNPC].ai[1] = (float) index2;
                    Main.npc[newNPC].netUpdate = true;
                  }
                  else
                  {
                    switch (Main.rand.Next(8))
                    {
                      case 0:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 231);
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-56);
                          break;
                        }
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-57);
                          break;
                        }
                        break;
                      case 1:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 232);
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-58);
                          break;
                        }
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-59);
                          break;
                        }
                        break;
                      case 2:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 233);
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-60);
                          break;
                        }
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-61);
                          break;
                        }
                        break;
                      case 3:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 234);
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-62);
                          break;
                        }
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-63);
                          break;
                        }
                        break;
                      case 4:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 235);
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-64);
                          break;
                        }
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-65);
                          break;
                        }
                        break;
                      default:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 42);
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-16);
                          break;
                        }
                        if (Main.rand.Next(4) == 0)
                        {
                          Main.npc[newNPC].SetDefaults(-17);
                          break;
                        }
                        break;
                    }
                  }
                }
                else if (tileType == 60 && Main.rand.Next(4) == 0)
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 51);
                else if (tileType == 60 && Main.rand.Next(8) == 0)
                {
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 56);
                  Main.npc[newNPC].ai[0] = (float) index1;
                  Main.npc[newNPC].ai[1] = (float) index2;
                  Main.npc[newNPC].netUpdate = true;
                }
                else if (Sandstorm.Happening && Main.player[index5].ZoneSandstorm && TileID.Sets.Conversion.Sand[tileType] && NPC.Spawning_SandstoneCheck(index1, index2))
                {
                  if (!NPC.downedBoss1 && !Main.hardMode)
                    newNPC = Main.rand.Next(2) != 0 ? (Main.rand.Next(2) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 69) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 61)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 546);
                  else if (Main.hardMode && Main.rand.Next(20) == 0 && !NPC.AnyNPCs(541))
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 541);
                  else if (Main.hardMode && !flag5 && Main.rand.Next(3) == 0 && NPC.CountNPCS(510) < 4)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, (index2 + 10) * 16, 510);
                  else if (Main.hardMode && !flag5 && Main.rand.Next(2) == 0)
                  {
                    int Type7 = 542;
                    if (TileID.Sets.Corrupt[tileType])
                      Type7 = 543;
                    if (TileID.Sets.Crimson[tileType])
                      Type7 = 544;
                    if (TileID.Sets.Hallow[tileType])
                      Type7 = 545;
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Type7);
                  }
                  else
                    newNPC = !Main.hardMode || tileType != 53 || Main.rand.Next(3) != 0 ? (!Main.hardMode || tileType != 112 || Main.rand.Next(3) != 0 ? (!Main.hardMode || tileType != 234 || Main.rand.Next(3) != 0 ? (!Main.hardMode || tileType != 116 || Main.rand.Next(3) != 0 ? (Main.rand.Next(2) != 0 ? (Main.rand.Next(2) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 581) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 580)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 546)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 80)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 630)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 79)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 78);
                }
                else if (Main.hardMode && tileType == 53 && Main.rand.Next(3) == 0)
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 78);
                else if (Main.hardMode && tileType == 112 && Main.rand.Next(2) == 0)
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 79);
                else if (Main.hardMode && tileType == 234 && Main.rand.Next(2) == 0)
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 630);
                else if (Main.hardMode && tileType == 116 && Main.rand.Next(2) == 0)
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 80);
                else if (((!Main.hardMode ? 0 : (!flag7 ? 1 : 0)) & (flag18 ? 1 : 0)) != 0 && (tileType == 116 || tileType == 117 || tileType == 109 || tileType == 164))
                {
                  if (((!NPC.downedPlantBoss ? 0 : (Main.remixWorld ? 1 : (Main.dayTime ? 0 : (Main.time < 16200.0 ? 1 : 0)))) & (flag21 ? 1 : 0)) != 0 && Main.player[index5].RollLuck(10) == 0 && !NPC.AnyNPCs(661))
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 661);
                  else if (flag25 && !NPC.AnyNPCs(244) && Main.rand.Next(12) == 0)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 244);
                  else
                    newNPC = Main.dayTime || Main.rand.Next(2) != 0 ? (Main.rand.Next(10) == 0 || Main.player[index5].ZoneWaterCandle && Main.rand.Next(10) == 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 86) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 75)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 122);
                }
                else if (((flag5 || !Main.hardMode || Main.rand.Next(50) != 0 ? 0 : (!flag7 ? 1 : 0)) & (flag22 ? 1 : 0)) != 0 && (tileType == 116 || tileType == 117 || tileType == 109 || tileType == 164))
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 84);
                else if (tileType == 204 && Main.player[index5].ZoneCrimson || tileType == 199 || tileType == 200 || tileType == 203 || tileType == 234 || tileType == 662)
                {
                  bool flag37 = (double) index2 >= Main.rockLayer;
                  if (Main.remixWorld)
                    flag37 = (double) index2 <= Main.rockLayer;
                  if (Main.hardMode & flag37 && Main.rand.Next(40) == 0 && !flag5)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 179);
                  else if (Main.hardMode & flag37 && Main.rand.Next(5) == 0 && !flag5)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 182);
                  else if (Main.hardMode & flag37 && Main.rand.Next(2) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 268);
                  else if (Main.hardMode && Main.rand.Next(3) == 0)
                  {
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 183);
                    if (Main.rand.Next(3) == 0)
                      Main.npc[newNPC].SetDefaults(-24);
                    else if (Main.rand.Next(3) == 0)
                      Main.npc[newNPC].SetDefaults(-25);
                  }
                  else if (Main.hardMode && (Main.rand.Next(2) == 0 || (double) index2 > Main.worldSurface && !Main.remixWorld))
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 174);
                  else if (Main.tile[index1, index2].wall > (ushort) 0 && Main.rand.Next(4) != 0 || Main.rand.Next(8) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 239);
                  else if (Main.rand.Next(2) == 0)
                  {
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 181);
                  }
                  else
                  {
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 173);
                    if (Main.rand.Next(3) == 0)
                      Main.npc[newNPC].SetDefaults(-22);
                    else if (Main.rand.Next(3) == 0)
                      Main.npc[newNPC].SetDefaults(-23);
                  }
                }
                else if (tileType == 22 && Main.player[index5].ZoneCorrupt || tileType == 23 || tileType == 25 || tileType == 112 || tileType == 163 || tileType == 661)
                {
                  bool flag38 = (double) index2 >= Main.rockLayer;
                  if (Main.remixWorld)
                    flag38 = (double) index2 <= Main.rockLayer;
                  if (Main.hardMode & flag38 && Main.rand.Next(40) == 0 && !flag5)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 83);
                  else if (Main.hardMode & flag38 && Main.rand.Next(3) == 0)
                  {
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 101);
                    Main.npc[newNPC].ai[0] = (float) index1;
                    Main.npc[newNPC].ai[1] = (float) index2;
                    Main.npc[newNPC].netUpdate = true;
                  }
                  else if (Main.hardMode && Main.rand.Next(3) == 0)
                    newNPC = Main.rand.Next(3) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 81) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 121);
                  else if (Main.hardMode && Main.rand.Next(2) == 0 | flag38)
                  {
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 94);
                  }
                  else
                  {
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 6);
                    if (Main.rand.Next(3) == 0)
                      Main.npc[newNPC].SetDefaults(-11);
                    else if (Main.rand.Next(3) == 0)
                      Main.npc[newNPC].SetDefaults(-12);
                  }
                }
                else if (flag21)
                {
                  bool flag39 = (double) Math.Abs(index1 - Main.maxTilesX / 2) / (double) (Main.maxTilesX / 2) > 0.33000001311302185;
                  if (flag39 && NPC.AnyDanger())
                    flag39 = false;
                  if (Main.player[index5].ZoneGraveyard && !flag7 && (num1 == 2 || num1 == 477) && Main.rand.Next(10) == 0)
                  {
                    if (Main.rand.Next(2) == 0)
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 606);
                    else
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 610);
                  }
                  else if (((!Main.player[index5].ZoneSnow ? 0 : (Main.hardMode ? 1 : 0)) & (flag25 ? 1 : 0)) != 0 && !NPC.AnyNPCs(243) && Main.player[index5].RollLuck(20) == 0)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 243);
                  else if (((Main.player[index5].ZoneSnow ? 0 : (Main.hardMode ? 1 : 0)) & (flag25 ? 1 : 0)) != 0 && NPC.CountNPCS(250) < 2 && Main.rand.Next(10) == 0)
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 250);
                  else if (flag39 && Main.hardMode && NPC.downedGolemBoss && (!NPC.downedMartians && Main.rand.Next(100) == 0 || Main.rand.Next(400) == 0) && !NPC.AnyNPCs(399))
                    NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 399);
                  else if (!Main.player[index5].ZoneGraveyard && Main.dayTime)
                  {
                    int num52 = Math.Abs(index1 - Main.spawnTileX);
                    if (!flag7 && num52 < Main.maxTilesX / 2 && Main.rand.Next(15) == 0 && (tileType == 2 || tileType == 477 || tileType == 109 || tileType == 492 || tileType == 147 || tileType == 161))
                    {
                      if (tileType == 147 || tileType == 161)
                      {
                        if (Main.rand.Next(2) == 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 148);
                        else
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 149);
                      }
                      else if (((windyForButterflies || Main.raining || !Main.dayTime ? 0 : (Main.rand.Next(NPC.stinkBugChance) == 0 ? 1 : 0)) & (flag21 ? 1 : 0)) != 0)
                      {
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 669);
                        if (Main.rand.Next(4) == 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 - 16, index2 * 16, 669);
                        if (Main.rand.Next(4) == 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 + 16, index2 * 16, 669);
                      }
                      else if (((windyForButterflies || Main.raining || !Main.dayTime ? 0 : (Main.rand.Next(NPC.butterflyChance) == 0 ? 1 : 0)) & (flag21 ? 1 : 0)) != 0)
                      {
                        if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 444);
                        else
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 356);
                        if (Main.rand.Next(4) == 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 - 16, index2 * 16, 356);
                        if (Main.rand.Next(4) == 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 + 16, index2 * 16, 356);
                      }
                      else if (((!windyForButterflies || Main.raining || !Main.dayTime ? 0 : (Main.rand.Next(NPC.butterflyChance / 2) == 0 ? 1 : 0)) & (flag21 ? 1 : 0)) != 0)
                      {
                        if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 605);
                        else
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 604);
                        if (Main.rand.Next(3) != 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 604);
                        if (Main.rand.Next(2) == 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 604);
                        if (Main.rand.Next(3) == 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 604);
                        if (Main.rand.Next(4) == 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 604);
                      }
                      else if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 443);
                      else if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0 && (double) index2 <= Main.worldSurface)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 539);
                      else if (Main.halloween && Main.rand.Next(3) != 0)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 303);
                      else if (Main.xMas && Main.rand.Next(3) != 0)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 337);
                      else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) != 0)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 540);
                      else if (Main.rand.Next(3) == 0 && (double) index2 <= Main.worldSurface)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, (int) Utils.SelectRandom<short>(Main.rand, (short) 299, (short) 538));
                      else
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 46);
                    }
                    else if (!flag7 && index1 > WorldGen.beachDistance && index1 < Main.maxTilesX - WorldGen.beachDistance && Main.rand.Next(12) == 0 && tileType == 53)
                    {
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(366, 368));
                    }
                    else
                    {
                      int cattailX;
                      int cattailY;
                      if ((tileType == 2 || tileType == 477 || tileType == 53) && !windyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(3) != 0 && ((double) index2 <= Main.worldSurface || Main.remixWorld) && NPC.FindCattailTop(index1, index2, out cattailX, out cattailY))
                      {
                        if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8, cattailY * 16, 601);
                        else
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8, cattailY * 16, NPC.RollDragonflyType(tileType));
                        if (Main.rand.Next(3) == 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8 - 16, cattailY * 16, NPC.RollDragonflyType(tileType));
                        if (Main.rand.Next(3) == 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), cattailX * 16 + 8 + 16, cattailY * 16, NPC.RollDragonflyType(tileType));
                      }
                      else if (!flag7 && num52 < Main.maxTilesX / 3 && Main.dayTime && Main.time < 18000.0 && (tileType == 2 || tileType == 477 || tileType == 109 || tileType == 492) && Main.rand.Next(4) == 0 && (double) index2 <= Main.worldSurface && NPC.CountNPCS(74) + NPC.CountNPCS(297) + NPC.CountNPCS(298) < 6)
                      {
                        int num53 = Main.rand.Next(4);
                        if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                        {
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 442);
                        }
                        else
                        {
                          switch (num53)
                          {
                            case 0:
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 297);
                              break;
                            case 1:
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 298);
                              break;
                            default:
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 74);
                              break;
                          }
                        }
                      }
                      else if (!flag7 && num52 < Main.maxTilesX / 3 && Main.rand.Next(15) == 0 && (tileType == 2 || tileType == 477 || tileType == 109 || tileType == 492 || tileType == 147))
                      {
                        int num54 = Main.rand.Next(4);
                        if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                        {
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 442);
                        }
                        else
                        {
                          switch (num54)
                          {
                            case 0:
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 297);
                              break;
                            case 1:
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 298);
                              break;
                            default:
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 74);
                              break;
                          }
                        }
                      }
                      else if (!flag7 && num52 > Main.maxTilesX / 3 && tileType == 2 && Main.rand.Next(300) == 0 && !NPC.AnyNPCs(50))
                        NPC.SpawnOnPlayer(index5, 50);
                      else if (!flag16 && tileType == 53 && (index1 < WorldGen.beachDistance || index1 > Main.maxTilesX - WorldGen.beachDistance))
                      {
                        if (!flag7 && Main.rand.Next(10) == 0)
                          NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 602);
                        else if (flag7)
                        {
                          int num55 = -1;
                          int num56 = -1;
                          if ((double) index2 < Main.worldSurface && index2 > 50)
                          {
                            for (int j = index2 - 1; j > index2 - 50; --j)
                            {
                              if (Main.tile[index1, j].liquid == (byte) 0 && !WorldGen.SolidTile(index1, j) && !WorldGen.SolidTile(index1, j + 1) && !WorldGen.SolidTile(index1, j + 2))
                              {
                                num55 = j + 2;
                                if (!WorldGen.SolidTile(index1, num55 + 1) && !WorldGen.SolidTile(index1, num55 + 2))
                                {
                                  num56 = num55 + 2;
                                  break;
                                }
                                break;
                              }
                            }
                            if (num55 > index2)
                              num55 = index2;
                            if (num56 > index2)
                              num56 = index2;
                          }
                          if (Main.rand.Next(10) == 0)
                          {
                            int num57 = Main.rand.Next(3);
                            if (num57 == 0 && num55 > 0)
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num55 * 16, 625);
                            else if (num57 == 1 && num56 > 0)
                              NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num56 * 16, 615);
                            else if (num57 == 2)
                            {
                              int num58 = index2;
                              if (num56 > 0)
                                num58 = num56;
                              if (Main.player[index5].RollLuck(NPC.goldCritterChance) == 0)
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num58 * 16, 627);
                              else
                                NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, num58 * 16, 626);
                            }
                          }
                        }
                      }
                      else if (!flag7 && tileType == 53 && Main.rand.Next(5) == 0 && NPC.Spawning_SandstoneCheck(index1, index2) && !flag7)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 69);
                      else if (tileType == 53 && !flag7)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 61);
                      else if (!flag7 && (num52 > Main.maxTilesX / 3 || Main.remixWorld) && (Main.rand.Next(15) == 0 || !NPC.downedGoblins && WorldGen.shadowOrbSmashed && Main.rand.Next(7) == 0))
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 73);
                      else if (Main.raining && Main.rand.Next(4) == 0)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 224);
                      else if (!flag7 && Main.raining && Main.rand.Next(2) == 0)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 225);
                      else if (((flag7 ? 0 : (num24 == 0 ? 1 : 0)) & (itAhappyWindyDay ? 1 : 0) & (flag20 ? 1 : 0)) != 0 && Main.rand.Next(3) != 0)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 594);
                      else if (((flag7 || num24 != 0 ? 0 : (num1 == 2 ? 1 : (num1 == 477 ? 1 : 0))) & (itAhappyWindyDay ? 1 : 0) & (flag20 ? 1 : 0)) != 0 && Main.rand.Next(10) != 0)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 628);
                      else if (!flag7)
                      {
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 1);
                        switch (tileType)
                        {
                          case 60:
                            Main.npc[newNPC].SetDefaults(-10);
                            break;
                          case 147:
                          case 161:
                            Main.npc[newNPC].SetDefaults(147);
                            break;
                          default:
                            if (Main.halloween && Main.rand.Next(3) != 0)
                            {
                              Main.npc[newNPC].SetDefaults(302);
                              break;
                            }
                            if (Main.xMas && Main.rand.Next(3) != 0)
                            {
                              Main.npc[newNPC].SetDefaults(Main.rand.Next(333, 337));
                              break;
                            }
                            if (Main.rand.Next(3) == 0 || num52 < 200 && !Main.expertMode)
                            {
                              Main.npc[newNPC].SetDefaults(-3);
                              break;
                            }
                            if (Main.rand.Next(10) == 0 && (num52 > 400 || Main.expertMode))
                            {
                              Main.npc[newNPC].SetDefaults(-7);
                              break;
                            }
                            break;
                        }
                      }
                    }
                  }
                  else
                  {
                    if (!Main.player[index5].ZoneGraveyard && !windyForButterflies && (tileType == 2 || tileType == 477 || tileType == 109 || tileType == 492) && !Main.raining && Main.rand.Next(NPC.fireFlyChance) == 0 && (double) index2 <= Main.worldSurface)
                    {
                      int Type8 = 355;
                      if (tileType == 109)
                        Type8 = 358;
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Type8);
                      if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 - 16, index2 * 16, Type8);
                      if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8 + 16, index2 * 16, Type8);
                      if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16 - 16, Type8);
                      if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
                        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16 + 16, Type8);
                    }
                    else if ((Main.halloween || Main.player[index5].ZoneGraveyard) && Main.rand.Next(12) == 0)
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 301);
                    else if (Main.player[index5].ZoneGraveyard && Main.rand.Next(30) == 0)
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 316);
                    else if (Main.player[index5].ZoneGraveyard && Main.hardMode && (double) index2 <= Main.worldSurface && Main.rand.Next(10) == 0)
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 304);
                    else if (Main.rand.Next(6) == 0 || Main.moonPhase == 4 && Main.rand.Next(2) == 0)
                    {
                      if (Main.hardMode && Main.rand.Next(3) == 0)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 133);
                      else if (Main.halloween && Main.rand.Next(2) == 0)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(317, 319));
                      else if (Main.rand.Next(2) == 0)
                      {
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 2);
                        if (Main.rand.Next(4) == 0)
                          Main.npc[newNPC].SetDefaults(-43);
                      }
                      else
                      {
                        switch (Main.rand.Next(5))
                        {
                          case 0:
                            newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 190);
                            if (Main.rand.Next(3) == 0)
                            {
                              Main.npc[newNPC].SetDefaults(-38);
                              break;
                            }
                            break;
                          case 1:
                            newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 191);
                            if (Main.rand.Next(3) == 0)
                            {
                              Main.npc[newNPC].SetDefaults(-39);
                              break;
                            }
                            break;
                          case 2:
                            newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 192);
                            if (Main.rand.Next(3) == 0)
                            {
                              Main.npc[newNPC].SetDefaults(-40);
                              break;
                            }
                            break;
                          case 3:
                            newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 193);
                            if (Main.rand.Next(3) == 0)
                            {
                              Main.npc[newNPC].SetDefaults(-41);
                              break;
                            }
                            break;
                          case 4:
                            newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 194);
                            if (Main.rand.Next(3) == 0)
                            {
                              Main.npc[newNPC].SetDefaults(-42);
                              break;
                            }
                            break;
                        }
                      }
                    }
                    else if (Main.hardMode && Main.rand.Next(50) == 0 && Main.bloodMoon && !NPC.AnyNPCs(109))
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 109);
                    else if (Main.rand.Next(250) == 0 && (Main.bloodMoon || Main.player[index5].ZoneGraveyard))
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 53);
                    else if (Main.rand.Next(250) == 0 && (Main.bloodMoon || Main.player[index5].ZoneGraveyard))
                      NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 536);
                    else if (!Main.dayTime && Main.moonPhase == 0 && Main.hardMode && Main.rand.Next(3) != 0)
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 104);
                    else if (!Main.dayTime && Main.hardMode && Main.rand.Next(3) == 0)
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 140);
                    else if (Main.bloodMoon && Main.rand.Next(5) < 2)
                      newNPC = Main.rand.Next(2) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 490) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 489);
                    else if (num1 == 147 || num1 == 161 || num1 == 163 || num1 == 164 || num1 == 162)
                      newNPC = Main.player[index5].ZoneGraveyard || !Main.hardMode || Main.rand.Next(4) != 0 ? (Main.player[index5].ZoneGraveyard || !Main.hardMode || Main.rand.Next(3) != 0 ? (!Main.expertMode || Main.rand.Next(2) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 161) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 431)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 155)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 169);
                    else if (Main.raining && Main.rand.Next(2) == 0)
                    {
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 223);
                      if (Main.rand.Next(3) == 0)
                      {
                        if (Main.rand.Next(2) == 0)
                          Main.npc[newNPC].SetDefaults(-54);
                        else
                          Main.npc[newNPC].SetDefaults(-55);
                      }
                    }
                    else
                    {
                      int num59 = Main.rand.Next(7);
                      int maxValue6 = 12;
                      int maxValue7 = 20;
                      if (Main.player[index5].statLifeMax <= 100)
                      {
                        maxValue6 = 5 - Main.CurrentFrameFlags.ActivePlayersCount / 2;
                        if (maxValue6 < 2)
                          maxValue6 = 2;
                      }
                      if (Main.player[index5].ZoneGraveyard && Main.rand.Next(maxValue7) == 0)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 632);
                      else if (Main.rand.Next(maxValue6) == 0)
                        newNPC = !Main.expertMode || Main.rand.Next(2) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 590) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 591);
                      else if (Main.halloween && Main.rand.Next(2) == 0)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(319, 322));
                      else if (Main.xMas && Main.rand.Next(2) == 0)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(331, 333));
                      else if (num59 == 0 && Main.expertMode && Main.rand.Next(3) == 0)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 430);
                      else if (num59 == 2 && Main.expertMode && Main.rand.Next(3) == 0)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 432);
                      else if (num59 == 3 && Main.expertMode && Main.rand.Next(3) == 0)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 433);
                      else if (num59 == 4 && Main.expertMode && Main.rand.Next(3) == 0)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 434);
                      else if (num59 == 5 && Main.expertMode && Main.rand.Next(3) == 0)
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 435);
                      else if (num59 == 6 && Main.expertMode && Main.rand.Next(3) == 0)
                      {
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 436);
                      }
                      else
                      {
                        switch (num59)
                        {
                          case 0:
                            newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 3);
                            if (Main.rand.Next(3) == 0)
                            {
                              if (Main.rand.Next(2) == 0)
                              {
                                Main.npc[newNPC].SetDefaults(-26);
                                break;
                              }
                              Main.npc[newNPC].SetDefaults(-27);
                              break;
                            }
                            break;
                          case 1:
                            newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 132);
                            if (Main.rand.Next(3) == 0)
                            {
                              if (Main.rand.Next(2) == 0)
                              {
                                Main.npc[newNPC].SetDefaults(-28);
                                break;
                              }
                              Main.npc[newNPC].SetDefaults(-29);
                              break;
                            }
                            break;
                          case 2:
                            newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 186);
                            if (Main.rand.Next(3) == 0)
                            {
                              if (Main.rand.Next(2) == 0)
                              {
                                Main.npc[newNPC].SetDefaults(-30);
                                break;
                              }
                              Main.npc[newNPC].SetDefaults(-31);
                              break;
                            }
                            break;
                          case 3:
                            newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 187);
                            if (Main.rand.Next(3) == 0)
                            {
                              if (Main.rand.Next(2) == 0)
                              {
                                Main.npc[newNPC].SetDefaults(-32);
                                break;
                              }
                              Main.npc[newNPC].SetDefaults(-33);
                              break;
                            }
                            break;
                          case 4:
                            newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 188);
                            if (Main.rand.Next(3) == 0)
                            {
                              if (Main.rand.Next(2) == 0)
                              {
                                Main.npc[newNPC].SetDefaults(-34);
                                break;
                              }
                              Main.npc[newNPC].SetDefaults(-35);
                              break;
                            }
                            break;
                          case 5:
                            newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 189);
                            if (Main.rand.Next(3) == 0)
                            {
                              if (Main.rand.Next(2) == 0)
                              {
                                Main.npc[newNPC].SetDefaults(-36);
                                break;
                              }
                              Main.npc[newNPC].SetDefaults(-37);
                              break;
                            }
                            break;
                          case 6:
                            newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 200);
                            if (Main.rand.Next(3) == 0)
                            {
                              if (Main.rand.Next(2) == 0)
                              {
                                Main.npc[newNPC].SetDefaults(-44);
                                break;
                              }
                              Main.npc[newNPC].SetDefaults(-45);
                              break;
                            }
                            break;
                        }
                      }
                    }
                    if (Main.player[index5].ZoneGraveyard)
                      Main.npc[newNPC].target = index5;
                  }
                }
                else if (flag18)
                {
                  if (!flag5 && Main.rand.Next(50) == 0 && !Main.player[index5].ZoneSnow)
                    newNPC = !Main.hardMode ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 10, 1) : (Main.rand.Next(3) == 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 10, 1) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 95, 1));
                  else if (Main.hardMode && Main.rand.Next(3) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 140);
                  else if (Main.hardMode && Main.rand.Next(4) != 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 141);
                  else if (Main.remixWorld)
                  {
                    if (num1 == 147 || num1 == 161 || num1 == 163 || num1 == 164 || num1 == 162 || Main.player[index5].ZoneSnow)
                    {
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 147);
                    }
                    else
                    {
                      newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 1);
                      if (Main.rand.Next(3) == 0)
                        Main.npc[newNPC].SetDefaults(-9);
                      else
                        Main.npc[newNPC].SetDefaults(-8);
                    }
                  }
                  else if (tileType == 147 || tileType == 161 || Main.player[index5].ZoneSnow)
                  {
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 147);
                  }
                  else
                  {
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 1);
                    if (Main.rand.Next(5) == 0)
                      Main.npc[newNPC].SetDefaults(-9);
                    else if (Main.rand.Next(2) == 0)
                      Main.npc[newNPC].SetDefaults(1);
                    else
                      Main.npc[newNPC].SetDefaults(-8);
                  }
                }
                else if (index2 > Main.maxTilesY - 190)
                  newNPC = !Main.remixWorld || (double) index1 <= (double) Main.maxTilesX * 0.38 + 50.0 || (double) index1 >= (double) Main.maxTilesX * 0.62 ? (!Main.hardMode || NPC.savedTaxCollector || Main.rand.Next(20) != 0 || NPC.AnyNPCs(534) ? (Main.rand.Next(8) != 0 ? (Main.rand.Next(40) != 0 || NPC.AnyNPCs(39) ? (Main.rand.Next(14) != 0 ? (Main.rand.Next(7) != 0 ? (Main.rand.Next(3) != 0 ? (!Main.hardMode || !NPC.downedMechBossAny || Main.rand.Next(5) == 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 60) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 151)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 59)) : (Main.rand.Next(10) != 0 ? (!Main.hardMode || !NPC.downedMechBossAny || Main.rand.Next(5) == 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 62) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 156)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 66))) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 24)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 39, 1)) : NPC.SpawnNPC_SpawnLavaBaitCritters(index1, index2)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 534)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 59);
                else if (NPC.SpawnNPC_CheckToSpawnRockGolem(index1, index2, index5, tileType))
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 631);
                else if (Main.rand.Next(60) == 0)
                  newNPC = !Main.player[index5].ZoneSnow ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 217) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 218);
                else if ((tileType == 116 || tileType == 117 || tileType == 164) && Main.hardMode && !flag5 && Main.rand.Next(8) == 0)
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 120);
                else if ((num1 == 147 || num1 == 161 || num1 == 162 || num1 == 163 || num1 == 164 || num1 == 200) && !flag5 && Main.hardMode && Main.player[index5].ZoneCorrupt && Main.rand.Next(30) == 0)
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 170);
                else if ((num1 == 147 || num1 == 161 || num1 == 162 || num1 == 163 || num1 == 164 || num1 == 200) && !flag5 && Main.hardMode && Main.player[index5].ZoneHallow && Main.rand.Next(30) == 0)
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 171);
                else if ((num1 == 147 || num1 == 161 || num1 == 162 || num1 == 163 || num1 == 164 || num1 == 200) && !flag5 && Main.hardMode && Main.player[index5].ZoneCrimson && Main.rand.Next(30) == 0)
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 180);
                else if (Main.hardMode && Main.player[index5].ZoneSnow && Main.rand.Next(10) == 0)
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 154);
                else if (!flag5 && Main.rand.Next(100) == 0 && !Main.player[index5].ZoneHallow)
                  newNPC = !Main.hardMode ? (!Main.player[index5].ZoneSnow ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 10, 1) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 185)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 95, 1);
                else if (Main.player[index5].ZoneSnow && Main.rand.Next(20) == 0)
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 185);
                else if (!Main.hardMode && Main.rand.Next(10) == 0 || Main.hardMode && Main.rand.Next(20) == 0)
                {
                  if (Main.player[index5].ZoneSnow)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 184);
                  else if (Main.rand.Next(3) == 0)
                  {
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 1);
                    Main.npc[newNPC].SetDefaults(-6);
                  }
                  else
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 16);
                }
                else if (!Main.hardMode && Main.rand.Next(4) == 0)
                {
                  newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 1);
                  if (Main.player[index5].ZoneJungle)
                    Main.npc[newNPC].SetDefaults(-10);
                  else if (Main.player[index5].ZoneSnow)
                    Main.npc[newNPC].SetDefaults(184);
                  else
                    Main.npc[newNPC].SetDefaults(-6);
                }
                else if (Main.rand.Next(2) == 0)
                {
                  if (Main.rand.Next(35) == 0 && NPC.CountNPCS(453) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 453);
                  else if (Main.rand.Next(80) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 195);
                  else if (Main.hardMode && (Main.remixWorld || (double) index2 > (Main.rockLayer + (double) Main.maxTilesY) / 2.0) && Main.rand.Next(200) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 172);
                  else if ((Main.remixWorld || (double) index2 > (Main.rockLayer + (double) Main.maxTilesY) / 2.0) && (Main.rand.Next(200) == 0 || Main.rand.Next(50) == 0 && (Main.player[index5].armor[1].type == 4256 || Main.player[index5].armor[1].type >= 1282 && Main.player[index5].armor[1].type <= 1287) && Main.player[index5].armor[0].type != 238))
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 45);
                  else if (flag10 && Main.rand.Next(4) != 0)
                    newNPC = Main.rand.Next(6) == 0 || NPC.AnyNPCs(480) || !Main.hardMode ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 481) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 480);
                  else if (flag9 && Main.rand.Next(5) != 0)
                    newNPC = Main.rand.Next(6) == 0 || NPC.AnyNPCs(483) ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 482) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 483);
                  else if (Main.hardMode && Main.rand.Next(10) != 0)
                  {
                    if (Main.rand.Next(2) == 0)
                    {
                      if (Main.player[index5].ZoneSnow)
                      {
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 197);
                      }
                      else
                      {
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 77);
                        if ((Main.remixWorld || (double) index2 > (Main.rockLayer + (double) Main.maxTilesY) / 2.0) && Main.rand.Next(5) == 0)
                          Main.npc[newNPC].SetDefaults(-15);
                      }
                    }
                    else
                      newNPC = !Main.player[index5].ZoneSnow ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 110) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 206);
                  }
                  else if (!flag5 && (Main.halloween || Main.player[index5].ZoneGraveyard) && Main.rand.Next(30) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 316);
                  else if (Main.rand.Next(20) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 44);
                  else if (num1 == 147 || num1 == 161 || num1 == 162)
                    newNPC = Main.rand.Next(15) != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 167) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 185);
                  else if (Main.player[index5].ZoneSnow)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 185);
                  else if (Main.rand.Next(3) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, NPC.cavernMonsterType[Main.rand.Next(2), Main.rand.Next(3)]);
                  else if (Main.player[index5].ZoneGlowshroom && (num1 == 70 || num1 == 190))
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 635);
                  else if (Main.halloween && Main.rand.Next(2) == 0)
                    newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, Main.rand.Next(322, 325));
                  else if (Main.expertMode && Main.rand.Next(3) == 0)
                  {
                    int num60 = Main.rand.Next(4);
                    newNPC = num60 != 0 ? (num60 != 0 ? (num60 != 0 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 452) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 451)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 450)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 449);
                  }
                  else
                  {
                    switch (Main.rand.Next(4))
                    {
                      case 0:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 21);
                        if (Main.rand.Next(3) == 0)
                        {
                          if (Main.rand.Next(2) == 0)
                          {
                            Main.npc[newNPC].SetDefaults(-47);
                            break;
                          }
                          Main.npc[newNPC].SetDefaults(-46);
                          break;
                        }
                        break;
                      case 1:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 201);
                        if (Main.rand.Next(3) == 0)
                        {
                          if (Main.rand.Next(2) == 0)
                          {
                            Main.npc[newNPC].SetDefaults(-49);
                            break;
                          }
                          Main.npc[newNPC].SetDefaults(-48);
                          break;
                        }
                        break;
                      case 2:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 202);
                        if (Main.rand.Next(3) == 0)
                        {
                          if (Main.rand.Next(2) == 0)
                          {
                            Main.npc[newNPC].SetDefaults(-51);
                            break;
                          }
                          Main.npc[newNPC].SetDefaults(-50);
                          break;
                        }
                        break;
                      case 3:
                        newNPC = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 203);
                        if (Main.rand.Next(3) == 0)
                        {
                          if (Main.rand.Next(2) == 0)
                          {
                            Main.npc[newNPC].SetDefaults(-53);
                            break;
                          }
                          Main.npc[newNPC].SetDefaults(-52);
                          break;
                        }
                        break;
                    }
                  }
                }
                else
                  newNPC = !Main.hardMode || !(Main.player[index5].ZoneHallow & Main.rand.Next(2) == 0) ? (!Main.player[index5].ZoneJungle ? (!Main.player[index5].ZoneGlowshroom || num1 != 70 && num1 != 190 ? (!Main.hardMode || !Main.player[index5].ZoneHallow ? (!Main.hardMode || Main.rand.Next(6) <= 0 ? (num1 == 147 || num1 == 161 || num1 == 162 ? (!Main.hardMode ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 150) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 169)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 49)) : (Main.rand.Next(3) != 0 || num1 != 147 && num1 != 161 && num1 != 162 ? NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 93) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 150))) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 137)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 634)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 51)) : NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index1 * 16 + 8, index2 * 16, 138);
                if (Main.npc[newNPC].type == 1 && Main.player[index5].RollLuck(180) == 0)
                  Main.npc[newNPC].SetDefaults(-4);
                if (Main.tenthAnniversaryWorld && Main.npc[newNPC].type == 1 && Main.player[index5].RollLuck(180) == 0)
                  Main.npc[newNPC].SetDefaults(667);
                if (Main.netMode != 2 || newNPC >= 200)
                  break;
                NetMessage.SendData(23, number: newNPC);
                break;
              }
            }
          }
        }
      }
    }

    public static void SpawnNPC_SpawnFrog(int spawnTileX, int spawnTileY, int plr)
    {
      if ((NPC.unlockedSlimeYellowSpawn || Main.player[plr].RollLuck(30) != 0 ? 0 : (!NPC.AnyNPCs(687) ? 1 : 0)) != 0)
        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16, 687);
      else if (Main.player[plr].RollLuck(NPC.goldCritterChance) == 0)
        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16, 445);
      else
        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16, 361);
    }

    public static int SpawnNPC_GetGemBunnyToSpawn()
    {
      int num = Main.rand.Next(100);
      return num >= 5 ? (num >= 13 ? (num >= 23 ? (num >= 35 ? (num >= 51 ? (num >= 72 ? 646 : 647) : 648) : 649) : 650) : 652) : 651;
    }

    public static int SpawnNPC_GetGemSquirrelToSpawn()
    {
      int num = Main.rand.Next(100);
      return num >= 5 ? (num >= 13 ? (num >= 23 ? (num >= 35 ? (num >= 51 ? (num >= 72 ? 639 : 640) : 641) : 642) : 643) : 645) : 644;
    }

    private static bool SpawnNPC_CheckToSpawnRockGolem(
      int spawnTileX,
      int spawnTileY,
      int plr,
      int tileType)
    {
      return Main.hardMode && (tileType == 1 || TileID.Sets.Conversion.Moss[tileType]) && !Main.player[plr].ZoneSnow && Main.rand.Next(60) == 0 && !WorldGen.SolidTile(spawnTileX - 1, spawnTileY - 4) && !WorldGen.SolidTile(spawnTileX, spawnTileY - 4) && !WorldGen.SolidTile(spawnTileX + 1, spawnTileY - 4);
    }

    private static bool SpawnNPC_CheckToSpawnUndergroundFairy(
      int spawnTileX,
      int spawnTileY,
      int plr)
    {
      if (!NPC.fairyLog)
        return false;
      int range = 500;
      if (Main.tenthAnniversaryWorld && !Main.getGoodWorld)
        range = 250;
      if (Main.hardMode)
        range = (int) ((double) range * 1.6599999666213989);
      return Main.player[plr].RollLuck(range) == 0 && (double) spawnTileY >= (Main.worldSurface + Main.rockLayer) / 2.0 && spawnTileY < Main.maxTilesY - 300 && !NPC.AnyHelpfulFairies();
    }

    private static int SpawnNPC_SpawnLavaBaitCritters(int spawnTileX, int spawnTileY)
    {
      if (Main.rand.Next(3) == 0)
        return NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16, 655);
      if (Main.dayTime)
        return NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16, 653);
      if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8 - 16, spawnTileY * 16, 654);
      if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8 + 16, spawnTileY * 16, 654);
      if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16 - 16, 654);
      if (Main.rand.Next(NPC.fireFlyMultiple) == 0)
        NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16 + 16, 654);
      return NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), spawnTileX * 16 + 8, spawnTileY * 16, 654);
    }

    private static int SpawnNPC_TryFindingProperGroundTileType(int spawnTileType, int x, int y)
    {
      if (!NPC.IsValidSpawningGroundTile(x, y))
      {
        for (int y1 = y + 1; y1 < y + 30; ++y1)
        {
          if (NPC.IsValidSpawningGroundTile(x, y1))
            return (int) Main.tile[x, y1].type;
        }
      }
      return spawnTileType;
    }

    public static bool IsValidSpawningGroundTile(int x, int y)
    {
      Tile tile = Main.tile[x, y];
      return tile.nactive() && Main.tileSolid[(int) tile.type] && !Main.tileSolidTop[(int) tile.type] && !TileID.Sets.IsSkippedForNPCSpawningGroundTypeCheck[(int) tile.type];
    }

    public static bool FindCattailTop(int landX, int landY, out int cattailX, out int cattailY)
    {
      cattailX = landX;
      cattailY = landY;
      if (!WorldGen.InWorld(landX, landY, 31))
        return false;
      int maxValue = 1;
      for (int index1 = landX - 30; index1 <= landX + 30; ++index1)
      {
        for (int index2 = landY - 20; index2 <= landY + 20; ++index2)
        {
          Tile tile = Main.tile[index1, index2];
          if (tile != null && tile.active() && tile.type == (ushort) 519 && tile.frameX >= (short) 180 && Main.rand.Next(maxValue) == 0)
          {
            cattailX = index1;
            cattailY = index2;
            ++maxValue;
          }
        }
      }
      return cattailX != landX || cattailY != landY;
    }

    public static bool FindTreeBranch(
      int landX,
      int landY,
      out int treeBranchX,
      out int treeBranchY)
    {
      treeBranchX = landX;
      treeBranchY = landY;
      if (!WorldGen.InWorld(landX, landY, 11))
        return false;
      int maxValue = 1;
      for (int index1 = landX - 10; index1 <= landX + 10; ++index1)
      {
        for (int index2 = landY - 30; index2 <= landY + 30; ++index2)
        {
          Tile tile = Main.tile[index1, index2];
          if (tile != null && tile.active() && TileID.Sets.IsATreeTrunk[(int) tile.type])
          {
            int num1 = (int) tile.frameX / 22;
            int num2 = (int) tile.frameY / 66;
            if ((num1 == 3 && num2 == 0 || num1 == 3 && num2 == 3 || num1 == 4 && num2 == 1 || num1 == 4 && num2 == 3 || num1 == 2 && num2 == 3) && Main.rand.Next(maxValue) == 0)
            {
              treeBranchX = index1;
              treeBranchY = index2;
              ++maxValue;
            }
          }
        }
      }
      return treeBranchX != landX || treeBranchY != landY;
    }

    public static bool AnyDanger(bool quickBossNPCCheck = false, bool ignorePillarsAndMoonlordCountdown = false)
    {
      bool flag = false;
      if (!ignorePillarsAndMoonlordCountdown && NPC.MoonLordCountdown > 0)
        flag = true;
      if (Main.invasionType > 0)
        flag = true;
      if (Main.snowMoon || Main.pumpkinMoon || DD2Event.Ongoing)
        flag = true;
      if (!flag)
      {
        if (quickBossNPCCheck)
        {
          flag |= Main.CurrentFrameFlags.AnyActiveBossNPC;
        }
        else
        {
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].active && (Main.npc[index].boss || NPCID.Sets.DangerThatPreventsOtherDangers[Main.npc[index].type]))
            {
              if (ignorePillarsAndMoonlordCountdown)
              {
                switch (Main.npc[index].type)
                {
                  case 422:
                  case 493:
                  case 507:
                  case 517:
                    continue;
                }
              }
              flag = true;
            }
          }
        }
      }
      return flag;
    }

    public static bool AnyoneNearCultists()
    {
      int firstNpc = NPC.FindFirstNPC(437);
      if (firstNpc == -1)
        return false;
      Microsoft.Xna.Framework.Rectangle rectangle = Utils.CenteredRectangle(Main.npc[firstNpc].Center, new Vector2(2500f, 1500f));
      Microsoft.Xna.Framework.Rectangle r = new Microsoft.Xna.Framework.Rectangle(0, 0, 2500, 1500);
      Vector2 vector2 = r.Size() / 2f;
      for (int index = 0; index < (int) byte.MaxValue; ++index)
      {
        if (Main.player[index].active)
        {
          r.X = (int) Main.player[index].Center.X - (int) vector2.X;
          r.Y = (int) Main.player[index].Center.Y - (int) vector2.Y;
          if (rectangle.Intersects(r))
            return true;
        }
      }
      return false;
    }

    public static void SpawnWOF(Vector2 pos)
    {
      if ((double) pos.Y / 16.0 < (double) (Main.maxTilesY - 205) || Main.wofNPCIndex >= 0 || Main.netMode == 1 || NPC.AnyNPCs(113))
        return;
      int closest = (int) Player.FindClosest(pos, 16, 16);
      int num1 = 1;
      if ((double) pos.X / 16.0 > (double) (Main.maxTilesX / 2))
        num1 = -1;
      bool flag = false;
      int x = (int) pos.X;
      int targetPlayerIndex = 0;
      while (!flag)
      {
        flag = true;
        for (int index = 0; index < (int) byte.MaxValue; ++index)
        {
          if (Main.player[index].active && (double) Main.player[index].position.X > (double) (x - 1200) && (double) Main.player[index].position.X < (double) (x + 1200))
          {
            x -= num1 * 16;
            flag = false;
            targetPlayerIndex = index;
          }
        }
        if (x / 16 < 20 || x / 16 > Main.maxTilesX - 20)
          flag = true;
      }
      int y = (int) pos.Y;
      int index1 = x / 16;
      int num2 = y / 16;
      int num3 = 0;
      int num4 = 1000;
      if ((!WorldGen.InWorld(index1, num2, 2) || WorldGen.SolidTile(index1, num2) ? 0 : (Main.tile[index1, num2 - num3].liquid < (byte) 100 ? 1 : 0)) == 0)
      {
        while (true)
        {
          --num4;
          if (num4 > 0)
          {
            try
            {
              if (WorldGen.InWorld(index1, num2 - num3, 2) && !WorldGen.SolidTile(index1, num2 - num3) && Main.tile[index1, num2 - num3].liquid < (byte) 100)
              {
                num2 -= num3;
                break;
              }
              if (WorldGen.InWorld(index1, num2 + num3, 2) && !WorldGen.SolidTile(index1, num2 + num3) && Main.tile[index1, num2 + num3].liquid < (byte) 100)
              {
                num2 += num3;
                break;
              }
              ++num3;
            }
            catch
            {
              break;
            }
          }
          else
            break;
        }
      }
      int num5 = Main.UnderworldLayer + 10;
      int num6 = num5 + 70;
      if (num2 < num5)
        num2 = num5;
      if (num2 > num6)
        num2 = num6;
      int Y = num2 * 16;
      int index2 = NPC.NewNPC(NPC.GetBossSpawnSource(targetPlayerIndex), x, Y, 113);
      if (Main.netMode == 0)
      {
        Main.NewText(Language.GetTextValue("Announcement.HasAwoken", (object) Main.npc[index2].TypeName), (byte) 175, (byte) 75);
      }
      else
      {
        if (Main.netMode != 2)
          return;
        ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", (object) Main.npc[index2].GetTypeNetName()), new Color(175, 75, (int) byte.MaxValue));
      }
    }

    public static void SpawnSkeletron(int onWho)
    {
      bool flag1 = true;
      bool flag2 = false;
      Vector2 vector2 = Vector2.Zero;
      int num1 = 0;
      int num2 = 0;
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active && Main.npc[index].type == 35)
        {
          flag1 = false;
          break;
        }
      }
      for (int number = 0; number < 200; ++number)
      {
        if (Main.npc[number].active)
        {
          if (Main.npc[number].type == 37)
          {
            flag2 = true;
            Main.npc[number].ai[3] = 1f;
            vector2 = Main.npc[number].position;
            num1 = Main.npc[number].width;
            num2 = Main.npc[number].height;
            if (Main.netMode == 2)
              NetMessage.SendData(23, number: number);
          }
          else if (Main.npc[number].type == 54)
          {
            flag2 = true;
            vector2 = Main.npc[number].position;
            num1 = Main.npc[number].width;
            num2 = Main.npc[number].height;
          }
        }
      }
      if (!(flag1 & flag2))
        return;
      int index1 = NPC.NewNPC(NPC.GetBossSpawnSource(onWho), (int) vector2.X + num1 / 2, (int) vector2.Y + num2 / 2, 35);
      Main.npc[index1].netUpdate = true;
      string npcNameValue = Lang.GetNPCNameValue(35);
      if (Main.netMode == 0)
      {
        Main.NewText(Language.GetTextValue("Announcement.HasAwoken", (object) npcNameValue), (byte) 175, (byte) 75);
      }
      else
      {
        if (Main.netMode != 2)
          return;
        ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", (object) Lang.GetNPCName(35).ToNetworkText()), new Color(175, 75, (int) byte.MaxValue));
      }
    }

    public static void SpawnFaelings(int plr)
    {
      if (NPC.AnyNPCs(677))
        return;
      int num1 = Main.rand.Next(2, 6);
      int minValue1 = (int) ((double) Main.player[plr].position.X / 16.0) - NPC.spawnRangeX * 2;
      int maxValue1 = (int) ((double) Main.player[plr].position.X / 16.0) + NPC.spawnRangeX * 2;
      int minValue2 = (int) ((double) Main.player[plr].position.Y / 16.0) - NPC.spawnRangeY * 2;
      int maxValue2 = (int) ((double) Main.player[plr].position.Y / 16.0) + NPC.spawnRangeY * 2;
      double num2 = (double) Main.player[plr].position.X / 16.0;
      int safeRangeX1 = NPC.safeRangeX;
      double num3 = (double) Main.player[plr].position.X / 16.0;
      int safeRangeX2 = NPC.safeRangeX;
      double num4 = (double) Main.player[plr].position.Y / 16.0;
      int safeRangeY1 = NPC.safeRangeY;
      double num5 = (double) Main.player[plr].position.Y / 16.0;
      int safeRangeY2 = NPC.safeRangeY;
      if (minValue1 < 0)
        minValue1 = 0;
      if (maxValue1 > Main.maxTilesX)
        maxValue1 = Main.maxTilesX;
      if (minValue2 < 0)
        minValue2 = 0;
      if (maxValue2 > Main.maxTilesY)
        maxValue2 = Main.maxTilesY;
      for (int index1 = 0; index1 < num1; ++index1)
      {
        int num6 = 1000;
        for (int index2 = 0; index2 < num6; ++index2)
        {
          int index3 = Main.rand.Next(minValue1, maxValue1);
          int index4 = Main.rand.Next(minValue2, maxValue2);
          if (Main.tile[index3, index4].liquid > (byte) 0 && Main.tile[index3, index4].shimmer())
          {
            for (; Main.tile[index3, index4].liquid > (byte) 0; --index4)
            {
              if (index4 < 50)
                return;
            }
            bool flag = true;
            Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle(index3 * 16, index4 * 16, 16, 16);
            for (int index5 = 0; index5 < (int) byte.MaxValue; ++index5)
            {
              if (Main.player[index5].active)
              {
                Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int) ((double) Main.player[index5].position.X + (double) (Main.player[index5].width / 2) - (double) (NPC.sWidth / 2) - (double) NPC.safeRangeX), (int) ((double) Main.player[index5].position.Y + (double) (Main.player[index5].height / 2) - (double) (NPC.sHeight / 2) - (double) NPC.safeRangeY), NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
                if (rectangle1.Intersects(rectangle2))
                  flag = false;
              }
            }
            if (flag)
            {
              int number = NPC.NewNPC(NPC.GetSpawnSourceForNaturalSpawn(), index3 * 16 + 8, index4 * 16, 677);
              if (Main.netMode == 2 && number < 200)
              {
                NetMessage.SendData(23, number: number);
                break;
              }
              break;
            }
          }
        }
      }
    }

    public static void SpawnOnPlayer(int plr, int Type)
    {
      if (Main.netMode == 1 || Type == 262 && NPC.AnyNPCs(262))
        return;
      switch (Type)
      {
        case 245:
          if (NPC.AnyNPCs(245))
            break;
          try
          {
            int num1 = (int) Main.player[plr].Center.X / 16;
            int num2 = (int) Main.player[plr].Center.Y / 16;
            int i = 0;
            int num3 = 0;
            for (int index1 = num1 - 20; index1 < num1 + 20; ++index1)
            {
              for (int index2 = num2 - 20; index2 < num2 + 20; ++index2)
              {
                if (Main.tile[index1, index2].active() && Main.tile[index1, index2].type == (ushort) 237 && Main.tile[index1, index2].frameX == (short) 18 && Main.tile[index1, index2].frameY == (short) 0)
                {
                  i = index1;
                  num3 = index2;
                }
              }
            }
            if (i <= 0 || num3 <= 0)
              break;
            int num4 = num3 - 15;
            int num5 = num3 - 15;
            for (int j = num3; j > num3 - 50; --j)
            {
              if (WorldGen.SolidTile(i, j))
              {
                num4 = j;
                break;
              }
            }
            for (int j = num3; j < num3 + 50; ++j)
            {
              if (WorldGen.SolidTile(i, j))
              {
                num5 = j;
                break;
              }
            }
            int num6 = (num4 + num4 + num5) / 3;
            int index = NPC.NewNPC(NPC.GetBossSpawnSource(plr), i * 16 + 8, num6 * 16, 245);
            Main.npc[index].target = plr;
            string typeName = Main.npc[index].TypeName;
            if (Main.netMode == 0)
            {
              Main.NewText(Language.GetTextValue("Announcement.HasAwoken", (object) typeName), (byte) 175, (byte) 75);
              break;
            }
            if (Main.netMode != 2)
              break;
            ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", (object) Main.npc[index].GetTypeNetName()), new Color(175, 75, (int) byte.MaxValue));
            break;
          }
          catch
          {
            break;
          }
        case 370:
          Player player1 = Main.player[plr];
          if (!player1.active || player1.dead)
            break;
          for (int index3 = 0; index3 < 1000; ++index3)
          {
            Projectile projectile = Main.projectile[index3];
            if (projectile.active && projectile.bobber && projectile.owner == plr)
            {
              int index4 = NPC.NewNPC(NPC.GetBossSpawnSource(plr), (int) projectile.Center.X, (int) projectile.Center.Y + 100, 370);
              string typeName = Main.npc[index4].TypeName;
              if (Main.netMode == 0)
              {
                Main.NewText(Language.GetTextValue("Announcement.HasAwoken", (object) typeName), (byte) 175, (byte) 75);
                break;
              }
              if (Main.netMode != 2)
                break;
              ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", (object) Main.npc[index4].GetTypeNetName()), new Color(175, 75, (int) byte.MaxValue));
              break;
            }
          }
          break;
        case 398:
          if (NPC.AnyNPCs(Type))
            break;
          Player player2 = Main.player[plr];
          NPC.NewNPC(NPC.GetBossSpawnSource(plr), (int) player2.Center.X, (int) player2.Center.Y - 150, Type);
          if (Main.netMode == 0)
          {
            Main.NewText(Language.GetTextValue("Announcement.HasAwoken", (object) Language.GetTextValue("Enemies.MoonLord")), (byte) 175, (byte) 75);
            break;
          }
          if (Main.netMode != 2)
            break;
          ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", (object) NetworkText.FromKey("Enemies.MoonLord")), new Color(175, 75, (int) byte.MaxValue));
          break;
        default:
          bool flag = false;
          int x = 0;
          int num7 = 0;
          int minValue1 = (int) ((double) Main.player[plr].position.X / 16.0) - NPC.spawnRangeX * 2;
          int maxValue1 = (int) ((double) Main.player[plr].position.X / 16.0) + NPC.spawnRangeX * 2;
          int minValue2 = (int) ((double) Main.player[plr].position.Y / 16.0) - NPC.spawnRangeY * 2;
          int maxValue2 = (int) ((double) Main.player[plr].position.Y / 16.0) + NPC.spawnRangeY * 2;
          int num8 = (int) ((double) Main.player[plr].position.X / 16.0) - NPC.safeRangeX;
          int num9 = (int) ((double) Main.player[plr].position.X / 16.0) + NPC.safeRangeX;
          int num10 = (int) ((double) Main.player[plr].position.Y / 16.0) - NPC.safeRangeY;
          int num11 = (int) ((double) Main.player[plr].position.Y / 16.0) + NPC.safeRangeY;
          if (minValue1 < 0)
            minValue1 = 0;
          if (maxValue1 > Main.maxTilesX)
            maxValue1 = Main.maxTilesX;
          if (minValue2 < 0)
            minValue2 = 0;
          if (maxValue2 > Main.maxTilesY)
            maxValue2 = Main.maxTilesY;
          for (int index5 = 0; index5 < 1000; ++index5)
          {
            for (int index6 = 0; index6 < 100; ++index6)
            {
              int index7 = Main.rand.Next(minValue1, maxValue1);
              int index8 = Main.rand.Next(minValue2, maxValue2);
              if (!Main.tile[index7, index8].nactive() || !Main.tileSolid[(int) Main.tile[index7, index8].type])
              {
                if ((!Main.wallHouse[(int) Main.tile[index7, index8].wall] || index5 >= 999) && (Type != 50 || index5 >= 500 || Main.tile[index8, index8].wall <= (ushort) 0))
                {
                  for (int index9 = index8; index9 < Main.maxTilesY; ++index9)
                  {
                    if (Main.tile[index7, index9].nactive() && Main.tileSolid[(int) Main.tile[index7, index9].type])
                    {
                      if ((index7 < num8 || index7 > num9 || index9 < num10 || index9 > num11 || index5 == 999) && (index7 >= minValue1 && index7 <= maxValue1 && index9 >= minValue2 && index9 <= maxValue2 || index5 == 999))
                      {
                        int type = (int) Main.tile[index7, index9].type;
                        x = index7;
                        num7 = index9;
                        flag = true;
                        break;
                      }
                      break;
                    }
                  }
                  if (flag && Type == 50 && index5 < 900)
                  {
                    int num12 = 20;
                    if (!Collision.CanHit(new Vector2((float) x, (float) (num7 - 1)) * 16f, 16, 16, new Vector2((float) x, (float) (num7 - 1 - num12)) * 16f, 16, 16) || !Collision.CanHit(new Vector2((float) x, (float) (num7 - 1 - num12)) * 16f, 16, 16, Main.player[plr].Center, 0, 0))
                    {
                      x = 0;
                      num7 = 0;
                      flag = false;
                    }
                  }
                  if (flag && index5 < 999)
                  {
                    int num13 = x - NPC.spawnSpaceX / 2;
                    int num14 = x + NPC.spawnSpaceX / 2;
                    int num15 = num7 - NPC.spawnSpaceY;
                    int num16 = num7;
                    if (num13 < 0)
                      flag = false;
                    if (num14 > Main.maxTilesX)
                      flag = false;
                    if (num15 < 0)
                      flag = false;
                    if (num16 > Main.maxTilesY)
                      flag = false;
                    if (flag)
                    {
                      for (int index10 = num13; index10 < num14; ++index10)
                      {
                        for (int index11 = num15; index11 < num16; ++index11)
                        {
                          if (Main.tile[index10, index11].nactive() && Main.tileSolid[(int) Main.tile[index10, index11].type])
                          {
                            flag = false;
                            break;
                          }
                        }
                      }
                    }
                  }
                }
                else
                  continue;
              }
              if (flag || flag)
                break;
            }
            if (flag && index5 < 999)
            {
              Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle(x * 16, num7 * 16, 16, 16);
              for (int index12 = 0; index12 < (int) byte.MaxValue; ++index12)
              {
                if (Main.player[index12].active)
                {
                  Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int) ((double) Main.player[index12].position.X + (double) (Main.player[index12].width / 2) - (double) (NPC.sWidth / 2) - (double) NPC.safeRangeX), (int) ((double) Main.player[index12].position.Y + (double) (Main.player[index12].height / 2) - (double) (NPC.sHeight / 2) - (double) NPC.safeRangeY), NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
                  if (rectangle1.Intersects(rectangle2))
                    flag = false;
                }
              }
            }
            if (flag)
              break;
          }
          if (!flag)
            break;
          NPC.SpawnBoss(x * 16 + 8, num7 * 16, Type, plr);
          break;
      }
    }

    public static int GetAvailableAmountOfNPCsToSpawnUpToSlot(
      int amountWeWant,
      int highestNPCSlotIndexWeWillPick = 100)
    {
      if (amountWeWant <= 0)
        return 0;
      int csToSpawnUpToSlot = 0;
      for (int index = 0; index < highestNPCSlotIndexWeWillPick; ++index)
      {
        if (!Main.npc[index].active)
        {
          ++csToSpawnUpToSlot;
          if (csToSpawnUpToSlot >= amountWeWant)
            return amountWeWant;
        }
      }
      return csToSpawnUpToSlot;
    }

    public static IEntitySource GetBossSpawnSource(int targetPlayerIndex) => (IEntitySource) new EntitySource_BossSpawn((Entity) Main.player[targetPlayerIndex]);

    public static void SpawnBoss(
      int spawnPositionX,
      int spawnPositionY,
      int Type,
      int targetPlayerIndex)
    {
      int number;
      if (Type == (int) sbyte.MaxValue && NPC.mechQueen != -1)
      {
        number = NPC.NewNPC(NPC.GetBossSpawnSource(targetPlayerIndex), spawnPositionX, spawnPositionY, Type, 100);
        NPC.mechQueen = number;
        Main.npc[NPC.mechQueen].ai[3] = (float) NPC.mechQueen;
      }
      else
        number = NPC.NewNPC(NPC.GetBossSpawnSource(targetPlayerIndex), spawnPositionX, spawnPositionY, Type, 1);
      if (number == 200)
        return;
      Main.npc[number].target = targetPlayerIndex;
      Main.npc[number].timeLeft *= 20;
      string typeName = Main.npc[number].TypeName;
      if (Main.netMode == 2 && number < 200)
        NetMessage.SendData(23, number: number);
      if (Type == 134 || Type == (int) sbyte.MaxValue || Type == 126 || Type == 125)
        AchievementsHelper.CheckMechaMayhem();
      if (Type == (int) sbyte.MaxValue && NPC.mechQueen == number)
      {
        if (Main.netMode == 0)
        {
          Main.NewText(Lang.misc[107].Value, (byte) 175, (byte) 75);
        }
        else
        {
          if (Main.netMode != 2)
            return;
          ChatHelper.BroadcastChatMessage(Lang.misc[107].ToNetworkText(), new Color(175, 75, (int) byte.MaxValue));
        }
      }
      else if (Type == 125)
      {
        if (Main.netMode == 0)
        {
          Main.NewText(Lang.misc[48].Value, (byte) 175, (byte) 75);
        }
        else
        {
          if (Main.netMode != 2)
            return;
          ChatHelper.BroadcastChatMessage(Lang.misc[48].ToNetworkText(), new Color(175, 75, (int) byte.MaxValue));
        }
      }
      else
      {
        if (Type == 316 || Type == 662 || Type == 82 || Type == 126 || Type == 50 || Type == 398 || Type == 551)
          return;
        if (Main.netMode == 0)
        {
          Main.NewText(Language.GetTextValue("Announcement.HasAwoken", (object) typeName), (byte) 175, (byte) 75);
        }
        else
        {
          if (Main.netMode != 2)
            return;
          ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", (object) Main.npc[number].GetTypeNetName()), new Color(175, 75, (int) byte.MaxValue));
        }
      }
    }

    public static int NewNPC(
      IEntitySource source,
      int X,
      int Y,
      int Type,
      int Start = 0,
      float ai0 = 0.0f,
      float ai1 = 0.0f,
      float ai2 = 0.0f,
      float ai3 = 0.0f,
      int Target = 255)
    {
      if (Main.getGoodWorld && Main.rand.Next(3) != 0)
      {
        if (Type == 46)
          Type = 614;
        if (Type == 62)
          Type = 66;
      }
      int availableNpcSlot = NPC.GetAvailableNPCSlot(Type, Start);
      if (availableNpcSlot < 0)
        return 200;
      Main.npc[availableNpcSlot] = new NPC();
      Main.npc[availableNpcSlot].SetDefaults(Type);
      Main.npc[availableNpcSlot].whoAmI = availableNpcSlot;
      NPC.GiveTownUniqueDataToNPCsThatNeedIt(Type, availableNpcSlot);
      Main.npc[availableNpcSlot].position.X = (float) (X - Main.npc[availableNpcSlot].width / 2);
      Main.npc[availableNpcSlot].position.Y = (float) (Y - Main.npc[availableNpcSlot].height);
      Main.npc[availableNpcSlot].active = true;
      Main.npc[availableNpcSlot].timeLeft = (int) ((double) NPC.activeTime * 1.25);
      Main.npc[availableNpcSlot].wet = Collision.WetCollision(Main.npc[availableNpcSlot].position, Main.npc[availableNpcSlot].width, Main.npc[availableNpcSlot].height);
      Main.npc[availableNpcSlot].ai[0] = ai0;
      Main.npc[availableNpcSlot].ai[1] = ai1;
      Main.npc[availableNpcSlot].ai[2] = ai2;
      Main.npc[availableNpcSlot].ai[3] = ai3;
      Main.npc[availableNpcSlot].target = Target;
      if (Type == 50)
      {
        switch (Main.netMode)
        {
          case 0:
            Main.NewText(Language.GetTextValue("Announcement.HasAwoken", (object) Main.npc[availableNpcSlot].TypeName), (byte) 175, (byte) 75);
            break;
          case 2:
            ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", (object) Main.npc[availableNpcSlot].GetTypeNetName()), new Color(175, 75, (int) byte.MaxValue));
            break;
        }
      }
      return availableNpcSlot;
    }

    private static int GetAvailableNPCSlot(int Type, int startIndex)
    {
      int num1 = Type == 222 ? 1 : (Type == 245 ? 1 : 0);
      int t2 = 200;
      int num2 = 1;
      if (num1 != 0)
      {
        --t2;
        Utils.Swap<int>(ref startIndex, ref t2);
        num2 = -1;
      }
      for (int availableNpcSlot = startIndex; availableNpcSlot != t2; availableNpcSlot += num2)
      {
        if (!Main.npc[availableNpcSlot].active)
          return availableNpcSlot;
      }
      for (int availableNpcSlot = startIndex; availableNpcSlot != t2; availableNpcSlot += num2)
      {
        if (Main.npc[availableNpcSlot].CanBeReplacedByOtherNPCs)
          return availableNpcSlot;
      }
      return -1;
    }

    private static void GiveTownUniqueDataToNPCsThatNeedIt(int Type, int nextNPC)
    {
      NPC npc = Main.npc[nextNPC];
      if (!npc.isLikeATownNPC)
        return;
      npc.GivenName = NPC.getNewNPCName(Type);
      ITownNPCProfile profile;
      if (TownNPCProfiles.Instance.GetProfile(Type, out profile))
      {
        npc.townNpcVariationIndex = profile.RollVariation();
        npc.GivenName = profile.GetNameForVariant(npc);
      }
      if (NPC.ShimmeredTownNPCs[Type])
        npc.townNpcVariationIndex = 1;
      npc.needsUniqueInfoUpdate = true;
    }

    public static void UnlockOrExchangePet(
      ref bool petBoughtFlag,
      int npcType,
      string textKeyForLicense,
      int netMessageData)
    {
      Color color = new Color(50, (int) byte.MaxValue, 130);
      if (Main.netMode == 1)
      {
        if (petBoughtFlag && !NPC.AnyNPCs(npcType))
          return;
        NetMessage.SendData(61, number: Main.myPlayer, number2: ((float) netMessageData));
      }
      else if (!petBoughtFlag)
      {
        petBoughtFlag = true;
        ChatHelper.BroadcastChatMessage(NetworkText.FromKey(textKeyForLicense), color);
        NetMessage.TrySendData(7);
      }
      else if (NPC.RerollVariationForNPCType(npcType))
        ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Misc.PetExchangeSuccess"), color);
      else
        ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Misc.PetExchangeFail"), color);
    }

    public static bool RerollVariationForNPCType(int npcType)
    {
      for (int index = 0; index < 200; ++index)
      {
        NPC npc = Main.npc[index];
        if (npc.active && npc.type == npcType)
          return npc.RerollVariation();
      }
      return false;
    }

    public bool RerollVariation()
    {
      ITownNPCProfile profile;
      if (!TownNPCProfiles.Instance.GetProfile(this.type, out profile))
        return false;
      int npcVariationIndex = this.townNpcVariationIndex;
      int num = 0;
      while (num++ < 100 && this.townNpcVariationIndex == npcVariationIndex)
        this.townNpcVariationIndex = profile.RollVariation();
      if (npcVariationIndex == this.townNpcVariationIndex)
        return false;
      this.GivenName = profile.GetNameForVariant(this);
      this.life = this.lifeMax;
      if (Main.netMode != 1)
        ParticleOrchestrator.BroadcastParticleSpawn(ParticleOrchestraType.PetExchange, new ParticleOrchestraSettings()
        {
          PositionInWorld = this.Center,
          MovementVector = this.velocity
        });
      NetMessage.TrySendData(56, number: this.whoAmI);
      return true;
    }

    public void TransformVisuals(int oldType, int newType)
    {
      this.position = this.position + this.netOffset;
      if (oldType == 158 && newType == 159 || oldType == 159 && newType == 158)
      {
        SoundEngine.PlaySound(SoundID.Item8, this.position);
        int index1 = Gore.NewGore(new Vector2(this.position.X, this.position.Y - 10f), this.velocity, 99, this.scale);
        Main.gore[index1].velocity *= 0.3f;
        int index2 = Gore.NewGore(new Vector2(this.position.X, (float) ((double) this.position.Y + (double) (this.height / 2) - 10.0)), this.velocity, 99, this.scale);
        Main.gore[index2].velocity *= 0.3f;
        int index3 = Gore.NewGore(new Vector2(this.position.X, (float) ((double) this.position.Y + (double) this.height - 10.0)), this.velocity, 99, this.scale);
        Main.gore[index3].velocity *= 0.3f;
      }
      else if (oldType == 478 && newType == 479)
      {
        for (int index4 = 0; index4 < 30; ++index4)
        {
          int index5 = Dust.NewDust(this.position, this.width, this.height, 238, SpeedY: -2f);
          if (Main.rand.Next(2) == 0)
            Main.dust[index5].noGravity = true;
        }
        Gore.NewGore(this.position, this.velocity, 684, this.scale);
        Gore.NewGore(this.position, this.velocity, 685, this.scale);
        Gore.NewGore(this.position, this.velocity, 686, this.scale);
        Gore.NewGore(this.position, this.velocity, 684 + Main.rand.Next(3), this.scale);
      }
      else if (oldType == 406 && newType == 405)
      {
        float num1 = (float) Main.rand.Next(10, 21);
        float num2 = 6.28318548f * Main.rand.NextFloat();
        Vector2 vector2_1 = new Vector2(22f, 22f);
        for (float num3 = 0.0f; (double) num3 < (double) num1; ++num3)
        {
          Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 229)];
          Vector2 vector2_2 = Vector2.UnitY.RotatedBy((double) num3 * 6.2831854820251465 / (double) num1 + (double) num2);
          dust.position = this.Center + vector2_2 * vector2_1 / 2f;
          dust.velocity = vector2_2;
          dust.noGravity = true;
          dust.scale = (float) (0.60000002384185791 + (double) Main.rand.NextFloat() * 1.7999999523162842);
          dust.velocity *= dust.scale;
          dust.fadeIn = Main.rand.NextFloat() * 2f;
        }
      }
      if (oldType == 428 && newType == 427)
      {
        for (int index = 0; index < 20; ++index)
        {
          int Type = Utils.SelectRandom<int>(Main.rand, 229, 240);
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type)];
          dust.noGravity = true;
          dust.scale = (float) (0.60000002384185791 + (double) Main.rand.NextFloat() * 1.7999999523162842);
          dust.fadeIn = 0.25f;
          dust.velocity *= dust.scale / 2f;
        }
      }
      if (oldType == 427 && newType == 426)
      {
        for (int index = 0; index < 30; ++index)
        {
          int Type = Utils.SelectRandom<int>(Main.rand, 229, 240, 240);
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type)];
          dust.noGravity = true;
          dust.scale = (float) (0.60000002384185791 + (double) Main.rand.NextFloat() * 1.7999999523162842);
          dust.fadeIn = 0.25f;
          dust.velocity *= dust.scale * 0.75f;
        }
      }
      this.position = this.position - this.netOffset;
    }

    public void Teleport(Vector2 newPos, int Style = 0, int extraInfo = 0)
    {
      int extraInfo1 = 0;
      if (Style == 4)
        extraInfo1 = this.lastPortalColorIndex;
      float dustCountMult = (double) this.teleportTime > 0.0 ? 0.3f : 1f;
      Vector2 position = this.position;
      Main.TeleportEffect(this.getRect(), Style, extraInfo1, dustCountMult, otherPosition: newPos);
      this.position = newPos;
      if (Style == 4)
      {
        this.lastPortalColorIndex = extraInfo;
        extraInfo1 = this.lastPortalColorIndex;
      }
      Main.TeleportEffect(this.getRect(), Style, extraInfo1, dustCountMult, TeleportationSide.Exit, position);
      this.teleportTime = 1f;
      this.teleportStyle = Style;
      if (Main.netMode != 2 || Style == 4)
        return;
      NetMessage.SendData(65, number: 1, number2: ((float) this.whoAmI), number3: newPos.X, number4: newPos.Y, number5: Style);
    }

    public void Transform(int newType)
    {
      if (Main.netMode == 1)
        return;
      int extraValue = this.extraValue;
      bool flag = false;
      if ((double) this.value == 0.0)
        flag = true;
      int[] numArray1 = new int[NPC.maxBuffs];
      int[] numArray2 = new int[NPC.maxBuffs];
      for (int index = 0; index < NPC.maxBuffs; ++index)
      {
        numArray1[index] = this.buffType[index];
        numArray2[index] = this.buffTime[index];
      }
      float shimmerTransparency = this.shimmerTransparency;
      int height = this.height;
      int type = this.type;
      int life = this.life;
      int lifeMax = this.lifeMax;
      Vector2 velocity = this.velocity;
      this.position.Y += (float) this.height;
      int spriteDirection = this.spriteDirection;
      bool spawnedFromStatue = this.SpawnedFromStatue;
      this.SetDefaultsKeepPlayerInteraction(newType);
      this.SpawnedFromStatue = spawnedFromStatue;
      this.spriteDirection = spriteDirection;
      this.TargetClosest();
      this.velocity = velocity;
      this.position.Y -= (float) this.height;
      for (int index = 0; index < NPC.maxBuffs; ++index)
      {
        this.buffType[index] = numArray1[index];
        this.buffTime[index] = numArray2[index];
      }
      if (flag)
        this.value = 0.0f;
      if (this.lifeMax == lifeMax)
        this.life = life;
      this.shimmerTransparency = shimmerTransparency;
      switch (newType)
      {
        case 107:
        case 108:
        case 124:
        case 353:
        case 369:
        case 550:
        case 588:
        case 679:
        case 680:
        case 683:
        case 684:
          this.UpdateHomeTileState(true, (int) ((double) this.position.X + (double) (this.width / 2)) / 16, (int) ((double) this.position.Y + (double) this.height) / 16);
          break;
      }
      this.extraValue = extraValue;
      if (Main.netMode == 2)
      {
        this.netUpdate = true;
        NetMessage.SendData(23, number: this.whoAmI);
        NetMessage.SendData(54, number: this.whoAmI);
      }
      this.TransformVisuals(type, newType);
      NPC.GiveTownUniqueDataToNPCsThatNeedIt(this.type, this.whoAmI);
      if (this.townNPC)
      {
        this.homeless = true;
        WorldGen.CheckAchievement_RealEstateAndTownSlimes();
      }
      this.altTexture = 0;
    }

    public int checkArmorPenetration(int armorPenetration, float armorPenetrationPercent)
    {
      if (this.ichor)
        armorPenetration += 15;
      if (this.betsysCurse)
        armorPenetration += 40;
      armorPenetration += (int) ((double) this.defense * (double) armorPenetrationPercent);
      if (armorPenetration <= 0 || this.defense <= 0)
        return 0;
      return armorPenetration > this.defense ? this.defense / 2 : armorPenetration / 2;
    }

    public double StrikeNPCNoInteraction(
      int Damage,
      float knockBack,
      int hitDirection,
      bool crit = false,
      bool noEffect = false,
      bool fromNet = false)
    {
      if (Main.netMode == 0)
        ++NPC.ignorePlayerInteractions;
      return this.StrikeNPC(Damage, knockBack, hitDirection, crit, noEffect, fromNet);
    }

    public double StrikeNPC(
      int Damage,
      float knockBack,
      int hitDirection,
      bool crit = false,
      bool noEffect = false,
      bool fromNet = false)
    {
      bool flag = Main.netMode == 0;
      if (flag && NPC.ignorePlayerInteractions > 0)
      {
        --NPC.ignorePlayerInteractions;
        flag = false;
      }
      if (!this.active || this.life <= 0)
        return 0.0;
      double num1 = Main.CalculateDamageNPCsTake((int) (double) Damage, this.defense);
      if (crit)
        num1 *= 2.0;
      if ((double) this.takenDamageMultiplier > 1.0)
        num1 *= (double) this.takenDamageMultiplier;
      if (((double) this.takenDamageMultiplier > 1.0 || Damage != 9999) && this.lifeMax > 1)
      {
        if (this.friendly)
        {
          CombatText.NewText(new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height), crit ? CombatText.DamagedFriendlyCrit : CombatText.DamagedFriendly, (int) num1, crit);
        }
        else
        {
          Color color = crit ? CombatText.DamagedHostileCrit : CombatText.DamagedHostile;
          if (fromNet)
            color = crit ? CombatText.OthersDamagedHostileCrit : CombatText.OthersDamagedHostile;
          CombatText.NewText(new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height), color, (int) num1, crit);
        }
      }
      if (num1 < 1.0)
        return 0.0;
      if (flag)
        this.PlayerInteraction(Main.myPlayer);
      this.justHit = true;
      if ((this.type == 438 || this.type == 379) && Main.netMode != 1)
      {
        int index = (int) (-(double) this.ai[3] - 1.0);
        if (index > -1 && (double) Main.npc[index].localAI[0] == 0.0)
          Main.npc[index].localAI[0] = 1f;
      }
      if (this.townNPC)
      {
        if ((this.aiStyle != 7 ? 0 : ((double) this.ai[0] == 3.0 || (double) this.ai[0] == 4.0 || (double) this.ai[0] == 16.0 ? 1 : ((double) this.ai[0] == 17.0 ? 1 : 0))) != 0)
        {
          NPC npc = Main.npc[(int) this.ai[2]];
          if (npc.active)
          {
            npc.ai[0] = 1f;
            npc.ai[1] = (float) (300 + Main.rand.Next(300));
            npc.ai[2] = 0.0f;
            npc.localAI[3] = 0.0f;
            npc.direction = hitDirection;
            npc.netUpdate = true;
          }
        }
        this.ai[0] = 1f;
        this.ai[1] = (float) (300 + Main.rand.Next(300));
        this.ai[2] = 0.0f;
        this.localAI[3] = 0.0f;
        this.direction = hitDirection;
        this.netUpdate = true;
      }
      if (this.aiStyle == 8 && Main.netMode != 1)
      {
        if (this.type == 172)
          this.ai[0] = 450f;
        else if (this.type == 283 || this.type == 284)
        {
          if (Main.rand.Next(2) == 0)
          {
            this.ai[0] = 390f;
            this.netUpdate = true;
          }
        }
        else if (this.type == 533)
        {
          if (Main.rand.Next(3) != 0)
          {
            this.ai[0] = 181f;
            this.netUpdate = true;
          }
        }
        else
          this.ai[0] = 400f;
        this.TargetClosest();
      }
      if (this.aiStyle == 97 && Main.netMode != 1)
      {
        this.localAI[1] = 1f;
        this.TargetClosest();
      }
      if (this.type == 371)
      {
        num1 = 0.0;
        this.ai[0] = 1f;
        this.ai[1] = 4f;
        this.dontTakeDamage = true;
      }
      if (this.type == 346 && (double) this.life >= (double) this.lifeMax * 0.5 && (double) this.life - num1 < (double) this.lifeMax * 0.5)
        Gore.NewGore(this.position, this.velocity, 517);
      if (this.type == 184)
        this.localAI[0] = 60f;
      if (this.type == 535)
        this.localAI[0] = 60f;
      if (this.type == 185)
        this.localAI[0] = 1f;
      if (!this.immortal)
      {
        if (this.realLife >= 0)
        {
          Main.npc[this.realLife].life -= (int) num1;
          this.life = Main.npc[this.realLife].life;
          this.lifeMax = Main.npc[this.realLife].lifeMax;
        }
        else
          this.life -= (int) num1;
      }
      if ((double) knockBack > 0.0 && (double) this.knockBackResist > 0.0)
      {
        float num2 = knockBack * this.knockBackResist;
        if (this.onFire2)
          num2 *= 1.1f;
        if ((double) num2 > 8.0)
          num2 = 8f + (num2 - 8f) * 0.9f;
        if ((double) num2 > 10.0)
          num2 = 10f + (num2 - 10f) * 0.8f;
        if ((double) num2 > 12.0)
          num2 = 12f + (num2 - 12f) * 0.7f;
        if ((double) num2 > 14.0)
          num2 = 14f + (num2 - 14f) * 0.6f;
        if ((double) num2 > 16.0)
          num2 = 16f;
        if (crit)
          num2 *= 1.4f;
        int num3 = (int) num1 * 10;
        if (Main.expertMode)
          num3 = (int) num1 * 15;
        if (num3 > this.lifeMax)
        {
          if (hitDirection < 0 && (double) this.velocity.X > -(double) num2)
          {
            if ((double) this.velocity.X > 0.0)
              this.velocity.X -= num2;
            this.velocity.X -= num2;
            if ((double) this.velocity.X < -(double) num2)
              this.velocity.X = -num2;
          }
          else if (hitDirection > 0 && (double) this.velocity.X < (double) num2)
          {
            if ((double) this.velocity.X < 0.0)
              this.velocity.X += num2;
            this.velocity.X += num2;
            if ((double) this.velocity.X > (double) num2)
              this.velocity.X = num2;
          }
          if (this.type == 185)
            num2 *= 1.5f;
          float num4 = this.noGravity ? num2 * -0.5f : num2 * -0.75f;
          if ((double) this.velocity.Y > (double) num4)
          {
            this.velocity.Y += num4;
            if ((double) this.velocity.Y < (double) num4)
              this.velocity.Y = num4;
          }
        }
        else
        {
          if (!this.noGravity)
            this.velocity.Y = (float) (-(double) num2 * 0.75) * this.knockBackResist;
          else
            this.velocity.Y = (float) (-(double) num2 * 0.5) * this.knockBackResist;
          this.velocity.X = num2 * (float) hitDirection * this.knockBackResist;
        }
      }
      if ((this.type == 113 || this.type == 114) && this.life <= 0)
      {
        for (int index = 0; index < 200; ++index)
        {
          if (Main.npc[index].active && (Main.npc[index].type == 113 || Main.npc[index].type == 114))
            Main.npc[index].HitEffect(hitDirection, num1);
        }
      }
      else
        this.HitEffect(hitDirection, num1);
      if (this.HitSound != null)
        SoundEngine.PlaySound(this.HitSound, this.position);
      if (this.realLife >= 0)
        Main.npc[this.realLife].checkDead();
      else
        this.checkDead();
      return num1;
    }

    public static void LadyBugKilled(Vector2 Position, bool GoldLadyBug = false)
    {
      Main.ladyBugRainBoost += NPC.ladyBugRainTime;
      if (Main.ladyBugRainBoost > NPC.maximumAmountOfTimesLadyBugRainCanStack)
        Main.ladyBugRainBoost = NPC.maximumAmountOfTimesLadyBugRainCanStack;
      int player = Main.myPlayer;
      if (!Main.player[player].active || Main.player[player].dead)
        return;
      Vector2 vector2 = Position - Main.player[player].Center;
      int num1 = 400;
      if ((double) vector2.Length() >= (double) num1)
        return;
      if ((double) vector2.Length() < 100.0)
        vector2 = new Vector2();
      double num2 = 1.0 - (double) vector2.Length() / (double) num1;
      int num3 = (int) ((double) NPC.ladyBugBadLuckTime * num2);
      if (GoldLadyBug)
        num3 *= 2;
      if (num3 >= Main.player[player].ladyBugLuckTimeLeft)
        return;
      Main.player[player].ladyBugLuckTimeLeft = num3;
      Main.player[player].luckNeedsSync = true;
    }

    private void LadyBugLuck(int plr, bool GoldLadyBug = false)
    {
      if (this.releaseOwner != (short) byte.MaxValue || Main.player[plr].ladyBugLuckTimeLeft < 0)
        return;
      Vector2 vector2 = this.Center - Main.player[plr].Center;
      int num1 = 800;
      if ((double) vector2.Length() >= (double) num1)
        return;
      if ((double) vector2.Length() < 30.0)
        vector2 = new Vector2();
      double num2 = Math.Pow(1.0 - (double) vector2.Length() / (double) num1, 6.0);
      int num3 = (int) ((double) NPC.ladyBugGoodLuckTime * num2);
      if (GoldLadyBug)
        num3 *= 2;
      if (num3 <= Main.player[plr].ladyBugLuckTimeLeft)
        return;
      Main.player[plr].ladyBugLuckTimeLeft = num3;
      Main.player[plr].luckNeedsSync = true;
    }

    private void NPCLuck()
    {
      int player = Main.myPlayer;
      if (this.type == 22)
      {
        if (Main.player[player].ladyBugLuckTimeLeft < 0 || !Main.player[player].active || Main.player[player].dead)
          return;
        int num = NPC.ladyBugGoodLuckTime / 3;
        if (num <= Main.player[player].ladyBugLuckTimeLeft)
          return;
        Main.player[player].ladyBugLuckTimeLeft = num;
        Main.player[player].luckNeedsSync = true;
      }
      else
      {
        if (this.type == 54 || !Main.player[player].active || Main.player[player].dead)
          return;
        int num = NPC.ladyBugBadLuckTime / 3;
        if (num >= Main.player[player].ladyBugLuckTimeLeft)
          return;
        Main.player[player].ladyBugLuckTimeLeft = num;
        Main.player[player].luckNeedsSync = true;
      }
    }

    public void HitEffect(int hitDirection = 0, double dmg = 10.0)
    {
      // ISSUE: The method is too long to display (56382 instructions)
    }

    public static int CountNPCS(int Type)
    {
      int num = 0;
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active && Main.npc[index].type == Type)
          ++num;
      }
      return num;
    }

    public static bool AnyHelpfulFairies()
    {
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active && (Main.npc[index].type == 583 || Main.npc[index].type == 584 || Main.npc[index].type == 585) && (double) Main.npc[index].ai[2] > 1.0)
          return true;
      }
      return false;
    }

    public static bool AnyNPCs(int Type)
    {
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active && Main.npc[index].type == Type)
          return true;
      }
      return false;
    }

    public static int FindFirstNPC(int Type)
    {
      for (int firstNpc = 0; firstNpc < 200; ++firstNpc)
      {
        if (Main.npc[firstNpc].active && Main.npc[firstNpc].type == Type)
          return firstNpc;
      }
      return -1;
    }

    public static bool NearSpikeBall(int x, int y)
    {
      Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle(x * 16 - 300, y * 16 - 300, 600, 600);
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active && Main.npc[index].aiStyle == 20)
        {
          Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].ai[1], (int) Main.npc[index].ai[2], 20, 20);
          if (rectangle1.Intersects(rectangle2))
            return true;
        }
      }
      return false;
    }

    public int FindBuffIndex(int type)
    {
      if (this.buffImmune[type])
        return -1;
      for (int buffIndex = 0; buffIndex < NPC.maxBuffs; ++buffIndex)
      {
        if (this.buffTime[buffIndex] >= 1 && this.buffType[buffIndex] == type)
          return buffIndex;
      }
      return -1;
    }

    public void AddBuff(int type, int time, bool quiet = false)
    {
      if (this.buffImmune[type])
        return;
      if (!quiet)
      {
        switch (Main.netMode)
        {
          case 1:
            NetMessage.SendData(53, number: this.whoAmI, number2: ((float) type), number3: ((float) time));
            break;
          case 2:
            NetMessage.SendData(54, number: this.whoAmI);
            break;
        }
      }
      int index1 = -1;
      for (int index2 = 0; index2 < NPC.maxBuffs; ++index2)
      {
        if (this.buffType[index2] == type)
        {
          if (this.buffTime[index2] >= time)
            return;
          this.buffTime[index2] = time;
          return;
        }
      }
      while (index1 == -1)
      {
        int buffIndex = -1;
        for (int index3 = 0; index3 < NPC.maxBuffs; ++index3)
        {
          if (!Main.debuff[this.buffType[index3]])
          {
            buffIndex = index3;
            break;
          }
        }
        if (buffIndex == -1)
          return;
        for (int index4 = buffIndex; index4 < NPC.maxBuffs; ++index4)
        {
          if (this.buffType[index4] == 0)
          {
            index1 = index4;
            break;
          }
        }
        if (index1 == -1)
          this.DelBuff(buffIndex);
      }
      this.buffType[index1] = type;
      this.buffTime[index1] = time;
    }

    public void RequestBuffRemoval(int buffTypeToRemove)
    {
      if (buffTypeToRemove < 0 || buffTypeToRemove >= BuffID.Count || !BuffID.Sets.CanBeRemovedByNetMessage[buffTypeToRemove])
        return;
      int buffIndex = this.FindBuffIndex(buffTypeToRemove);
      if (buffIndex == -1)
        return;
      this.DelBuff(buffIndex);
      if (Main.netMode != 1)
        return;
      NetMessage.SendData(137, number: this.whoAmI, number2: ((float) buffTypeToRemove));
    }

    public void DelBuff(int buffIndex)
    {
      this.buffTime[buffIndex] = 0;
      this.buffType[buffIndex] = 0;
      for (int index1 = 0; index1 < NPC.maxBuffs - 1; ++index1)
      {
        if (this.buffTime[index1] == 0 || this.buffType[index1] == 0)
        {
          for (int index2 = index1 + 1; index2 < NPC.maxBuffs; ++index2)
          {
            this.buffTime[index2 - 1] = this.buffTime[index2];
            this.buffType[index2 - 1] = this.buffType[index2];
            this.buffTime[index2] = 0;
            this.buffType[index2] = 0;
          }
        }
      }
      if (Main.netMode != 2)
        return;
      NetMessage.SendData(54, number: this.whoAmI);
    }

    public Microsoft.Xna.Framework.Rectangle getRect() => new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height);

    public bool CanBeChasedBy(object attacker = null, bool ignoreDontTakeDamage = false) => this.active && this.chaseable && this.lifeMax > 5 && !this.dontTakeDamage | ignoreDontTakeDamage && !this.friendly && !this.immortal;

    public bool HittableForOnHitRewards() => !this.CountsAsACritter && !this.immortal;

    public bool CountsAsACritter => this.lifeMax <= 5 && this.damage == 0 && this.type != 594 && this.type != 686;

    public void moneyPing(Vector2 pos)
    {
      SoundEngine.PlaySound(38, pos);
      int Type = 244;
      if (this.extraValue >= 1000000)
        Type = 247;
      else if (this.extraValue >= 10000)
        Type = 246;
      else if (this.extraValue >= 100)
        Type = 245;
      for (int index1 = 0; index1 < 20; ++index1)
      {
        int index2 = Dust.NewDust(pos - new Vector2(1f, 2f), 10, 14, Type, Alpha: 254, Scale: 0.25f);
        Main.dust[index2].velocity *= 0.2f;
      }
    }

    public void IdleSounds()
    {
      if ((double) this.shimmerTransparency > 0.0)
        return;
      if ((this.type == 239 || this.type == 240) && Main.rand.Next(900) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(24, 26));
      else if ((this.type == 62 || this.type == 156) && Main.rand.Next(700) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(26, 30));
      else if (this.type == 177 && Main.rand.Next(600) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(30, 32));
      else if (this.type == 226 && Main.rand.Next(800) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, 32);
      else if (this.type == 153 && Main.rand.Next(1000) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, 33);
      else if (this.wet && (this.type == 63 || this.type == 64 || this.type == 103) && Main.rand.Next(1000) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(34, 36));
      else if ((this.type == 198 || this.type == 199) && Main.rand.Next(1000) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(36, 38));
      else if ((this.type == 170 || this.type == 180 || this.type == 171) && Main.rand.Next(600) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(38, 41));
      else if (this.type == 250 && Main.rand.Next(700) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(41, 44));
      else if (this.type == 580 && Main.rand.Next(800) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, 44);
      else if (this.type == 582 && Main.rand.Next(800) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, 44);
      else if (this.type == 581 && Main.rand.Next(800) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(44, 47));
      else if (this.type == 508 && Main.rand.Next(800) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, 44);
      else if (this.type == 509 && Main.rand.Next(800) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(44, 47));
      else if (this.type == 494 && Main.rand.Next(600) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, 47);
      else if (this.type == 467 && Main.rand.Next(700) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(48, 50));
      else if (this.type == 468 && Main.rand.Next(700) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(50, 53));
      else if (this.type == 288 && Main.rand.Next(400) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(53, 55));
      else if ((this.type == 524 || this.type == 525 || this.type == 526 || this.type == 527) && Main.rand.Next(700) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(55, 57));
      else if ((this.type == 496 || this.type == 497) && Main.rand.Next(600) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(57, 59));
      else if (this.type == 389 && Main.rand.Next(800) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(59, 61));
      else if (this.type == 471 && Main.rand.Next(600) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(61, 63));
      else if (this.type == 482 && Main.rand.Next(600) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(63, 66));
      else if (this.type == 388 && Main.rand.Next(700) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(66, 69));
      else if (this.type == 520 && Main.rand.Next(800) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(69, 73));
      else if (this.type == 477 && Main.rand.Next(600) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, 73);
      else if (this.type == 258 && Main.rand.Next(700) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(74, 78));
      else if (this.type == 252 && Main.rand.Next(700) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, 78);
      else if (this.type == 469 && Main.rand.Next(700) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(79, 81));
      else if ((this.type == 253 || this.type == 82) && Main.rand.Next(700) == 0)
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(81, 84));
      else if (this.type >= 498 && this.type <= 506 && Main.rand.Next(600) == 0)
      {
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(84, 86));
      }
      else
      {
        if (this.type != 391 || Main.rand.Next(700) != 0)
          return;
        SoundEngine.PlaySound(29, (int) this.position.X, (int) this.position.Y, Main.rand.Next(86, 87));
      }
    }

    public void UpdateAltTexture()
    {
      if (!this.townNPC)
        return;
      int altTexture = this.altTexture;
      bool flag = BirthdayParty.PartyIsUp || this.ForcePartyHatOn;
      if (this.type == 441 || this.type == 453 || this.type == 633)
        flag = false;
      this.altTexture = 0;
      if (flag)
        this.altTexture = 1;
      if (this.type == 633 && this.ShouldBestiaryGirlBeLycantrope())
        this.altTexture = 2;
      if (this.ForcePartyHatOn)
        return;
      this.MakeTransitionEffectsForTextureChanges(altTexture, this.altTexture);
    }

    private void MakeTransitionEffectsForTextureChanges(int oldAltTexture, int currentAltTexture)
    {
      if (oldAltTexture == 0 && currentAltTexture == 1)
      {
        for (int index = 0; index < 20; ++index)
          Dust.NewDust(this.position, this.width, this.height / 4, 139 + Main.rand.Next(4), SpeedY: -2f);
      }
      if (oldAltTexture == 1 && currentAltTexture == 0)
        Utils.PoofOfSmoke(this.position);
      if (this.type != 633)
        return;
      int num = 2;
      if ((oldAltTexture != 0 || currentAltTexture != num ? (oldAltTexture != num ? 0 : (currentAltTexture == 0 ? 1 : 0)) : 1) == 0)
        return;
      for (int index = 0; index < 20; ++index)
      {
        Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 262, SpeedY: -2f);
        dust.noGravity = true;
        dust.scale = 2f;
      }
    }

    public static void ResetNetOffsets()
    {
      NPC.offSetDelayTime = 180;
      for (int index = 0; index < 200; ++index)
        Main.npc[index].netOffset *= 0.0f;
    }

    public void UpdateNPC(int i)
    {
      this.whoAmI = i;
      if (!this.active)
        return;
      if (NPC.offSetDelayTime > 0)
        this.netOffset *= 0.0f;
      else if (Main.netMode == 2)
        this.netOffset *= 0.0f;
      else if (Main.multiplayerNPCSmoothingRange <= 0)
        this.netOffset *= 0.0f;
      else if (this.netOffset != new Vector2(0.0f, 0.0f))
      {
        if (NPCID.Sets.NoMultiplayerSmoothingByType[this.type])
          this.netOffset *= 0.0f;
        else if (NPCID.Sets.NoMultiplayerSmoothingByAI[this.aiStyle])
        {
          this.netOffset *= 0.0f;
        }
        else
        {
          float num1 = 2f;
          float npcSmoothingRange = (float) Main.multiplayerNPCSmoothingRange;
          float num2 = this.netOffset.Length();
          if ((double) num2 > (double) npcSmoothingRange)
          {
            this.netOffset.Normalize();
            this.netOffset *= npcSmoothingRange;
            num2 = this.netOffset.Length();
          }
          float num3 = num1 + num2 / npcSmoothingRange * num1;
          Vector2 netOffset = this.netOffset;
          netOffset.Normalize();
          this.netOffset -= netOffset * num3;
          if ((double) this.netOffset.Length() < (double) num3)
            this.netOffset *= 0.0f;
          if (this.townNPC)
          {
            if ((double) Vector2.Distance(this.position, new Vector2((float) (this.homeTileX * 16 + 8 - this.width / 2), (float) (this.homeTileY * 16 - this.height) - 0.1f)) < 1.0)
              this.netOffset *= 0.0f;
            if ((double) this.ai[0] == 25.0)
              this.netOffset *= 0.0f;
          }
        }
      }
      this.UpdateAltTexture();
      if (this.type == 368)
        NPC.travelNPC = true;
      if (Main.netMode != 2)
        this.UpdateNPC_CastLights();
      this.UpdateNPC_TeleportVisuals();
      this.UpdateNPC_CritterSounds();
      this.TrySyncingUniqueTownNPCData(i);
      if (this.aiStyle == 7 && (double) this.position.Y > (double) Main.bottomWorld - 640.0 + (double) this.height && Main.netMode != 1 && !Main.xMas)
      {
        this.StrikeNPCNoInteraction(9999, 0.0f, 0);
        if (Main.netMode == 2)
          NetMessage.SendData(28, number: this.whoAmI, number2: 9999f);
      }
      if (Main.netMode == 1)
      {
        bool flag = false;
        int index1 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
        int index2 = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16;
        try
        {
          if (index1 >= 4)
          {
            if (index1 <= Main.maxTilesX - 4)
            {
              if (index2 >= 4)
              {
                if (index2 <= Main.maxTilesY - 4)
                {
                  if (Main.tile[index1, index2] == null)
                    flag = true;
                  else if (Main.tile[index1 - 3, index2] == null)
                    flag = true;
                  else if (Main.tile[index1 + 3, index2] == null)
                    flag = true;
                  else if (Main.tile[index1, index2 - 3] == null)
                    flag = true;
                  else if (Main.tile[index1, index2 + 3] == null)
                    flag = true;
                }
              }
            }
          }
        }
        catch
        {
          flag = true;
        }
        if (flag)
          return;
      }
      this.UpdateNPC_BuffFlagsReset();
      this.UpdateNPC_BuffSetFlags();
      this.UpdateNPC_SoulDrainDebuff();
      this.UpdateNPC_BuffClearExpiredBuffs();
      this.UpdateNPC_BuffApplyDOTs();
      this.UpdateNPC_BuffApplyVFX();
      this.UpdateNPC_BloodMoonTransformations();
      float maxFallSpeed;
      this.UpdateNPC_UpdateGravity(out maxFallSpeed);
      if (this.soundDelay > 0)
        --this.soundDelay;
      if (this.life <= 0)
      {
        this.active = false;
        this.UpdateNetworkCode(i);
        this.netUpdate = false;
        this.justHit = false;
      }
      else
      {
        this.oldTarget = this.target;
        this.oldDirection = this.direction;
        this.oldDirectionY = this.directionY;
        float num = (float) (1.0 + (double) Math.Abs(this.velocity.X) / 3.0);
        if ((double) this.gfxOffY > 0.0)
        {
          this.gfxOffY -= num * this.stepSpeed;
          if ((double) this.gfxOffY < 0.0)
            this.gfxOffY = 0.0f;
        }
        else if ((double) this.gfxOffY < 0.0)
        {
          this.gfxOffY += num * this.stepSpeed;
          if ((double) this.gfxOffY > 0.0)
            this.gfxOffY = 0.0f;
        }
        if ((double) this.gfxOffY > 16.0)
          this.gfxOffY = 16f;
        if ((double) this.gfxOffY < -16.0)
          this.gfxOffY = -16f;
        this.TryPortalJumping();
        this.IdleSounds();
        this.AI();
        this.SubAI_HandleTemporaryCatchableNPCPlayerInvulnerability();
        if (Main.netMode != 2 && this.extraValue > 0)
        {
          int Type = 244;
          float maxValue = 30f;
          if (this.extraValue >= 1000000)
          {
            Type = 247;
            maxValue *= 0.25f;
          }
          else if (this.extraValue >= 10000)
          {
            Type = 246;
            maxValue *= 0.5f;
          }
          else if (this.extraValue >= 100)
          {
            Type = 245;
            maxValue *= 0.75f;
          }
          if (Main.rand.Next((int) maxValue) == 0)
          {
            this.position = this.position + this.netOffset;
            int index = Dust.NewDust(this.position, this.width, this.height, Type, Alpha: 254, Scale: 0.25f);
            Main.dust[index].velocity *= 0.1f;
            this.position = this.position - this.netOffset;
          }
        }
        for (int index = 0; index < 256; ++index)
        {
          if (this.immune[index] > 0)
            --this.immune[index];
        }
        if (!this.noGravity && !this.noTileCollide)
        {
          int x = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
          int y = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16;
          if (WorldGen.InWorld(x, y) && Main.tile[x, y] == null)
          {
            NPC.gravity = 0.0f;
            this.velocity.X = 0.0f;
            this.velocity.Y = 0.0f;
          }
        }
        if (!this.noGravity)
        {
          this.velocity.Y += NPC.gravity;
          if ((double) this.velocity.Y > (double) maxFallSpeed)
            this.velocity.Y = maxFallSpeed;
        }
        if ((double) this.velocity.X < 0.005 && (double) this.velocity.X > -0.005)
          this.velocity.X = 0.0f;
        if (Main.netMode != 1 && this.type != 37 && (this.friendly || NPCID.Sets.TakesDamageFromHostilesWithoutBeingFriendly[this.type]))
        {
          if (this.townNPC)
            this.CheckDrowning();
          this.CheckLifeRegen();
          this.GetHurtByOtherNPCs(NPCID.Sets.AllNPCs);
        }
        if (Main.netMode != 1 && (NPC.npcsFoundForCheckActive[210] || NPC.npcsFoundForCheckActive[211]) && !NPCID.Sets.HurtingBees[this.type])
          this.GetHurtByOtherNPCs(NPCID.Sets.HurtingBees);
        if (!this.noTileCollide)
        {
          this.UpdateCollision();
        }
        else
        {
          this.oldPosition = this.position;
          this.oldDirection = this.direction;
          this.position = this.position + this.velocity;
          if (this.onFire && this.boss && Main.netMode != 1 && Collision.WetCollision(this.position, this.width, this.height))
          {
            for (int buffIndex = 0; buffIndex < NPC.maxBuffs; ++buffIndex)
            {
              if (this.buffType[buffIndex] == 24)
                this.DelBuff(buffIndex);
            }
          }
        }
        if (Main.netMode != 1 && !this.noTileCollide && this.lifeMax > 1 && Collision.SwitchTiles(this.position, this.width, this.height, this.oldPosition, 2) && (this.type == 46 || this.type == 148 || this.type == 149 || this.type == 303 || this.type == 361 || this.type == 362 || this.type == 364 || this.type == 366 || this.type == 367 || this.type >= 442 && this.type <= 448 || this.type == 602 || this.type == 608 || this.type == 614 || this.type == 687))
        {
          this.ai[0] = 1f;
          this.ai[1] = 400f;
          this.ai[2] = 0.0f;
        }
        this.FindFrame();
        this.UpdateNPC_UpdateTrails();
        this.UpdateNetworkCode(i);
        this.CheckActive();
        this.netUpdate = false;
        this.justHit = false;
      }
    }

    private void SubAI_HandleTemporaryCatchableNPCPlayerInvulnerability()
    {
      if (this.type < 0 || this.type >= (int) NPCID.Count || !Main.npcCatchable[this.type])
        return;
      if (this.releaseOwner != (short) byte.MaxValue || this.SpawnedFromStatue)
        this.catchableNPCTempImmunityCounter = 0;
      int num1 = this.friendly ? 1 : 0;
      if (this.catchableNPCTempImmunityCounter > 0)
      {
        --this.catchableNPCTempImmunityCounter;
        this.friendly = true;
      }
      else
        this.friendly = false;
      int num2 = this.friendly ? 1 : 0;
      if (num1 == num2)
        return;
      this.netUpdate = true;
    }

    private void TrySyncingUniqueTownNPCData(int npcIndex)
    {
      if (Main.netMode != 1 || !this.needsUniqueInfoUpdate || !this.isLikeATownNPC)
        return;
      this.needsUniqueInfoUpdate = false;
      NetMessage.SendData(56, number: npcIndex);
    }

    private void UpdateNetworkCode(int i)
    {
      if (!this.active)
        this.netUpdate = true;
      if (Main.netMode != 2)
        return;
      if (Main.npcStreamSpeed > 0 && !this.townNPC && NPCID.Sets.UsesMultiplayerProximitySyncing[this.type] && (double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) >= 0.5)
      {
        ++this.netStream;
        if (this.netStream >= Main.npcStreamSpeed)
        {
          for (int remoteClient = 0; remoteClient < (int) byte.MaxValue; ++remoteClient)
          {
            if (Main.player[remoteClient].active)
            {
              this.netStream = 0;
              float num = Math.Abs(this.Center.X - Main.player[remoteClient].Center.X) + Math.Abs(this.Center.Y - Main.player[remoteClient].Center.Y);
              if ((double) num < 250.0)
                this.streamPlayer[remoteClient] -= 8;
              else if ((double) num < 500.0)
                this.streamPlayer[remoteClient] -= 4;
              else if ((double) num < 1000.0)
                this.streamPlayer[remoteClient] -= 2;
              else if ((double) num < 1500.0)
                --this.streamPlayer[remoteClient];
              if (this.streamPlayer[remoteClient] <= 0)
              {
                this.streamPlayer[remoteClient] = 8;
                NetMessage.SendData(23, remoteClient, number: i);
              }
            }
          }
        }
      }
      if (this.townNPC || this.aiStyle == 16)
        this.netSpam = 0;
      if (this.netUpdate2)
        this.netUpdate = true;
      if (!this.active)
        this.netSpam = 0;
      if (this.netUpdate)
      {
        if (this.boss)
        {
          Vector2 vector2 = this.oldPosition - this.position;
          if (this.netSpam <= 15)
          {
            this.netSpam += 5;
            NetMessage.SendData(23, number: i);
            this.netUpdate2 = false;
          }
          else
            this.netUpdate2 = true;
        }
        else if (this.netSpam <= 90)
        {
          this.netSpam += 30;
          NetMessage.SendData(23, number: i);
          this.netUpdate2 = false;
        }
        else
          this.netUpdate2 = true;
      }
      if (this.netSpam > 0)
        --this.netSpam;
      if (!this.active || !this.townNPC || NPC.TypeToDefaultHeadIndex(this.type) <= 0)
        return;
      if (this.homeless != this.oldHomeless || this.homeTileX != this.oldHomeTileX || this.homeTileY != this.oldHomeTileY)
      {
        byte householdStatus = WorldGen.TownManager.GetHouseholdStatus(this);
        NetMessage.SendData(60, number: i, number2: ((float) Main.npc[i].homeTileX), number3: ((float) Main.npc[i].homeTileY), number4: ((float) householdStatus));
      }
      this.oldHomeless = this.homeless;
      this.oldHomeTileX = this.homeTileX;
      this.oldHomeTileY = this.homeTileY;
    }

    public IEntitySource GetItemSource_Misc(int itemSourceId) => (IEntitySource) new EntitySource_ByItemSourceId((Entity) this, itemSourceId);

    public static IEntitySource GetSpawnSource_NPCRelease(int whoReleasedIt) => (IEntitySource) new EntitySource_Parent((Entity) Main.player[whoReleasedIt]);

    public static IEntitySource GetSpawnSource_NPCCatch(int whoCatchedIt) => (IEntitySource) new EntitySource_Parent((Entity) Main.player[whoCatchedIt]);

    public IEntitySource GetSpawnSource_NPCHurt() => (IEntitySource) new EntitySource_Parent((Entity) this);

    public IEntitySource GetSpawnSource_ForProjectile() => (IEntitySource) new EntitySource_Parent((Entity) this);

    public IEntitySource GetSpawnSourceForProjectileNPC() => (IEntitySource) new EntitySource_Parent((Entity) this);

    public static IEntitySource GetSpawnSourceForNaturalSpawn() => (IEntitySource) new EntitySource_SpawnNPC();

    public static IEntitySource GetSpawnSourceForTownSpawn() => (IEntitySource) new EntitySource_SpawnNPC();

    public IEntitySource GetSpawnSourceForNPCFromNPCAI() => (IEntitySource) new EntitySource_Parent((Entity) this);

    public IEntitySource GetItemSource_Loot() => (IEntitySource) new EntitySource_Loot((Entity) this);

    private void UpdateNPC_UpdateTrails()
    {
      int num = NPCID.Sets.TrailingMode[this.type];
      if (num == 0)
      {
        if ((double) this.localAI[3] <= 0.0)
        {
          this.localAI[3] = 2f;
          for (int index = this.oldPos.Length - 1; index > 0; --index)
            this.oldPos[index] = this.oldPos[index - 1];
          this.oldPos[0] = this.position + this.netOffset;
        }
        --this.localAI[3];
      }
      if (num == 1)
      {
        for (int index = this.oldPos.Length - 1; index > 0; --index)
          this.oldPos[index] = this.oldPos[index - 1];
        this.oldPos[0] = this.position + this.netOffset;
      }
      if (num == 2)
      {
        if ((int) this.ai[0] == 4 || (double) this.ai[0] == 5.0 || (double) this.ai[0] == 6.0)
        {
          for (int index = this.oldPos.Length - 1; index > 0; --index)
          {
            this.oldPos[index] = this.oldPos[index - 1];
            this.oldRot[index] = this.oldRot[index - 1];
          }
          this.oldPos[0] = this.position + this.netOffset;
          this.oldRot[0] = this.rotation;
        }
        else
        {
          for (int index = this.oldPos.Length - 1; index >= 0; --index)
          {
            this.oldPos[index] = this.position + this.netOffset;
            this.oldRot[index] = this.rotation;
          }
        }
      }
      if (num == 3)
      {
        for (int index = this.oldPos.Length - 1; index > 0; --index)
        {
          this.oldPos[index] = this.oldPos[index - 1];
          this.oldRot[index] = this.oldRot[index - 1];
        }
        this.oldPos[0] = this.position + this.netOffset;
        this.oldRot[0] = this.rotation;
      }
      if (num == 4)
      {
        for (int index = this.oldPos.Length - 1; index > 0; --index)
        {
          this.oldPos[index] = this.oldPos[index - 1];
          Lighting.AddLight((int) this.position.X / 16, (int) this.position.Y / 16, 0.3f, 0.0f, 0.2f);
        }
        this.oldPos[0] = this.position + this.netOffset;
      }
      else if (num == 5)
      {
        for (int index = this.oldPos.Length - 1; index > 0; --index)
          this.oldPos[index] = this.oldPos[index - 1];
        this.oldPos[0] = this.position + this.netOffset;
      }
      else if (num == 6)
      {
        for (int index = this.oldPos.Length - 1; index > 0; --index)
          this.oldPos[index] = this.oldPos[index - 1];
        this.oldPos[0] = this.position + this.netOffset;
      }
      else
      {
        if (num != 7)
          return;
        for (int index = this.oldPos.Length - 1; index > 0; --index)
        {
          this.oldPos[index] = this.oldPos[index - 1];
          this.oldRot[index] = this.oldRot[index - 1];
        }
        this.oldPos[0] = this.position + this.netOffset;
        this.oldRot[0] = this.rotation;
      }
    }

    private void UpdateNPC_UpdateGravity(out float maxFallSpeed)
    {
      maxFallSpeed = 10f;
      NPC.gravity = 0.3f;
      if (this.type == 258)
      {
        NPC.gravity = 0.1f;
        if ((double) this.velocity.Y > 3.0)
          this.velocity.Y = 3f;
      }
      else if (this.type == 425 && (double) this.ai[2] == 1.0)
        NPC.gravity = 0.1f;
      else if ((this.type == 576 || this.type == 577) && (double) this.ai[0] > 0.0 && (double) this.ai[1] == 2.0)
      {
        NPC.gravity = 0.45f;
        if ((double) this.velocity.Y > 32.0)
          this.velocity.Y = 32f;
      }
      else if (this.type == 427 && (double) this.ai[2] == 1.0)
      {
        NPC.gravity = 0.1f;
        if ((double) this.velocity.Y > 4.0)
          this.velocity.Y = 4f;
      }
      else if (this.type == 426)
      {
        NPC.gravity = 0.1f;
        if ((double) this.velocity.Y > 3.0)
          this.velocity.Y = 3f;
      }
      else if (this.type == 541)
        NPC.gravity = 0.0f;
      else if (this.aiStyle == 7 && (double) this.ai[0] == 25.0)
        NPC.gravity = 0.0f;
      float num1 = (float) Main.maxTilesX / 4200f;
      float num2 = (float) (((double) this.position.Y / 16.0 - (60.0 + 10.0 * (double) (num1 * num1))) / (Main.worldSurface / 6.0));
      if ((double) num2 < 0.25)
        num2 = 0.25f;
      if ((double) num2 > 1.0)
        num2 = 1f;
      NPC.gravity *= num2;
      if (!this.wet)
        return;
      if (this.shimmerWet)
      {
        NPC.gravity = 0.15f;
        maxFallSpeed = 5.5f;
      }
      else if (this.honeyWet)
      {
        NPC.gravity = 0.1f;
        maxFallSpeed = 4f;
      }
      else
      {
        NPC.gravity = 0.2f;
        maxFallSpeed = 7f;
      }
    }

    private void UpdateNPC_SoulDrainDebuff()
    {
      if (!this.soulDrain)
        return;
      int num = 1100;
      for (int index1 = 0; index1 < (int) byte.MaxValue; ++index1)
      {
        if (Main.player[index1].active && !Main.player[index1].dead && (double) (this.Center - Main.player[index1].position).Length() < (double) num && Main.player[index1].inventory[Main.player[index1].selectedItem].type == 3006 && Main.player[index1].itemAnimation > 0)
        {
          if (index1 == Main.myPlayer)
            ++Main.player[index1].soulDrain;
          if (Main.rand.Next(3) != 0)
          {
            Vector2 center = this.Center;
            center.X += (float) Main.rand.Next(-100, 100) * 0.05f;
            center.Y += (float) Main.rand.Next(-100, 100) * 0.05f;
            int index2 = Dust.NewDust(center + this.velocity, 1, 1, 235);
            Main.dust[index2].velocity *= 0.0f;
            Main.dust[index2].scale = (float) Main.rand.Next(70, 85) * 0.01f;
            Main.dust[index2].fadeIn = (float) (index1 + 1);
          }
        }
      }
    }

    public static Color buffColor(Color newColor, float R, float G, float B, float A)
    {
      newColor.R = (byte) ((double) newColor.R * (double) R);
      newColor.G = (byte) ((double) newColor.G * (double) G);
      newColor.B = (byte) ((double) newColor.B * (double) B);
      newColor.A = (byte) ((double) newColor.A * (double) A);
      return newColor;
    }

    public bool CanApplyHunterPotionEffects() => Main.player[Main.myPlayer].detectCreature;

    public Color GetNPCColorTintedByBuffs(Color npcColor)
    {
      if (!this.canDisplayBuffs)
        return npcColor;
      float R = 1f;
      float G1 = 1f;
      float B1 = 1f;
      float A = 1f;
      if (this.poisoned)
      {
        R *= 0.65f;
        B1 *= 0.75f;
        npcColor = NPC.buffColor(npcColor, R, G1, B1, A);
      }
      if (this.venom)
      {
        G1 *= 0.45f;
        R *= 0.75f;
        npcColor = NPC.buffColor(npcColor, R, G1, B1, A);
      }
      if (this.midas)
      {
        B1 *= 0.3f;
        R *= 0.85f;
        npcColor = NPC.buffColor(npcColor, R, G1, B1, A);
      }
      if (this.betsysCurse)
      {
        R *= 0.8f;
        G1 *= 0.6f;
        npcColor = NPC.buffColor(npcColor, R, G1, B1, A);
      }
      if (this.oiled)
      {
        R *= 0.4f;
        G1 *= 0.4f;
        B1 *= 0.4f;
        npcColor = NPC.buffColor(npcColor, R, G1, B1, A);
      }
      if (this.stinky)
      {
        R *= 0.7f;
        B1 *= 0.55f;
        npcColor = NPC.buffColor(npcColor, R, G1, B1, A);
      }
      if (this.drippingSlime)
      {
        R *= 0.8f;
        G1 *= 0.8f;
        npcColor = NPC.buffColor(npcColor, R, G1, B1, A);
      }
      if (this.drippingSparkleSlime)
      {
        float B2 = B1 * 0.85f;
        float G2 = G1 * 0.75f;
        npcColor = NPC.buffColor(npcColor, R, G2, B2, A);
      }
      if (this.ichor)
        npcColor = new Color((int) byte.MaxValue, (int) byte.MaxValue, 0, (int) byte.MaxValue);
      if (this.CanApplyHunterPotionEffects() && this.lifeMax > 1)
      {
        byte num1;
        byte num2;
        byte num3;
        if (this.friendly || this.catchItem > (short) 0 || this.damage == 0 && this.lifeMax == 5)
        {
          num1 = (byte) 50;
          num2 = byte.MaxValue;
          num3 = (byte) 50;
        }
        else
        {
          num1 = byte.MaxValue;
          num2 = (byte) 50;
          num3 = (byte) 50;
        }
        if ((int) npcColor.R < (int) num1)
          npcColor.R = num1;
        if ((int) npcColor.G < (int) num2)
          npcColor.G = num2;
        if ((int) npcColor.B < (int) num3)
          npcColor.B = num3;
      }
      return npcColor;
    }

    private void UpdateNPC_BuffApplyVFX()
    {
      if (!this.canDisplayBuffs)
        return;
      this.position = this.position + this.netOffset;
      if (this.markedByScytheWhip && Main.rand.Next(3) == 0)
        ParticleOrchestrator.RequestParticleSpawn(true, ParticleOrchestraType.BlackLightningSmall, new ParticleOrchestraSettings()
        {
          MovementVector = Main.rand.NextVector2Circular(1f, 1f),
          PositionInWorld = Main.rand.NextVector2FromRectangle(this.Hitbox)
        });
      if (this.poisoned && Main.rand.Next(30) == 0)
      {
        Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 46, Alpha: 120, Scale: 0.2f);
        dust.noGravity = true;
        dust.fadeIn = 1.9f;
      }
      if (this.venom && Main.rand.Next(10) == 0)
      {
        Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 171, Alpha: 100, Scale: 0.5f);
        dust.noGravity = true;
        dust.fadeIn = 1.5f;
      }
      if (this.shadowFlame && Main.rand.Next(5) < 4)
      {
        Dust dust = Dust.NewDustDirect(new Vector2(this.position.X - 2f, this.position.Y - 2f), this.width + 4, this.height + 4, 27, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 180, Scale: 1.95f);
        dust.noGravity = true;
        dust.velocity *= 0.75f;
        dust.velocity.X *= 0.75f;
        --dust.velocity.Y;
        if (Main.rand.Next(4) == 0)
        {
          dust.noGravity = false;
          dust.scale *= 0.5f;
        }
      }
      if (this.onFire)
      {
        if (Main.rand.Next(4) < 3)
        {
          Dust dust = Dust.NewDustDirect(new Vector2(this.position.X - 2f, this.position.Y - 2f), this.width + 4, this.height + 4, 6, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, Scale: 3.5f);
          dust.noGravity = true;
          dust.velocity *= 1.8f;
          dust.velocity.Y -= 0.5f;
          if (Main.rand.Next(4) == 0)
          {
            dust.noGravity = false;
            dust.scale *= 0.5f;
          }
        }
        Lighting.AddLight((int) ((double) this.position.X / 16.0), (int) ((double) this.position.Y / 16.0 + 1.0), 1f, 0.3f, 0.1f);
      }
      if (this.onFire3)
      {
        if (Main.rand.Next(4) < 3)
        {
          Dust dust = Dust.NewDustDirect(new Vector2(this.position.X - 2f, this.position.Y - 2f), this.width + 4, this.height + 4, 6, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, Scale: 3.5f);
          dust.noGravity = true;
          dust.velocity *= 1.8f;
          dust.velocity.Y -= 0.5f;
          if (Main.rand.Next(4) == 0)
          {
            dust.noGravity = false;
            dust.scale *= 0.5f;
          }
          dust.customData = (object) 0;
        }
        Lighting.AddLight((int) ((double) this.position.X / 16.0), (int) ((double) this.position.Y / 16.0 + 1.0), 1f, 0.3f, 0.1f);
      }
      if (this.daybreak)
      {
        if (Main.rand.Next(4) < 3)
        {
          Dust dust = Dust.NewDustDirect(new Vector2(this.position.X - 2f, this.position.Y - 2f), this.width + 4, this.height + 4, 158, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, Scale: 3.5f);
          dust.noGravity = true;
          dust.velocity *= 2.8f;
          dust.velocity.Y -= 0.5f;
          if (Main.rand.Next(4) == 0)
          {
            dust.noGravity = false;
            dust.scale *= 0.5f;
          }
        }
        Lighting.AddLight((int) ((double) this.position.X / 16.0), (int) ((double) this.position.Y / 16.0 + 1.0), 1f, 0.3f, 0.1f);
      }
      if (this.betsysCurse)
      {
        if (Main.rand.Next(4) < 3)
        {
          Dust dust = Dust.NewDustDirect(new Vector2(this.position.X - 2f, this.position.Y - 2f), this.width + 4, this.height + 4, 55, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, Scale: 3.5f);
          dust.noGravity = true;
          dust.velocity *= 2.8f;
          dust.velocity.Y -= 1.5f;
          dust.noGravity = false;
          dust.scale = 0.9f;
          dust.color = new Color(0, 0, 180, (int) byte.MaxValue);
          dust.velocity *= 0.2f;
        }
        Lighting.AddLight((int) ((double) this.position.X / 16.0), (int) ((double) this.position.Y / 16.0 + 1.0), 0.6f, 0.1f, 0.9f);
      }
      if (this.oiled && Main.rand.Next(3) != 0)
      {
        int Alpha = 175;
        Color newColor = new Color(0, 0, 0, 250);
        Vector2 position = this.position;
        position.X -= 2f;
        position.Y -= 2f;
        if (Main.rand.Next(2) == 0)
        {
          Dust dust = Dust.NewDustDirect(position, this.width + 4, this.height + 2, 4, Alpha: Alpha, newColor: newColor, Scale: 1.4f);
          if (Main.rand.Next(2) == 0)
            dust.alpha += 25;
          if (Main.rand.Next(2) == 0)
            dust.alpha += 25;
          dust.noLight = true;
          dust.velocity *= 0.2f;
          dust.velocity.Y += 0.2f;
          dust.velocity += this.velocity;
        }
      }
      if (this.dryadWard && (double) this.velocity.X != 0.0 && Main.rand.Next(4) == 0)
      {
        Dust dust = Dust.NewDustDirect(new Vector2(this.position.X - 2f, (float) ((double) this.position.Y + (double) this.height - 2.0)), this.width + 4, 4, 163, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, Scale: 1.5f);
        dust.noGravity = true;
        dust.noLight = true;
        dust.velocity *= 0.0f;
      }
      if (this.dryadBane && Main.rand.Next(4) == 0)
      {
        Dust dust = Dust.NewDustDirect(new Vector2(this.position.X - 2f, this.position.Y), this.width + 4, this.height, 163, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, Scale: 1.5f);
        dust.noGravity = true;
        dust.velocity *= new Vector2((float) ((double) Main.rand.NextFloat() * 4.0 - 2.0), 0.0f);
        dust.noLight = true;
      }
      if (this.loveStruck && Main.rand.Next(5) == 0)
      {
        Vector2 vector2 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
        vector2.Normalize();
        vector2.X *= 0.66f;
        int index = Gore.NewGore(this.position + new Vector2((float) Main.rand.Next(this.width + 1), (float) Main.rand.Next(this.height + 1)), vector2 * (float) Main.rand.Next(3, 6) * 0.33f, 331, (float) Main.rand.Next(40, 121) * 0.01f);
        Main.gore[index].sticky = false;
        Main.gore[index].velocity *= 0.4f;
        Main.gore[index].velocity.Y -= 0.6f;
      }
      if (this.stinky && Main.rand.Next(5) == 0)
      {
        Vector2 vector2_1 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
        vector2_1.Normalize();
        vector2_1.X *= 0.66f;
        vector2_1.Y = Math.Abs(vector2_1.Y);
        Vector2 vector2_2 = vector2_1 * (float) Main.rand.Next(3, 5) * 0.25f;
        Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 188, vector2_2.X, vector2_2.Y * 0.5f, 100, Scale: 1.5f);
        dust.velocity *= 0.1f;
        dust.velocity.Y -= 0.5f;
      }
      if (this.dripping && Main.rand.Next(4) != 0)
      {
        Vector2 position = this.position;
        position.X -= 2f;
        position.Y -= 2f;
        if (Main.rand.Next(2) == 0)
        {
          Dust dust = Dust.NewDustDirect(position, this.width + 4, this.height + 2, 211, Alpha: 50, Scale: 0.8f);
          if (Main.rand.Next(2) == 0)
            dust.alpha += 25;
          if (Main.rand.Next(2) == 0)
            dust.alpha += 25;
          dust.noLight = true;
          dust.velocity *= 0.2f;
          dust.velocity.Y += 0.2f;
          dust.velocity += this.velocity;
        }
        else
        {
          Dust dust = Dust.NewDustDirect(position, this.width + 8, this.height + 8, 211, Alpha: 50, Scale: 1.1f);
          if (Main.rand.Next(2) == 0)
            dust.alpha += 25;
          if (Main.rand.Next(2) == 0)
            dust.alpha += 25;
          dust.noLight = true;
          dust.noGravity = true;
          dust.velocity *= 0.2f;
          ++dust.velocity.Y;
          dust.velocity += this.velocity;
        }
      }
      if (this.drippingSlime && Main.rand.Next(4) != 0)
      {
        int Alpha = 175;
        Color newColor = new Color(0, 80, (int) byte.MaxValue, 100);
        Vector2 position = this.position;
        position.X -= 2f;
        position.Y -= 2f;
        if (Main.rand.Next(2) == 0)
        {
          Dust dust = Dust.NewDustDirect(position, this.width + 4, this.height + 2, 4, Alpha: Alpha, newColor: newColor, Scale: 1.4f);
          if (Main.rand.Next(2) == 0)
            dust.alpha += 25;
          if (Main.rand.Next(2) == 0)
            dust.alpha += 25;
          dust.noLight = true;
          dust.velocity *= 0.2f;
          dust.velocity.Y += 0.2f;
          dust.velocity += this.velocity;
        }
      }
      if (this.drippingSparkleSlime && Main.rand.Next(4) != 0)
      {
        int Alpha = 150;
        Vector2 position = this.position;
        position.X -= 2f;
        position.Y -= 2f;
        if (Main.rand.Next(2) == 0)
        {
          Dust dust = Dust.NewDustDirect(position, this.width + 4, this.height + 2, 243, Alpha: Alpha);
          if (Main.rand.Next(2) == 0)
            dust.alpha += 25;
          if (Main.rand.Next(2) == 0)
            dust.alpha += 25;
          dust.noLight = true;
          dust.velocity *= 0.2f;
          dust.velocity.Y += 0.2f;
          dust.velocity += this.velocity;
        }
      }
      if (this.onFrostBurn)
      {
        if (Main.rand.Next(4) < 3)
        {
          Dust dust = Dust.NewDustDirect(new Vector2(this.position.X - 2f, this.position.Y - 2f), this.width + 4, this.height + 4, 135, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, Scale: 3.5f);
          dust.noGravity = true;
          dust.velocity *= 1.8f;
          dust.velocity.Y -= 0.5f;
          if (Main.rand.Next(4) == 0)
          {
            dust.noGravity = false;
            dust.scale *= 0.5f;
          }
        }
        Lighting.AddLight((int) ((double) this.position.X / 16.0), (int) ((double) this.position.Y / 16.0 + 1.0), 0.1f, 0.6f, 1f);
      }
      if (this.onFrostBurn2)
      {
        if (Main.rand.Next(4) < 3)
        {
          Dust dust = Dust.NewDustDirect(new Vector2(this.position.X - 2f, this.position.Y - 2f), this.width + 4, this.height + 4, 135, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, Scale: 3.5f);
          dust.noGravity = true;
          dust.velocity *= 1.8f;
          dust.velocity.Y -= 0.5f;
          if (Main.rand.Next(4) == 0)
          {
            dust.noGravity = false;
            dust.scale *= 0.5f;
          }
        }
        Lighting.AddLight((int) ((double) this.position.X / 16.0), (int) ((double) this.position.Y / 16.0 + 1.0), 0.1f, 0.6f, 1f);
      }
      if (this.onFire2)
      {
        if (Main.rand.Next(4) < 3)
        {
          Dust dust = Dust.NewDustDirect(new Vector2(this.position.X - 2f, this.position.Y - 2f), this.width + 4, this.height + 4, 75, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, Scale: 3.5f);
          dust.noGravity = true;
          dust.velocity *= 1.8f;
          dust.velocity.Y -= 0.5f;
          if (Main.rand.Next(4) == 0)
          {
            dust.noGravity = false;
            dust.scale *= 0.5f;
          }
        }
        Lighting.AddLight((int) ((double) this.position.X / 16.0), (int) ((double) this.position.Y / 16.0 + 1.0), 1f, 0.3f, 0.1f);
      }
      this.netShimmer = false;
      if (this.shimmering)
      {
        this.shimmerTransparency += 0.01f;
        if (Main.netMode != 1 && (double) this.shimmerTransparency > 0.9)
          this.GetShimmered();
        if ((double) this.shimmerTransparency > 1.0)
          this.shimmerTransparency = 1f;
      }
      else if ((double) this.shimmerTransparency > 0.0)
      {
        if (this.justHit)
          this.shimmerTransparency -= 0.1f;
        if (this.buffImmune[353])
          this.shimmerTransparency -= 0.015f;
        else
          this.shimmerTransparency -= 1f / 1000f;
        if ((double) this.shimmerTransparency < 0.0)
          this.shimmerTransparency = 0.0f;
      }
      this.position = this.position - this.netOffset;
    }

    private void GetShimmered()
    {
      if (this.SpawnedFromStatue)
      {
        if (Main.netMode == 0)
          Item.ShimmerEffect(this.Center);
        else
          NetMessage.SendData(146, number2: ((float) (int) this.Center.X), number3: ((float) (int) this.Center.Y));
        NPC.noSpawnCycle = true;
        this.active = false;
        if (Main.netMode != 2)
          return;
        this.netSkip = -1;
        this.life = 0;
        NetMessage.SendData(23, number: this.whoAmI);
      }
      else if (NPCID.Sets.ShimmerTransformToNPC[this.type] >= 0)
      {
        this.Transform(NPCID.Sets.ShimmerTransformToNPC[this.type]);
        if (Main.netMode == 0)
          Item.ShimmerEffect(this.Center);
        else
          NetMessage.SendData(146, number2: ((float) (int) this.Center.X), number3: ((float) (int) this.Center.Y));
      }
      else if (NPCID.Sets.ShimmerTransformToItem[this.type] >= 0)
      {
        int number = Item.NewItem(this.GetItemSource_Misc(8), (int) this.position.X, (int) this.position.Y, this.width, this.height, NPCID.Sets.ShimmerTransformToItem[this.type]);
        Main.item[number].stack = 1;
        Main.item[number].shimmerTime = 1f;
        Main.item[number].shimmered = true;
        Main.item[number].shimmerWet = true;
        Main.item[number].wet = true;
        Item obj = Main.item[number];
        obj.velocity = obj.velocity * 0.1f;
        Main.item[number].playerIndexTheItemIsReservedFor = Main.myPlayer;
        NetMessage.SendData(145, number: number, number2: 1f);
        if (Main.netMode == 0)
          Item.ShimmerEffect(this.Center);
        else
          NetMessage.SendData(146, number2: ((float) (int) this.Center.X), number3: ((float) (int) this.Center.Y));
        NPC.noSpawnCycle = true;
        this.active = false;
        if (Main.netMode != 2)
          return;
        this.netSkip = -1;
        this.life = 0;
        NetMessage.SendData(23, number: this.whoAmI);
      }
      else
      {
        if (!NPCID.Sets.ShimmerTownTransform[this.type])
          return;
        this.ai[0] = 25f;
        this.ai[1] = 0.0f;
        this.ai[2] = 0.0f;
        this.ai[3] = 0.0f;
        this.netUpdate = true;
        this.shimmerTransparency = 0.89f;
        int buffIndex = this.FindBuffIndex(353);
        if (buffIndex == -1)
          return;
        this.DelBuff(buffIndex);
      }
    }

    private void UpdateNPC_BuffApplyDOTs()
    {
      if (this.dontTakeDamage)
        return;
      int amount = this.lifeRegenExpectedLossPerSecond;
      if (this.poisoned)
      {
        if (this.lifeRegen > 0)
          this.lifeRegen = 0;
        this.lifeRegen -= 12;
      }
      if (this.onFire)
      {
        if (this.lifeRegen > 0)
          this.lifeRegen = 0;
        this.lifeRegen -= 8;
      }
      if (this.onFire3)
      {
        if (this.lifeRegen > 0)
          this.lifeRegen = 0;
        this.lifeRegen -= 30;
        if (amount < 5)
          amount = 5;
      }
      if (this.onFrostBurn)
      {
        if (this.lifeRegen > 0)
          this.lifeRegen = 0;
        this.lifeRegen -= 16;
        if (amount < 2)
          amount = 2;
      }
      if (this.onFrostBurn2)
      {
        if (this.lifeRegen > 0)
          this.lifeRegen = 0;
        this.lifeRegen -= 50;
        if (amount < 10)
          amount = 10;
      }
      if (this.onFire2)
      {
        if (this.lifeRegen > 0)
          this.lifeRegen = 0;
        this.lifeRegen -= 48;
        if (amount < 10)
          amount = 10;
      }
      if (this.venom)
      {
        if (this.lifeRegen > 0)
          this.lifeRegen = 0;
        this.lifeRegen -= 60;
        if (amount < 15)
          amount = 15;
      }
      if (this.shadowFlame)
      {
        if (this.lifeRegen > 0)
          this.lifeRegen = 0;
        this.lifeRegen -= 30;
        if (amount < 5)
          amount = 5;
      }
      if (this.oiled && (this.onFire || this.onFire2 || this.onFire3 || this.onFrostBurn || this.onFrostBurn2 || this.shadowFlame))
      {
        if (this.lifeRegen > 0)
          this.lifeRegen = 0;
        this.lifeRegen -= 50;
        if (amount < 10)
          amount = 10;
      }
      if (this.javelined)
      {
        if (this.lifeRegen > 0)
          this.lifeRegen = 0;
        int num1 = 0;
        int num2 = 1;
        for (int index = 0; index < 1000; ++index)
        {
          if (Main.projectile[index].active && Main.projectile[index].type == 598 && (double) Main.projectile[index].ai[0] == 1.0 && (double) Main.projectile[index].ai[1] == (double) this.whoAmI)
            ++num1;
        }
        this.lifeRegen -= num1 * 2 * 3;
        if (amount < num1 * 3 / num2)
          amount = num1 * 3 / num2;
      }
      if (this.tentacleSpiked)
      {
        if (this.lifeRegen > 0)
          this.lifeRegen = 0;
        int num3 = 0;
        int num4 = 1;
        for (int index = 0; index < 1000; ++index)
        {
          if (Main.projectile[index].active && Main.projectile[index].type == 971 && (double) Main.projectile[index].ai[0] == 1.0 && (double) Main.projectile[index].ai[1] == (double) this.whoAmI)
            ++num3;
        }
        this.lifeRegen -= num3 * 2 * 3;
        if (amount < num3 * 3 / num4)
          amount = num3 * 3 / num4;
      }
      if (this.bloodButchered)
      {
        if (this.lifeRegen > 0)
          this.lifeRegen = 0;
        int num5 = 0;
        int num6 = 1;
        for (int index = 0; index < 1000; ++index)
        {
          if (Main.projectile[index].active && Main.projectile[index].type == 975 && (double) Main.projectile[index].ai[0] == 1.0 && (double) Main.projectile[index].ai[1] == (double) this.whoAmI)
            ++num5;
        }
        this.lifeRegen -= num5 * 2 * 4;
        if (amount < num5 * 4 / num6)
          amount = num5 * 4 / num6;
      }
      if (this.daybreak)
      {
        if (this.lifeRegen > 0)
          this.lifeRegen = 0;
        int num7 = 0;
        int num8 = 4;
        for (int index = 0; index < 1000; ++index)
        {
          if (Main.projectile[index].active && Main.projectile[index].type == 636 && (double) Main.projectile[index].ai[0] == 1.0 && (double) Main.projectile[index].ai[1] == (double) this.whoAmI)
            ++num7;
        }
        if (num7 == 0)
          num7 = 1;
        this.lifeRegen -= num7 * 2 * 100;
        if (amount < num7 * 100 / num8)
          amount = num7 * 100 / num8;
      }
      if (this.celled)
      {
        if (this.lifeRegen > 0)
          this.lifeRegen = 0;
        int num = 0;
        for (int index = 0; index < 1000; ++index)
        {
          if (Main.projectile[index].active && Main.projectile[index].type == 614 && (double) Main.projectile[index].ai[0] == 1.0 && (double) Main.projectile[index].ai[1] == (double) this.whoAmI)
            ++num;
        }
        this.lifeRegen -= num * 2 * 20;
        if (amount < num * 20)
          amount = num * 20 / 2;
      }
      if (this.dryadBane)
      {
        int num9 = 4;
        float num10 = 1f;
        if (this.lifeRegen > 0)
          this.lifeRegen = 0;
        if (NPC.downedBoss1)
          num10 += 0.1f;
        if (NPC.downedBoss2)
          num10 += 0.1f;
        if (NPC.downedBoss3)
          num10 += 0.1f;
        if (NPC.downedQueenBee)
          num10 += 0.1f;
        if (Main.hardMode)
          num10 += 0.4f;
        if (NPC.downedMechBoss1)
          num10 += 0.15f;
        if (NPC.downedMechBoss2)
          num10 += 0.15f;
        if (NPC.downedMechBoss3)
          num10 += 0.15f;
        if (NPC.downedPlantBoss)
          num10 += 0.15f;
        if (NPC.downedGolemBoss)
          num10 += 0.15f;
        if (NPC.downedAncientCultist)
          num10 += 0.15f;
        if (Main.expertMode)
          num10 *= Main.GameModeInfo.TownNPCDamageMultiplier;
        int num11 = (int) ((double) num9 * (double) num10);
        this.lifeRegen -= 2 * num11;
        if (amount < num11)
          amount = num11 / 3;
      }
      if (this.soulDrain && this.realLife == -1)
      {
        if (this.lifeRegen > 0)
          this.lifeRegen = 0;
        this.lifeRegen -= 50;
        if (amount < 5)
          amount = 5;
      }
      if (this.lifeRegen <= -240 && amount < 2)
        amount = 2;
      this.lifeRegenCount += this.lifeRegen;
      while (this.lifeRegenCount >= 120)
      {
        this.lifeRegenCount -= 120;
        if (!this.immortal)
        {
          if (this.life < this.lifeMax)
            ++this.life;
          if (this.life > this.lifeMax)
            this.life = this.lifeMax;
        }
      }
      if (amount > 0)
      {
        while (this.lifeRegenCount <= -120 * amount)
        {
          this.lifeRegenCount += 120 * amount;
          int number = this.whoAmI;
          if (this.realLife >= 0)
            number = this.realLife;
          if (!Main.npc[number].immortal)
            Main.npc[number].life -= amount;
          CombatText.NewText(new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height), CombatText.LifeRegenNegative, amount, dot: true);
          if (Main.npc[number].life <= 0 && !Main.npc[number].immortal)
          {
            Main.npc[number].life = 1;
            if (Main.netMode != 1)
            {
              Main.npc[number].StrikeNPCNoInteraction(9999, 0.0f, 0);
              if (Main.netMode == 2)
                NetMessage.SendData(28, number: number, number2: 9999f);
            }
          }
        }
      }
      else
      {
        while (this.lifeRegenCount <= -120)
        {
          this.lifeRegenCount += 120;
          int number = this.whoAmI;
          if (this.realLife >= 0)
            number = this.realLife;
          if (!Main.npc[number].immortal)
            --Main.npc[number].life;
          CombatText.NewText(new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height), CombatText.LifeRegenNegative, 1, dot: true);
          if (Main.npc[number].life <= 0 && !Main.npc[number].immortal)
          {
            Main.npc[number].life = 1;
            if (Main.netMode != 1)
            {
              Main.npc[number].StrikeNPCNoInteraction(9999, 0.0f, 0);
              if (Main.netMode == 2)
                NetMessage.SendData(28, number: number, number2: 9999f);
            }
          }
        }
      }
    }

    private void UpdateNPC_BuffClearExpiredBuffs()
    {
      if (Main.netMode == 1)
        return;
      for (int buffIndex = 0; buffIndex < NPC.maxBuffs; ++buffIndex)
      {
        if (this.buffType[buffIndex] > 0 && this.buffTime[buffIndex] <= 0)
        {
          this.DelBuff(buffIndex);
          if (Main.netMode == 2)
            NetMessage.SendData(54, number: this.whoAmI);
        }
      }
    }

    private void UpdateNPC_BloodMoonTransformations()
    {
      if (Main.netMode == 1 || !Main.bloodMoon)
        return;
      bool flag = false;
      if ((double) this.value == 0.0)
        flag = true;
      this.AttemptToConvertNPCToEvil(WorldGen.crimson);
      if (!flag)
        return;
      this.value = 0.0f;
    }

    public void AttemptToConvertNPCToEvil(bool crimson)
    {
      if (this.type == 46 || this.type == 303 || this.type == 337 || this.type == 443 || this.type == 540)
      {
        if (crimson)
          this.Transform(464);
        else
          this.Transform(47);
      }
      else if (this.type == 55 || this.type == 230 || this.type == 592 || this.type == 593)
      {
        if (crimson)
          this.Transform(465);
        else
          this.Transform(57);
      }
      else
      {
        if (this.type != 148 && this.type != 149)
          return;
        if (crimson)
          this.Transform(470);
        else
          this.Transform(168);
      }
    }

    public void UpdateNPC_BuffSetFlags(bool lowerBuffTime = true)
    {
      for (int buffIndex = 0; buffIndex < NPC.maxBuffs; ++buffIndex)
      {
        if (this.buffType[buffIndex] > 0 && this.buffTime[buffIndex] > 0)
        {
          if (lowerBuffTime)
            --this.buffTime[buffIndex];
          if (this.buffType[buffIndex] == 20)
            this.poisoned = true;
          if (this.buffType[buffIndex] == 70)
            this.venom = true;
          if (this.buffType[buffIndex] == 24)
            this.onFire = true;
          if (this.buffType[buffIndex] == 72)
            this.midas = true;
          if (this.buffType[buffIndex] == 69)
            this.ichor = true;
          if (this.buffType[buffIndex] == 31)
            this.confused = true;
          if (this.buffType[buffIndex] == 39)
            this.onFire2 = true;
          if (this.buffType[buffIndex] == 44)
            this.onFrostBurn = true;
          if (this.buffType[buffIndex] == 103)
            this.dripping = true;
          if (this.buffType[buffIndex] == 137)
            this.drippingSlime = true;
          if (this.buffType[buffIndex] == 320)
            this.drippingSparkleSlime = true;
          if (this.buffType[buffIndex] == 119)
            this.loveStruck = true;
          if (this.buffType[buffIndex] == 120)
            this.stinky = true;
          if (this.buffType[buffIndex] == 151)
            this.soulDrain = true;
          if (this.buffType[buffIndex] == 153)
            this.shadowFlame = true;
          if (this.buffType[buffIndex] == 165)
            this.dryadWard = true;
          if (this.buffType[buffIndex] == 169)
            this.javelined = true;
          if (this.buffType[buffIndex] == 337)
            this.tentacleSpiked = true;
          if (this.buffType[buffIndex] == 344)
            this.bloodButchered = true;
          if (this.buffType[buffIndex] == 183)
            this.celled = true;
          if (this.buffType[buffIndex] == 186)
            this.dryadBane = true;
          if (this.buffType[buffIndex] == 189)
            this.daybreak = true;
          if (this.buffType[buffIndex] == 203)
            this.betsysCurse = true;
          if (this.buffType[buffIndex] == 204)
            this.oiled = true;
          if (this.buffType[buffIndex] == 310)
            this.markedByScytheWhip = true;
          if (this.buffType[buffIndex] == 323)
            this.onFire3 = true;
          if (this.buffType[buffIndex] == 324)
            this.onFrostBurn2 = true;
          if (this.buffType[buffIndex] == 353)
          {
            if (this.buffImmune[353])
              this.DelBuff(buffIndex);
            else
              this.shimmering = true;
          }
        }
      }
    }

    private void UpdateNPC_BuffFlagsReset()
    {
      this.lifeRegen = 0;
      this.soulDrain = false;
      this.poisoned = false;
      this.venom = false;
      this.shadowFlame = false;
      this.onFire = false;
      this.midas = false;
      this.ichor = false;
      this.onFrostBurn = false;
      this.onFrostBurn2 = false;
      this.onFire2 = false;
      this.onFire3 = false;
      this.confused = false;
      this.loveStruck = false;
      this.dryadWard = false;
      this.stinky = false;
      this.dripping = false;
      this.drippingSlime = false;
      this.drippingSparkleSlime = false;
      this.daybreak = false;
      this.javelined = false;
      this.tentacleSpiked = false;
      this.bloodButchered = false;
      this.celled = false;
      this.dryadBane = false;
      this.betsysCurse = false;
      this.oiled = false;
      this.markedByScytheWhip = false;
      this.shimmering = false;
      this.lifeRegenExpectedLossPerSecond = -1;
    }

    private void UpdateNPC_TeleportVisuals()
    {
      if ((double) this.teleportTime <= 0.0)
        return;
      if (this.teleportStyle == 0)
      {
        if ((double) Main.rand.Next(100) <= 100.0 * (double) this.teleportTime * 2.0)
        {
          int index = Dust.NewDust(new Vector2((float) this.getRect().X, (float) this.getRect().Y), this.getRect().Width, this.getRect().Height, 159);
          Main.dust[index].scale = this.teleportTime * 1.5f;
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 1.1f;
        }
      }
      else if (this.teleportStyle == 4)
      {
        this.teleportTime -= 0.02f;
        if ((double) Main.rand.Next(100) <= 100.0 * (double) this.teleportTime)
        {
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 263)];
          dust.color = PortalHelper.GetPortalColor(this.lastPortalColorIndex);
          dust.noLight = true;
          dust.noGravity = true;
          dust.scale = 1.2f;
          dust.fadeIn = 0.4f;
        }
      }
      else if (this.teleportStyle == 12)
      {
        this.teleportTime -= 0.02f;
        if ((double) Main.rand.Next(100) <= 100.0 * (double) this.teleportTime)
        {
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 263)];
          dust.color = Main.hslToRgb((float) (Main.timeForVisualEffects / 60.0) % 1f, 1f, 0.75f, (byte) 0);
          dust.noLight = true;
          dust.noGravity = true;
          dust.scale = 1.2f;
          dust.fadeIn = 0.4f;
        }
      }
      else if (this.teleportStyle == 13)
        this.teleportTime = 0.0f;
      this.teleportTime = Math.Max(0.0f, this.teleportTime - 0.005f);
    }

    private void UpdateNPC_CritterSounds()
    {
      if (Main.netMode == 2)
        return;
      if (this.type == 611 && !Main.dayTime && Main.rand.Next(700) == 0)
        SoundEngine.PlaySound(46, (int) this.position.X, (int) this.position.Y);
      if (this.type >= 602 && this.type <= 603 && Main.dayTime && Main.rand.Next(1200) == 0)
        SoundEngine.PlaySound(44, (int) this.position.X, (int) this.position.Y);
      if (this.type >= 362 && this.type <= 365)
      {
        if (!Main.dayTime || Main.rand.Next(200) != 0)
          return;
        SoundEngine.PlaySound(30, (int) this.position.X, (int) this.position.Y);
      }
      else if (this.type == 361 || this.type == 445 || this.type == 687)
      {
        if ((double) Math.Abs(this.velocity.X) >= 0.5 || Main.dayTime && (double) this.position.Y <= Main.worldSurface * 16.0 || Main.rand.Next(200) != 0)
          return;
        SoundEngine.PlaySound(31, (int) this.position.X, (int) this.position.Y);
      }
      else if (this.type == 74 || this.type == 297 || this.type == 298 || this.type == 442 || this.type == 671 || this.type == 672 || this.type == 673 || this.type == 674 || this.type == 675)
      {
        if (!Main.dayTime || Main.time >= 18000.0)
          return;
        int maxValue = 400;
        if (Main.rand.Next(maxValue) != 0)
          return;
        if (this.type == 74)
        {
          if (Main.rand.Next(3) != 0)
            SoundEngine.PlaySound(32, (int) this.position.X, (int) this.position.Y, 14);
          else
            SoundEngine.PlaySound(32, (int) this.position.X, (int) this.position.Y, 18);
        }
        if (this.type == 297)
          SoundEngine.PlaySound(32, (int) this.position.X, (int) this.position.Y, 16);
        if (this.type == 298)
        {
          if (Main.rand.Next(3) != 0)
            SoundEngine.PlaySound(32, (int) this.position.X, (int) this.position.Y, 17);
          else
            SoundEngine.PlaySound(32, (int) this.position.X, (int) this.position.Y, 19);
        }
        if (this.type == 674 || this.type == 675)
          SoundEngine.PlaySound(67, (int) this.position.X, (int) this.position.Y);
        if (this.type == 671 || this.type == 672)
          SoundEngine.PlaySound(68, (int) this.position.X, (int) this.position.Y);
        if (this.type == 673)
          SoundEngine.PlaySound(69, (int) this.position.X, (int) this.position.Y);
        if (this.type != 442)
          return;
        switch (Main.rand.Next(5))
        {
          case 0:
            SoundEngine.PlaySound(32, (int) this.position.X, (int) this.position.Y, 16);
            break;
          case 1:
            SoundEngine.PlaySound(32, (int) this.position.X, (int) this.position.Y, 17);
            break;
          case 2:
            SoundEngine.PlaySound(32, (int) this.position.X, (int) this.position.Y, 19);
            break;
          case 3:
            SoundEngine.PlaySound(32, (int) this.position.X, (int) this.position.Y, 14);
            break;
          default:
            SoundEngine.PlaySound(32, (int) this.position.X, (int) this.position.Y, 18);
            break;
        }
      }
      else
      {
        if (this.type != 300 && this.type != 447 && this.type != 610 || Main.rand.Next(1800) != 0)
          return;
        SoundEngine.PlaySound(33, (int) this.position.X, (int) this.position.Y);
      }
    }

    private void UpdateNPC_CastLights()
    {
      if (this.type >= 442 && this.type <= 448 || this.type == 539 || this.type == 592 || this.type == 593 || this.type == 601 || this.type == 605 || this.type == 627)
      {
        this.position = this.position + this.netOffset;
        Color color = Lighting.GetColor((int) this.Center.X / 16, (int) this.Center.Y / 16);
        if (color.R > (byte) 20 || color.B > (byte) 20 || color.G > (byte) 20)
        {
          int num1 = (int) color.R;
          if ((int) color.G > num1)
            num1 = (int) color.G;
          if ((int) color.B > num1)
            num1 = (int) color.B;
          int num2 = num1 / 30;
          if (Main.rand.Next(300) < num2)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 43, Alpha: 254, newColor: new Color((int) byte.MaxValue, (int) byte.MaxValue, 0), Scale: 0.5f);
            Main.dust[index].velocity *= 0.0f;
          }
        }
        this.position = this.position - this.netOffset;
      }
      if (this.type == 160)
      {
        float num3 = (float) Main.rand.Next(28, 42) * 0.005f + (float) (270 - (int) Main.mouseTextColor) / 500f;
        float num4 = 0.1f;
        float num5 = (float) (0.30000001192092896 + (double) num3 / 2.0);
        float num6 = 0.6f + num3;
        if (this.townNpcVariationIndex == 1)
        {
          double num7 = (double) num4;
          num4 = num6;
          num6 = (float) num7;
        }
        float num8 = 0.35f;
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, num4 * num8, num5 * num8, num6 * num8);
      }
      if (this.type >= 254 && this.type <= 261 || this.type == 634 || this.type == 635)
      {
        float num9 = (float) Main.rand.Next(28, 42) * 0.005f + (float) (270 - (int) Main.mouseTextColor) / 500f;
        float num10 = 0.1f;
        float num11 = (float) (0.30000001192092896 + (double) num9 / 2.0);
        float num12 = 0.6f + num9;
        float num13 = 0.35f;
        if (this.type == 634)
          num13 = 0.65f;
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, num10 * num13, num11 * num13, num12 * num13);
      }
      if (this.type == 209)
      {
        float num14 = (float) Main.rand.Next(28, 42) * 0.005f + (float) (270 - (int) Main.mouseTextColor) / 500f;
        float num15 = 0.1f;
        float num16 = (float) (0.30000001192092896 + (double) num14 / 2.0);
        float num17 = (float) (0.40000000596046448 + (double) num14 / 2.0);
        float num18 = 0.35f;
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, num15 * num18, num16 * num18, num17 * num18);
        if ((double) this.ai[0] == 12.0)
          Lighting.AddLight(this.Top, 0.3f, 0.1f, 0.1f);
      }
      if (this.type != 44)
        return;
      Lighting.AddLight((int) ((double) this.position.X + (double) (this.width / 2)) / 16, (int) ((double) this.position.Y + 4.0) / 16, 0.9f, 0.75f, 0.5f);
    }

    private void GetHurtByOtherNPCs(bool[] acceptableNPCIDs)
    {
      if (this.dontTakeDamage || this.dontTakeDamageFromHostiles || this.immortal)
        return;
      int specialHitSetter = 1;
      float damageMultiplier = 1f;
      if (this.immune[(int) byte.MaxValue] != 0)
        return;
      Microsoft.Xna.Framework.Rectangle hitbox1 = this.Hitbox;
      for (int index = 0; index < 200; ++index)
      {
        NPC thatNPC = Main.npc[index];
        if (acceptableNPCIDs[thatNPC.type] && thatNPC.active && !thatNPC.friendly && thatNPC.damage > 0)
        {
          Microsoft.Xna.Framework.Rectangle hitbox2 = thatNPC.Hitbox;
          NPC.GetMeleeCollisionData(hitbox1, index, ref specialHitSetter, ref damageMultiplier, ref hitbox2);
          if (hitbox1.Intersects(hitbox2) && (this.type != 453 || !NPCID.Sets.Skeletons[thatNPC.type]) && thatNPC.type != 624)
          {
            this.BeHurtByOtherNPC(index, thatNPC);
            break;
          }
        }
      }
    }

    private void BeHurtByOtherNPC(int npcIndex, NPC thatNPC)
    {
      int num1 = 30;
      if (this.type == 548)
        num1 = 20;
      int num2 = Main.DamageVar((float) thatNPC.damage);
      int num3 = 6;
      int num4 = (double) thatNPC.Center.X > (double) this.Center.X ? -1 : 1;
      double num5 = this.StrikeNPCNoInteraction(num2, (float) num3, num4);
      if (Main.netMode != 0)
        NetMessage.SendData(28, number: this.whoAmI, number2: ((float) num2), number3: ((float) num3), number4: ((float) num4));
      this.netUpdate = true;
      this.immune[(int) byte.MaxValue] = num1;
      if (this.dryadWard)
      {
        int num6 = (int) num5 / 3;
        int num7 = 6;
        num4 *= -1;
        thatNPC.StrikeNPCNoInteraction(num6, (float) num7, num4);
        if (Main.netMode != 0)
          NetMessage.SendData(28, number: npcIndex, number2: ((float) num6), number3: ((float) num7), number4: ((float) num4));
        thatNPC.netUpdate = true;
        thatNPC.immune[(int) byte.MaxValue] = num1;
      }
      if (!NPCID.Sets.HurtingBees[thatNPC.type])
        return;
      int damage = this.damage;
      int num8 = 6;
      int num9 = num4 * -1;
      thatNPC.StrikeNPCNoInteraction(damage, (float) num8, num9);
      if (Main.netMode != 0)
        NetMessage.SendData(28, number: npcIndex, number2: ((float) damage), number3: ((float) num8), number4: ((float) num9));
      thatNPC.netUpdate = true;
      thatNPC.immune[(int) byte.MaxValue] = num1;
    }

    private void CheckLifeRegen()
    {
      if (this.life >= this.lifeMax)
        return;
      ++this.friendlyRegen;
      if (this.dryadWard)
        this.friendlyRegen += 10;
      if (this.friendlyRegen <= 180)
        return;
      this.friendlyRegen = 0;
      ++this.life;
      this.netUpdate = true;
    }

    public void GetImmuneTime(int fromWho, int time)
    {
      if (fromWho == -1)
      {
        for (int index = 0; index < this.immune.Length; ++index)
          this.immune[index] = time;
      }
      else
      {
        if (fromWho < 0 || fromWho >= this.immune.Length)
          return;
        this.immune[fromWho] = time;
      }
    }

    private void UpdateCollision()
    {
      this.Collision_WalkDownSlopes();
      this.Collision_WaterCollision(this.Collision_LavaCollision());
      if (!this.wet)
      {
        this.lavaWet = false;
        this.honeyWet = false;
        this.shimmerWet = false;
      }
      if (this.wetCount > (byte) 0)
        --this.wetCount;
      bool fall = this.Collision_DecideFallThroughPlatforms();
      this.oldVelocity = this.velocity;
      this.collideX = false;
      this.collideY = false;
      this.FishTransformationDuringRain();
      Vector2 cPosition;
      int cWidth;
      int cHeight;
      this.GetTileCollisionParameters(out cPosition, out cWidth, out cHeight);
      Vector2 velocity = this.velocity;
      this.ApplyTileCollision(fall, cPosition, cWidth, cHeight);
      if (this.wet)
      {
        if (this.shimmerWet)
          this.Collision_MoveWhileWet(velocity, this.shimmerMovementSpeed);
        else if (this.honeyWet)
          this.Collision_MoveWhileWet(velocity, this.honeyMovementSpeed);
        else if (this.lavaWet)
          this.Collision_MoveWhileWet(velocity, this.lavaMovementSpeed);
        else
          this.Collision_MoveWhileWet(velocity, this.waterMovementSpeed);
      }
      else
        this.Collision_MoveWhileDry();
      if (this.aiStyle == 67)
      {
        this.Collision_MoveSnailOnSlopes();
      }
      else
      {
        if (this.type == 72 || this.type == 247 || this.type == 248 || this.type >= 542 && this.type <= 545 || NPCID.Sets.BelongsToInvasionOldOnesArmy[this.type] && this.noGravity)
          return;
        this.Collision_MoveSlopesAndStairFall(fall);
        if (!this.townNPC)
          return;
        Collision.StepConveyorBelt((Entity) this, 1f);
      }
    }

    private void Collision_MoveWhileDry()
    {
      if (Collision.up)
        this.velocity.Y = 0.01f;
      if ((double) this.oldVelocity.X != (double) this.velocity.X)
        this.collideX = true;
      if ((double) this.oldVelocity.Y != (double) this.velocity.Y)
        this.collideY = true;
      this.oldPosition = this.position;
      this.oldDirection = this.direction;
      this.position = this.position + this.velocity;
    }

    private void ApplyTileCollision(bool fall, Vector2 cPosition, int cWidth, int cHeight)
    {
      if (this.type == 72)
        this.Collision_MoveBlazingWheel();
      else if (this.type >= 542 && this.type <= 545)
        this.Collision_MoveSandshark(fall, cPosition, cWidth, cHeight);
      else if (this.type == 405 || this.type == 406)
        this.Collision_MoveStardustCell(fall, cPosition, cWidth, cHeight);
      else if (this.type == 417)
        this.Collision_MoveSolarSroller(fall, cPosition, cWidth, cHeight);
      else
        this.Collision_MoveNormal(fall, cPosition, cWidth, cHeight);
    }

    private void Collision_MoveSlopesAndStairFall(bool fall)
    {
      if (fall)
        this.stairFall = true;
      if (this.aiStyle == 7)
      {
        int x = (int) this.Center.X / 16;
        int y = (int) this.position.Y / 16;
        if (WorldGen.InWorld(x, y))
        {
          int num = 16;
          bool flag = false;
          if (Main.tile[x, y] != null && Main.tile[x, y].active() && Main.tileSolid[(int) Main.tile[x, y].type])
            flag = true;
          if (!this.townNPC)
            flag = false;
          if (!Main.dayTime || Main.eclipse)
            flag = true;
          else if (this.homeTileY - (int) ((double) this.position.Y + (double) this.height) / 16 > num)
            flag = true;
          if (flag)
            this.stairFall = ((double) this.position.Y + (double) this.height - 8.0) / 16.0 < (double) this.homeTileY;
        }
      }
      Vector2 cPosition;
      int cWidth;
      int cHeight;
      this.GetTileCollisionParameters(out cPosition, out cWidth, out cHeight);
      Vector2 vector2 = this.position - cPosition;
      Vector4 vector4 = Collision.SlopeCollision(cPosition, this.velocity, cWidth, cHeight, NPC.gravity, this.stairFall);
      if (Collision.stairFall)
        this.stairFall = true;
      else if (!fall)
        this.stairFall = false;
      if (Collision.stair && (double) Math.Abs(vector4.Y - this.position.Y) > 8.0)
      {
        this.gfxOffY -= vector4.Y - this.position.Y;
        this.stepSpeed = 2f;
      }
      this.position.X = vector4.X;
      this.position.Y = vector4.Y;
      this.velocity.X = vector4.Z;
      this.velocity.Y = vector4.W;
      this.position = this.position + vector2;
    }

    private void Collision_MoveSnailOnSlopes()
    {
      Vector4 vector4 = Collision.SlopeCollision(this.position, this.velocity, this.width, this.height, NPC.gravity);
      if ((double) this.position.X != (double) vector4.X || (double) this.position.Y != (double) vector4.Y)
      {
        if ((double) this.ai[2] == 0.0 && (double) this.velocity.Y > 0.0 && (this.direction < 0 && (double) this.rotation == 1.5700000524520874 && this.spriteDirection == 1 || this.direction > 0 && (double) this.rotation == 4.7100000381469727 && this.spriteDirection == -1))
          this.direction *= -this.direction;
        this.ai[2] = 2f;
        this.directionY = 1;
        this.rotation = 0.0f;
      }
      this.position.X = vector4.X;
      this.position.Y = vector4.Y;
      this.velocity.X = vector4.Z;
      this.velocity.Y = vector4.W;
    }

    private void Collision_MoveNormal(bool fall, Vector2 cPosition, int cWidth, int cHeight) => this.velocity = Collision.TileCollision(cPosition, this.velocity, cWidth, cHeight, fall, fall);

    private void Collision_MoveSandshark(bool fall, Vector2 cPosition, int cWidth, int cHeight)
    {
      if (Main.remixWorld)
        return;
      this.velocity = Collision.AdvancedTileCollision(TileID.Sets.ForAdvancedCollision.ForSandshark, cPosition, this.velocity, cWidth, cHeight, fall, fall);
    }

    private void Collision_MoveSolarSroller(bool fall, Vector2 cPosition, int cWidth, int cHeight)
    {
      this.velocity = Collision.TileCollision(cPosition, this.velocity, cWidth, cHeight, fall, fall);
      if ((double) this.ai[0] != 6.0 || !(this.velocity != this.oldVelocity))
        return;
      --this.ai[2];
      this.ai[3] = 1f;
      if ((double) this.ai[2] <= 0.0)
        return;
      if ((double) this.velocity.X != 0.0 && (double) this.velocity.X != (double) this.oldVelocity.X)
      {
        this.velocity.X = (float) (-(double) this.oldVelocity.X * 0.89999997615814209);
        this.direction *= -1;
      }
      if ((double) this.velocity.Y == 0.0 || (double) this.velocity.Y == (double) this.oldVelocity.Y)
        return;
      this.velocity.Y = (float) (-(double) this.oldVelocity.Y * 0.89999997615814209);
    }

    private void Collision_MoveStardustCell(bool fall, Vector2 cPosition, int cWidth, int cHeight)
    {
      this.velocity = Collision.TileCollision(cPosition, this.velocity, cWidth, cHeight, fall, fall);
      if (!(this.velocity != this.oldVelocity))
        return;
      if ((double) this.velocity.X != 0.0 && (double) this.velocity.X != (double) this.oldVelocity.X)
        this.velocity.X = (float) (-(double) this.oldVelocity.X * 0.800000011920929);
      if ((double) this.velocity.Y == 0.0 || (double) this.velocity.Y == (double) this.oldVelocity.Y)
        return;
      this.velocity.Y = (float) (-(double) this.oldVelocity.Y * 0.800000011920929);
    }

    private void Collision_MoveBlazingWheel()
    {
      Vector2 Position = new Vector2(this.position.X + (float) (this.width / 2), this.position.Y + (float) (this.height / 2));
      int Width = 12;
      int Height = 12;
      Position.X -= (float) (Width / 2);
      Position.Y -= (float) (Height / 2);
      this.velocity = Collision.noSlopeCollision(Position, this.velocity, Width, Height, true, true);
    }

    private void Collision_MoveWhileWet(Vector2 oldDryVelocity, float Slowdown = 0.5f)
    {
      if (Collision.up)
        this.velocity.Y = 0.01f;
      Vector2 vector2 = this.velocity * Slowdown;
      if ((double) this.velocity.X != (double) oldDryVelocity.X)
      {
        vector2.X = this.velocity.X;
        this.collideX = true;
      }
      if ((double) this.velocity.Y != (double) oldDryVelocity.Y)
      {
        vector2.Y = this.velocity.Y;
        this.collideY = true;
      }
      this.oldPosition = this.position;
      this.oldDirection = this.direction;
      this.position = this.position + vector2;
    }

    public void GetTileCollisionParameters(out Vector2 cPosition, out int cWidth, out int cHeight)
    {
      cPosition = this.position;
      cWidth = this.width;
      cHeight = this.height;
      if (this.type == 594)
      {
        int num = (int) (44.0 + 20.0 * (double) this.ai[1]);
        cPosition.Y += (float) num;
        cHeight += num;
        cPosition.X += (float) (cWidth / 2);
        cWidth = (int) (6.0 + 26.0 * (double) this.ai[1]);
        cPosition.X -= (float) (cWidth / 2);
      }
      if (this.type == 686)
      {
        int num = 64;
        cPosition.Y += (float) num;
        cHeight += num;
        cPosition.X += (float) (cWidth / 2);
        cWidth = 32;
        cPosition.X -= (float) (cWidth / 2);
      }
      if (this.type == 243)
        cHeight = 90;
      if (this.type == 290)
        cHeight = 40;
      if (this.type == 351)
        cHeight = 40;
      if (this.type == 482)
        cHeight = 40;
      if (this.type == 351 || this.type == 343 || this.type == 348 || this.type == 349)
        cHeight = 40;
      if (this.type == 391)
      {
        for (int index = 0; index < 200; ++index)
        {
          if (Main.npc[index].active && Main.npc[index].type == 390 && (double) Main.npc[index].ai[0] == (double) this.whoAmI)
          {
            cHeight = 62;
            break;
          }
        }
      }
      if (this.type == 415)
      {
        for (int index = 0; index < 200; ++index)
        {
          if (Main.npc[index].active && Main.npc[index].type == 416 && (double) Main.npc[index].ai[0] == (double) this.whoAmI)
          {
            cHeight = 62;
            break;
          }
        }
      }
      if (this.type == 576 || this.type == 577)
      {
        cPosition.X += 32f;
        cWidth -= 64;
      }
      if (cHeight == this.height)
        return;
      cPosition.Y += (float) (this.height - cHeight);
    }

    private void FishTransformationDuringRain()
    {
      if (Main.netMode == 1)
        return;
      if (this.type == 230 && this.wet)
      {
        int direction = this.direction;
        Vector2 velocity = this.velocity;
        this.Transform(55);
        this.direction = direction;
        this.velocity = velocity;
        this.wet = true;
        if ((double) this.velocity.Y >= 0.0)
          return;
        this.velocity.Y = 0.0f;
      }
      else if (this.type == 55 && !this.wet && Main.raining)
      {
        int direction = this.direction;
        Vector2 velocity = this.velocity;
        this.Transform(230);
        this.direction = direction;
        this.velocity = velocity;
        this.UpdateHomeTileState(this.homeless, (int) ((double) this.position.X / 16.0) + 10 * this.direction, this.homeTileY);
      }
      else if (this.type == 593 && this.wet)
      {
        int direction = this.direction;
        Vector2 velocity = this.velocity;
        this.Transform(592);
        this.direction = direction;
        this.velocity = velocity;
        this.wet = true;
        if ((double) this.velocity.Y >= 0.0)
          return;
        this.velocity.Y = 0.0f;
      }
      else
      {
        if (this.type != 592 || this.wet || !Main.raining)
          return;
        int direction = this.direction;
        Vector2 velocity = this.velocity;
        this.Transform(593);
        this.direction = direction;
        this.velocity = velocity;
        this.UpdateHomeTileState(this.homeless, (int) ((double) this.position.X / 16.0) + 10 * this.direction, this.homeTileY);
      }
    }

    private bool Collision_DecideFallThroughPlatforms()
    {
      bool flag1 = false;
      if (this.type == 2 || this.type == -43 || this.type == 190 || this.type == 191 || this.type == 192 || this.type == 193 || this.type == 194 || this.type == 317 || this.type == 318 || this.type == 133)
        flag1 = true;
      if (this.aiStyle == 10)
        flag1 = true;
      if (this.aiStyle == 5)
        flag1 = true;
      if (this.aiStyle == 40)
        flag1 = true;
      if (this.aiStyle == 44)
        flag1 = true;
      if (this.type == 467)
        flag1 = true;
      if (this.type == 477)
        flag1 = true;
      if (this.aiStyle == 22)
        flag1 = true;
      if (this.aiStyle == 49)
        flag1 = true;
      if (this.aiStyle == 14)
        flag1 = true;
      if (this.type == 173)
        flag1 = true;
      if (this.type == 469 && (double) this.ai[2] == 1.0)
        flag1 = true;
      if (this.aiStyle == 3 && this.directionY == 1)
        flag1 = true;
      if (this.type == 210 || this.type == 211)
        flag1 = true;
      if (this.type == 50 && this.target >= 0 && (double) Main.player[this.target].position.Y > (double) this.position.Y + (double) this.height)
        flag1 = true;
      if (this.type == 657 && this.target >= 0 && (double) Main.player[this.target].position.Y > (double) this.Bottom.Y)
        flag1 = true;
      if (this.aiStyle == 26 && this.target >= 0 && (double) Main.player[this.target].Bottom.Y - (double) this.velocity.Y > (double) this.Bottom.Y)
        flag1 = true;
      if (this.type == 247 || this.type == 248)
        flag1 = true;
      if (this.type == 245 && this.target >= 0 && (double) Main.player[this.target].position.Y > (double) this.position.Y + (double) this.height)
        flag1 = true;
      if (this.type >= 542 && this.type <= 545)
        flag1 = true;
      if (this.aiStyle == 107 && this.directionY == 1)
        flag1 = true;
      if (this.type == 418)
        flag1 = true;
      if (this.aiStyle == 87 && (double) Main.player[this.target].position.Y > (double) this.position.Y + (double) this.height)
        flag1 = true;
      if (this.type == 405 || this.type == 406)
        flag1 = true;
      if (this.type == 490)
        flag1 = true;
      if (this.type == 301)
        flag1 = true;
      if (this.aiStyle == 7)
      {
        int num = 16;
        bool flag2 = false;
        if (this.townNPC && (!Main.dayTime || Main.invasionType > 0 || Main.eclipse))
          flag2 = true;
        else if (this.homeTileY - (int) ((double) this.position.Y + (double) this.height) / 16 > num)
          flag1 = true;
        if (flag2 && ((double) this.position.Y + (double) this.height - 8.0) / 16.0 < (double) (this.homeTileY - 1))
          flag1 = true;
      }
      if (this.type == 620)
        flag1 = this.target >= 0 && (double) Main.player[this.target].position.Y > (double) this.Bottom.Y;
      return flag1;
    }

    private bool Collision_WaterCollision(bool lava)
    {
      bool flag;
      if (this.type == 72 || this.aiStyle == 21 || this.aiStyle == 67 || this.type == 376 || this.type == 579 || this.type == 541 || this.aiStyle == 7 && (double) this.ai[0] == 25.0)
      {
        flag = false;
        this.wetCount = (byte) 0;
        lava = false;
      }
      else
      {
        flag = Collision.WetCollision(this.position, this.width, this.height);
        if (Collision.honey)
          this.honeyWet = true;
        if (Collision.shimmer)
        {
          this.shimmerWet = true;
          this.AddBuff(353, 100);
        }
      }
      if (this.aiStyle == 116)
        this.wetCount = (byte) 10;
      if (flag)
      {
        if (this.onFire && !this.lavaWet && Main.netMode != 1)
        {
          for (int buffIndex = 0; buffIndex < NPC.maxBuffs; ++buffIndex)
          {
            if (this.buffType[buffIndex] == 24)
              this.DelBuff(buffIndex);
          }
        }
        if (!this.wet && this.wetCount == (byte) 0)
        {
          this.wetCount = (byte) 10;
          if (!lava)
          {
            if (this.shimmerWet)
            {
              if (this.type != 617 && this.type != 616 && this.type != 625)
              {
                for (int index1 = 0; index1 < 30; ++index1)
                {
                  int index2 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, 308);
                  Main.dust[index2].velocity.Y -= 4f;
                  Main.dust[index2].velocity.X *= 2.5f;
                  Main.dust[index2].scale = 0.8f;
                  Main.dust[index2].noGravity = true;
                  switch (Main.rand.Next(6))
                  {
                    case 0:
                      Main.dust[index2].color = new Color((int) byte.MaxValue, (int) byte.MaxValue, 210);
                      break;
                    case 1:
                      Main.dust[index2].color = new Color(190, 245, (int) byte.MaxValue);
                      break;
                    case 2:
                      Main.dust[index2].color = new Color((int) byte.MaxValue, 150, (int) byte.MaxValue);
                      break;
                    default:
                      Main.dust[index2].color = new Color(190, 175, (int) byte.MaxValue);
                      break;
                  }
                }
                if (this.type != 376 && this.type != 579 && this.aiStyle != 1 && this.type != 1 && this.type != 16 && this.type != 147 && this.type != 59 && this.type != 300 && this.aiStyle != 39 && this.aiStyle != 68 && this.type != 362 && this.type != 364 && this.type != 361 && this.type != 445 && !this.noGravity || this.type == 615)
                  SoundEngine.PlaySound(19, (int) this.position.X, (int) this.position.Y, 4);
              }
            }
            else if (this.honeyWet)
            {
              for (int index3 = 0; index3 < 10; ++index3)
              {
                int index4 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, 152);
                --Main.dust[index4].velocity.Y;
                Main.dust[index4].velocity.X *= 2.5f;
                Main.dust[index4].scale = 1.3f;
                Main.dust[index4].alpha = 100;
                Main.dust[index4].noGravity = true;
              }
              if (this.aiStyle != 1 && this.type != 1 && this.type != 16 && this.type != 147 && this.type != 59 && this.type != 300 && this.aiStyle != 39 && !this.noGravity)
                SoundEngine.PlaySound(19, (int) this.position.X, (int) this.position.Y);
            }
            else if (this.type != 617 && this.type != 616 && this.type != 625)
            {
              for (int index5 = 0; index5 < 30; ++index5)
              {
                int index6 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, Dust.dustWater());
                Main.dust[index6].velocity.Y -= 4f;
                Main.dust[index6].velocity.X *= 2.5f;
                Main.dust[index6].scale *= 0.8f;
                Main.dust[index6].alpha = 100;
                Main.dust[index6].noGravity = true;
              }
              if (this.type != 376 && this.type != 579 && this.aiStyle != 1 && this.type != 1 && this.type != 16 && this.type != 147 && this.type != 59 && this.type != 300 && this.aiStyle != 39 && this.aiStyle != 68 && this.type != 362 && this.type != 364 && this.type != 361 && this.type != 445 && !this.noGravity || this.type == 615)
                SoundEngine.PlaySound(19, (int) this.position.X, (int) this.position.Y, 0);
            }
          }
          else
          {
            for (int index7 = 0; index7 < 10; ++index7)
            {
              int index8 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, 35);
              Main.dust[index8].velocity.Y -= 1.5f;
              Main.dust[index8].velocity.X *= 2.5f;
              Main.dust[index8].scale = 1.3f;
              Main.dust[index8].alpha = 100;
              Main.dust[index8].noGravity = true;
            }
            if (this.aiStyle != 1 && this.type != 1 && this.type != 16 && this.type != 147 && this.type != 59 && this.type != 300 && this.aiStyle != 39 && !this.noGravity)
              SoundEngine.PlaySound(19, (int) this.position.X, (int) this.position.Y);
          }
        }
        this.wet = true;
      }
      else if (this.wet)
      {
        this.velocity.X *= 0.5f;
        this.wet = false;
        if (this.type == 620 && (double) this.GetTargetData().Center.Y < (double) this.Center.Y)
          this.velocity.Y -= 8f;
        if (this.wetCount == (byte) 0)
        {
          this.wetCount = (byte) 10;
          if (!this.lavaWet)
          {
            if (this.shimmerWet)
            {
              if (this.type != 617 && this.type != 616 && this.type != 625)
              {
                for (int index9 = 0; index9 < 30; ++index9)
                {
                  int index10 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, 308);
                  Main.dust[index10].velocity.Y -= 4f;
                  Main.dust[index10].velocity.X *= 2.5f;
                  Main.dust[index10].scale = 0.8f;
                  Main.dust[index10].noGravity = true;
                  switch (Main.rand.Next(6))
                  {
                    case 0:
                      Main.dust[index10].color = new Color((int) byte.MaxValue, (int) byte.MaxValue, 210);
                      break;
                    case 1:
                      Main.dust[index10].color = new Color(190, 245, (int) byte.MaxValue);
                      break;
                    case 2:
                      Main.dust[index10].color = new Color((int) byte.MaxValue, 150, (int) byte.MaxValue);
                      break;
                    default:
                      Main.dust[index10].color = new Color(190, 175, (int) byte.MaxValue);
                      break;
                  }
                }
                if (this.type != 376 && this.type != 579 && this.aiStyle != 1 && this.type != 1 && this.type != 16 && this.type != 147 && this.type != 59 && this.type != 300 && this.aiStyle != 39 && this.aiStyle != 68 && this.type != 362 && this.type != 364 && this.type != 361 && this.type != 445 && !this.noGravity || this.type == 615)
                  SoundEngine.PlaySound(19, (int) this.position.X, (int) this.position.Y, 5);
              }
            }
            else if (this.honeyWet)
            {
              for (int index11 = 0; index11 < 10; ++index11)
              {
                int index12 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, 152);
                --Main.dust[index12].velocity.Y;
                Main.dust[index12].velocity.X *= 2.5f;
                Main.dust[index12].scale = 1.3f;
                Main.dust[index12].alpha = 100;
                Main.dust[index12].noGravity = true;
              }
              if (this.aiStyle != 1 && this.type != 1 && this.type != 16 && this.type != 147 && this.type != 300 && this.type != 59 && this.aiStyle != 39 && !this.noGravity)
                SoundEngine.PlaySound(19, (int) this.position.X, (int) this.position.Y);
            }
            else if (this.type != 617 && this.type != 616 && this.type != 625)
            {
              for (int index13 = 0; index13 < 30; ++index13)
              {
                int index14 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, Dust.dustWater());
                Main.dust[index14].velocity.Y -= 4f;
                Main.dust[index14].velocity.X *= 2.5f;
                Main.dust[index14].scale *= 0.8f;
                Main.dust[index14].alpha = 100;
                Main.dust[index14].noGravity = true;
              }
              if (this.type != 376 && this.type != 579 && this.aiStyle != 1 && this.type != 1 && this.type != 16 && this.type != 59 && this.type != 300 && this.aiStyle != 39 && this.aiStyle != 68 && this.type != 362 && this.type != 364 && this.type != 361 && this.type != 445 && !this.noGravity || this.type == 615)
                SoundEngine.PlaySound(19, (int) this.position.X, (int) this.position.Y, 0);
            }
          }
          else
          {
            for (int index15 = 0; index15 < 10; ++index15)
            {
              int index16 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, 35);
              Main.dust[index16].velocity.Y -= 1.5f;
              Main.dust[index16].velocity.X *= 2.5f;
              Main.dust[index16].scale = 1.3f;
              Main.dust[index16].alpha = 100;
              Main.dust[index16].noGravity = true;
            }
            if (this.aiStyle != 1 && this.type != 1 && this.type != 16 && this.type != 59 && this.type != 300 && this.aiStyle != 39 && !this.noGravity)
              SoundEngine.PlaySound(19, (int) this.position.X, (int) this.position.Y);
          }
        }
      }
      return lava;
    }

    private bool Collision_LavaCollision()
    {
      bool flag = Collision.LavaCollision(this.position, this.width, this.height);
      if (this.type == 441)
        flag = false;
      if (flag)
      {
        this.lavaWet = true;
        if (!this.lavaImmune && !this.dontTakeDamage && Main.netMode != 1 && this.immune[(int) byte.MaxValue] == 0)
        {
          this.immune[(int) byte.MaxValue] = 30;
          if (Main.remixWorld && !this.friendly)
          {
            this.AddBuff(24, 180);
          }
          else
          {
            this.AddBuff(24, 420);
            this.StrikeNPCNoInteraction(50, 0.0f, 0);
            if (Main.netMode == 2)
              NetMessage.SendData(28, number: this.whoAmI, number2: 50f);
          }
        }
      }
      return flag;
    }

    private void Collision_WalkDownSlopes()
    {
      Vector2 velocity = this.velocity;
      Vector4 vector4 = Collision.WalkDownSlope(this.position, this.velocity, this.width, this.height, NPC.gravity);
      this.position.X = vector4.X;
      this.position.Y = vector4.Y;
      this.velocity.X = vector4.Z;
      this.velocity.Y = vector4.W;
    }

    public static void setFireFlyChance()
    {
      if (Main.rand == null)
        Main.rand = new UnifiedRandom((int) DateTime.Now.Ticks);
      if (WorldGen.genRand.Next(9) == 0)
      {
        NPC.fireFlyChance = Main.rand.Next(5, 10);
        NPC.fireFlyFriendly = Main.rand.Next(1, 4);
        NPC.fireFlyMultiple = Main.rand.Next(3, 8);
      }
      else if (WorldGen.genRand.Next(3) == 0)
      {
        NPC.fireFlyChance = 999999;
        NPC.fireFlyFriendly = 999999;
        NPC.fireFlyMultiple = 999999;
      }
      else
      {
        NPC.fireFlyChance = Main.rand.Next(10, 60);
        NPC.fireFlyFriendly = Main.rand.Next(2, 15);
        NPC.fireFlyMultiple = Main.rand.Next(6, 30);
      }
      if (Main.rand.Next(3) == 0)
      {
        NPC.butterflyChance = 999999;
        NPC.stinkBugChance = Main.rand.Next(1, 14);
        if (WorldGen.genRand.Next(5) == 0)
          NPC.stinkBugChance = 999999;
      }
      else
      {
        NPC.stinkBugChance = 999999;
        NPC.butterflyChance = Main.rand.Next(1, 21);
        if (WorldGen.genRand.Next(5) == 0)
          NPC.butterflyChance = 999999;
      }
      if (!Main.tenthAnniversaryWorld)
        return;
      NPC.fireFlyChance = Math.Max(1, (int) ((double) NPC.fireFlyChance * 0.5));
      NPC.butterflyChance = Math.Max(1, (int) ((double) NPC.butterflyChance * 0.5));
    }

    public Color GetBestiaryEntryColor() => Color.White;

    public Color GetAlpha(Color newColor)
    {
      if (this.IsABestiaryIconDummy)
        newColor = Color.White;
      float num1 = (float) ((int) byte.MaxValue - this.alpha) / (float) byte.MaxValue;
      int r1 = (int) ((double) newColor.R * (double) num1);
      int g1 = (int) ((double) newColor.G * (double) num1);
      int b1 = (int) ((double) newColor.B * (double) num1);
      int a = (int) newColor.A - this.alpha;
      if (this.type == 402)
        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
      if (this.type == 484)
        return new Color(250, 250, 250, 200);
      if (this.type >= 542 && this.type <= 545 && r1 + g1 + b1 > 10 && r1 + g1 + b1 >= 60)
      {
        r1 *= 2;
        g1 *= 2;
        b1 *= 2;
        if (r1 > (int) byte.MaxValue)
          r1 = (int) byte.MaxValue;
        if (g1 > (int) byte.MaxValue)
          g1 = (int) byte.MaxValue;
        if (b1 > (int) byte.MaxValue)
          b1 = (int) byte.MaxValue;
      }
      if (this.type == 681)
        return Color.Lerp(newColor, Color.White, 0.4f) * this.Opacity;
      if (this.type == 683 || this.type == 687)
      {
        float num2 = Utils.Remap(Utils.WrappedLerp(0.75f, 1f, (float) (Main.timeForVisualEffects % 120.0 / 120.0)), 0.0f, 1f, 0.5f, 1f);
        Color alpha = Color.Lerp(newColor, new Color((int) byte.MaxValue, (int) byte.MaxValue, 100), 0.4f * num2) * this.Opacity;
        if ((int) alpha.B < b1)
          alpha.B = (byte) b1;
        return alpha;
      }
      if (this.type == 658 || this.type == 659 || this.type == 660)
        return Color.Lerp(newColor, Color.White, 0.4f) * this.Opacity;
      if (this.type == 662)
      {
        Color color = Color.Lerp(Color.White, Color.Cyan, 0.5f);
        color.A /= (byte) 4;
        return color * this.Opacity;
      }
      if (this.type >= 454 && this.type <= 459 || this.type == 521)
      {
        newColor = Color.Lerp(newColor, Color.White, 0.4f);
        newColor.A = (byte) 150;
        newColor *= (float) a / (float) byte.MaxValue;
        return newColor;
      }
      if (this.type == 636)
      {
        newColor = Color.Lerp(newColor, Color.White, 0.25f);
        return newColor * this.Opacity;
      }
      if (this.type == 440)
      {
        byte num3 = 180;
        if (Main.expertMode)
          num3 = (byte) 210;
        byte num4 = (byte) ((double) num3 * (double) num1);
        return new Color((int) num4, (int) num4, (int) num4, (int) num4);
      }
      if (this.type == 583 || this.type == 584 || this.type == 585)
      {
        newColor = Color.Lerp(newColor, Color.White, 0.5f);
        return newColor;
      }
      if (this.type == 516)
        return new Color(this.alpha, this.alpha, this.alpha, this.alpha);
      if (this.type == 522)
        return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
      if (this.type == 523)
        return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
      if (this.type == 395 || this.type == 519)
      {
        newColor = Color.Lerp(newColor, Color.White, 0.4f);
        return newColor;
      }
      if (this.type == 370 && (double) this.ai[0] != -1.0 && (double) this.ai[0] < 9.0)
      {
        float num5 = MathHelper.Lerp(num1, 1f, 0.25f);
        if ((double) num5 > 1.0)
          num5 = 1f;
        b1 = (int) ((double) newColor.B * (double) num5);
      }
      if (this.type == 30 || this.type == 665)
        return new Color(250, 250, 250, 100);
      if (!this.IsABestiaryIconDummy && (this.type == 25 || this.type == 30 || this.type == 665 || this.type == 59 || this.type == 60))
        return new Color(200, 200, 200, 0);
      if (this.type == 360)
      {
        int r2 = (int) newColor.R;
        int g2 = (int) newColor.G;
        int b2 = (int) newColor.B;
        if (r2 < 75)
          r2 = 75;
        if (g2 < 175)
          g2 = 175;
        if (b2 < (int) byte.MaxValue)
          b2 = (int) byte.MaxValue;
        return new Color(r2, g2, b2, (int) byte.MaxValue);
      }
      if (this.type == 655)
      {
        int r3 = (int) newColor.R;
        int g3 = (int) newColor.G;
        int b3 = (int) newColor.B;
        if (r3 < (int) byte.MaxValue)
          r3 = (int) byte.MaxValue;
        if (g3 < 100)
          g3 = 100;
        if (b3 < 50)
          b3 = 50;
        return new Color(r3, g3, b3, (int) byte.MaxValue);
      }
      if (this.type == 352)
        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
      if (this.type == 72)
      {
        r1 = (int) newColor.R;
        g1 = (int) newColor.G;
        b1 = (int) newColor.B;
      }
      else
      {
        if (this.type == 288)
          return new Color(200, 200, 200, 0);
        if (this.type == 289)
          return new Color(250, 250, 250, 50);
        if (this.type >= 254 && this.type <= 261)
        {
          b1 = (int) byte.MaxValue;
          if (r1 < 100)
            r1 = 100;
          if (g1 < 150)
            g1 = 150;
        }
        else if (this.type == 374 || this.type == 634 || this.type == 635)
        {
          b1 = (int) byte.MaxValue;
          if (r1 < 100)
            r1 = 100;
          if (g1 < 150)
            g1 = 150;
        }
        else
        {
          if (this.type == 549)
          {
            newColor = Color.Lerp(newColor, Color.White, 0.4f);
            newColor *= (float) a / (float) byte.MaxValue;
            return newColor;
          }
          if (this.type == 64 || this.type == 63 || this.type == 75 || this.type == 103 || this.type == 400)
          {
            r1 = (int) ((double) newColor.R * 1.5);
            g1 = (int) ((double) newColor.G * 1.5);
            b1 = (int) ((double) newColor.B * 1.5);
            if (r1 > (int) byte.MaxValue)
              r1 = (int) byte.MaxValue;
            if (g1 > (int) byte.MaxValue)
              g1 = (int) byte.MaxValue;
            if (b1 > (int) byte.MaxValue)
              b1 = (int) byte.MaxValue;
          }
        }
      }
      if ((double) this.shimmerTransparency > 0.0 && !this.CanApplyHunterPotionEffects())
      {
        r1 = (int) (byte) ((double) r1 * (1.0 - (double) this.shimmerTransparency));
        g1 = (int) (byte) ((double) g1 * (1.0 - (double) this.shimmerTransparency));
        b1 = (int) (byte) ((double) b1 * (1.0 - (double) this.shimmerTransparency));
        a = (int) (byte) ((double) a * (1.0 - (double) this.shimmerTransparency));
      }
      if (a < 0)
        a = 0;
      if (a > (int) byte.MaxValue)
        a = (int) byte.MaxValue;
      return new Color(r1, g1, b1, a);
    }

    public Color GetShimmerColor(Color newColor)
    {
      if ((double) this.shimmerTransparency > 0.0 && !this.CanApplyHunterPotionEffects())
      {
        newColor.R = (byte) ((double) newColor.R * (1.0 - (double) this.shimmerTransparency));
        newColor.G = (byte) ((double) newColor.G * (1.0 - (double) this.shimmerTransparency));
        newColor.B = (byte) ((double) newColor.B * (1.0 - (double) this.shimmerTransparency));
        newColor.A = (byte) ((double) newColor.A * (1.0 - (double) this.shimmerTransparency));
      }
      return newColor;
    }

    public Color GetColor(Color newColor)
    {
      if (this.IsABestiaryIconDummy)
        newColor = this.GetBestiaryEntryColor();
      int r = (int) this.color.R - ((int) byte.MaxValue - (int) newColor.R);
      int g = (int) this.color.G - ((int) byte.MaxValue - (int) newColor.G);
      int b = (int) this.color.B - ((int) byte.MaxValue - (int) newColor.B);
      int a = (int) this.color.A - ((int) byte.MaxValue - (int) newColor.A);
      if (r < 0)
        r = 0;
      if (r > (int) byte.MaxValue)
        r = (int) byte.MaxValue;
      if (g < 0)
        g = 0;
      if (g > (int) byte.MaxValue)
        g = (int) byte.MaxValue;
      if (b < 0)
        b = 0;
      if (b > (int) byte.MaxValue)
        b = (int) byte.MaxValue;
      if (a < 0)
        a = 0;
      if (a > (int) byte.MaxValue)
        a = (int) byte.MaxValue;
      if ((double) this.shimmerTransparency > 0.0 && !this.CanApplyHunterPotionEffects())
      {
        r = (int) (byte) ((double) r * (1.0 - (double) this.shimmerTransparency));
        g = (int) (byte) ((double) g * (1.0 - (double) this.shimmerTransparency));
        b = (int) (byte) ((double) b * (1.0 - (double) this.shimmerTransparency));
        a = (int) (byte) ((double) a * (1.0 - (double) this.shimmerTransparency));
      }
      return new Color(r, g, b, a);
    }

    public bool ShouldBestiaryGirlBeLycantrope()
    {
      if (Main.bloodMoon && !Main.dayTime)
        return true;
      return Main.moonPhase == 0 && !Main.dayTime;
    }

    public string GetChat()
    {
      NPC.PreventJojaColaDialog = false;
      NPC.RerollDryadText = 0;
      Recipe.FindRecipes();
      bool flag1 = false;
      bool flag2 = false;
      bool flag3 = false;
      bool flag4 = false;
      bool flag5 = false;
      bool flag6 = false;
      bool flag7 = false;
      bool flag8 = false;
      bool flag9 = false;
      bool flag10 = false;
      bool flag11 = false;
      bool flag12 = false;
      bool flag13 = false;
      bool flag14 = false;
      bool flag15 = false;
      bool flag16 = false;
      bool flag17 = false;
      object substitutionObject = Lang.CreateDialogSubstitutionObject(this);
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active)
        {
          if (Main.npc[index].type == 17)
            flag1 = true;
          else if (Main.npc[index].type == 18)
            flag2 = true;
          else if (Main.npc[index].type == 19)
            flag3 = true;
          else if (Main.npc[index].type == 20)
            flag4 = true;
          else if (Main.npc[index].type == 37)
            flag5 = true;
          else if (Main.npc[index].type == 38)
            flag6 = true;
          else if (Main.npc[index].type == 124)
            flag7 = true;
          else if (Main.npc[index].type == 107)
            flag8 = true;
          else if (Main.npc[index].type == 54)
            flag9 = true;
          else if (Main.npc[index].type == 160)
            flag10 = true;
          else if (Main.npc[index].type == 178)
            flag11 = true;
          else if (Main.npc[index].type == 229)
            flag12 = true;
          else if (Main.npc[index].type == 209)
            flag13 = true;
          else if (Main.npc[index].type == 208)
            flag14 = true;
          else if (Main.npc[index].type == 353)
            flag15 = true;
          else if (Main.npc[index].type == 22)
            flag16 = true;
          else if (Main.npc[index].type == 441)
            flag17 = true;
        }
      }
      string chat = "";
      string specialEventText = "";
      if (this.type == 17)
      {
        if (this.HasSpecialEventText("Merchant", out specialEventText))
          chat = specialEventText;
        else if (!NPC.downedBoss1 && Main.rand.Next(3) == 0)
          chat = Main.player[Main.myPlayer].statLifeMax >= 200 ? (Main.player[Main.myPlayer].statDefense > 10 ? Lang.dialog(3) : Lang.dialog(2)) : Lang.dialog(1);
        else if (Main.dayTime)
        {
          if (Main.time < 16200.0)
          {
            switch (Main.rand.Next(3))
            {
              case 0:
                chat = Lang.dialog(4);
                break;
              case 1:
                chat = Lang.dialog(5);
                break;
              default:
                chat = Lang.dialog(6);
                break;
            }
          }
          else if (Main.time > 37800.0)
          {
            switch (Main.rand.Next(3))
            {
              case 0:
                chat = Lang.dialog(7);
                break;
              case 1:
                chat = Lang.dialog(8);
                break;
              default:
                chat = Lang.dialog(9);
                break;
            }
          }
          else
          {
            switch (Main.rand.Next(3))
            {
              case 0:
                chat = Lang.dialog(10);
                break;
              case 1:
                chat = Lang.dialog(11);
                break;
              default:
                chat = Lang.dialog(12);
                break;
            }
          }
        }
        else if (Main.bloodMoon)
        {
          if (flag2 & flag7 && Main.rand.Next(3) == 0)
          {
            chat = Lang.dialog(13);
          }
          else
          {
            switch (Main.rand.Next(4))
            {
              case 0:
                chat = Lang.dialog(14);
                break;
              case 1:
                chat = Lang.dialog(15);
                break;
              case 2:
                chat = Lang.dialog(16);
                break;
              default:
                chat = Lang.dialog(17);
                break;
            }
          }
        }
        else if (Main.time < 9720.0)
          chat = Main.rand.Next(2) != 0 ? Lang.dialog(19) : Lang.dialog(18);
        else if (Main.time > 22680.0)
        {
          chat = Main.rand.Next(2) != 0 ? Lang.dialog(21) : Lang.dialog(20);
        }
        else
        {
          switch (Main.rand.Next(3))
          {
            case 0:
              chat = Lang.dialog(22);
              break;
            case 1:
              chat = Lang.dialog(23);
              break;
            default:
              chat = Lang.dialog(24);
              break;
          }
        }
      }
      else if (this.type == 18)
      {
        if (this.HasSpecialEventText("Nurse", out specialEventText))
          chat = specialEventText;
        else if (Main.bloodMoon)
        {
          if ((double) Main.player[Main.myPlayer].statLife < (double) Main.player[Main.myPlayer].statLifeMax2 * 0.66)
          {
            switch (Main.rand.Next(3))
            {
              case 0:
                chat = Lang.dialog(25);
                break;
              case 1:
                chat = Lang.dialog(26);
                break;
              default:
                chat = Lang.dialog(27);
                break;
            }
          }
          else
          {
            switch (Main.rand.Next(4))
            {
              case 0:
                chat = Lang.dialog(28);
                break;
              case 1:
                chat = Lang.dialog(29);
                break;
              case 2:
                chat = Lang.dialog(30);
                break;
              default:
                chat = Lang.dialog(31);
                break;
            }
          }
        }
        else if (Main.rand.Next(5) == 0 && Main.LocalPlayer.numberOfDeathsPVE > 1)
        {
          int numberOfDeathsPve = Main.LocalPlayer.numberOfDeathsPVE;
          int num1 = 25;
          int num2 = 100;
          string str = "Low";
          if (numberOfDeathsPve >= num2)
            str = "High";
          else if (numberOfDeathsPve >= num1)
            str = "Medium";
          chat = Language.GetTextValueWith("NurseSpecialText.DeathCount" + str, substitutionObject);
        }
        else if (Main.rand.Next(3) == 0 && !NPC.downedBoss3)
          chat = Lang.dialog(32);
        else if (flag6 && Main.rand.Next(4) == 0)
          chat = Lang.dialog(33);
        else if (flag3 && Main.rand.Next(4) == 0)
          chat = Lang.dialog(34);
        else if (flag16 && Main.rand.Next(4) == 0)
          chat = Lang.dialog(35);
        else if ((double) Main.player[Main.myPlayer].statLife < (double) Main.player[Main.myPlayer].statLifeMax2 * 0.33)
        {
          switch (Main.rand.Next(5))
          {
            case 0:
              chat = Lang.dialog(36);
              break;
            case 1:
              chat = Lang.dialog(37);
              break;
            case 2:
              chat = Lang.dialog(38);
              break;
            case 3:
              chat = Lang.dialog(39);
              break;
            default:
              chat = Lang.dialog(40);
              break;
          }
        }
        else if ((double) Main.player[Main.myPlayer].statLife < (double) Main.player[Main.myPlayer].statLifeMax2 * 0.66)
        {
          switch (Main.rand.Next(7))
          {
            case 0:
              chat = Lang.dialog(41);
              break;
            case 1:
              chat = Lang.dialog(42);
              break;
            case 2:
              chat = Lang.dialog(43);
              break;
            case 3:
              chat = Lang.dialog(44);
              break;
            case 4:
              chat = Lang.dialog(45);
              break;
            case 5:
              chat = Lang.dialog(46);
              break;
            default:
              chat = Lang.dialog(47);
              break;
          }
        }
        else
        {
          LocalizedText[] all = Language.FindAll(Lang.CreateDialogFilter("NurseChatter.", substitutionObject));
          int num = Main.rand.Next(4 + all.Length);
          chat = num < 4 ? (num != 0 ? (num != 1 ? (num != 2 ? Lang.dialog(51) : Lang.dialog(50)) : Lang.dialog(49)) : Lang.dialog(48)) : all[num - 4].FormatWith(substitutionObject);
        }
      }
      else if (this.type == 19)
      {
        if (this.HasSpecialEventText("ArmsDealer", out specialEventText))
          chat = specialEventText;
        else if (flag16 && NPC.downedBoss3 && !Main.hardMode)
          chat = Lang.dialog(58);
        else if (flag2 && Main.rand.Next(5) == 0)
          chat = Lang.dialog(59);
        else if (flag2 && Main.rand.Next(5) == 0)
          chat = Lang.dialog(60);
        else if (flag4 && Main.rand.Next(5) == 0)
          chat = Lang.dialog(61);
        else if (flag6 && Main.rand.Next(5) == 0)
          chat = Lang.dialog(62);
        else if (flag6 && Main.rand.Next(5) == 0)
          chat = Lang.dialog(63);
        else if (Main.bloodMoon)
        {
          chat = Main.rand.Next(2) != 0 ? Lang.dialog(65) : Lang.dialog(64);
        }
        else
        {
          switch (Main.rand.Next(3))
          {
            case 0:
              chat = Lang.dialog(66);
              break;
            case 1:
              chat = Lang.dialog(67);
              break;
            default:
              chat = Lang.dialog(68);
              break;
          }
        }
      }
      else if (this.type == 20)
      {
        if (this.HasSpecialEventText("Dryad", out specialEventText))
          chat = specialEventText;
        else if (DD2Event.DownedInvasionT1 && Main.rand.Next(6) == 0)
          chat = !DD2Event.DownedInvasionT2 ? Language.GetTextValueWith("DryadSpecialText.AfterDD2Tier1", substitutionObject) : Language.GetTextValueWith("DryadSpecialText.AfterDD2Tier2", substitutionObject);
        else if (!NPC.downedBoss2 && Main.rand.Next(3) == 0)
          chat = !WorldGen.crimson ? Lang.dialog(69) : Lang.dialog(332);
        else if (flag3 && Main.rand.Next(6) == 0)
          chat = Lang.dialog(70);
        else if (flag1 && Main.rand.Next(6) == 0)
          chat = Lang.dialog(71);
        else if (flag5 && Main.rand.Next(6) == 0)
          chat = Lang.dialog(72);
        else if (flag10 && Main.rand.Next(6) == 0)
          chat = Lang.dialog(238);
        else if (Main.bloodMoon)
        {
          switch (Main.rand.Next(4))
          {
            case 0:
              chat = Lang.dialog(73);
              break;
            case 1:
              chat = Lang.dialog(74);
              break;
            case 2:
              chat = Lang.dialog(75);
              break;
            default:
              chat = Lang.dialog(76);
              break;
          }
        }
        else
        {
          switch (Main.rand.Next(5))
          {
            case 0:
              chat = !WorldGen.crimson ? Lang.dialog(77) : Lang.dialog(333);
              break;
            case 1:
              chat = Lang.dialog(78);
              break;
            case 2:
              chat = Lang.dialog(79);
              break;
            case 3:
              chat = Lang.dialog(80);
              break;
            default:
              chat = Lang.dialog(81);
              break;
          }
        }
        if (Main.LocalPlayer.HasItem(5275))
          chat = Language.GetTextValue("StardewTalk.PlayerHasColaButIsNotHoldingIt");
      }
      else if (this.type == 37)
      {
        if (Main.dayTime && !Main.remixWorld)
        {
          switch (Main.rand.Next(3))
          {
            case 0:
              chat = Lang.dialog(82);
              break;
            case 1:
              chat = Lang.dialog(83);
              break;
            default:
              chat = Lang.dialog(84);
              break;
          }
        }
        else if (Main.player[Main.myPlayer].statLifeMax < 300 || Main.player[Main.myPlayer].statDefense < 10)
        {
          switch (Main.rand.Next(4))
          {
            case 0:
              chat = Lang.dialog(85);
              break;
            case 1:
              chat = Lang.dialog(86);
              break;
            case 2:
              chat = Lang.dialog(87);
              break;
            default:
              chat = Lang.dialog(88);
              break;
          }
        }
        else
        {
          switch (Main.rand.Next(4))
          {
            case 0:
              chat = Lang.dialog(89);
              break;
            case 1:
              chat = Lang.dialog(90);
              break;
            case 2:
              chat = Lang.dialog(91);
              break;
            default:
              chat = Lang.dialog(92);
              break;
          }
        }
      }
      else if (this.type == 38)
      {
        if (this.HasSpecialEventText("Demolitionist", out specialEventText))
          chat = specialEventText;
        else if (!NPC.downedBoss2 && Main.rand.Next(3) == 0)
          chat = Lang.dialog(93);
        else if (Main.bloodMoon)
        {
          switch (Main.rand.Next(3))
          {
            case 0:
              chat = Lang.dialog(94);
              break;
            case 1:
              chat = Lang.dialog(95);
              break;
            default:
              chat = Lang.dialog(96);
              break;
          }
        }
        else if ((DD2Event.DownedInvasionT1 || DD2Event.Ongoing) && Main.rand.Next(5) == 0)
          chat = Language.GetTextValueWith("DemolitionistSpecialText.AfterDD2Start", substitutionObject);
        else if (flag3 && Main.rand.Next(5) == 0)
          chat = Lang.dialog(97);
        else if (flag3 && Main.rand.Next(5) == 0)
          chat = Lang.dialog(98);
        else if (flag2 && Main.rand.Next(4) == 0)
          chat = Lang.dialog(99);
        else if (flag4 && Main.rand.Next(4) == 0)
          chat = Lang.dialog(100);
        else if (!Main.dayTime)
        {
          switch (Main.rand.Next(4))
          {
            case 0:
              chat = Lang.dialog(101);
              break;
            case 1:
              chat = Lang.dialog(102);
              break;
            case 2:
              chat = Lang.dialog(103);
              break;
            default:
              chat = Lang.dialog(104);
              break;
          }
        }
        else
        {
          switch (Main.rand.Next(5))
          {
            case 0:
              chat = Lang.dialog(105);
              break;
            case 1:
              chat = Lang.dialog(106);
              break;
            case 2:
              chat = Lang.dialog(107);
              break;
            case 3:
              chat = Lang.dialog(108);
              break;
            default:
              chat = Lang.dialog(109);
              break;
          }
        }
      }
      else if (this.type == 54)
      {
        if (this.HasSpecialEventText("Clothier", out specialEventText))
          chat = specialEventText;
        else if (!flag7 && Main.rand.Next(2) == 0)
          chat = Lang.dialog(110);
        else if (flag10 && Main.rand.Next(6) == 0)
          chat = Lang.dialog(237);
        else if (Main.bloodMoon)
          chat = Lang.dialog(111);
        else if (flag2 && Main.rand.Next(4) == 0)
          chat = Lang.dialog(112);
        else if (Main.player[Main.myPlayer].head == 24)
        {
          chat = Lang.dialog(113);
        }
        else
        {
          switch (Main.rand.Next(6))
          {
            case 0:
              chat = Lang.dialog(114);
              break;
            case 1:
              chat = Lang.dialog(115);
              break;
            case 2:
              chat = Lang.dialog(116);
              break;
            case 3:
              chat = Lang.dialog(117);
              break;
            case 4:
              chat = Lang.dialog(118);
              break;
            default:
              chat = Lang.dialog(119);
              break;
          }
        }
      }
      else if (this.type == 105)
        chat = Lang.dialog(120);
      else if (this.type == 107)
      {
        if (this.homeless)
        {
          switch (Main.rand.Next(5))
          {
            case 0:
              chat = Lang.dialog(121);
              break;
            case 1:
              chat = Lang.dialog(122);
              break;
            case 2:
              chat = Lang.dialog(123);
              break;
            case 3:
              chat = Lang.dialog(124);
              break;
            default:
              chat = Lang.dialog(125);
              break;
          }
        }
        else if (this.HasSpecialEventText("GoblinTinkerer", out specialEventText))
          chat = specialEventText;
        else if (flag7 && Main.rand.Next(5) == 0)
          chat = Lang.dialog(126);
        else if (flag15 && Main.rand.Next(5) == 0)
        {
          chat = Lang.dialog(309);
        }
        else
        {
          LocalizedText[] all = Language.FindAll(Lang.CreateDialogFilter("GoblinTinkererChatter.", substitutionObject));
          int num = Main.rand.Next(all.Length + 5);
          if (num >= 5)
            chat = all[num - 5].FormatWith(substitutionObject);
          else if (!Main.dayTime)
          {
            switch (num)
            {
              case 0:
                chat = Lang.dialog((int) sbyte.MaxValue);
                break;
              case 1:
                chat = Lang.dialog(128);
                break;
              case 2:
                chat = Lang.dialog(129);
                break;
              case 3:
                chat = Lang.dialog(130);
                break;
              default:
                chat = Lang.dialog(131);
                break;
            }
          }
          else
          {
            switch (num)
            {
              case 0:
                chat = Lang.dialog(132);
                break;
              case 1:
                chat = Lang.dialog(133);
                break;
              case 2:
                chat = Lang.dialog(134);
                break;
              case 3:
                chat = Lang.dialog(135);
                break;
              default:
                chat = Lang.dialog(136);
                break;
            }
          }
        }
      }
      else if (this.type == 106)
        chat = Lang.dialog(137);
      else if (this.type == 108)
      {
        if (this.homeless)
        {
          int num = Main.rand.Next(3);
          if (num == 0)
            chat = Lang.dialog(138);
          else if (num == 1 && !Main.player[Main.myPlayer].Male)
          {
            chat = Lang.dialog(139);
          }
          else
          {
            switch (num)
            {
              case 1:
                chat = Lang.dialog(140);
                break;
              case 2:
                chat = Lang.dialog(141);
                break;
            }
          }
        }
        else if (this.HasLuckTextForWizard(out specialEventText))
          chat = specialEventText;
        else if (this.HasSpecialEventText("Wizard", out specialEventText))
          chat = specialEventText;
        else if (DD2Event.DownedInvasionT1 && Main.rand.Next(6) == 0)
          chat = Language.GetTextValueWith("WizardSpecialText.AfterDD2Tier1", substitutionObject);
        else if (Main.player[Main.myPlayer].Male & flag16 && Main.rand.Next(6) == 0)
          chat = Lang.dialog(142);
        else if (Main.player[Main.myPlayer].Male & flag6 && Main.rand.Next(6) == 0)
          chat = Lang.dialog(143);
        else if (Main.player[Main.myPlayer].Male & flag8 && Main.rand.Next(6) == 0)
          chat = Lang.dialog(144);
        else if (!Main.player[Main.myPlayer].Male & flag2 && Main.rand.Next(6) == 0)
          chat = Lang.dialog(145);
        else if (!Main.player[Main.myPlayer].Male & flag7 && Main.rand.Next(6) == 0)
          chat = Lang.dialog(146);
        else if (!Main.player[Main.myPlayer].Male & flag4 && Main.rand.Next(6) == 0)
          chat = Lang.dialog(147);
        else if (!Main.dayTime)
        {
          switch (Main.rand.Next(3))
          {
            case 0:
              chat = Lang.dialog(148);
              break;
            case 1:
              chat = Lang.dialog(149);
              break;
            case 2:
              chat = Lang.dialog(150);
              break;
          }
        }
        else
        {
          switch (Main.rand.Next(5))
          {
            case 0:
              chat = Lang.dialog(151);
              break;
            case 1:
              chat = Lang.dialog(152);
              break;
            case 2:
              chat = Lang.dialog(153);
              break;
            case 3:
              chat = Lang.dialog(154);
              break;
            default:
              chat = Lang.dialog(155);
              break;
          }
        }
      }
      else if (this.type == 123)
        chat = Lang.dialog(156);
      else if (this.type == 124)
      {
        if (this.homeless)
        {
          switch (Main.rand.Next(4))
          {
            case 0:
              chat = Lang.dialog(157);
              break;
            case 1:
              chat = Lang.dialog(158);
              break;
            case 2:
              chat = Lang.dialog(159);
              break;
            default:
              chat = Lang.dialog(160);
              break;
          }
        }
        else if (this.HasSpecialEventText("Mechanic", out specialEventText))
          chat = specialEventText;
        else if (Main.bloodMoon)
        {
          switch (Main.rand.Next(4))
          {
            case 0:
              chat = Lang.dialog(161);
              break;
            case 1:
              chat = Lang.dialog(162);
              break;
            case 2:
              chat = Lang.dialog(163);
              break;
            default:
              chat = Lang.dialog(164);
              break;
          }
        }
        else if (flag8 && Main.rand.Next(6) == 0)
          chat = Lang.dialog(165);
        else if (flag3 && Main.rand.Next(6) == 0)
        {
          chat = Lang.dialog(166);
        }
        else
        {
          LocalizedText[] all = Language.FindAll(Lang.CreateDialogFilter("MechanicChatter.", substitutionObject));
          int num = Main.rand.Next(3 + all.Length);
          chat = num < 3 ? (num != 0 ? (num != 1 ? Lang.dialog(169) : Lang.dialog(168)) : Lang.dialog(167)) : all[num - 3].FormatWith(substitutionObject);
        }
      }
      else if (this.type == 22)
      {
        if (this.HasSpecialEventText("Guide", out specialEventText))
          chat = specialEventText;
        else if (Main.bloodMoon)
        {
          switch (Main.rand.Next(3))
          {
            case 0:
              chat = Lang.dialog(170);
              break;
            case 1:
              chat = Lang.dialog(171);
              break;
            default:
              chat = Lang.dialog(172);
              break;
          }
        }
        else if (LanternNight.LanternsUp && !NPC.downedMoonlord)
          chat = Language.GetTextValue("GuideSpecialText.Lantern1");
        else if (LanternNight.LanternsUp && NPC.downedMoonlord)
          chat = Language.GetTextValue("GuideSpecialText.Lantern2");
        else if (Main.eclipse)
          chat = Language.GetTextValue("GuideSpecialText.Eclipse");
        else if (Main.slimeRain)
          chat = Language.GetTextValue("GuideSpecialText.SlimeRain");
        else if (!Main.dayTime)
          chat = Lang.dialog(173);
        else if (Main.hardMode & flag17 && Main.rand.Next(8) == 0)
          chat = Language.GetTextValueWith("GuideChatter.Chatter_1", substitutionObject);
        else if (Main.hardMode && Main.rand.Next(8) == 0)
        {
          chat = Language.GetTextValue("GuideChatter.Chatter_2");
        }
        else
        {
          switch (Main.rand.Next(3))
          {
            case 0:
              chat = Lang.dialog(174);
              break;
            case 1:
              chat = Lang.dialog(175);
              break;
            default:
              chat = Lang.dialog(176);
              break;
          }
        }
      }
      else if (this.type == 142)
      {
        int num = Main.rand.Next(3);
        if (this.HasSpecialEventText("Santa", out specialEventText))
        {
          chat = specialEventText;
        }
        else
        {
          switch (num)
          {
            case 0:
              chat = Lang.dialog(224);
              break;
            case 1:
              chat = Lang.dialog(225);
              break;
            case 2:
              chat = Lang.dialog(226);
              break;
          }
        }
      }
      else if (this.type == 160)
      {
        int num = Main.rand.Next(6);
        if (this.HasSpecialEventText("Truffle", out specialEventText))
          chat = specialEventText;
        else if (flag4 && Main.rand.Next(6) == 0)
          chat = Lang.dialog(232);
        else if (flag9 && Main.rand.Next(6) == 0)
        {
          chat = Lang.dialog(236);
        }
        else
        {
          switch (num)
          {
            case 0:
              chat = Lang.dialog(231);
              break;
            case 1:
              chat = Lang.dialog(233);
              break;
            case 2:
              chat = Lang.dialog(234);
              break;
            case 3:
              chat = Lang.dialog(235);
              break;
            case 4:
              chat = Lang.dialog(240);
              break;
            case 5:
              chat = Lang.dialog(241);
              break;
          }
        }
      }
      else if (this.type == 178)
      {
        int num = Main.rand.Next(5);
        if (this.HasSpecialEventText("Steampunker", out specialEventText))
          chat = specialEventText;
        else if (Main.bloodMoon && Main.rand.Next(3) == 0)
          chat = Lang.dialog(245);
        else if (flag13 && Main.rand.Next(6) == 0)
          chat = Lang.dialog(246);
        else if (flag12 && Main.rand.Next(6) == 0)
        {
          chat = Lang.dialog(247);
        }
        else
        {
          switch (num)
          {
            case 0:
              chat = Lang.dialog(242);
              break;
            case 1:
              chat = Lang.dialog(243);
              break;
            case 2:
              chat = Lang.dialog(244);
              break;
            case 3:
              chat = Lang.dialog(248);
              break;
            case 4:
              chat = Lang.dialog(249);
              break;
          }
        }
      }
      else if (this.type == 207)
      {
        int num = Main.rand.Next(3);
        if (this.HasSpecialEventText("DyeTrader", out specialEventText))
          chat = specialEventText;
        else if (flag12 && Main.rand.Next(6) == 0)
        {
          chat = Lang.dialog(260);
        }
        else
        {
          switch (num)
          {
            case 0:
              chat = Lang.dialog(257);
              break;
            case 1:
              chat = Lang.dialog(258);
              break;
            case 2:
              chat = Lang.dialog(259);
              break;
          }
        }
      }
      else if (this.type == 208)
      {
        if (NPC.freeCake)
        {
          chat = Language.GetTextValueWith("PartyGirlSpecialText.Cake" + (object) Main.rand.Next(1, 4), substitutionObject);
        }
        else
        {
          int num = Main.rand.Next(7);
          if (this.HasSpecialEventText("PartyGirl", out specialEventText))
            chat = specialEventText;
          else if (DD2Event.DownedInvasionT1 && Main.rand.Next(5) == 0)
            chat = Language.GetTextValueWith("PartyGirlSpecialText.AfterDD2Tier1", substitutionObject);
          else if (Main.player[Main.myPlayer].Male && Main.rand.Next(5) == 0)
            chat = Lang.dialog(268);
          else if (flag15 && Main.rand.Next(5) == 0)
          {
            chat = Lang.dialog(310);
          }
          else
          {
            switch (num)
            {
              case 0:
                chat = Lang.dialog(265);
                break;
              case 1:
                chat = Lang.dialog(266);
                break;
              case 2:
                chat = Lang.dialog(267);
                break;
              case 3:
                chat = Lang.dialog(269);
                break;
              case 4:
                chat = Lang.dialog(270);
                break;
              case 5:
                chat = Lang.dialog(271);
                break;
              case 6:
                chat = Lang.dialog(272);
                break;
            }
          }
        }
      }
      else if (this.type == 209)
      {
        if (this.HasSpecialEventText("Cyborg", out specialEventText))
          chat = specialEventText;
        else if (flag12 && Main.rand.Next(6) == 0)
          chat = Lang.dialog(284);
        else if (flag11 && Main.rand.Next(6) == 0)
        {
          chat = Lang.dialog(283);
        }
        else
        {
          LocalizedText[] all = Language.FindAll(Lang.CreateDialogFilter("CyborgChatter.", substitutionObject));
          int num = Main.rand.Next(5 + all.Length);
          if (num >= 5)
            chat = all[num - 5].FormatWith(substitutionObject);
          else if (num == 0)
            chat = Lang.dialog(280);
          else if (num == 1)
            chat = Lang.dialog(281);
          else if (num == 2)
            chat = Lang.dialog(282);
          else if (num == 3)
            chat = Lang.dialog(285);
          else if (num == 4)
            chat = Lang.dialog(286);
        }
      }
      else if (this.type == 227)
      {
        int num = Main.rand.Next(5);
        if (this.HasSpecialEventText("Painter", out specialEventText))
          chat = specialEventText;
        else if (Main.hardMode && Main.rand.Next(7) == 0)
          chat = Lang.dialog(250);
        else if (flag14 && Main.rand.Next(6) == 0)
        {
          chat = Lang.dialog(251);
        }
        else
        {
          switch (num)
          {
            case 0:
              chat = Lang.dialog(252);
              break;
            case 1:
              chat = Lang.dialog(253);
              break;
            case 2:
              chat = Lang.dialog(254);
              break;
            case 3:
              chat = Lang.dialog((int) byte.MaxValue);
              break;
            case 4:
              chat = Lang.dialog(256);
              break;
          }
        }
      }
      else if (this.type == 228)
      {
        int num = Main.rand.Next(4);
        if (this.HasSpecialEventText("WitchDoctor", out specialEventText))
          chat = specialEventText;
        else if (flag2 && Main.rand.Next(4) == 0)
        {
          chat = Lang.dialog(263);
        }
        else
        {
          switch (num)
          {
            case 0:
              chat = Lang.dialog(261);
              break;
            case 1:
              chat = Lang.dialog(262);
              break;
            case 2:
              chat = Lang.dialog(264);
              break;
            case 3:
              chat = Language.GetTextValueWith("WitchDoctorSpecialText.AfterDD2Tier1", substitutionObject);
              break;
          }
        }
      }
      else if (this.type == 229)
      {
        LocalizedText[] all = Language.FindAll(Lang.CreateDialogFilter("PirateChatter.", substitutionObject));
        int num = Main.rand.Next(6 + all.Length);
        if (num >= 6)
          chat = all[num - 6].FormatWith(substitutionObject);
        else if (this.HasSpecialEventText("Pirate", out specialEventText))
          chat = specialEventText;
        else if (!Main.player[Main.myPlayer].Male && Main.rand.Next(5) == 0)
        {
          chat = Lang.dialog(276);
        }
        else
        {
          switch (num)
          {
            case 0:
              chat = Lang.dialog(273);
              break;
            case 1:
              chat = Lang.dialog(274);
              break;
            case 2:
              chat = Lang.dialog(275);
              break;
            case 3:
              chat = Lang.dialog(277);
              break;
            case 4:
              chat = Lang.dialog(278);
              break;
            case 5:
              chat = Lang.dialog(279);
              break;
          }
        }
      }
      else if (this.type == 354)
        chat = Lang.dialog(Main.rand.Next(315, 319));
      else if (this.type == 353)
      {
        if (this.HasSpecialEventText("Stylist", out specialEventText))
          chat = specialEventText;
        else if (Main.bloodMoon)
        {
          switch (Main.rand.Next(3))
          {
            case 0:
              chat = Lang.dialog(304);
              break;
            case 1:
              chat = Lang.dialog(305);
              break;
            case 2:
              chat = Lang.dialog(306);
              break;
          }
        }
        else if (Main.dayTime && Main.time < 16200.0 && Main.rand.Next(3) == 0)
          chat = Lang.dialog(311);
        else if (Main.player[Main.myPlayer].Male && Main.rand.Next(3) == 0)
        {
          switch (Main.rand.Next(2))
          {
            case 0:
              chat = Lang.dialog(293);
              break;
            case 1:
              chat = Lang.dialog(300);
              break;
          }
        }
        else if (!Main.player[Main.myPlayer].Male && Main.rand.Next(3) == 0)
        {
          switch (Main.rand.Next(3))
          {
            case 0:
              chat = Lang.dialog(291);
              break;
            case 1:
              chat = Lang.dialog(292);
              break;
            case 2:
              chat = Lang.dialog(312);
              break;
          }
        }
        else if (flag14 & flag7 & flag2 & flag3 && Main.rand.Next(5) == 0)
          chat = Lang.dialog(307);
        else if (flag14 && Main.rand.Next(5) == 0)
          chat = Lang.dialog(302);
        else if (flag6 && Main.rand.Next(5) == 0)
          chat = Lang.dialog(303);
        else if (flag13 && Main.rand.Next(5) == 0)
        {
          chat = Lang.dialog(308);
        }
        else
        {
          LocalizedText[] all = Language.FindAll(Lang.CreateDialogFilter("StylistChatter.", substitutionObject));
          int num3 = Main.moonPhase < 3 ? 5 : 4;
          int num4 = Main.rand.Next(num3 + all.Length);
          if (num4 >= num3)
            chat = all[num4 - num3].FormatWith(substitutionObject);
          else if (Main.moonPhase < 3)
          {
            switch (num4)
            {
              case 0:
                chat = Lang.dialog(287);
                break;
              case 1:
                chat = Lang.dialog(288);
                break;
              case 2:
                chat = Lang.dialog(289);
                break;
              case 3:
                chat = Lang.dialog(290);
                break;
              case 4:
                chat = Lang.dialog(294);
                break;
            }
          }
          else if (Main.moonPhase < 6)
          {
            switch (num4)
            {
              case 0:
                chat = Lang.dialog(295);
                break;
              case 1:
                chat = Lang.dialog(296);
                break;
              case 2:
                chat = Lang.dialog(297);
                break;
              case 3:
                chat = Lang.dialog(298);
                break;
            }
          }
          else
          {
            switch (num4)
            {
              case 0:
                chat = Lang.dialog(299);
                break;
              case 1:
                chat = Lang.dialog(301);
                break;
              case 2:
                chat = Lang.dialog(313);
                break;
              case 3:
                chat = Lang.dialog(314);
                break;
            }
          }
        }
      }
      else if (this.type == 368)
        chat = !this.HasSpecialEventText("TravellingMerchant", out specialEventText) ? (!flag16 || Main.rand.Next(5) != 0 ? (!flag1 || Main.rand.Next(5) != 0 ? (!flag9 || Main.rand.Next(5) != 0 ? Lang.dialog(Main.rand.Next(322, 331)) : Lang.dialog(321)) : Lang.dialog(320)) : Lang.dialog(319)) : specialEventText;
      else if (this.type == 376)
        chat = Lang.dialog(Main.rand.Next(353, 356));
      else if (this.type == 369)
        chat = Main.rand.Next(5) != 0 || Main.LocalPlayer.anglerQuestsFinished <= 1 ? (!this.HasSpecialEventText("Angler", out specialEventText) ? (!Main.bloodMoon ? (Main.anglerQuestFinished ? (!flag4 || Main.rand.Next(5) != 0 ? Language.SelectRandom(Lang.CreateDialogFilter("AnglerChatter.", substitutionObject)).FormatWith(substitutionObject) : Lang.dialog(347)) : Lang.dialog(Main.rand.Next(334, 338))) : (Main.rand.Next(3) != 0 ? (Main.anglerQuestFinished ? Lang.dialog(Main.rand.Next(350, 353)) : Lang.dialog(Main.rand.Next(348, 350))) : Language.SelectRandom(Lang.CreateDialogFilter("AnglerSpecialText.BloodMoonFishing")).FormatWith(substitutionObject))) : specialEventText) : Lang.AnglerQuestCountChat(this);
      else if (this.type == 453)
        chat = !this.HasSpecialEventText("SkeletonMerchant", out specialEventText) ? Lang.dialog(Main.rand.Next(356, 364)) : specialEventText;
      else if (this.type == 441)
        chat = !this.HasSpecialEventText("TaxCollector", out specialEventText) ? (!(Main.rand.Next(6) == 0 & flag4) ? (!(Main.rand.Next(6) == 0 & flag3) ? (!(Main.rand.Next(6) == 0 & flag6) ? (!(Main.rand.Next(6) == 0 & flag1) ? Lang.dialog(Main.rand.Next(364, 370)) : Lang.dialog(374)) : Lang.dialog(373)) : Lang.dialog(372)) : Lang.dialog(371)) : specialEventText;
      else if (this.type == 579)
        chat = Language.GetTextValue("BartenderSpecialText.FirstMeeting");
      else if (this.type == 550)
        chat = !this.HasSpecialEventText("Bartender", out specialEventText) ? Lang.BartenderChat(this) : specialEventText;
      else if (this.type == 589)
        chat = Main.rand.Next(2) != 0 ? Language.GetTextValue("GolferSpecialText.FirstMeeting2") : Language.GetTextValue("GolferSpecialText.FirstMeeting1");
      else if (this.type == 588)
        chat = Main.rand.Next(3) == 0 || !this.HasSpecialEventText("Golfer", out specialEventText) ? (Main.rand.Next(3) != 0 ? Lang.GolferChat(this) : Language.SelectRandom(Lang.CreateDialogFilter((Main.LocalPlayer.golferScoreAccumulated < 2000 ? (Main.LocalPlayer.golferScoreAccumulated < 1000 ? (Main.LocalPlayer.golferScoreAccumulated < 500 ? "GolferQuestsChatterBeginner" : "GolferQuestsChatterApprentice") : "GolferQuestsChatterJourneyman") : "GolferQuestsChatterMaster") + ".")).FormatWith(substitutionObject)) : specialEventText;
      else if (this.type == 633)
        chat = this.ShouldBestiaryGirlBeLycantrope() || !this.HasSpecialEventText("BestiaryGirl", out specialEventText) ? Lang.BestiaryGirlChat(this) : specialEventText;
      else if (this.type == 663)
        chat = !this.HasSpecialEventText("Princess", out specialEventText) ? Lang.PrincessChat(this) : specialEventText;
      else if (this.type == 637)
        chat = !this.HasSpecialEventText("Cat", out specialEventText) ? Lang.CatChat(this) : specialEventText;
      else if (this.type == 638)
        chat = !this.HasSpecialEventText("Dog", out specialEventText) ? Lang.DogChat(this) : specialEventText;
      else if (this.type == 656)
        chat = !this.HasSpecialEventText("Bunny", out specialEventText) ? Lang.BunnyChat(this) : specialEventText;
      else if (NPCID.Sets.IsTownSlime[this.type])
        chat = !this.HasSpecialEventText("Slime", out specialEventText) ? Lang.SlimeChat(this) : specialEventText;
      return chat;
    }

    public object Clone() => this.MemberwiseClone();

    public bool HasLuckTextForWizard(out string specialEventText)
    {
      specialEventText = (string) null;
      object substitutionObject = Lang.CreateDialogSubstitutionObject(this);
      if (Main.rand.Next(3) != 0)
        return false;
      float normalizedLuck = Main.player[Main.myPlayer].NormalizedLuck;
      if ((double) normalizedLuck == 0.0)
        return false;
      string startsWith = (double) normalizedLuck >= -0.60000002384185791 ? ((double) normalizedLuck >= -0.40000000596046448 ? ((double) normalizedLuck >= -0.20000000298023224 ? ((double) normalizedLuck >= 0.0 ? ((double) normalizedLuck >= 0.25 ? ((double) normalizedLuck >= 0.5 ? ((double) normalizedLuck >= 0.75 ? "WizardSpecialText.LuckIsGodly" : "WizardSpecialText.LuckIsAmazing") : "WizardSpecialText.LuckIsGreat") : "WizardSpecialText.LuckIsGood") : "WizardSpecialText.LuckIsBad") : "WizardSpecialText.LuckIsPoor") : "WizardSpecialText.LuckIsTerrible") : "WizardSpecialText.LuckIsCursed";
      specialEventText = Language.SelectRandom(Lang.CreateDialogFilter(startsWith)).FormatWith(substitutionObject);
      return true;
    }

    public bool HasSpecialEventText(string specialTextCategoryKey, out string specialEventText)
    {
      specialEventText = (string) null;
      object substitutionObject = Lang.CreateDialogSubstitutionObject(this);
      return Main.LocalPlayer.ZoneGraveyard && Main.rand.Next(3) == 0 && this.GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Graveyard", substitutionObject, ref specialEventText) || BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0 && !NPCID.Sets.HasNoPartyText[this.type] && this.GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Party", substitutionObject, ref specialEventText) || Main.raining && !Main.IsItStorming && Main.rand.Next(3) == 0 && this.GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Rain", substitutionObject, ref specialEventText) || Main.IsItAHappyWindyDay && Main.rand.Next(3) == 0 && this.GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Windy", substitutionObject, ref specialEventText) || Main.IsItStorming && Main.rand.Next(3) == 0 && this.GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Storm", substitutionObject, ref specialEventText);
    }

    public bool GetSpecialEventTextIfNotEmpty(
      string specialTextKey,
      object substitutes,
      ref string specialEventText)
    {
      LocalizedText localizedText = Language.SelectRandom(Lang.CreateDialogFilter(specialTextKey));
      if (localizedText == LocalizedText.Empty)
        return false;
      specialEventText = localizedText.FormatWith(substitutes);
      return true;
    }

    public void CheckDrowning()
    {
      bool flag = Collision.DrownCollision(this.position, this.width, this.height, 1f);
      if (Main.netMode != 1)
      {
        if (flag)
        {
          if (++this.breathCounter >= 7)
          {
            this.breathCounter = 0;
            --this.breath;
            if (this.breath <= 0)
            {
              this.friendlyRegen = 0;
              this.breath = 0;
              this.life -= 2;
              if (this.life % 24 < 2)
                this.netUpdate = true;
              if (this.life <= 0)
              {
                this.life = 1;
                this.StrikeNPCNoInteraction(2, 0.0f, 0);
                if (Main.netMode != 0)
                  NetMessage.SendData(28, number: this.whoAmI, number2: 2f);
              }
            }
          }
        }
        else
        {
          this.breath += 3;
          if (this.breath > 200)
            this.breath = 200;
          this.breathCounter = 0;
        }
      }
      if (!flag || Main.rand.Next(20) != 0 || this.lavaWet || this.honeyWet || this.shimmerWet)
        return;
      int num1 = 0;
      int num2 = 0;
      if (this.type == 369)
        num2 = 8;
      Dust.NewDust(new Vector2(this.position.X + (float) ((10 + num1) * this.direction), (float) ((double) this.position.Y + (double) num2 + 4.0)), this.width - 8, 8, 34, Scale: 1.2f);
    }

    public void TryPortalJumping()
    {
      if (!this.townNPC || Main.netMode == 1)
        return;
      PortalHelper.TryGoingThroughPortals((Entity) this);
    }

    public static void GetMeleeCollisionData(
      Microsoft.Xna.Framework.Rectangle victimHitbox,
      int enemyIndex,
      ref int specialHitSetter,
      ref float damageMultiplier,
      ref Microsoft.Xna.Framework.Rectangle npcRect)
    {
      NPC npc1 = Main.npc[enemyIndex];
      if ((npc1.type >= 430 && npc1.type <= 436 || npc1.type == 591) && (double) npc1.ai[2] > 5.0)
      {
        int num = 34;
        if (npc1.spriteDirection < 0)
        {
          npcRect.X -= num;
          npcRect.Width += num;
        }
        else
          npcRect.Width += num;
        damageMultiplier *= 1.25f;
      }
      else if (npc1.type >= 494 && npc1.type <= 495 && (double) npc1.ai[2] > 5.0)
      {
        int num = 18;
        if (npc1.spriteDirection < 0)
        {
          npcRect.X -= num;
          npcRect.Width += num;
        }
        else
          npcRect.Width += num;
        damageMultiplier *= 1.25f;
      }
      else if (npc1.type == 460)
      {
        Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(0, 0, 30, 14);
        rectangle.X = (int) npc1.Center.X;
        if (npc1.direction < 0)
          rectangle.X -= rectangle.Width;
        rectangle.Y = (int) npc1.position.Y + npc1.height - 20;
        if (!victimHitbox.Intersects(rectangle))
          return;
        npcRect = rectangle;
        damageMultiplier *= 1.35f;
      }
      else if (npc1.type == 417 && (double) npc1.ai[0] == 6.0 && (double) npc1.ai[3] > 0.0 && (double) npc1.ai[3] < 4.0)
      {
        Microsoft.Xna.Framework.Rectangle rectangle = Utils.CenteredRectangle(npc1.Center, new Vector2(100f));
        if (!victimHitbox.Intersects(rectangle))
          return;
        npcRect = rectangle;
        damageMultiplier *= 1.35f;
      }
      else if (npc1.type == 466)
      {
        Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(0, 0, 30, 8);
        rectangle.X = (int) npc1.Center.X;
        if (npc1.direction < 0)
          rectangle.X -= rectangle.Width;
        rectangle.Y = (int) npc1.position.Y + npc1.height - 32;
        if (!victimHitbox.Intersects(rectangle))
          return;
        npcRect = rectangle;
        damageMultiplier *= 1.75f;
      }
      else if (npc1.type == 576 || npc1.type == 577)
      {
        NPC npc2 = npc1;
        bool flag = true;
        int y = npc2.frame.Y;
        int num1 = 0;
        int num2 = 0;
        Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(0, 0, 30, 8);
        switch (y)
        {
          case 15:
            specialHitSetter = 2;
            rectangle.Width = 120;
            rectangle.Height = 30;
            num2 = 24;
            break;
          case 16:
            specialHitSetter = 2;
            rectangle.Width = 120;
            rectangle.Height = 60;
            num1 = 10;
            break;
          case 17:
            specialHitSetter = 2;
            rectangle.Width = 100;
            rectangle.Height = 90;
            num1 = 50;
            break;
          case 18:
            specialHitSetter = 2;
            rectangle.Width = 100;
            rectangle.Height = 50;
            num1 = 90;
            num2 = 10;
            break;
          default:
            flag = false;
            break;
        }
        if (!flag)
          return;
        rectangle.X = (int) npc2.Center.X - num1 * npc2.direction;
        if (npc2.direction < 0)
          rectangle.X -= rectangle.Width;
        rectangle.Y = (int) npc2.Center.Y - rectangle.Height + num2;
        if (!victimHitbox.Intersects(rectangle))
          return;
        npcRect = rectangle;
        damageMultiplier *= 1.75f;
      }
      else if ((npc1.type == 552 || npc1.type == 553 || npc1.type == 554) && (double) npc1.ai[0] > 0.0 && (double) npc1.ai[0] < 24.0)
      {
        Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(0, 0, 34, 14);
        rectangle.X = (int) npc1.Center.X;
        if (npc1.direction < 0)
          rectangle.X -= rectangle.Width;
        rectangle.Y = (int) npc1.position.Y + npc1.height - 20;
        if (!victimHitbox.Intersects(rectangle))
          return;
        npcRect = rectangle;
        damageMultiplier *= 1.35f;
      }
      else
      {
        if (npc1.type != 668)
          return;
        npcRect.Height -= 80;
        NPC npc3 = npc1;
        bool flag = true;
        int y = npc3.frame.Y;
        int num3 = 0;
        int num4 = 0;
        Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(0, 0, 30, 8);
        if (y == 15)
        {
          rectangle.Width = 64;
          rectangle.Height = 180;
          num4 = 80;
          num3 = -42;
          if ((double) npc3.ai[0] == 4.0)
            flag = false;
        }
        else
          flag = false;
        if (!flag)
          return;
        rectangle.X = (int) npc3.Center.X - num3 * npc3.direction;
        if (npc3.direction < 0)
          rectangle.X -= rectangle.Width;
        rectangle.Y = (int) npc3.Center.Y - rectangle.Height + num4;
        if (!victimHitbox.Intersects(rectangle))
          return;
        npcRect = rectangle;
      }
    }

    public string GetBestiaryCreditId() => ContentSamples.NpcBestiaryCreditIdsByNpcNetIds[this.netID];

    public override string ToString() => "name:" + this.TypeName + ", active:" + this.active.ToString() + ", whoAmI:" + (object) this.whoAmI;
  }
}
